diff -ruN src-old/bio.d src/bio.d
--- src-old/bio.d	1970-01-01 00:00:00.000000000 +0000
+++ src/bio.d	2023-04-19 02:18:53.551883508 +0000
@@ -0,0 +1,2 @@
+bio.o: bio.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files src-old/bio.o and src/bio.o differ
diff -ruN src-old/bootasm.d src/bootasm.d
--- src-old/bootasm.d	1970-01-01 00:00:00.000000000 +0000
+++ src/bootasm.d	2023-04-19 02:18:53.483875417 +0000
@@ -0,0 +1 @@
+bootasm.o: bootasm.S asm.h memlayout.h mmu.h
Binary files src-old/bootasm.o and src/bootasm.o differ
Binary files src-old/bootblock and src/bootblock differ
diff -ruN src-old/bootblock.asm src/bootblock.asm
--- src-old/bootblock.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/bootblock.asm	2023-04-19 02:18:53.499877320 +0000
@@ -0,0 +1,354 @@
+
+bootblock.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007c00 <start>:
+# with %cs=0 %ip=7c00.
+
+.code16                       # Assemble for 16-bit mode
+.globl start
+start:
+  cli                         # BIOS enabled interrupts; disable
+    7c00:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax             # Set %ax to zero
+    7c01:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds             # -> Data Segment
+    7c03:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es             # -> Extra Segment
+    7c05:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss             # -> Stack Segment
+    7c07:	8e d0                	mov    %eax,%ss
+
+00007c09 <seta20.1>:
+
+  # Physical address line A20 is tied to zero so that the first PCs 
+  # with 2 MB would run software that assumed 1 MB.  Undo that.
+seta20.1:
+  inb     $0x64,%al               # Wait for not busy
+    7c09:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c0b:	a8 02                	test   $0x2,%al
+  jnz     seta20.1
+    7c0d:	75 fa                	jne    7c09 <seta20.1>
+
+  movb    $0xd1,%al               # 0xd1 -> port 0x64
+    7c0f:	b0 d1                	mov    $0xd1,%al
+  outb    %al,$0x64
+    7c11:	e6 64                	out    %al,$0x64
+
+00007c13 <seta20.2>:
+
+seta20.2:
+  inb     $0x64,%al               # Wait for not busy
+    7c13:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c15:	a8 02                	test   $0x2,%al
+  jnz     seta20.2
+    7c17:	75 fa                	jne    7c13 <seta20.2>
+
+  movb    $0xdf,%al               # 0xdf -> port 0x60
+    7c19:	b0 df                	mov    $0xdf,%al
+  outb    %al,$0x60
+    7c1b:	e6 60                	out    %al,$0x60
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7c1d:	0f 01 16             	lgdtl  (%esi)
+    7c20:	78 7c                	js     7c9e <readsect+0xe>
+  movl    %cr0, %eax
+    7c22:	0f 20 c0             	mov    %cr0,%eax
+  orl     $CR0_PE, %eax
+    7c25:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7c29:	0f 22 c0             	mov    %eax,%cr0
+
+//PAGEBREAK!
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmp    $(SEG_KCODE<<3), $start32
+    7c2c:	ea                   	.byte 0xea
+    7c2d:	31 7c 08 00          	xor    %edi,0x0(%eax,%ecx,1)
+
+00007c31 <start32>:
+
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7c31:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7c35:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7c37:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7c39:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    7c3b:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    7c3f:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7c41:	8e e8                	mov    %eax,%gs
+
+  # Set up the stack pointer and call into C.
+  movl    $start, %esp
+    7c43:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+  call    bootmain
+    7c48:	e8 ee 00 00 00       	call   7d3b <bootmain>
+
+  # If bootmain returns (it shouldn't), trigger a Bochs
+  # breakpoint if running under Bochs, then loop.
+  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00
+    7c4d:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    7c51:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7c54:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00
+    7c56:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7c5a:	66 ef                	out    %ax,(%dx)
+
+00007c5c <spin>:
+spin:
+  jmp     spin
+    7c5c:	eb fe                	jmp    7c5c <spin>
+    7c5e:	66 90                	xchg   %ax,%ax
+
+00007c60 <gdt>:
+	...
+    7c68:	ff                   	(bad)  
+    7c69:	ff 00                	incl   (%eax)
+    7c6b:	00 00                	add    %al,(%eax)
+    7c6d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7c74:	00                   	.byte 0x0
+    7c75:	92                   	xchg   %eax,%edx
+    7c76:	cf                   	iret   
+	...
+
+00007c78 <gdtdesc>:
+    7c78:	17                   	pop    %ss
+    7c79:	00 60 7c             	add    %ah,0x7c(%eax)
+	...
+
+00007c7e <waitdisk>:
+  entry();
+}
+
+void
+waitdisk(void)
+{
+    7c7e:	55                   	push   %ebp
+    7c7f:	89 e5                	mov    %esp,%ebp
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+    7c81:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7c86:	ec                   	in     (%dx),%al
+  // Wait for disk ready.
+  while((inb(0x1F7) & 0xC0) != 0x40)
+    7c87:	83 e0 c0             	and    $0xffffffc0,%eax
+    7c8a:	3c 40                	cmp    $0x40,%al
+    7c8c:	75 f8                	jne    7c86 <waitdisk+0x8>
+    ;
+}
+    7c8e:	5d                   	pop    %ebp
+    7c8f:	c3                   	ret    
+
+00007c90 <readsect>:
+
+// Read a single sector at offset into dst.
+void
+readsect(void *dst, uint offset)
+{
+    7c90:	55                   	push   %ebp
+    7c91:	89 e5                	mov    %esp,%ebp
+    7c93:	57                   	push   %edi
+    7c94:	53                   	push   %ebx
+    7c95:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  // Issue command.
+  waitdisk();
+    7c98:	e8 e1 ff ff ff       	call   7c7e <waitdisk>
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+    7c9d:	b8 01 00 00 00       	mov    $0x1,%eax
+    7ca2:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7ca7:	ee                   	out    %al,(%dx)
+    7ca8:	ba f3 01 00 00       	mov    $0x1f3,%edx
+    7cad:	89 d8                	mov    %ebx,%eax
+    7caf:	ee                   	out    %al,(%dx)
+  outb(0x1F2, 1);   // count = 1
+  outb(0x1F3, offset);
+  outb(0x1F4, offset >> 8);
+    7cb0:	89 d8                	mov    %ebx,%eax
+    7cb2:	c1 e8 08             	shr    $0x8,%eax
+    7cb5:	ba f4 01 00 00       	mov    $0x1f4,%edx
+    7cba:	ee                   	out    %al,(%dx)
+  outb(0x1F5, offset >> 16);
+    7cbb:	89 d8                	mov    %ebx,%eax
+    7cbd:	c1 e8 10             	shr    $0x10,%eax
+    7cc0:	ba f5 01 00 00       	mov    $0x1f5,%edx
+    7cc5:	ee                   	out    %al,(%dx)
+  outb(0x1F6, (offset >> 24) | 0xE0);
+    7cc6:	89 d8                	mov    %ebx,%eax
+    7cc8:	c1 e8 18             	shr    $0x18,%eax
+    7ccb:	83 c8 e0             	or     $0xffffffe0,%eax
+    7cce:	ba f6 01 00 00       	mov    $0x1f6,%edx
+    7cd3:	ee                   	out    %al,(%dx)
+    7cd4:	b8 20 00 00 00       	mov    $0x20,%eax
+    7cd9:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7cde:	ee                   	out    %al,(%dx)
+  outb(0x1F7, 0x20);  // cmd 0x20 - read sectors
+
+  // Read data.
+  waitdisk();
+    7cdf:	e8 9a ff ff ff       	call   7c7e <waitdisk>
+  asm volatile("cld; rep insl" :
+    7ce4:	8b 7d 08             	mov    0x8(%ebp),%edi
+    7ce7:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7cec:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7cf1:	fc                   	cld    
+    7cf2:	f3 6d                	rep insl (%dx),%es:(%edi)
+  insl(0x1F0, dst, SECTSIZE/4);
+}
+    7cf4:	5b                   	pop    %ebx
+    7cf5:	5f                   	pop    %edi
+    7cf6:	5d                   	pop    %ebp
+    7cf7:	c3                   	ret    
+
+00007cf8 <readseg>:
+
+// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
+// Might copy more than asked.
+void
+readseg(uchar* pa, uint count, uint offset)
+{
+    7cf8:	55                   	push   %ebp
+    7cf9:	89 e5                	mov    %esp,%ebp
+    7cfb:	57                   	push   %edi
+    7cfc:	56                   	push   %esi
+    7cfd:	53                   	push   %ebx
+    7cfe:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    7d01:	8b 75 10             	mov    0x10(%ebp),%esi
+  uchar* epa;
+
+  epa = pa + count;
+    7d04:	89 df                	mov    %ebx,%edi
+    7d06:	03 7d 0c             	add    0xc(%ebp),%edi
+
+  // Round down to sector boundary.
+  pa -= offset % SECTSIZE;
+    7d09:	89 f0                	mov    %esi,%eax
+    7d0b:	25 ff 01 00 00       	and    $0x1ff,%eax
+    7d10:	29 c3                	sub    %eax,%ebx
+
+  // Translate from bytes to sectors; kernel starts at sector 1.
+  offset = (offset / SECTSIZE) + 1;
+    7d12:	c1 ee 09             	shr    $0x9,%esi
+    7d15:	83 c6 01             	add    $0x1,%esi
+
+  // If this is too slow, we could read lots of sectors at a time.
+  // We'd write more to memory than asked, but it doesn't matter --
+  // we load in increasing order.
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d18:	39 df                	cmp    %ebx,%edi
+    7d1a:	76 17                	jbe    7d33 <readseg+0x3b>
+    readsect(pa, offset);
+    7d1c:	56                   	push   %esi
+    7d1d:	53                   	push   %ebx
+    7d1e:	e8 6d ff ff ff       	call   7c90 <readsect>
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d23:	81 c3 00 02 00 00    	add    $0x200,%ebx
+    7d29:	83 c6 01             	add    $0x1,%esi
+    7d2c:	83 c4 08             	add    $0x8,%esp
+    7d2f:	39 df                	cmp    %ebx,%edi
+    7d31:	77 e9                	ja     7d1c <readseg+0x24>
+}
+    7d33:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d36:	5b                   	pop    %ebx
+    7d37:	5e                   	pop    %esi
+    7d38:	5f                   	pop    %edi
+    7d39:	5d                   	pop    %ebp
+    7d3a:	c3                   	ret    
+
+00007d3b <bootmain>:
+{
+    7d3b:	55                   	push   %ebp
+    7d3c:	89 e5                	mov    %esp,%ebp
+    7d3e:	57                   	push   %edi
+    7d3f:	56                   	push   %esi
+    7d40:	53                   	push   %ebx
+    7d41:	83 ec 0c             	sub    $0xc,%esp
+  readseg((uchar*)elf, 4096, 0);
+    7d44:	6a 00                	push   $0x0
+    7d46:	68 00 10 00 00       	push   $0x1000
+    7d4b:	68 00 00 01 00       	push   $0x10000
+    7d50:	e8 a3 ff ff ff       	call   7cf8 <readseg>
+  if(elf->magic != ELF_MAGIC)
+    7d55:	83 c4 0c             	add    $0xc,%esp
+    7d58:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d5f:	45 4c 46 
+    7d62:	74 08                	je     7d6c <bootmain+0x31>
+}
+    7d64:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d67:	5b                   	pop    %ebx
+    7d68:	5e                   	pop    %esi
+    7d69:	5f                   	pop    %edi
+    7d6a:	5d                   	pop    %ebp
+    7d6b:	c3                   	ret    
+  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
+    7d6c:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    7d71:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+  eph = ph + elf->phnum;
+    7d77:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
+    7d7e:	c1 e6 05             	shl    $0x5,%esi
+    7d81:	01 de                	add    %ebx,%esi
+  for(; ph < eph; ph++){
+    7d83:	39 f3                	cmp    %esi,%ebx
+    7d85:	72 0f                	jb     7d96 <bootmain+0x5b>
+  entry();
+    7d87:	ff 15 18 00 01 00    	call   *0x10018
+    7d8d:	eb d5                	jmp    7d64 <bootmain+0x29>
+  for(; ph < eph; ph++){
+    7d8f:	83 c3 20             	add    $0x20,%ebx
+    7d92:	39 de                	cmp    %ebx,%esi
+    7d94:	76 f1                	jbe    7d87 <bootmain+0x4c>
+    pa = (uchar*)ph->paddr;
+    7d96:	8b 7b 0c             	mov    0xc(%ebx),%edi
+    readseg(pa, ph->filesz, ph->off);
+    7d99:	ff 73 04             	pushl  0x4(%ebx)
+    7d9c:	ff 73 10             	pushl  0x10(%ebx)
+    7d9f:	57                   	push   %edi
+    7da0:	e8 53 ff ff ff       	call   7cf8 <readseg>
+    if(ph->memsz > ph->filesz)
+    7da5:	8b 4b 14             	mov    0x14(%ebx),%ecx
+    7da8:	8b 43 10             	mov    0x10(%ebx),%eax
+    7dab:	83 c4 0c             	add    $0xc,%esp
+    7dae:	39 c1                	cmp    %eax,%ecx
+    7db0:	76 dd                	jbe    7d8f <bootmain+0x54>
+      stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
+    7db2:	01 c7                	add    %eax,%edi
+    7db4:	29 c1                	sub    %eax,%ecx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    7db6:	b8 00 00 00 00       	mov    $0x0,%eax
+    7dbb:	fc                   	cld    
+    7dbc:	f3 aa                	rep stos %al,%es:(%edi)
+    7dbe:	eb cf                	jmp    7d8f <bootmain+0x54>
Binary files src-old/bootblock.o and src/bootblock.o differ
Binary files src-old/bootblockother.o and src/bootblockother.o differ
diff -ruN src-old/bootmain.d src/bootmain.d
--- src-old/bootmain.d	1970-01-01 00:00:00.000000000 +0000
+++ src/bootmain.d	2023-04-19 02:18:53.471873989 +0000
@@ -0,0 +1 @@
+bootmain.o: bootmain.c types.h elf.h x86.h memlayout.h
Binary files src-old/bootmain.o and src/bootmain.o differ
Binary files src-old/_buggy and src/_buggy differ
diff -ruN src-old/buggy.asm src/buggy.asm
--- src-old/buggy.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/buggy.asm	2023-04-19 02:18:57.548357114 +0000
@@ -0,0 +1,1245 @@
+
+_buggy:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return;
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	51                   	push   %ecx
+   f:	bb 64 00 00 00       	mov    $0x64,%ebx
+  14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  int i;
+
+  for(i=1;i<=100;i++)
+  {
+    test();
+  18:	e8 13 00 00 00       	call   30 <test>
+  for(i=1;i<=100;i++)
+  1d:	83 eb 01             	sub    $0x1,%ebx
+  20:	75 f6                	jne    18 <main+0x18>
+  }
+  
+  exit();
+  22:	e8 fb 02 00 00       	call   322 <exit>
+  27:	66 90                	xchg   %ax,%ax
+  29:	66 90                	xchg   %ax,%ax
+  2b:	66 90                	xchg   %ax,%ax
+  2d:	66 90                	xchg   %ax,%ax
+  2f:	90                   	nop
+
+00000030 <test>:
+void test() {
+  30:	55                   	push   %ebp
+  31:	89 e5                	mov    %esp,%ebp
+  33:	53                   	push   %ebx
+  34:	83 ec 0c             	sub    $0xc,%esp
+  char* str = mmap(addr, size,  0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  37:	6a 00                	push   $0x0
+  39:	6a ff                	push   $0xffffffff
+  3b:	6a 00                	push   $0x0
+  3d:	6a 00                	push   $0x0
+  3f:	6a 0a                	push   $0xa
+  41:	68 00 40 00 00       	push   $0x4000
+  46:	e8 87 03 00 00       	call   3d2 <mmap>
+  if (str<=0)
+  4b:	83 c4 20             	add    $0x20,%esp
+  4e:	85 c0                	test   %eax,%eax
+  50:	74 3e                	je     90 <test+0x60>
+  strcpy(str, "012345");
+  52:	83 ec 08             	sub    $0x8,%esp
+  55:	89 c3                	mov    %eax,%ebx
+  57:	68 2c 08 00 00       	push   $0x82c
+  5c:	50                   	push   %eax
+  5d:	e8 6e 00 00 00       	call   d0 <strcpy>
+  printf(1, "XV6_TEST_OUTPUT : str = %s\n", (char*)str);
+  62:	83 c4 0c             	add    $0xc,%esp
+  65:	53                   	push   %ebx
+  66:	68 33 08 00 00       	push   $0x833
+  6b:	6a 01                	push   $0x1
+  6d:	e8 1e 04 00 00       	call   490 <printf>
+  int rv = munmap(str, size);
+  72:	58                   	pop    %eax
+  73:	5a                   	pop    %edx
+  74:	6a 0a                	push   $0xa
+  76:	53                   	push   %ebx
+  77:	e8 5e 03 00 00       	call   3da <munmap>
+  if (rv < 0) {
+  7c:	83 c4 10             	add    $0x10,%esp
+  7f:	85 c0                	test   %eax,%eax
+  81:	78 2d                	js     b0 <test+0x80>
+}
+  83:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  86:	c9                   	leave  
+  87:	c3                   	ret    
+  88:	90                   	nop
+  89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+  90:	83 ec 08             	sub    $0x8,%esp
+  93:	68 e8 07 00 00       	push   $0x7e8
+  98:	6a 01                	push   $0x1
+  9a:	e8 f1 03 00 00       	call   490 <printf>
+    return;
+  9f:	83 c4 10             	add    $0x10,%esp
+}
+  a2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  a5:	c9                   	leave  
+  a6:	c3                   	ret    
+  a7:	89 f6                	mov    %esi,%esi
+  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+  b0:	83 ec 08             	sub    $0x8,%esp
+  b3:	68 08 08 00 00       	push   $0x808
+  b8:	6a 01                	push   $0x1
+  ba:	e8 d1 03 00 00       	call   490 <printf>
+  bf:	83 c4 10             	add    $0x10,%esp
+}
+  c2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  c5:	c9                   	leave  
+  c6:	c3                   	ret    
+  c7:	66 90                	xchg   %ax,%ax
+  c9:	66 90                	xchg   %ax,%ax
+  cb:	66 90                	xchg   %ax,%ax
+  cd:	66 90                	xchg   %ax,%ax
+  cf:	90                   	nop
+
+000000d0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  d0:	55                   	push   %ebp
+  d1:	89 e5                	mov    %esp,%ebp
+  d3:	53                   	push   %ebx
+  d4:	8b 45 08             	mov    0x8(%ebp),%eax
+  d7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  da:	89 c2                	mov    %eax,%edx
+  dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  e0:	83 c1 01             	add    $0x1,%ecx
+  e3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  e7:	83 c2 01             	add    $0x1,%edx
+  ea:	84 db                	test   %bl,%bl
+  ec:	88 5a ff             	mov    %bl,-0x1(%edx)
+  ef:	75 ef                	jne    e0 <strcpy+0x10>
+    ;
+  return os;
+}
+  f1:	5b                   	pop    %ebx
+  f2:	5d                   	pop    %ebp
+  f3:	c3                   	ret    
+  f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000100 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	53                   	push   %ebx
+ 104:	8b 55 08             	mov    0x8(%ebp),%edx
+ 107:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 10a:	0f b6 02             	movzbl (%edx),%eax
+ 10d:	0f b6 19             	movzbl (%ecx),%ebx
+ 110:	84 c0                	test   %al,%al
+ 112:	75 1c                	jne    130 <strcmp+0x30>
+ 114:	eb 2a                	jmp    140 <strcmp+0x40>
+ 116:	8d 76 00             	lea    0x0(%esi),%esi
+ 119:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 120:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 123:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 126:	83 c1 01             	add    $0x1,%ecx
+ 129:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 12c:	84 c0                	test   %al,%al
+ 12e:	74 10                	je     140 <strcmp+0x40>
+ 130:	38 d8                	cmp    %bl,%al
+ 132:	74 ec                	je     120 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 134:	29 d8                	sub    %ebx,%eax
+}
+ 136:	5b                   	pop    %ebx
+ 137:	5d                   	pop    %ebp
+ 138:	c3                   	ret    
+ 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 140:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 142:	29 d8                	sub    %ebx,%eax
+}
+ 144:	5b                   	pop    %ebx
+ 145:	5d                   	pop    %ebp
+ 146:	c3                   	ret    
+ 147:	89 f6                	mov    %esi,%esi
+ 149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000150 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 156:	80 39 00             	cmpb   $0x0,(%ecx)
+ 159:	74 15                	je     170 <strlen+0x20>
+ 15b:	31 d2                	xor    %edx,%edx
+ 15d:	8d 76 00             	lea    0x0(%esi),%esi
+ 160:	83 c2 01             	add    $0x1,%edx
+ 163:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 167:	89 d0                	mov    %edx,%eax
+ 169:	75 f5                	jne    160 <strlen+0x10>
+    ;
+  return n;
+}
+ 16b:	5d                   	pop    %ebp
+ 16c:	c3                   	ret    
+ 16d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 170:	31 c0                	xor    %eax,%eax
+}
+ 172:	5d                   	pop    %ebp
+ 173:	c3                   	ret    
+ 174:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 17a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000180 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	57                   	push   %edi
+ 184:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 187:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 18a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 18d:	89 d7                	mov    %edx,%edi
+ 18f:	fc                   	cld    
+ 190:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 192:	89 d0                	mov    %edx,%eax
+ 194:	5f                   	pop    %edi
+ 195:	5d                   	pop    %ebp
+ 196:	c3                   	ret    
+ 197:	89 f6                	mov    %esi,%esi
+ 199:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001a0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1a0:	55                   	push   %ebp
+ 1a1:	89 e5                	mov    %esp,%ebp
+ 1a3:	53                   	push   %ebx
+ 1a4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1a7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 1aa:	0f b6 10             	movzbl (%eax),%edx
+ 1ad:	84 d2                	test   %dl,%dl
+ 1af:	74 1d                	je     1ce <strchr+0x2e>
+    if(*s == c)
+ 1b1:	38 d3                	cmp    %dl,%bl
+ 1b3:	89 d9                	mov    %ebx,%ecx
+ 1b5:	75 0d                	jne    1c4 <strchr+0x24>
+ 1b7:	eb 17                	jmp    1d0 <strchr+0x30>
+ 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1c0:	38 ca                	cmp    %cl,%dl
+ 1c2:	74 0c                	je     1d0 <strchr+0x30>
+  for(; *s; s++)
+ 1c4:	83 c0 01             	add    $0x1,%eax
+ 1c7:	0f b6 10             	movzbl (%eax),%edx
+ 1ca:	84 d2                	test   %dl,%dl
+ 1cc:	75 f2                	jne    1c0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 1ce:	31 c0                	xor    %eax,%eax
+}
+ 1d0:	5b                   	pop    %ebx
+ 1d1:	5d                   	pop    %ebp
+ 1d2:	c3                   	ret    
+ 1d3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001e0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	57                   	push   %edi
+ 1e4:	56                   	push   %esi
+ 1e5:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1e6:	31 f6                	xor    %esi,%esi
+ 1e8:	89 f3                	mov    %esi,%ebx
+{
+ 1ea:	83 ec 1c             	sub    $0x1c,%esp
+ 1ed:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1f0:	eb 2f                	jmp    221 <gets+0x41>
+ 1f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1f8:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1fb:	83 ec 04             	sub    $0x4,%esp
+ 1fe:	6a 01                	push   $0x1
+ 200:	50                   	push   %eax
+ 201:	6a 00                	push   $0x0
+ 203:	e8 32 01 00 00       	call   33a <read>
+    if(cc < 1)
+ 208:	83 c4 10             	add    $0x10,%esp
+ 20b:	85 c0                	test   %eax,%eax
+ 20d:	7e 1c                	jle    22b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 20f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 213:	83 c7 01             	add    $0x1,%edi
+ 216:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 219:	3c 0a                	cmp    $0xa,%al
+ 21b:	74 23                	je     240 <gets+0x60>
+ 21d:	3c 0d                	cmp    $0xd,%al
+ 21f:	74 1f                	je     240 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 221:	83 c3 01             	add    $0x1,%ebx
+ 224:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 227:	89 fe                	mov    %edi,%esi
+ 229:	7c cd                	jl     1f8 <gets+0x18>
+ 22b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 22d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 230:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 233:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 236:	5b                   	pop    %ebx
+ 237:	5e                   	pop    %esi
+ 238:	5f                   	pop    %edi
+ 239:	5d                   	pop    %ebp
+ 23a:	c3                   	ret    
+ 23b:	90                   	nop
+ 23c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 240:	8b 75 08             	mov    0x8(%ebp),%esi
+ 243:	8b 45 08             	mov    0x8(%ebp),%eax
+ 246:	01 de                	add    %ebx,%esi
+ 248:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 24a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 24d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 250:	5b                   	pop    %ebx
+ 251:	5e                   	pop    %esi
+ 252:	5f                   	pop    %edi
+ 253:	5d                   	pop    %ebp
+ 254:	c3                   	ret    
+ 255:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000260 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	56                   	push   %esi
+ 264:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 265:	83 ec 08             	sub    $0x8,%esp
+ 268:	6a 00                	push   $0x0
+ 26a:	ff 75 08             	pushl  0x8(%ebp)
+ 26d:	e8 f0 00 00 00       	call   362 <open>
+  if(fd < 0)
+ 272:	83 c4 10             	add    $0x10,%esp
+ 275:	85 c0                	test   %eax,%eax
+ 277:	78 27                	js     2a0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 279:	83 ec 08             	sub    $0x8,%esp
+ 27c:	ff 75 0c             	pushl  0xc(%ebp)
+ 27f:	89 c3                	mov    %eax,%ebx
+ 281:	50                   	push   %eax
+ 282:	e8 f3 00 00 00       	call   37a <fstat>
+  close(fd);
+ 287:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 28a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 28c:	e8 b9 00 00 00       	call   34a <close>
+  return r;
+ 291:	83 c4 10             	add    $0x10,%esp
+}
+ 294:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 297:	89 f0                	mov    %esi,%eax
+ 299:	5b                   	pop    %ebx
+ 29a:	5e                   	pop    %esi
+ 29b:	5d                   	pop    %ebp
+ 29c:	c3                   	ret    
+ 29d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 2a0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2a5:	eb ed                	jmp    294 <stat+0x34>
+ 2a7:	89 f6                	mov    %esi,%esi
+ 2a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002b0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2b0:	55                   	push   %ebp
+ 2b1:	89 e5                	mov    %esp,%ebp
+ 2b3:	53                   	push   %ebx
+ 2b4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2b7:	0f be 11             	movsbl (%ecx),%edx
+ 2ba:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 2bd:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 2bf:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 2c4:	77 1f                	ja     2e5 <atoi+0x35>
+ 2c6:	8d 76 00             	lea    0x0(%esi),%esi
+ 2c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 2d0:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 2d3:	83 c1 01             	add    $0x1,%ecx
+ 2d6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 2da:	0f be 11             	movsbl (%ecx),%edx
+ 2dd:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 2e0:	80 fb 09             	cmp    $0x9,%bl
+ 2e3:	76 eb                	jbe    2d0 <atoi+0x20>
+  return n;
+}
+ 2e5:	5b                   	pop    %ebx
+ 2e6:	5d                   	pop    %ebp
+ 2e7:	c3                   	ret    
+ 2e8:	90                   	nop
+ 2e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000002f0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2f0:	55                   	push   %ebp
+ 2f1:	89 e5                	mov    %esp,%ebp
+ 2f3:	56                   	push   %esi
+ 2f4:	53                   	push   %ebx
+ 2f5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 2f8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2fb:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2fe:	85 db                	test   %ebx,%ebx
+ 300:	7e 14                	jle    316 <memmove+0x26>
+ 302:	31 d2                	xor    %edx,%edx
+ 304:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 308:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 30c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 30f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 312:	39 d3                	cmp    %edx,%ebx
+ 314:	75 f2                	jne    308 <memmove+0x18>
+  return vdst;
+}
+ 316:	5b                   	pop    %ebx
+ 317:	5e                   	pop    %esi
+ 318:	5d                   	pop    %ebp
+ 319:	c3                   	ret    
+
+0000031a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 31a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <exit>:
+SYSCALL(exit)
+ 322:	b8 02 00 00 00       	mov    $0x2,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <wait>:
+SYSCALL(wait)
+ 32a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <pipe>:
+SYSCALL(pipe)
+ 332:	b8 04 00 00 00       	mov    $0x4,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <read>:
+SYSCALL(read)
+ 33a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <write>:
+SYSCALL(write)
+ 342:	b8 10 00 00 00       	mov    $0x10,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <close>:
+SYSCALL(close)
+ 34a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <kill>:
+SYSCALL(kill)
+ 352:	b8 06 00 00 00       	mov    $0x6,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <exec>:
+SYSCALL(exec)
+ 35a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <open>:
+SYSCALL(open)
+ 362:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <mknod>:
+SYSCALL(mknod)
+ 36a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <unlink>:
+SYSCALL(unlink)
+ 372:	b8 12 00 00 00       	mov    $0x12,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <fstat>:
+SYSCALL(fstat)
+ 37a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <link>:
+SYSCALL(link)
+ 382:	b8 13 00 00 00       	mov    $0x13,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <mkdir>:
+SYSCALL(mkdir)
+ 38a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <chdir>:
+SYSCALL(chdir)
+ 392:	b8 09 00 00 00       	mov    $0x9,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <dup>:
+SYSCALL(dup)
+ 39a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <getpid>:
+SYSCALL(getpid)
+ 3a2:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <sbrk>:
+SYSCALL(sbrk)
+ 3aa:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <sleep>:
+SYSCALL(sleep)
+ 3b2:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <uptime>:
+SYSCALL(uptime)
+ 3ba:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <kmalloc>:
+SYSCALL(kmalloc)
+ 3c2:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <kmfree>:
+SYSCALL(kmfree) 
+ 3ca:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <mmap>:
+SYSCALL(mmap)
+ 3d2:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <munmap>:
+ 3da:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+ 3e2:	66 90                	xchg   %ax,%ax
+ 3e4:	66 90                	xchg   %ax,%ax
+ 3e6:	66 90                	xchg   %ax,%ax
+ 3e8:	66 90                	xchg   %ax,%ax
+ 3ea:	66 90                	xchg   %ax,%ax
+ 3ec:	66 90                	xchg   %ax,%ax
+ 3ee:	66 90                	xchg   %ax,%ax
+
+000003f0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	57                   	push   %edi
+ 3f4:	56                   	push   %esi
+ 3f5:	53                   	push   %ebx
+ 3f6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3f9:	85 d2                	test   %edx,%edx
+{
+ 3fb:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 3fe:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 400:	79 76                	jns    478 <printint+0x88>
+ 402:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 406:	74 70                	je     478 <printint+0x88>
+    x = -xx;
+ 408:	f7 d8                	neg    %eax
+    neg = 1;
+ 40a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 411:	31 f6                	xor    %esi,%esi
+ 413:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 416:	eb 0a                	jmp    422 <printint+0x32>
+ 418:	90                   	nop
+ 419:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 420:	89 fe                	mov    %edi,%esi
+ 422:	31 d2                	xor    %edx,%edx
+ 424:	8d 7e 01             	lea    0x1(%esi),%edi
+ 427:	f7 f1                	div    %ecx
+ 429:	0f b6 92 58 08 00 00 	movzbl 0x858(%edx),%edx
+  }while((x /= base) != 0);
+ 430:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 432:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 435:	75 e9                	jne    420 <printint+0x30>
+  if(neg)
+ 437:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 43a:	85 c0                	test   %eax,%eax
+ 43c:	74 08                	je     446 <printint+0x56>
+    buf[i++] = '-';
+ 43e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 443:	8d 7e 02             	lea    0x2(%esi),%edi
+ 446:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 44a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 44d:	8d 76 00             	lea    0x0(%esi),%esi
+ 450:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 453:	83 ec 04             	sub    $0x4,%esp
+ 456:	83 ee 01             	sub    $0x1,%esi
+ 459:	6a 01                	push   $0x1
+ 45b:	53                   	push   %ebx
+ 45c:	57                   	push   %edi
+ 45d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 460:	e8 dd fe ff ff       	call   342 <write>
+
+  while(--i >= 0)
+ 465:	83 c4 10             	add    $0x10,%esp
+ 468:	39 de                	cmp    %ebx,%esi
+ 46a:	75 e4                	jne    450 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 46c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 46f:	5b                   	pop    %ebx
+ 470:	5e                   	pop    %esi
+ 471:	5f                   	pop    %edi
+ 472:	5d                   	pop    %ebp
+ 473:	c3                   	ret    
+ 474:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 478:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 47f:	eb 90                	jmp    411 <printint+0x21>
+ 481:	eb 0d                	jmp    490 <printf>
+ 483:	90                   	nop
+ 484:	90                   	nop
+ 485:	90                   	nop
+ 486:	90                   	nop
+ 487:	90                   	nop
+ 488:	90                   	nop
+ 489:	90                   	nop
+ 48a:	90                   	nop
+ 48b:	90                   	nop
+ 48c:	90                   	nop
+ 48d:	90                   	nop
+ 48e:	90                   	nop
+ 48f:	90                   	nop
+
+00000490 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 490:	55                   	push   %ebp
+ 491:	89 e5                	mov    %esp,%ebp
+ 493:	57                   	push   %edi
+ 494:	56                   	push   %esi
+ 495:	53                   	push   %ebx
+ 496:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 499:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 49c:	0f b6 1e             	movzbl (%esi),%ebx
+ 49f:	84 db                	test   %bl,%bl
+ 4a1:	0f 84 b3 00 00 00    	je     55a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 4a7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4aa:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 4ad:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 4af:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4b2:	eb 2f                	jmp    4e3 <printf+0x53>
+ 4b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 4b8:	83 f8 25             	cmp    $0x25,%eax
+ 4bb:	0f 84 a7 00 00 00    	je     568 <printf+0xd8>
+  write(fd, &c, 1);
+ 4c1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 4c4:	83 ec 04             	sub    $0x4,%esp
+ 4c7:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 4ca:	6a 01                	push   $0x1
+ 4cc:	50                   	push   %eax
+ 4cd:	ff 75 08             	pushl  0x8(%ebp)
+ 4d0:	e8 6d fe ff ff       	call   342 <write>
+ 4d5:	83 c4 10             	add    $0x10,%esp
+ 4d8:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 4db:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4df:	84 db                	test   %bl,%bl
+ 4e1:	74 77                	je     55a <printf+0xca>
+    if(state == 0){
+ 4e3:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 4e5:	0f be cb             	movsbl %bl,%ecx
+ 4e8:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4eb:	74 cb                	je     4b8 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 4ed:	83 ff 25             	cmp    $0x25,%edi
+ 4f0:	75 e6                	jne    4d8 <printf+0x48>
+      if(c == 'd'){
+ 4f2:	83 f8 64             	cmp    $0x64,%eax
+ 4f5:	0f 84 05 01 00 00    	je     600 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4fb:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 501:	83 f9 70             	cmp    $0x70,%ecx
+ 504:	74 72                	je     578 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 506:	83 f8 73             	cmp    $0x73,%eax
+ 509:	0f 84 99 00 00 00    	je     5a8 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 50f:	83 f8 63             	cmp    $0x63,%eax
+ 512:	0f 84 08 01 00 00    	je     620 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 518:	83 f8 25             	cmp    $0x25,%eax
+ 51b:	0f 84 ef 00 00 00    	je     610 <printf+0x180>
+  write(fd, &c, 1);
+ 521:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 524:	83 ec 04             	sub    $0x4,%esp
+ 527:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 52b:	6a 01                	push   $0x1
+ 52d:	50                   	push   %eax
+ 52e:	ff 75 08             	pushl  0x8(%ebp)
+ 531:	e8 0c fe ff ff       	call   342 <write>
+ 536:	83 c4 0c             	add    $0xc,%esp
+ 539:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 53c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 53f:	6a 01                	push   $0x1
+ 541:	50                   	push   %eax
+ 542:	ff 75 08             	pushl  0x8(%ebp)
+ 545:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 548:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 54a:	e8 f3 fd ff ff       	call   342 <write>
+  for(i = 0; fmt[i]; i++){
+ 54f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 553:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 556:	84 db                	test   %bl,%bl
+ 558:	75 89                	jne    4e3 <printf+0x53>
+    }
+  }
+}
+ 55a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 55d:	5b                   	pop    %ebx
+ 55e:	5e                   	pop    %esi
+ 55f:	5f                   	pop    %edi
+ 560:	5d                   	pop    %ebp
+ 561:	c3                   	ret    
+ 562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 568:	bf 25 00 00 00       	mov    $0x25,%edi
+ 56d:	e9 66 ff ff ff       	jmp    4d8 <printf+0x48>
+ 572:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 578:	83 ec 0c             	sub    $0xc,%esp
+ 57b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 580:	6a 00                	push   $0x0
+ 582:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 585:	8b 45 08             	mov    0x8(%ebp),%eax
+ 588:	8b 17                	mov    (%edi),%edx
+ 58a:	e8 61 fe ff ff       	call   3f0 <printint>
+        ap++;
+ 58f:	89 f8                	mov    %edi,%eax
+ 591:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 594:	31 ff                	xor    %edi,%edi
+        ap++;
+ 596:	83 c0 04             	add    $0x4,%eax
+ 599:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 59c:	e9 37 ff ff ff       	jmp    4d8 <printf+0x48>
+ 5a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 5a8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5ab:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 5ad:	83 c0 04             	add    $0x4,%eax
+ 5b0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 5b3:	85 c9                	test   %ecx,%ecx
+ 5b5:	0f 84 8e 00 00 00    	je     649 <printf+0x1b9>
+        while(*s != 0){
+ 5bb:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 5be:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 5c0:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 5c2:	84 c0                	test   %al,%al
+ 5c4:	0f 84 0e ff ff ff    	je     4d8 <printf+0x48>
+ 5ca:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 5cd:	89 de                	mov    %ebx,%esi
+ 5cf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 5d5:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 5d8:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5db:	83 c6 01             	add    $0x1,%esi
+ 5de:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 5e1:	6a 01                	push   $0x1
+ 5e3:	57                   	push   %edi
+ 5e4:	53                   	push   %ebx
+ 5e5:	e8 58 fd ff ff       	call   342 <write>
+        while(*s != 0){
+ 5ea:	0f b6 06             	movzbl (%esi),%eax
+ 5ed:	83 c4 10             	add    $0x10,%esp
+ 5f0:	84 c0                	test   %al,%al
+ 5f2:	75 e4                	jne    5d8 <printf+0x148>
+ 5f4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 5f7:	31 ff                	xor    %edi,%edi
+ 5f9:	e9 da fe ff ff       	jmp    4d8 <printf+0x48>
+ 5fe:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 600:	83 ec 0c             	sub    $0xc,%esp
+ 603:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 608:	6a 01                	push   $0x1
+ 60a:	e9 73 ff ff ff       	jmp    582 <printf+0xf2>
+ 60f:	90                   	nop
+  write(fd, &c, 1);
+ 610:	83 ec 04             	sub    $0x4,%esp
+ 613:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 616:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 619:	6a 01                	push   $0x1
+ 61b:	e9 21 ff ff ff       	jmp    541 <printf+0xb1>
+        putc(fd, *ap);
+ 620:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 623:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 626:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 628:	6a 01                	push   $0x1
+        ap++;
+ 62a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 62d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 630:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 633:	50                   	push   %eax
+ 634:	ff 75 08             	pushl  0x8(%ebp)
+ 637:	e8 06 fd ff ff       	call   342 <write>
+        ap++;
+ 63c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 63f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 642:	31 ff                	xor    %edi,%edi
+ 644:	e9 8f fe ff ff       	jmp    4d8 <printf+0x48>
+          s = "(null)";
+ 649:	bb 4f 08 00 00       	mov    $0x84f,%ebx
+        while(*s != 0){
+ 64e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 653:	e9 72 ff ff ff       	jmp    5ca <printf+0x13a>
+ 658:	66 90                	xchg   %ax,%ax
+ 65a:	66 90                	xchg   %ax,%ax
+ 65c:	66 90                	xchg   %ax,%ax
+ 65e:	66 90                	xchg   %ax,%ax
+
+00000660 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 660:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 661:	a1 38 0b 00 00       	mov    0xb38,%eax
+{
+ 666:	89 e5                	mov    %esp,%ebp
+ 668:	57                   	push   %edi
+ 669:	56                   	push   %esi
+ 66a:	53                   	push   %ebx
+ 66b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 66e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 678:	39 c8                	cmp    %ecx,%eax
+ 67a:	8b 10                	mov    (%eax),%edx
+ 67c:	73 32                	jae    6b0 <free+0x50>
+ 67e:	39 d1                	cmp    %edx,%ecx
+ 680:	72 04                	jb     686 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 682:	39 d0                	cmp    %edx,%eax
+ 684:	72 32                	jb     6b8 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 686:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 689:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 68c:	39 fa                	cmp    %edi,%edx
+ 68e:	74 30                	je     6c0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 690:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 693:	8b 50 04             	mov    0x4(%eax),%edx
+ 696:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 699:	39 f1                	cmp    %esi,%ecx
+ 69b:	74 3a                	je     6d7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 69d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 69f:	a3 38 0b 00 00       	mov    %eax,0xb38
+}
+ 6a4:	5b                   	pop    %ebx
+ 6a5:	5e                   	pop    %esi
+ 6a6:	5f                   	pop    %edi
+ 6a7:	5d                   	pop    %ebp
+ 6a8:	c3                   	ret    
+ 6a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6b0:	39 d0                	cmp    %edx,%eax
+ 6b2:	72 04                	jb     6b8 <free+0x58>
+ 6b4:	39 d1                	cmp    %edx,%ecx
+ 6b6:	72 ce                	jb     686 <free+0x26>
+{
+ 6b8:	89 d0                	mov    %edx,%eax
+ 6ba:	eb bc                	jmp    678 <free+0x18>
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 6c0:	03 72 04             	add    0x4(%edx),%esi
+ 6c3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6c6:	8b 10                	mov    (%eax),%edx
+ 6c8:	8b 12                	mov    (%edx),%edx
+ 6ca:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6cd:	8b 50 04             	mov    0x4(%eax),%edx
+ 6d0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6d3:	39 f1                	cmp    %esi,%ecx
+ 6d5:	75 c6                	jne    69d <free+0x3d>
+    p->s.size += bp->s.size;
+ 6d7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6da:	a3 38 0b 00 00       	mov    %eax,0xb38
+    p->s.size += bp->s.size;
+ 6df:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6e2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6e5:	89 10                	mov    %edx,(%eax)
+}
+ 6e7:	5b                   	pop    %ebx
+ 6e8:	5e                   	pop    %esi
+ 6e9:	5f                   	pop    %edi
+ 6ea:	5d                   	pop    %ebp
+ 6eb:	c3                   	ret    
+ 6ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006f0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6f0:	55                   	push   %ebp
+ 6f1:	89 e5                	mov    %esp,%ebp
+ 6f3:	57                   	push   %edi
+ 6f4:	56                   	push   %esi
+ 6f5:	53                   	push   %ebx
+ 6f6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6fc:	8b 15 38 0b 00 00    	mov    0xb38,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 702:	8d 78 07             	lea    0x7(%eax),%edi
+ 705:	c1 ef 03             	shr    $0x3,%edi
+ 708:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 70b:	85 d2                	test   %edx,%edx
+ 70d:	0f 84 9d 00 00 00    	je     7b0 <malloc+0xc0>
+ 713:	8b 02                	mov    (%edx),%eax
+ 715:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 718:	39 cf                	cmp    %ecx,%edi
+ 71a:	76 6c                	jbe    788 <malloc+0x98>
+ 71c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 722:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 727:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 72a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 731:	eb 0e                	jmp    741 <malloc+0x51>
+ 733:	90                   	nop
+ 734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 738:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 73a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 73d:	39 f9                	cmp    %edi,%ecx
+ 73f:	73 47                	jae    788 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 741:	39 05 38 0b 00 00    	cmp    %eax,0xb38
+ 747:	89 c2                	mov    %eax,%edx
+ 749:	75 ed                	jne    738 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 74b:	83 ec 0c             	sub    $0xc,%esp
+ 74e:	56                   	push   %esi
+ 74f:	e8 56 fc ff ff       	call   3aa <sbrk>
+  if(p == (char*)-1)
+ 754:	83 c4 10             	add    $0x10,%esp
+ 757:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 75a:	74 1c                	je     778 <malloc+0x88>
+  hp->s.size = nu;
+ 75c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 75f:	83 ec 0c             	sub    $0xc,%esp
+ 762:	83 c0 08             	add    $0x8,%eax
+ 765:	50                   	push   %eax
+ 766:	e8 f5 fe ff ff       	call   660 <free>
+  return freep;
+ 76b:	8b 15 38 0b 00 00    	mov    0xb38,%edx
+      if((p = morecore(nunits)) == 0)
+ 771:	83 c4 10             	add    $0x10,%esp
+ 774:	85 d2                	test   %edx,%edx
+ 776:	75 c0                	jne    738 <malloc+0x48>
+        return 0;
+  }
+}
+ 778:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 77b:	31 c0                	xor    %eax,%eax
+}
+ 77d:	5b                   	pop    %ebx
+ 77e:	5e                   	pop    %esi
+ 77f:	5f                   	pop    %edi
+ 780:	5d                   	pop    %ebp
+ 781:	c3                   	ret    
+ 782:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 788:	39 cf                	cmp    %ecx,%edi
+ 78a:	74 54                	je     7e0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 78c:	29 f9                	sub    %edi,%ecx
+ 78e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 791:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 794:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 797:	89 15 38 0b 00 00    	mov    %edx,0xb38
+}
+ 79d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7a0:	83 c0 08             	add    $0x8,%eax
+}
+ 7a3:	5b                   	pop    %ebx
+ 7a4:	5e                   	pop    %esi
+ 7a5:	5f                   	pop    %edi
+ 7a6:	5d                   	pop    %ebp
+ 7a7:	c3                   	ret    
+ 7a8:	90                   	nop
+ 7a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 7b0:	c7 05 38 0b 00 00 3c 	movl   $0xb3c,0xb38
+ 7b7:	0b 00 00 
+ 7ba:	c7 05 3c 0b 00 00 3c 	movl   $0xb3c,0xb3c
+ 7c1:	0b 00 00 
+    base.s.size = 0;
+ 7c4:	b8 3c 0b 00 00       	mov    $0xb3c,%eax
+ 7c9:	c7 05 40 0b 00 00 00 	movl   $0x0,0xb40
+ 7d0:	00 00 00 
+ 7d3:	e9 44 ff ff ff       	jmp    71c <malloc+0x2c>
+ 7d8:	90                   	nop
+ 7d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7e0:	8b 08                	mov    (%eax),%ecx
+ 7e2:	89 0a                	mov    %ecx,(%edx)
+ 7e4:	eb b1                	jmp    797 <malloc+0xa7>
diff -ruN src-old/buggy.c src/buggy.c
--- src-old/buggy.c	1970-01-01 00:00:00.000000000 +0000
+++ src/buggy.c	2023-04-19 02:17:16.010997630 +0000
@@ -0,0 +1,48 @@
+#include "param.h"
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+
+/*Stress test : Testing modification to anonymous memory mapped by mmap in a loop.*/
+void test() {
+  int size =  10;  /* we need 10 bytes */
+ 
+  char *addr = (char*)0x4000;
+  char* str = mmap(addr, size,  0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+
+  if (str<=0)
+  {
+    printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+    return;
+  }
+
+  strcpy(str, "012345");
+
+  printf(1, "XV6_TEST_OUTPUT : str = %s\n", (char*)str);
+
+  int rv = munmap(str, size);
+  if (rv < 0) {
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    return;
+  }
+
+  return;
+}
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+
+  for(i=1;i<=100;i++)
+  {
+    test();
+  }
+  
+  exit();
+}
diff -ruN src-old/buggy.d src/buggy.d
--- src-old/buggy.d	1970-01-01 00:00:00.000000000 +0000
+++ src/buggy.d	2023-04-19 02:18:57.516353337 +0000
@@ -0,0 +1,2 @@
+buggy.o: buggy.c /usr/include/stdc-predef.h param.h types.h stat.h user.h \
+ fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files src-old/buggy.o and src/buggy.o differ
diff -ruN src-old/buggy.sym src/buggy.sym
--- src-old/buggy.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/buggy.sym	2023-04-19 02:18:57.560358530 +0000
@@ -0,0 +1,62 @@
+00000000 .text
+000007e8 .rodata
+0000086c .eh_frame
+00000b38 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 buggy.c
+00000000 ulib.c
+00000000 printf.c
+000003f0 printint
+00000858 digits.1052
+00000000 umalloc.c
+00000b38 freep
+00000b3c base
+000000d0 strcpy
+00000490 printf
+000002f0 memmove
+000003da munmap
+0000036a mknod
+000001e0 gets
+000003a2 getpid
+000006f0 malloc
+000003b2 sleep
+000003ca kmfree
+000003d2 mmap
+00000332 pipe
+00000342 write
+0000037a fstat
+00000352 kill
+00000392 chdir
+0000035a exec
+0000032a wait
+00000030 test
+0000033a read
+00000372 unlink
+0000031a fork
+000003aa sbrk
+000003ba uptime
+00000b38 __bss_start
+00000180 memset
+00000000 main
+00000100 strcmp
+0000039a dup
+00000260 stat
+00000b38 _edata
+00000b44 _end
+00000382 link
+000003c2 kmalloc
+00000322 exit
+000002b0 atoi
+00000150 strlen
+00000362 open
+000001a0 strchr
+0000038a mkdir
+0000034a close
+00000660 free
Binary files src-old/_cat and src/_cat differ
diff -ruN src-old/cat.asm src/cat.asm
--- src-old/cat.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/cat.asm	2023-04-19 02:18:55.752144699 +0000
@@ -0,0 +1,1276 @@
+
+_cat:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	be 01 00 00 00       	mov    $0x1,%esi
+  16:	83 ec 18             	sub    $0x18,%esp
+  19:	8b 01                	mov    (%ecx),%eax
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  21:	83 f8 01             	cmp    $0x1,%eax
+{
+  24:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(argc <= 1){
+  27:	7e 54                	jle    7d <main+0x7d>
+  29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    cat(0);
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 66 03 00 00       	call   3a2 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	85 c0                	test   %eax,%eax
+  41:	89 c7                	mov    %eax,%edi
+  43:	78 24                	js     69 <main+0x69>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+      exit();
+    }
+    cat(fd);
+  45:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 1; i < argc; i++){
+  48:	83 c6 01             	add    $0x1,%esi
+  4b:	83 c3 04             	add    $0x4,%ebx
+    cat(fd);
+  4e:	50                   	push   %eax
+  4f:	e8 3c 00 00 00       	call   90 <cat>
+    close(fd);
+  54:	89 3c 24             	mov    %edi,(%esp)
+  57:	e8 2e 03 00 00       	call   38a <close>
+  for(i = 1; i < argc; i++){
+  5c:	83 c4 10             	add    $0x10,%esp
+  5f:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  62:	75 cc                	jne    30 <main+0x30>
+  }
+  exit();
+  64:	e8 f9 02 00 00       	call   362 <exit>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+  69:	50                   	push   %eax
+  6a:	ff 33                	pushl  (%ebx)
+  6c:	68 4b 08 00 00       	push   $0x84b
+  71:	6a 01                	push   $0x1
+  73:	e8 58 04 00 00       	call   4d0 <printf>
+      exit();
+  78:	e8 e5 02 00 00       	call   362 <exit>
+    cat(0);
+  7d:	83 ec 0c             	sub    $0xc,%esp
+  80:	6a 00                	push   $0x0
+  82:	e8 09 00 00 00       	call   90 <cat>
+    exit();
+  87:	e8 d6 02 00 00       	call   362 <exit>
+  8c:	66 90                	xchg   %ax,%ax
+  8e:	66 90                	xchg   %ax,%ax
+
+00000090 <cat>:
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	56                   	push   %esi
+  94:	53                   	push   %ebx
+  95:	8b 75 08             	mov    0x8(%ebp),%esi
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  98:	eb 1d                	jmp    b7 <cat+0x27>
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if (write(1, buf, n) != n) {
+  a0:	83 ec 04             	sub    $0x4,%esp
+  a3:	53                   	push   %ebx
+  a4:	68 80 0b 00 00       	push   $0xb80
+  a9:	6a 01                	push   $0x1
+  ab:	e8 d2 02 00 00       	call   382 <write>
+  b0:	83 c4 10             	add    $0x10,%esp
+  b3:	39 d8                	cmp    %ebx,%eax
+  b5:	75 26                	jne    dd <cat+0x4d>
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  b7:	83 ec 04             	sub    $0x4,%esp
+  ba:	68 00 02 00 00       	push   $0x200
+  bf:	68 80 0b 00 00       	push   $0xb80
+  c4:	56                   	push   %esi
+  c5:	e8 b0 02 00 00       	call   37a <read>
+  ca:	83 c4 10             	add    $0x10,%esp
+  cd:	83 f8 00             	cmp    $0x0,%eax
+  d0:	89 c3                	mov    %eax,%ebx
+  d2:	7f cc                	jg     a0 <cat+0x10>
+  if(n < 0){
+  d4:	75 1b                	jne    f1 <cat+0x61>
+}
+  d6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  d9:	5b                   	pop    %ebx
+  da:	5e                   	pop    %esi
+  db:	5d                   	pop    %ebp
+  dc:	c3                   	ret    
+      printf(1, "cat: write error\n");
+  dd:	83 ec 08             	sub    $0x8,%esp
+  e0:	68 28 08 00 00       	push   $0x828
+  e5:	6a 01                	push   $0x1
+  e7:	e8 e4 03 00 00       	call   4d0 <printf>
+      exit();
+  ec:	e8 71 02 00 00       	call   362 <exit>
+    printf(1, "cat: read error\n");
+  f1:	50                   	push   %eax
+  f2:	50                   	push   %eax
+  f3:	68 3a 08 00 00       	push   $0x83a
+  f8:	6a 01                	push   $0x1
+  fa:	e8 d1 03 00 00       	call   4d0 <printf>
+    exit();
+  ff:	e8 5e 02 00 00       	call   362 <exit>
+ 104:	66 90                	xchg   %ax,%ax
+ 106:	66 90                	xchg   %ax,%ax
+ 108:	66 90                	xchg   %ax,%ax
+ 10a:	66 90                	xchg   %ax,%ax
+ 10c:	66 90                	xchg   %ax,%ax
+ 10e:	66 90                	xchg   %ax,%ax
+
+00000110 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	53                   	push   %ebx
+ 114:	8b 45 08             	mov    0x8(%ebp),%eax
+ 117:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 11a:	89 c2                	mov    %eax,%edx
+ 11c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 120:	83 c1 01             	add    $0x1,%ecx
+ 123:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 127:	83 c2 01             	add    $0x1,%edx
+ 12a:	84 db                	test   %bl,%bl
+ 12c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 12f:	75 ef                	jne    120 <strcpy+0x10>
+    ;
+  return os;
+}
+ 131:	5b                   	pop    %ebx
+ 132:	5d                   	pop    %ebp
+ 133:	c3                   	ret    
+ 134:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 13a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000140 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	53                   	push   %ebx
+ 144:	8b 55 08             	mov    0x8(%ebp),%edx
+ 147:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 14a:	0f b6 02             	movzbl (%edx),%eax
+ 14d:	0f b6 19             	movzbl (%ecx),%ebx
+ 150:	84 c0                	test   %al,%al
+ 152:	75 1c                	jne    170 <strcmp+0x30>
+ 154:	eb 2a                	jmp    180 <strcmp+0x40>
+ 156:	8d 76 00             	lea    0x0(%esi),%esi
+ 159:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 160:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 163:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 166:	83 c1 01             	add    $0x1,%ecx
+ 169:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 16c:	84 c0                	test   %al,%al
+ 16e:	74 10                	je     180 <strcmp+0x40>
+ 170:	38 d8                	cmp    %bl,%al
+ 172:	74 ec                	je     160 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 174:	29 d8                	sub    %ebx,%eax
+}
+ 176:	5b                   	pop    %ebx
+ 177:	5d                   	pop    %ebp
+ 178:	c3                   	ret    
+ 179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 180:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 182:	29 d8                	sub    %ebx,%eax
+}
+ 184:	5b                   	pop    %ebx
+ 185:	5d                   	pop    %ebp
+ 186:	c3                   	ret    
+ 187:	89 f6                	mov    %esi,%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000190 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 196:	80 39 00             	cmpb   $0x0,(%ecx)
+ 199:	74 15                	je     1b0 <strlen+0x20>
+ 19b:	31 d2                	xor    %edx,%edx
+ 19d:	8d 76 00             	lea    0x0(%esi),%esi
+ 1a0:	83 c2 01             	add    $0x1,%edx
+ 1a3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1a7:	89 d0                	mov    %edx,%eax
+ 1a9:	75 f5                	jne    1a0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1ab:	5d                   	pop    %ebp
+ 1ac:	c3                   	ret    
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 1b0:	31 c0                	xor    %eax,%eax
+}
+ 1b2:	5d                   	pop    %ebp
+ 1b3:	c3                   	ret    
+ 1b4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1ba:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000001c0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	57                   	push   %edi
+ 1c4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1c7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1ca:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1cd:	89 d7                	mov    %edx,%edi
+ 1cf:	fc                   	cld    
+ 1d0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1d2:	89 d0                	mov    %edx,%eax
+ 1d4:	5f                   	pop    %edi
+ 1d5:	5d                   	pop    %ebp
+ 1d6:	c3                   	ret    
+ 1d7:	89 f6                	mov    %esi,%esi
+ 1d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001e0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	53                   	push   %ebx
+ 1e4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 1ea:	0f b6 10             	movzbl (%eax),%edx
+ 1ed:	84 d2                	test   %dl,%dl
+ 1ef:	74 1d                	je     20e <strchr+0x2e>
+    if(*s == c)
+ 1f1:	38 d3                	cmp    %dl,%bl
+ 1f3:	89 d9                	mov    %ebx,%ecx
+ 1f5:	75 0d                	jne    204 <strchr+0x24>
+ 1f7:	eb 17                	jmp    210 <strchr+0x30>
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 200:	38 ca                	cmp    %cl,%dl
+ 202:	74 0c                	je     210 <strchr+0x30>
+  for(; *s; s++)
+ 204:	83 c0 01             	add    $0x1,%eax
+ 207:	0f b6 10             	movzbl (%eax),%edx
+ 20a:	84 d2                	test   %dl,%dl
+ 20c:	75 f2                	jne    200 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 20e:	31 c0                	xor    %eax,%eax
+}
+ 210:	5b                   	pop    %ebx
+ 211:	5d                   	pop    %ebp
+ 212:	c3                   	ret    
+ 213:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000220 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	57                   	push   %edi
+ 224:	56                   	push   %esi
+ 225:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 226:	31 f6                	xor    %esi,%esi
+ 228:	89 f3                	mov    %esi,%ebx
+{
+ 22a:	83 ec 1c             	sub    $0x1c,%esp
+ 22d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 230:	eb 2f                	jmp    261 <gets+0x41>
+ 232:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 238:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 23b:	83 ec 04             	sub    $0x4,%esp
+ 23e:	6a 01                	push   $0x1
+ 240:	50                   	push   %eax
+ 241:	6a 00                	push   $0x0
+ 243:	e8 32 01 00 00       	call   37a <read>
+    if(cc < 1)
+ 248:	83 c4 10             	add    $0x10,%esp
+ 24b:	85 c0                	test   %eax,%eax
+ 24d:	7e 1c                	jle    26b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 24f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 253:	83 c7 01             	add    $0x1,%edi
+ 256:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 259:	3c 0a                	cmp    $0xa,%al
+ 25b:	74 23                	je     280 <gets+0x60>
+ 25d:	3c 0d                	cmp    $0xd,%al
+ 25f:	74 1f                	je     280 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 261:	83 c3 01             	add    $0x1,%ebx
+ 264:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 267:	89 fe                	mov    %edi,%esi
+ 269:	7c cd                	jl     238 <gets+0x18>
+ 26b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 26d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 270:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 273:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 276:	5b                   	pop    %ebx
+ 277:	5e                   	pop    %esi
+ 278:	5f                   	pop    %edi
+ 279:	5d                   	pop    %ebp
+ 27a:	c3                   	ret    
+ 27b:	90                   	nop
+ 27c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 280:	8b 75 08             	mov    0x8(%ebp),%esi
+ 283:	8b 45 08             	mov    0x8(%ebp),%eax
+ 286:	01 de                	add    %ebx,%esi
+ 288:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 28a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 28d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 290:	5b                   	pop    %ebx
+ 291:	5e                   	pop    %esi
+ 292:	5f                   	pop    %edi
+ 293:	5d                   	pop    %ebp
+ 294:	c3                   	ret    
+ 295:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 299:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002a0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	56                   	push   %esi
+ 2a4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2a5:	83 ec 08             	sub    $0x8,%esp
+ 2a8:	6a 00                	push   $0x0
+ 2aa:	ff 75 08             	pushl  0x8(%ebp)
+ 2ad:	e8 f0 00 00 00       	call   3a2 <open>
+  if(fd < 0)
+ 2b2:	83 c4 10             	add    $0x10,%esp
+ 2b5:	85 c0                	test   %eax,%eax
+ 2b7:	78 27                	js     2e0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2b9:	83 ec 08             	sub    $0x8,%esp
+ 2bc:	ff 75 0c             	pushl  0xc(%ebp)
+ 2bf:	89 c3                	mov    %eax,%ebx
+ 2c1:	50                   	push   %eax
+ 2c2:	e8 f3 00 00 00       	call   3ba <fstat>
+  close(fd);
+ 2c7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2ca:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2cc:	e8 b9 00 00 00       	call   38a <close>
+  return r;
+ 2d1:	83 c4 10             	add    $0x10,%esp
+}
+ 2d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2d7:	89 f0                	mov    %esi,%eax
+ 2d9:	5b                   	pop    %ebx
+ 2da:	5e                   	pop    %esi
+ 2db:	5d                   	pop    %ebp
+ 2dc:	c3                   	ret    
+ 2dd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 2e0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2e5:	eb ed                	jmp    2d4 <stat+0x34>
+ 2e7:	89 f6                	mov    %esi,%esi
+ 2e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002f0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2f0:	55                   	push   %ebp
+ 2f1:	89 e5                	mov    %esp,%ebp
+ 2f3:	53                   	push   %ebx
+ 2f4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2f7:	0f be 11             	movsbl (%ecx),%edx
+ 2fa:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 2fd:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 2ff:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 304:	77 1f                	ja     325 <atoi+0x35>
+ 306:	8d 76 00             	lea    0x0(%esi),%esi
+ 309:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 310:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 313:	83 c1 01             	add    $0x1,%ecx
+ 316:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 31a:	0f be 11             	movsbl (%ecx),%edx
+ 31d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 320:	80 fb 09             	cmp    $0x9,%bl
+ 323:	76 eb                	jbe    310 <atoi+0x20>
+  return n;
+}
+ 325:	5b                   	pop    %ebx
+ 326:	5d                   	pop    %ebp
+ 327:	c3                   	ret    
+ 328:	90                   	nop
+ 329:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000330 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	56                   	push   %esi
+ 334:	53                   	push   %ebx
+ 335:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 338:	8b 45 08             	mov    0x8(%ebp),%eax
+ 33b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 33e:	85 db                	test   %ebx,%ebx
+ 340:	7e 14                	jle    356 <memmove+0x26>
+ 342:	31 d2                	xor    %edx,%edx
+ 344:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 348:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 34c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 34f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 352:	39 d3                	cmp    %edx,%ebx
+ 354:	75 f2                	jne    348 <memmove+0x18>
+  return vdst;
+}
+ 356:	5b                   	pop    %ebx
+ 357:	5e                   	pop    %esi
+ 358:	5d                   	pop    %ebp
+ 359:	c3                   	ret    
+
+0000035a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 35a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <exit>:
+SYSCALL(exit)
+ 362:	b8 02 00 00 00       	mov    $0x2,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <wait>:
+SYSCALL(wait)
+ 36a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <pipe>:
+SYSCALL(pipe)
+ 372:	b8 04 00 00 00       	mov    $0x4,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <read>:
+SYSCALL(read)
+ 37a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <write>:
+SYSCALL(write)
+ 382:	b8 10 00 00 00       	mov    $0x10,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <close>:
+SYSCALL(close)
+ 38a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <kill>:
+SYSCALL(kill)
+ 392:	b8 06 00 00 00       	mov    $0x6,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <exec>:
+SYSCALL(exec)
+ 39a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <open>:
+SYSCALL(open)
+ 3a2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <mknod>:
+SYSCALL(mknod)
+ 3aa:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <unlink>:
+SYSCALL(unlink)
+ 3b2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <fstat>:
+SYSCALL(fstat)
+ 3ba:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <link>:
+SYSCALL(link)
+ 3c2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <mkdir>:
+SYSCALL(mkdir)
+ 3ca:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <chdir>:
+SYSCALL(chdir)
+ 3d2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <dup>:
+SYSCALL(dup)
+ 3da:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <getpid>:
+SYSCALL(getpid)
+ 3e2:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <sbrk>:
+SYSCALL(sbrk)
+ 3ea:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <sleep>:
+SYSCALL(sleep)
+ 3f2:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <uptime>:
+SYSCALL(uptime)
+ 3fa:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <kmalloc>:
+SYSCALL(kmalloc)
+ 402:	b8 16 00 00 00       	mov    $0x16,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <kmfree>:
+SYSCALL(kmfree) 
+ 40a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <mmap>:
+SYSCALL(mmap)
+ 412:	b8 18 00 00 00       	mov    $0x18,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+
+0000041a <munmap>:
+ 41a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+ 422:	66 90                	xchg   %ax,%ax
+ 424:	66 90                	xchg   %ax,%ax
+ 426:	66 90                	xchg   %ax,%ax
+ 428:	66 90                	xchg   %ax,%ax
+ 42a:	66 90                	xchg   %ax,%ax
+ 42c:	66 90                	xchg   %ax,%ax
+ 42e:	66 90                	xchg   %ax,%ax
+
+00000430 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 439:	85 d2                	test   %edx,%edx
+{
+ 43b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 43e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 440:	79 76                	jns    4b8 <printint+0x88>
+ 442:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 446:	74 70                	je     4b8 <printint+0x88>
+    x = -xx;
+ 448:	f7 d8                	neg    %eax
+    neg = 1;
+ 44a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 451:	31 f6                	xor    %esi,%esi
+ 453:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 456:	eb 0a                	jmp    462 <printint+0x32>
+ 458:	90                   	nop
+ 459:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 460:	89 fe                	mov    %edi,%esi
+ 462:	31 d2                	xor    %edx,%edx
+ 464:	8d 7e 01             	lea    0x1(%esi),%edi
+ 467:	f7 f1                	div    %ecx
+ 469:	0f b6 92 68 08 00 00 	movzbl 0x868(%edx),%edx
+  }while((x /= base) != 0);
+ 470:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 472:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 475:	75 e9                	jne    460 <printint+0x30>
+  if(neg)
+ 477:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 47a:	85 c0                	test   %eax,%eax
+ 47c:	74 08                	je     486 <printint+0x56>
+    buf[i++] = '-';
+ 47e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 483:	8d 7e 02             	lea    0x2(%esi),%edi
+ 486:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 48a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 48d:	8d 76 00             	lea    0x0(%esi),%esi
+ 490:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 493:	83 ec 04             	sub    $0x4,%esp
+ 496:	83 ee 01             	sub    $0x1,%esi
+ 499:	6a 01                	push   $0x1
+ 49b:	53                   	push   %ebx
+ 49c:	57                   	push   %edi
+ 49d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 4a0:	e8 dd fe ff ff       	call   382 <write>
+
+  while(--i >= 0)
+ 4a5:	83 c4 10             	add    $0x10,%esp
+ 4a8:	39 de                	cmp    %ebx,%esi
+ 4aa:	75 e4                	jne    490 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 4ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4af:	5b                   	pop    %ebx
+ 4b0:	5e                   	pop    %esi
+ 4b1:	5f                   	pop    %edi
+ 4b2:	5d                   	pop    %ebp
+ 4b3:	c3                   	ret    
+ 4b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4b8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 4bf:	eb 90                	jmp    451 <printint+0x21>
+ 4c1:	eb 0d                	jmp    4d0 <printf>
+ 4c3:	90                   	nop
+ 4c4:	90                   	nop
+ 4c5:	90                   	nop
+ 4c6:	90                   	nop
+ 4c7:	90                   	nop
+ 4c8:	90                   	nop
+ 4c9:	90                   	nop
+ 4ca:	90                   	nop
+ 4cb:	90                   	nop
+ 4cc:	90                   	nop
+ 4cd:	90                   	nop
+ 4ce:	90                   	nop
+ 4cf:	90                   	nop
+
+000004d0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4d0:	55                   	push   %ebp
+ 4d1:	89 e5                	mov    %esp,%ebp
+ 4d3:	57                   	push   %edi
+ 4d4:	56                   	push   %esi
+ 4d5:	53                   	push   %ebx
+ 4d6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4d9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4dc:	0f b6 1e             	movzbl (%esi),%ebx
+ 4df:	84 db                	test   %bl,%bl
+ 4e1:	0f 84 b3 00 00 00    	je     59a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 4e7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4ea:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 4ed:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 4ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4f2:	eb 2f                	jmp    523 <printf+0x53>
+ 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 4f8:	83 f8 25             	cmp    $0x25,%eax
+ 4fb:	0f 84 a7 00 00 00    	je     5a8 <printf+0xd8>
+  write(fd, &c, 1);
+ 501:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 504:	83 ec 04             	sub    $0x4,%esp
+ 507:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 50a:	6a 01                	push   $0x1
+ 50c:	50                   	push   %eax
+ 50d:	ff 75 08             	pushl  0x8(%ebp)
+ 510:	e8 6d fe ff ff       	call   382 <write>
+ 515:	83 c4 10             	add    $0x10,%esp
+ 518:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 51b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 51f:	84 db                	test   %bl,%bl
+ 521:	74 77                	je     59a <printf+0xca>
+    if(state == 0){
+ 523:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 525:	0f be cb             	movsbl %bl,%ecx
+ 528:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 52b:	74 cb                	je     4f8 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 52d:	83 ff 25             	cmp    $0x25,%edi
+ 530:	75 e6                	jne    518 <printf+0x48>
+      if(c == 'd'){
+ 532:	83 f8 64             	cmp    $0x64,%eax
+ 535:	0f 84 05 01 00 00    	je     640 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 53b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 541:	83 f9 70             	cmp    $0x70,%ecx
+ 544:	74 72                	je     5b8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 546:	83 f8 73             	cmp    $0x73,%eax
+ 549:	0f 84 99 00 00 00    	je     5e8 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 54f:	83 f8 63             	cmp    $0x63,%eax
+ 552:	0f 84 08 01 00 00    	je     660 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 558:	83 f8 25             	cmp    $0x25,%eax
+ 55b:	0f 84 ef 00 00 00    	je     650 <printf+0x180>
+  write(fd, &c, 1);
+ 561:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 564:	83 ec 04             	sub    $0x4,%esp
+ 567:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 56b:	6a 01                	push   $0x1
+ 56d:	50                   	push   %eax
+ 56e:	ff 75 08             	pushl  0x8(%ebp)
+ 571:	e8 0c fe ff ff       	call   382 <write>
+ 576:	83 c4 0c             	add    $0xc,%esp
+ 579:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 57c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 57f:	6a 01                	push   $0x1
+ 581:	50                   	push   %eax
+ 582:	ff 75 08             	pushl  0x8(%ebp)
+ 585:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 588:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 58a:	e8 f3 fd ff ff       	call   382 <write>
+  for(i = 0; fmt[i]; i++){
+ 58f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 593:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 596:	84 db                	test   %bl,%bl
+ 598:	75 89                	jne    523 <printf+0x53>
+    }
+  }
+}
+ 59a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 59d:	5b                   	pop    %ebx
+ 59e:	5e                   	pop    %esi
+ 59f:	5f                   	pop    %edi
+ 5a0:	5d                   	pop    %ebp
+ 5a1:	c3                   	ret    
+ 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 5a8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 5ad:	e9 66 ff ff ff       	jmp    518 <printf+0x48>
+ 5b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 5b8:	83 ec 0c             	sub    $0xc,%esp
+ 5bb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5c0:	6a 00                	push   $0x0
+ 5c2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 5c5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5c8:	8b 17                	mov    (%edi),%edx
+ 5ca:	e8 61 fe ff ff       	call   430 <printint>
+        ap++;
+ 5cf:	89 f8                	mov    %edi,%eax
+ 5d1:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5d4:	31 ff                	xor    %edi,%edi
+        ap++;
+ 5d6:	83 c0 04             	add    $0x4,%eax
+ 5d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 5dc:	e9 37 ff ff ff       	jmp    518 <printf+0x48>
+ 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 5e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5eb:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 5ed:	83 c0 04             	add    $0x4,%eax
+ 5f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 5f3:	85 c9                	test   %ecx,%ecx
+ 5f5:	0f 84 8e 00 00 00    	je     689 <printf+0x1b9>
+        while(*s != 0){
+ 5fb:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 5fe:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 600:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 602:	84 c0                	test   %al,%al
+ 604:	0f 84 0e ff ff ff    	je     518 <printf+0x48>
+ 60a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 60d:	89 de                	mov    %ebx,%esi
+ 60f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 612:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 615:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 618:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 61b:	83 c6 01             	add    $0x1,%esi
+ 61e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 621:	6a 01                	push   $0x1
+ 623:	57                   	push   %edi
+ 624:	53                   	push   %ebx
+ 625:	e8 58 fd ff ff       	call   382 <write>
+        while(*s != 0){
+ 62a:	0f b6 06             	movzbl (%esi),%eax
+ 62d:	83 c4 10             	add    $0x10,%esp
+ 630:	84 c0                	test   %al,%al
+ 632:	75 e4                	jne    618 <printf+0x148>
+ 634:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 637:	31 ff                	xor    %edi,%edi
+ 639:	e9 da fe ff ff       	jmp    518 <printf+0x48>
+ 63e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 640:	83 ec 0c             	sub    $0xc,%esp
+ 643:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 648:	6a 01                	push   $0x1
+ 64a:	e9 73 ff ff ff       	jmp    5c2 <printf+0xf2>
+ 64f:	90                   	nop
+  write(fd, &c, 1);
+ 650:	83 ec 04             	sub    $0x4,%esp
+ 653:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 656:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 659:	6a 01                	push   $0x1
+ 65b:	e9 21 ff ff ff       	jmp    581 <printf+0xb1>
+        putc(fd, *ap);
+ 660:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 663:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 666:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 668:	6a 01                	push   $0x1
+        ap++;
+ 66a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 66d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 670:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 673:	50                   	push   %eax
+ 674:	ff 75 08             	pushl  0x8(%ebp)
+ 677:	e8 06 fd ff ff       	call   382 <write>
+        ap++;
+ 67c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 67f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 682:	31 ff                	xor    %edi,%edi
+ 684:	e9 8f fe ff ff       	jmp    518 <printf+0x48>
+          s = "(null)";
+ 689:	bb 60 08 00 00       	mov    $0x860,%ebx
+        while(*s != 0){
+ 68e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 693:	e9 72 ff ff ff       	jmp    60a <printf+0x13a>
+ 698:	66 90                	xchg   %ax,%ax
+ 69a:	66 90                	xchg   %ax,%ax
+ 69c:	66 90                	xchg   %ax,%ax
+ 69e:	66 90                	xchg   %ax,%ax
+
+000006a0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6a0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6a1:	a1 60 0b 00 00       	mov    0xb60,%eax
+{
+ 6a6:	89 e5                	mov    %esp,%ebp
+ 6a8:	57                   	push   %edi
+ 6a9:	56                   	push   %esi
+ 6aa:	53                   	push   %ebx
+ 6ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 6ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6b8:	39 c8                	cmp    %ecx,%eax
+ 6ba:	8b 10                	mov    (%eax),%edx
+ 6bc:	73 32                	jae    6f0 <free+0x50>
+ 6be:	39 d1                	cmp    %edx,%ecx
+ 6c0:	72 04                	jb     6c6 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6c2:	39 d0                	cmp    %edx,%eax
+ 6c4:	72 32                	jb     6f8 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6c6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6c9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6cc:	39 fa                	cmp    %edi,%edx
+ 6ce:	74 30                	je     700 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6d0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6d3:	8b 50 04             	mov    0x4(%eax),%edx
+ 6d6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6d9:	39 f1                	cmp    %esi,%ecx
+ 6db:	74 3a                	je     717 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6dd:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 6df:	a3 60 0b 00 00       	mov    %eax,0xb60
+}
+ 6e4:	5b                   	pop    %ebx
+ 6e5:	5e                   	pop    %esi
+ 6e6:	5f                   	pop    %edi
+ 6e7:	5d                   	pop    %ebp
+ 6e8:	c3                   	ret    
+ 6e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6f0:	39 d0                	cmp    %edx,%eax
+ 6f2:	72 04                	jb     6f8 <free+0x58>
+ 6f4:	39 d1                	cmp    %edx,%ecx
+ 6f6:	72 ce                	jb     6c6 <free+0x26>
+{
+ 6f8:	89 d0                	mov    %edx,%eax
+ 6fa:	eb bc                	jmp    6b8 <free+0x18>
+ 6fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 700:	03 72 04             	add    0x4(%edx),%esi
+ 703:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 706:	8b 10                	mov    (%eax),%edx
+ 708:	8b 12                	mov    (%edx),%edx
+ 70a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 70d:	8b 50 04             	mov    0x4(%eax),%edx
+ 710:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 713:	39 f1                	cmp    %esi,%ecx
+ 715:	75 c6                	jne    6dd <free+0x3d>
+    p->s.size += bp->s.size;
+ 717:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 71a:	a3 60 0b 00 00       	mov    %eax,0xb60
+    p->s.size += bp->s.size;
+ 71f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 722:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 725:	89 10                	mov    %edx,(%eax)
+}
+ 727:	5b                   	pop    %ebx
+ 728:	5e                   	pop    %esi
+ 729:	5f                   	pop    %edi
+ 72a:	5d                   	pop    %ebp
+ 72b:	c3                   	ret    
+ 72c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000730 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 730:	55                   	push   %ebp
+ 731:	89 e5                	mov    %esp,%ebp
+ 733:	57                   	push   %edi
+ 734:	56                   	push   %esi
+ 735:	53                   	push   %ebx
+ 736:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 739:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 73c:	8b 15 60 0b 00 00    	mov    0xb60,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 742:	8d 78 07             	lea    0x7(%eax),%edi
+ 745:	c1 ef 03             	shr    $0x3,%edi
+ 748:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 74b:	85 d2                	test   %edx,%edx
+ 74d:	0f 84 9d 00 00 00    	je     7f0 <malloc+0xc0>
+ 753:	8b 02                	mov    (%edx),%eax
+ 755:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 758:	39 cf                	cmp    %ecx,%edi
+ 75a:	76 6c                	jbe    7c8 <malloc+0x98>
+ 75c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 762:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 767:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 76a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 771:	eb 0e                	jmp    781 <malloc+0x51>
+ 773:	90                   	nop
+ 774:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 778:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 77a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 77d:	39 f9                	cmp    %edi,%ecx
+ 77f:	73 47                	jae    7c8 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 781:	39 05 60 0b 00 00    	cmp    %eax,0xb60
+ 787:	89 c2                	mov    %eax,%edx
+ 789:	75 ed                	jne    778 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 78b:	83 ec 0c             	sub    $0xc,%esp
+ 78e:	56                   	push   %esi
+ 78f:	e8 56 fc ff ff       	call   3ea <sbrk>
+  if(p == (char*)-1)
+ 794:	83 c4 10             	add    $0x10,%esp
+ 797:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 79a:	74 1c                	je     7b8 <malloc+0x88>
+  hp->s.size = nu;
+ 79c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 79f:	83 ec 0c             	sub    $0xc,%esp
+ 7a2:	83 c0 08             	add    $0x8,%eax
+ 7a5:	50                   	push   %eax
+ 7a6:	e8 f5 fe ff ff       	call   6a0 <free>
+  return freep;
+ 7ab:	8b 15 60 0b 00 00    	mov    0xb60,%edx
+      if((p = morecore(nunits)) == 0)
+ 7b1:	83 c4 10             	add    $0x10,%esp
+ 7b4:	85 d2                	test   %edx,%edx
+ 7b6:	75 c0                	jne    778 <malloc+0x48>
+        return 0;
+  }
+}
+ 7b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7bb:	31 c0                	xor    %eax,%eax
+}
+ 7bd:	5b                   	pop    %ebx
+ 7be:	5e                   	pop    %esi
+ 7bf:	5f                   	pop    %edi
+ 7c0:	5d                   	pop    %ebp
+ 7c1:	c3                   	ret    
+ 7c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 7c8:	39 cf                	cmp    %ecx,%edi
+ 7ca:	74 54                	je     820 <malloc+0xf0>
+        p->s.size -= nunits;
+ 7cc:	29 f9                	sub    %edi,%ecx
+ 7ce:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 7d1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 7d4:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 7d7:	89 15 60 0b 00 00    	mov    %edx,0xb60
+}
+ 7dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7e0:	83 c0 08             	add    $0x8,%eax
+}
+ 7e3:	5b                   	pop    %ebx
+ 7e4:	5e                   	pop    %esi
+ 7e5:	5f                   	pop    %edi
+ 7e6:	5d                   	pop    %ebp
+ 7e7:	c3                   	ret    
+ 7e8:	90                   	nop
+ 7e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 7f0:	c7 05 60 0b 00 00 64 	movl   $0xb64,0xb60
+ 7f7:	0b 00 00 
+ 7fa:	c7 05 64 0b 00 00 64 	movl   $0xb64,0xb64
+ 801:	0b 00 00 
+    base.s.size = 0;
+ 804:	b8 64 0b 00 00       	mov    $0xb64,%eax
+ 809:	c7 05 68 0b 00 00 00 	movl   $0x0,0xb68
+ 810:	00 00 00 
+ 813:	e9 44 ff ff ff       	jmp    75c <malloc+0x2c>
+ 818:	90                   	nop
+ 819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 820:	8b 08                	mov    (%eax),%ecx
+ 822:	89 0a                	mov    %ecx,(%edx)
+ 824:	eb b1                	jmp    7d7 <malloc+0xa7>
diff -ruN src-old/cat.d src/cat.d
--- src-old/cat.d	1970-01-01 00:00:00.000000000 +0000
+++ src/cat.d	2023-04-19 02:18:55.728141855 +0000
@@ -0,0 +1 @@
+cat.o: cat.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files src-old/cat.o and src/cat.o differ
diff -ruN src-old/cat.sym src/cat.sym
--- src-old/cat.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/cat.sym	2023-04-19 02:18:55.756145173 +0000
@@ -0,0 +1,63 @@
+00000000 .text
+00000828 .rodata
+0000087c .eh_frame
+00000b60 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 cat.c
+00000000 ulib.c
+00000000 printf.c
+00000430 printint
+00000868 digits.1052
+00000000 umalloc.c
+00000b60 freep
+00000b64 base
+00000110 strcpy
+000004d0 printf
+00000330 memmove
+0000041a munmap
+000003aa mknod
+00000220 gets
+000003e2 getpid
+00000090 cat
+00000730 malloc
+000003f2 sleep
+0000040a kmfree
+00000412 mmap
+00000372 pipe
+00000382 write
+000003ba fstat
+00000392 kill
+000003d2 chdir
+0000039a exec
+0000036a wait
+0000037a read
+000003b2 unlink
+0000035a fork
+000003ea sbrk
+000003fa uptime
+00000b44 __bss_start
+000001c0 memset
+00000000 main
+00000140 strcmp
+000003da dup
+00000b80 buf
+000002a0 stat
+00000b44 _edata
+00000d80 _end
+000003c2 link
+00000402 kmalloc
+00000362 exit
+000002f0 atoi
+00000190 strlen
+000003a2 open
+000001e0 strchr
+000003ca mkdir
+0000038a close
+000006a0 free
diff -ruN src-old/console.d src/console.d
--- src-old/console.d	1970-01-01 00:00:00.000000000 +0000
+++ src/console.d	2023-04-19 02:18:53.647894930 +0000
@@ -0,0 +1,3 @@
+console.o: console.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ traps.h spinlock.h sleeplock.h fs.h file.h memlayout.h mmu.h proc.h \
+ x86.h
Binary files src-old/console.o and src/console.o differ
diff -ruN src-old/defs.h src/defs.h
--- src-old/defs.h	2023-04-19 02:17:15.902981733 +0000
+++ src/defs.h	2023-04-19 02:17:16.010997630 +0000
@@ -69,6 +69,14 @@
 void            kinit1(void*, void*);
 void            kinit2(void*, void*);
 
+// kmalloc.c
+void*           kmalloc(uint);
+void            kmfree(void*);
+
+//mmap.c
+void*           mmap(void *, int, int, int, int, int);
+int             munmap(void *, int);
+
 // kbd.c
 void            kbdintr(void);
 
Binary files src-old/_echo and src/_echo differ
diff -ruN src-old/echo.asm src/echo.asm
--- src-old/echo.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/echo.asm	2023-04-19 02:18:55.800150388 +0000
@@ -0,0 +1,1190 @@
+
+_echo:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	56                   	push   %esi
+   e:	53                   	push   %ebx
+   f:	51                   	push   %ecx
+  10:	83 ec 0c             	sub    $0xc,%esp
+  13:	8b 01                	mov    (%ecx),%eax
+  15:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  for(i = 1; i < argc; i++)
+  18:	83 f8 01             	cmp    $0x1,%eax
+  1b:	7e 3f                	jle    5c <main+0x5c>
+  1d:	8d 5a 04             	lea    0x4(%edx),%ebx
+  20:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  23:	eb 18                	jmp    3d <main+0x3d>
+  25:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  28:	68 88 07 00 00       	push   $0x788
+  2d:	50                   	push   %eax
+  2e:	68 8a 07 00 00       	push   $0x78a
+  33:	6a 01                	push   $0x1
+  35:	e8 f6 03 00 00       	call   430 <printf>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	83 c3 04             	add    $0x4,%ebx
+  40:	8b 43 fc             	mov    -0x4(%ebx),%eax
+  43:	39 f3                	cmp    %esi,%ebx
+  45:	75 e1                	jne    28 <main+0x28>
+  47:	68 8f 07 00 00       	push   $0x78f
+  4c:	50                   	push   %eax
+  4d:	68 8a 07 00 00       	push   $0x78a
+  52:	6a 01                	push   $0x1
+  54:	e8 d7 03 00 00       	call   430 <printf>
+  59:	83 c4 10             	add    $0x10,%esp
+  exit();
+  5c:	e8 61 02 00 00       	call   2c2 <exit>
+  61:	66 90                	xchg   %ax,%ax
+  63:	66 90                	xchg   %ax,%ax
+  65:	66 90                	xchg   %ax,%ax
+  67:	66 90                	xchg   %ax,%ax
+  69:	66 90                	xchg   %ax,%ax
+  6b:	66 90                	xchg   %ax,%ax
+  6d:	66 90                	xchg   %ax,%ax
+  6f:	90                   	nop
+
+00000070 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  70:	55                   	push   %ebp
+  71:	89 e5                	mov    %esp,%ebp
+  73:	53                   	push   %ebx
+  74:	8b 45 08             	mov    0x8(%ebp),%eax
+  77:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  7a:	89 c2                	mov    %eax,%edx
+  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  80:	83 c1 01             	add    $0x1,%ecx
+  83:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  87:	83 c2 01             	add    $0x1,%edx
+  8a:	84 db                	test   %bl,%bl
+  8c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  8f:	75 ef                	jne    80 <strcpy+0x10>
+    ;
+  return os;
+}
+  91:	5b                   	pop    %ebx
+  92:	5d                   	pop    %ebp
+  93:	c3                   	ret    
+  94:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  9a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	53                   	push   %ebx
+  a4:	8b 55 08             	mov    0x8(%ebp),%edx
+  a7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  aa:	0f b6 02             	movzbl (%edx),%eax
+  ad:	0f b6 19             	movzbl (%ecx),%ebx
+  b0:	84 c0                	test   %al,%al
+  b2:	75 1c                	jne    d0 <strcmp+0x30>
+  b4:	eb 2a                	jmp    e0 <strcmp+0x40>
+  b6:	8d 76 00             	lea    0x0(%esi),%esi
+  b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  c0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  c3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  c6:	83 c1 01             	add    $0x1,%ecx
+  c9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  cc:	84 c0                	test   %al,%al
+  ce:	74 10                	je     e0 <strcmp+0x40>
+  d0:	38 d8                	cmp    %bl,%al
+  d2:	74 ec                	je     c0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  d4:	29 d8                	sub    %ebx,%eax
+}
+  d6:	5b                   	pop    %ebx
+  d7:	5d                   	pop    %ebp
+  d8:	c3                   	ret    
+  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  e0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  e2:	29 d8                	sub    %ebx,%eax
+}
+  e4:	5b                   	pop    %ebx
+  e5:	5d                   	pop    %ebp
+  e6:	c3                   	ret    
+  e7:	89 f6                	mov    %esi,%esi
+  e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000000f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  f6:	80 39 00             	cmpb   $0x0,(%ecx)
+  f9:	74 15                	je     110 <strlen+0x20>
+  fb:	31 d2                	xor    %edx,%edx
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 100:	83 c2 01             	add    $0x1,%edx
+ 103:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 107:	89 d0                	mov    %edx,%eax
+ 109:	75 f5                	jne    100 <strlen+0x10>
+    ;
+  return n;
+}
+ 10b:	5d                   	pop    %ebp
+ 10c:	c3                   	ret    
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 110:	31 c0                	xor    %eax,%eax
+}
+ 112:	5d                   	pop    %ebp
+ 113:	c3                   	ret    
+ 114:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 11a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000120 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	57                   	push   %edi
+ 124:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 127:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 12a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 12d:	89 d7                	mov    %edx,%edi
+ 12f:	fc                   	cld    
+ 130:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 132:	89 d0                	mov    %edx,%eax
+ 134:	5f                   	pop    %edi
+ 135:	5d                   	pop    %ebp
+ 136:	c3                   	ret    
+ 137:	89 f6                	mov    %esi,%esi
+ 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000140 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	53                   	push   %ebx
+ 144:	8b 45 08             	mov    0x8(%ebp),%eax
+ 147:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 14a:	0f b6 10             	movzbl (%eax),%edx
+ 14d:	84 d2                	test   %dl,%dl
+ 14f:	74 1d                	je     16e <strchr+0x2e>
+    if(*s == c)
+ 151:	38 d3                	cmp    %dl,%bl
+ 153:	89 d9                	mov    %ebx,%ecx
+ 155:	75 0d                	jne    164 <strchr+0x24>
+ 157:	eb 17                	jmp    170 <strchr+0x30>
+ 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 160:	38 ca                	cmp    %cl,%dl
+ 162:	74 0c                	je     170 <strchr+0x30>
+  for(; *s; s++)
+ 164:	83 c0 01             	add    $0x1,%eax
+ 167:	0f b6 10             	movzbl (%eax),%edx
+ 16a:	84 d2                	test   %dl,%dl
+ 16c:	75 f2                	jne    160 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 16e:	31 c0                	xor    %eax,%eax
+}
+ 170:	5b                   	pop    %ebx
+ 171:	5d                   	pop    %ebp
+ 172:	c3                   	ret    
+ 173:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 179:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000180 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	57                   	push   %edi
+ 184:	56                   	push   %esi
+ 185:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 186:	31 f6                	xor    %esi,%esi
+ 188:	89 f3                	mov    %esi,%ebx
+{
+ 18a:	83 ec 1c             	sub    $0x1c,%esp
+ 18d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 190:	eb 2f                	jmp    1c1 <gets+0x41>
+ 192:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 198:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 19b:	83 ec 04             	sub    $0x4,%esp
+ 19e:	6a 01                	push   $0x1
+ 1a0:	50                   	push   %eax
+ 1a1:	6a 00                	push   $0x0
+ 1a3:	e8 32 01 00 00       	call   2da <read>
+    if(cc < 1)
+ 1a8:	83 c4 10             	add    $0x10,%esp
+ 1ab:	85 c0                	test   %eax,%eax
+ 1ad:	7e 1c                	jle    1cb <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 1af:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1b3:	83 c7 01             	add    $0x1,%edi
+ 1b6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1b9:	3c 0a                	cmp    $0xa,%al
+ 1bb:	74 23                	je     1e0 <gets+0x60>
+ 1bd:	3c 0d                	cmp    $0xd,%al
+ 1bf:	74 1f                	je     1e0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1c1:	83 c3 01             	add    $0x1,%ebx
+ 1c4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1c7:	89 fe                	mov    %edi,%esi
+ 1c9:	7c cd                	jl     198 <gets+0x18>
+ 1cb:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1d0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1d6:	5b                   	pop    %ebx
+ 1d7:	5e                   	pop    %esi
+ 1d8:	5f                   	pop    %edi
+ 1d9:	5d                   	pop    %ebp
+ 1da:	c3                   	ret    
+ 1db:	90                   	nop
+ 1dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1e0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1e3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e6:	01 de                	add    %ebx,%esi
+ 1e8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1ea:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ed:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1f0:	5b                   	pop    %ebx
+ 1f1:	5e                   	pop    %esi
+ 1f2:	5f                   	pop    %edi
+ 1f3:	5d                   	pop    %ebp
+ 1f4:	c3                   	ret    
+ 1f5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000200 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	56                   	push   %esi
+ 204:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 205:	83 ec 08             	sub    $0x8,%esp
+ 208:	6a 00                	push   $0x0
+ 20a:	ff 75 08             	pushl  0x8(%ebp)
+ 20d:	e8 f0 00 00 00       	call   302 <open>
+  if(fd < 0)
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	85 c0                	test   %eax,%eax
+ 217:	78 27                	js     240 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 219:	83 ec 08             	sub    $0x8,%esp
+ 21c:	ff 75 0c             	pushl  0xc(%ebp)
+ 21f:	89 c3                	mov    %eax,%ebx
+ 221:	50                   	push   %eax
+ 222:	e8 f3 00 00 00       	call   31a <fstat>
+  close(fd);
+ 227:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 22a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 22c:	e8 b9 00 00 00       	call   2ea <close>
+  return r;
+ 231:	83 c4 10             	add    $0x10,%esp
+}
+ 234:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 237:	89 f0                	mov    %esi,%eax
+ 239:	5b                   	pop    %ebx
+ 23a:	5e                   	pop    %esi
+ 23b:	5d                   	pop    %ebp
+ 23c:	c3                   	ret    
+ 23d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 240:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 245:	eb ed                	jmp    234 <stat+0x34>
+ 247:	89 f6                	mov    %esi,%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000250 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	53                   	push   %ebx
+ 254:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 257:	0f be 11             	movsbl (%ecx),%edx
+ 25a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 25d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 25f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 264:	77 1f                	ja     285 <atoi+0x35>
+ 266:	8d 76 00             	lea    0x0(%esi),%esi
+ 269:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 270:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 273:	83 c1 01             	add    $0x1,%ecx
+ 276:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 27a:	0f be 11             	movsbl (%ecx),%edx
+ 27d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 280:	80 fb 09             	cmp    $0x9,%bl
+ 283:	76 eb                	jbe    270 <atoi+0x20>
+  return n;
+}
+ 285:	5b                   	pop    %ebx
+ 286:	5d                   	pop    %ebp
+ 287:	c3                   	ret    
+ 288:	90                   	nop
+ 289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000290 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	56                   	push   %esi
+ 294:	53                   	push   %ebx
+ 295:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 298:	8b 45 08             	mov    0x8(%ebp),%eax
+ 29b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 29e:	85 db                	test   %ebx,%ebx
+ 2a0:	7e 14                	jle    2b6 <memmove+0x26>
+ 2a2:	31 d2                	xor    %edx,%edx
+ 2a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 2a8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 2ac:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 2af:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 2b2:	39 d3                	cmp    %edx,%ebx
+ 2b4:	75 f2                	jne    2a8 <memmove+0x18>
+  return vdst;
+}
+ 2b6:	5b                   	pop    %ebx
+ 2b7:	5e                   	pop    %esi
+ 2b8:	5d                   	pop    %ebp
+ 2b9:	c3                   	ret    
+
+000002ba <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ba:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <exit>:
+SYSCALL(exit)
+ 2c2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <wait>:
+SYSCALL(wait)
+ 2ca:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <pipe>:
+SYSCALL(pipe)
+ 2d2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <read>:
+SYSCALL(read)
+ 2da:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <write>:
+SYSCALL(write)
+ 2e2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <close>:
+SYSCALL(close)
+ 2ea:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <kill>:
+SYSCALL(kill)
+ 2f2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <exec>:
+SYSCALL(exec)
+ 2fa:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <open>:
+SYSCALL(open)
+ 302:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <mknod>:
+SYSCALL(mknod)
+ 30a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <unlink>:
+SYSCALL(unlink)
+ 312:	b8 12 00 00 00       	mov    $0x12,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <fstat>:
+SYSCALL(fstat)
+ 31a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <link>:
+SYSCALL(link)
+ 322:	b8 13 00 00 00       	mov    $0x13,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <mkdir>:
+SYSCALL(mkdir)
+ 32a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <chdir>:
+SYSCALL(chdir)
+ 332:	b8 09 00 00 00       	mov    $0x9,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <dup>:
+SYSCALL(dup)
+ 33a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <getpid>:
+SYSCALL(getpid)
+ 342:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <sbrk>:
+SYSCALL(sbrk)
+ 34a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <sleep>:
+SYSCALL(sleep)
+ 352:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <uptime>:
+SYSCALL(uptime)
+ 35a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <kmalloc>:
+SYSCALL(kmalloc)
+ 362:	b8 16 00 00 00       	mov    $0x16,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <kmfree>:
+SYSCALL(kmfree) 
+ 36a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <mmap>:
+SYSCALL(mmap)
+ 372:	b8 18 00 00 00       	mov    $0x18,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <munmap>:
+ 37a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+ 382:	66 90                	xchg   %ax,%ax
+ 384:	66 90                	xchg   %ax,%ax
+ 386:	66 90                	xchg   %ax,%ax
+ 388:	66 90                	xchg   %ax,%ax
+ 38a:	66 90                	xchg   %ax,%ax
+ 38c:	66 90                	xchg   %ax,%ax
+ 38e:	66 90                	xchg   %ax,%ax
+
+00000390 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 390:	55                   	push   %ebp
+ 391:	89 e5                	mov    %esp,%ebp
+ 393:	57                   	push   %edi
+ 394:	56                   	push   %esi
+ 395:	53                   	push   %ebx
+ 396:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 399:	85 d2                	test   %edx,%edx
+{
+ 39b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 39e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 3a0:	79 76                	jns    418 <printint+0x88>
+ 3a2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3a6:	74 70                	je     418 <printint+0x88>
+    x = -xx;
+ 3a8:	f7 d8                	neg    %eax
+    neg = 1;
+ 3aa:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3b1:	31 f6                	xor    %esi,%esi
+ 3b3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3b6:	eb 0a                	jmp    3c2 <printint+0x32>
+ 3b8:	90                   	nop
+ 3b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3c0:	89 fe                	mov    %edi,%esi
+ 3c2:	31 d2                	xor    %edx,%edx
+ 3c4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3c7:	f7 f1                	div    %ecx
+ 3c9:	0f b6 92 98 07 00 00 	movzbl 0x798(%edx),%edx
+  }while((x /= base) != 0);
+ 3d0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 3d2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 3d5:	75 e9                	jne    3c0 <printint+0x30>
+  if(neg)
+ 3d7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3da:	85 c0                	test   %eax,%eax
+ 3dc:	74 08                	je     3e6 <printint+0x56>
+    buf[i++] = '-';
+ 3de:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3e3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3e6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3ea:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 3f0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 3f3:	83 ec 04             	sub    $0x4,%esp
+ 3f6:	83 ee 01             	sub    $0x1,%esi
+ 3f9:	6a 01                	push   $0x1
+ 3fb:	53                   	push   %ebx
+ 3fc:	57                   	push   %edi
+ 3fd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 400:	e8 dd fe ff ff       	call   2e2 <write>
+
+  while(--i >= 0)
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 418:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 41f:	eb 90                	jmp    3b1 <printint+0x21>
+ 421:	eb 0d                	jmp    430 <printf>
+ 423:	90                   	nop
+ 424:	90                   	nop
+ 425:	90                   	nop
+ 426:	90                   	nop
+ 427:	90                   	nop
+ 428:	90                   	nop
+ 429:	90                   	nop
+ 42a:	90                   	nop
+ 42b:	90                   	nop
+ 42c:	90                   	nop
+ 42d:	90                   	nop
+ 42e:	90                   	nop
+ 42f:	90                   	nop
+
+00000430 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 439:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 43c:	0f b6 1e             	movzbl (%esi),%ebx
+ 43f:	84 db                	test   %bl,%bl
+ 441:	0f 84 b3 00 00 00    	je     4fa <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 447:	8d 45 10             	lea    0x10(%ebp),%eax
+ 44a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 44d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 44f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 452:	eb 2f                	jmp    483 <printf+0x53>
+ 454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 458:	83 f8 25             	cmp    $0x25,%eax
+ 45b:	0f 84 a7 00 00 00    	je     508 <printf+0xd8>
+  write(fd, &c, 1);
+ 461:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 464:	83 ec 04             	sub    $0x4,%esp
+ 467:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 46a:	6a 01                	push   $0x1
+ 46c:	50                   	push   %eax
+ 46d:	ff 75 08             	pushl  0x8(%ebp)
+ 470:	e8 6d fe ff ff       	call   2e2 <write>
+ 475:	83 c4 10             	add    $0x10,%esp
+ 478:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 47b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 47f:	84 db                	test   %bl,%bl
+ 481:	74 77                	je     4fa <printf+0xca>
+    if(state == 0){
+ 483:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 485:	0f be cb             	movsbl %bl,%ecx
+ 488:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 48b:	74 cb                	je     458 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 48d:	83 ff 25             	cmp    $0x25,%edi
+ 490:	75 e6                	jne    478 <printf+0x48>
+      if(c == 'd'){
+ 492:	83 f8 64             	cmp    $0x64,%eax
+ 495:	0f 84 05 01 00 00    	je     5a0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 49b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4a1:	83 f9 70             	cmp    $0x70,%ecx
+ 4a4:	74 72                	je     518 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4a6:	83 f8 73             	cmp    $0x73,%eax
+ 4a9:	0f 84 99 00 00 00    	je     548 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4af:	83 f8 63             	cmp    $0x63,%eax
+ 4b2:	0f 84 08 01 00 00    	je     5c0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4b8:	83 f8 25             	cmp    $0x25,%eax
+ 4bb:	0f 84 ef 00 00 00    	je     5b0 <printf+0x180>
+  write(fd, &c, 1);
+ 4c1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4c4:	83 ec 04             	sub    $0x4,%esp
+ 4c7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4cb:	6a 01                	push   $0x1
+ 4cd:	50                   	push   %eax
+ 4ce:	ff 75 08             	pushl  0x8(%ebp)
+ 4d1:	e8 0c fe ff ff       	call   2e2 <write>
+ 4d6:	83 c4 0c             	add    $0xc,%esp
+ 4d9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4dc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4df:	6a 01                	push   $0x1
+ 4e1:	50                   	push   %eax
+ 4e2:	ff 75 08             	pushl  0x8(%ebp)
+ 4e5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4e8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 4ea:	e8 f3 fd ff ff       	call   2e2 <write>
+  for(i = 0; fmt[i]; i++){
+ 4ef:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 4f3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4f6:	84 db                	test   %bl,%bl
+ 4f8:	75 89                	jne    483 <printf+0x53>
+    }
+  }
+}
+ 4fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4fd:	5b                   	pop    %ebx
+ 4fe:	5e                   	pop    %esi
+ 4ff:	5f                   	pop    %edi
+ 500:	5d                   	pop    %ebp
+ 501:	c3                   	ret    
+ 502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 508:	bf 25 00 00 00       	mov    $0x25,%edi
+ 50d:	e9 66 ff ff ff       	jmp    478 <printf+0x48>
+ 512:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 518:	83 ec 0c             	sub    $0xc,%esp
+ 51b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 520:	6a 00                	push   $0x0
+ 522:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 525:	8b 45 08             	mov    0x8(%ebp),%eax
+ 528:	8b 17                	mov    (%edi),%edx
+ 52a:	e8 61 fe ff ff       	call   390 <printint>
+        ap++;
+ 52f:	89 f8                	mov    %edi,%eax
+ 531:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 534:	31 ff                	xor    %edi,%edi
+        ap++;
+ 536:	83 c0 04             	add    $0x4,%eax
+ 539:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 53c:	e9 37 ff ff ff       	jmp    478 <printf+0x48>
+ 541:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 548:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 54b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 54d:	83 c0 04             	add    $0x4,%eax
+ 550:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 553:	85 c9                	test   %ecx,%ecx
+ 555:	0f 84 8e 00 00 00    	je     5e9 <printf+0x1b9>
+        while(*s != 0){
+ 55b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 55e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 560:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 562:	84 c0                	test   %al,%al
+ 564:	0f 84 0e ff ff ff    	je     478 <printf+0x48>
+ 56a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 56d:	89 de                	mov    %ebx,%esi
+ 56f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 572:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 575:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 578:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 57b:	83 c6 01             	add    $0x1,%esi
+ 57e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 581:	6a 01                	push   $0x1
+ 583:	57                   	push   %edi
+ 584:	53                   	push   %ebx
+ 585:	e8 58 fd ff ff       	call   2e2 <write>
+        while(*s != 0){
+ 58a:	0f b6 06             	movzbl (%esi),%eax
+ 58d:	83 c4 10             	add    $0x10,%esp
+ 590:	84 c0                	test   %al,%al
+ 592:	75 e4                	jne    578 <printf+0x148>
+ 594:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 597:	31 ff                	xor    %edi,%edi
+ 599:	e9 da fe ff ff       	jmp    478 <printf+0x48>
+ 59e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 5a0:	83 ec 0c             	sub    $0xc,%esp
+ 5a3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5a8:	6a 01                	push   $0x1
+ 5aa:	e9 73 ff ff ff       	jmp    522 <printf+0xf2>
+ 5af:	90                   	nop
+  write(fd, &c, 1);
+ 5b0:	83 ec 04             	sub    $0x4,%esp
+ 5b3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5b6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5b9:	6a 01                	push   $0x1
+ 5bb:	e9 21 ff ff ff       	jmp    4e1 <printf+0xb1>
+        putc(fd, *ap);
+ 5c0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5c3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5c6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5c8:	6a 01                	push   $0x1
+        ap++;
+ 5ca:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5cd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 5d0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5d3:	50                   	push   %eax
+ 5d4:	ff 75 08             	pushl  0x8(%ebp)
+ 5d7:	e8 06 fd ff ff       	call   2e2 <write>
+        ap++;
+ 5dc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5df:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5e2:	31 ff                	xor    %edi,%edi
+ 5e4:	e9 8f fe ff ff       	jmp    478 <printf+0x48>
+          s = "(null)";
+ 5e9:	bb 91 07 00 00       	mov    $0x791,%ebx
+        while(*s != 0){
+ 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5f3:	e9 72 ff ff ff       	jmp    56a <printf+0x13a>
+ 5f8:	66 90                	xchg   %ax,%ax
+ 5fa:	66 90                	xchg   %ax,%ax
+ 5fc:	66 90                	xchg   %ax,%ax
+ 5fe:	66 90                	xchg   %ax,%ax
+
+00000600 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 600:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 601:	a1 44 0a 00 00       	mov    0xa44,%eax
+{
+ 606:	89 e5                	mov    %esp,%ebp
+ 608:	57                   	push   %edi
+ 609:	56                   	push   %esi
+ 60a:	53                   	push   %ebx
+ 60b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 60e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 618:	39 c8                	cmp    %ecx,%eax
+ 61a:	8b 10                	mov    (%eax),%edx
+ 61c:	73 32                	jae    650 <free+0x50>
+ 61e:	39 d1                	cmp    %edx,%ecx
+ 620:	72 04                	jb     626 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 622:	39 d0                	cmp    %edx,%eax
+ 624:	72 32                	jb     658 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 626:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 629:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62c:	39 fa                	cmp    %edi,%edx
+ 62e:	74 30                	je     660 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 630:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 633:	8b 50 04             	mov    0x4(%eax),%edx
+ 636:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 639:	39 f1                	cmp    %esi,%ecx
+ 63b:	74 3a                	je     677 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 63d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 63f:	a3 44 0a 00 00       	mov    %eax,0xa44
+}
+ 644:	5b                   	pop    %ebx
+ 645:	5e                   	pop    %esi
+ 646:	5f                   	pop    %edi
+ 647:	5d                   	pop    %ebp
+ 648:	c3                   	ret    
+ 649:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 650:	39 d0                	cmp    %edx,%eax
+ 652:	72 04                	jb     658 <free+0x58>
+ 654:	39 d1                	cmp    %edx,%ecx
+ 656:	72 ce                	jb     626 <free+0x26>
+{
+ 658:	89 d0                	mov    %edx,%eax
+ 65a:	eb bc                	jmp    618 <free+0x18>
+ 65c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 660:	03 72 04             	add    0x4(%edx),%esi
+ 663:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 666:	8b 10                	mov    (%eax),%edx
+ 668:	8b 12                	mov    (%edx),%edx
+ 66a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 66d:	8b 50 04             	mov    0x4(%eax),%edx
+ 670:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 673:	39 f1                	cmp    %esi,%ecx
+ 675:	75 c6                	jne    63d <free+0x3d>
+    p->s.size += bp->s.size;
+ 677:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 67a:	a3 44 0a 00 00       	mov    %eax,0xa44
+    p->s.size += bp->s.size;
+ 67f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 682:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 685:	89 10                	mov    %edx,(%eax)
+}
+ 687:	5b                   	pop    %ebx
+ 688:	5e                   	pop    %esi
+ 689:	5f                   	pop    %edi
+ 68a:	5d                   	pop    %ebp
+ 68b:	c3                   	ret    
+ 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000690 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 690:	55                   	push   %ebp
+ 691:	89 e5                	mov    %esp,%ebp
+ 693:	57                   	push   %edi
+ 694:	56                   	push   %esi
+ 695:	53                   	push   %ebx
+ 696:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 699:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 69c:	8b 15 44 0a 00 00    	mov    0xa44,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6a2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6a5:	c1 ef 03             	shr    $0x3,%edi
+ 6a8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6ab:	85 d2                	test   %edx,%edx
+ 6ad:	0f 84 9d 00 00 00    	je     750 <malloc+0xc0>
+ 6b3:	8b 02                	mov    (%edx),%eax
+ 6b5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 6b8:	39 cf                	cmp    %ecx,%edi
+ 6ba:	76 6c                	jbe    728 <malloc+0x98>
+ 6bc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6c2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6c7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ca:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6d1:	eb 0e                	jmp    6e1 <malloc+0x51>
+ 6d3:	90                   	nop
+ 6d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6da:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dd:	39 f9                	cmp    %edi,%ecx
+ 6df:	73 47                	jae    728 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6e1:	39 05 44 0a 00 00    	cmp    %eax,0xa44
+ 6e7:	89 c2                	mov    %eax,%edx
+ 6e9:	75 ed                	jne    6d8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6eb:	83 ec 0c             	sub    $0xc,%esp
+ 6ee:	56                   	push   %esi
+ 6ef:	e8 56 fc ff ff       	call   34a <sbrk>
+  if(p == (char*)-1)
+ 6f4:	83 c4 10             	add    $0x10,%esp
+ 6f7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6fa:	74 1c                	je     718 <malloc+0x88>
+  hp->s.size = nu;
+ 6fc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6ff:	83 ec 0c             	sub    $0xc,%esp
+ 702:	83 c0 08             	add    $0x8,%eax
+ 705:	50                   	push   %eax
+ 706:	e8 f5 fe ff ff       	call   600 <free>
+  return freep;
+ 70b:	8b 15 44 0a 00 00    	mov    0xa44,%edx
+      if((p = morecore(nunits)) == 0)
+ 711:	83 c4 10             	add    $0x10,%esp
+ 714:	85 d2                	test   %edx,%edx
+ 716:	75 c0                	jne    6d8 <malloc+0x48>
+        return 0;
+  }
+}
+ 718:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 71b:	31 c0                	xor    %eax,%eax
+}
+ 71d:	5b                   	pop    %ebx
+ 71e:	5e                   	pop    %esi
+ 71f:	5f                   	pop    %edi
+ 720:	5d                   	pop    %ebp
+ 721:	c3                   	ret    
+ 722:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 728:	39 cf                	cmp    %ecx,%edi
+ 72a:	74 54                	je     780 <malloc+0xf0>
+        p->s.size -= nunits;
+ 72c:	29 f9                	sub    %edi,%ecx
+ 72e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 731:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 734:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 737:	89 15 44 0a 00 00    	mov    %edx,0xa44
+}
+ 73d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 740:	83 c0 08             	add    $0x8,%eax
+}
+ 743:	5b                   	pop    %ebx
+ 744:	5e                   	pop    %esi
+ 745:	5f                   	pop    %edi
+ 746:	5d                   	pop    %ebp
+ 747:	c3                   	ret    
+ 748:	90                   	nop
+ 749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 750:	c7 05 44 0a 00 00 48 	movl   $0xa48,0xa44
+ 757:	0a 00 00 
+ 75a:	c7 05 48 0a 00 00 48 	movl   $0xa48,0xa48
+ 761:	0a 00 00 
+    base.s.size = 0;
+ 764:	b8 48 0a 00 00       	mov    $0xa48,%eax
+ 769:	c7 05 4c 0a 00 00 00 	movl   $0x0,0xa4c
+ 770:	00 00 00 
+ 773:	e9 44 ff ff ff       	jmp    6bc <malloc+0x2c>
+ 778:	90                   	nop
+ 779:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 780:	8b 08                	mov    (%eax),%ecx
+ 782:	89 0a                	mov    %ecx,(%edx)
+ 784:	eb b1                	jmp    737 <malloc+0xa7>
diff -ruN src-old/echo.d src/echo.d
--- src-old/echo.d	1970-01-01 00:00:00.000000000 +0000
+++ src/echo.d	2023-04-19 02:18:55.780148017 +0000
@@ -0,0 +1 @@
+echo.o: echo.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files src-old/echo.o and src/echo.o differ
diff -ruN src-old/echo.sym src/echo.sym
--- src-old/echo.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/echo.sym	2023-04-19 02:18:55.804150861 +0000
@@ -0,0 +1,61 @@
+00000000 .text
+00000788 .rodata
+000007ac .eh_frame
+00000a44 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 echo.c
+00000000 ulib.c
+00000000 printf.c
+00000390 printint
+00000798 digits.1052
+00000000 umalloc.c
+00000a44 freep
+00000a48 base
+00000070 strcpy
+00000430 printf
+00000290 memmove
+0000037a munmap
+0000030a mknod
+00000180 gets
+00000342 getpid
+00000690 malloc
+00000352 sleep
+0000036a kmfree
+00000372 mmap
+000002d2 pipe
+000002e2 write
+0000031a fstat
+000002f2 kill
+00000332 chdir
+000002fa exec
+000002ca wait
+000002da read
+00000312 unlink
+000002ba fork
+0000034a sbrk
+0000035a uptime
+00000a44 __bss_start
+00000120 memset
+00000000 main
+000000a0 strcmp
+0000033a dup
+00000200 stat
+00000a44 _edata
+00000a50 _end
+00000322 link
+00000362 kmalloc
+000002c2 exit
+00000250 atoi
+000000f0 strlen
+00000302 open
+00000140 strchr
+0000032a mkdir
+000002ea close
+00000600 free
Binary files src-old/entry.o and src/entry.o differ
Binary files src-old/entryother and src/entryother differ
diff -ruN src-old/entryother.asm src/entryother.asm
--- src-old/entryother.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/entryother.asm	2023-04-19 02:18:55.336095395 +0000
@@ -0,0 +1,125 @@
+
+bootblockother.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007000 <start>:
+# This code combines elements of bootasm.S and entry.S.
+
+.code16           
+.globl start
+start:
+  cli            
+    7000:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax
+    7001:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds
+    7003:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es
+    7005:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss
+    7007:	8e d0                	mov    %eax,%ss
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7009:	0f 01 16             	lgdtl  (%esi)
+    700c:	84 70 0f             	test   %dh,0xf(%eax)
+  movl    %cr0, %eax
+    700f:	20 c0                	and    %al,%al
+  orl     $CR0_PE, %eax
+    7011:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7015:	0f 22 c0             	mov    %eax,%cr0
+
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmpl    $(SEG_KCODE<<3), $(start32)
+    7018:	66 ea 20 70 00 00    	ljmpw  $0x0,$0x7020
+    701e:	08 00                	or     %al,(%eax)
+
+00007020 <start32>:
+
+//PAGEBREAK!
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7020:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7024:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7026:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7028:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    702a:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    702e:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7030:	8e e8                	mov    %eax,%gs
+
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+    7032:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+    7035:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+    7038:	0f 22 e0             	mov    %eax,%cr4
+  # Use entrypgdir as our initial page table
+  movl    (start-12), %eax
+    703b:	a1 f4 6f 00 00       	mov    0x6ff4,%eax
+  movl    %eax, %cr3
+    7040:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+    7043:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
+    7046:	0d 01 00 01 80       	or     $0x80010001,%eax
+  movl    %eax, %cr0
+    704b:	0f 22 c0             	mov    %eax,%cr0
+
+  # Switch to the stack allocated by startothers()
+  movl    (start-4), %esp
+    704e:	8b 25 fc 6f 00 00    	mov    0x6ffc,%esp
+  # Call mpenter()
+  call	 *(start-8)
+    7054:	ff 15 f8 6f 00 00    	call   *0x6ff8
+
+  movw    $0x8a00, %ax
+    705a:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    705e:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7061:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax
+    7063:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7067:	66 ef                	out    %ax,(%dx)
+
+00007069 <spin>:
+spin:
+  jmp     spin
+    7069:	eb fe                	jmp    7069 <spin>
+    706b:	90                   	nop
+
+0000706c <gdt>:
+	...
+    7074:	ff                   	(bad)  
+    7075:	ff 00                	incl   (%eax)
+    7077:	00 00                	add    %al,(%eax)
+    7079:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7080:	00                   	.byte 0x0
+    7081:	92                   	xchg   %eax,%edx
+    7082:	cf                   	iret   
+	...
+
+00007084 <gdtdesc>:
+    7084:	17                   	pop    %ss
+    7085:	00 6c 70 00          	add    %ch,0x0(%eax,%esi,2)
+	...
diff -ruN src-old/entryother.d src/entryother.d
--- src-old/entryother.d	1970-01-01 00:00:00.000000000 +0000
+++ src/entryother.d	2023-04-19 02:18:55.316093024 +0000
@@ -0,0 +1 @@
+entryother.o: entryother.S asm.h memlayout.h mmu.h
Binary files src-old/entryother.o and src/entryother.o differ
diff -ruN src-old/exec.d src/exec.d
--- src-old/exec.d	1970-01-01 00:00:00.000000000 +0000
+++ src/exec.d	2023-04-19 02:18:53.707902069 +0000
@@ -0,0 +1,2 @@
+exec.o: exec.c /usr/include/stdc-predef.h types.h param.h memlayout.h \
+ mmu.h proc.h defs.h x86.h elf.h
Binary files src-old/exec.o and src/exec.o differ
diff -ruN src-old/file.d src/file.d
--- src-old/file.d	1970-01-01 00:00:00.000000000 +0000
+++ src/file.d	2023-04-19 02:18:53.763908733 +0000
@@ -0,0 +1,2 @@
+file.o: file.c /usr/include/stdc-predef.h types.h defs.h param.h fs.h \
+ spinlock.h sleeplock.h file.h
Binary files src-old/file.o and src/file.o differ
Binary files src-old/_five and src/_five differ
diff -ruN src-old/five.asm src/five.asm
--- src-old/five.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/five.asm	2023-04-19 02:18:57.616365142 +0000
@@ -0,0 +1,1324 @@
+
+_five:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+
+/*Testing whether address returned by anonymous mmap is page aligned.*/
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	83 ec 20             	sub    $0x20,%esp
+  int size = 200;
+  char *r1 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  14:	6a 00                	push   $0x0
+  16:	6a ff                	push   $0xffffffff
+  18:	6a 00                	push   $0x0
+  1a:	6a 00                	push   $0x0
+  1c:	68 c8 00 00 00       	push   $0xc8
+  21:	6a 00                	push   $0x0
+  23:	e8 2a 04 00 00       	call   452 <mmap>
+
+  char *r2 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  28:	83 c4 18             	add    $0x18,%esp
+  char *r1 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  2b:	89 c3                	mov    %eax,%ebx
+  char *r2 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  2d:	6a 00                	push   $0x0
+  2f:	6a ff                	push   $0xffffffff
+  31:	6a 00                	push   $0x0
+  33:	6a 00                	push   $0x0
+  35:	68 c8 00 00 00       	push   $0xc8
+  3a:	6a 00                	push   $0x0
+  3c:	e8 11 04 00 00       	call   452 <mmap>
+
+  char *r3 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  41:	83 c4 18             	add    $0x18,%esp
+  char *r2 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  44:	89 c6                	mov    %eax,%esi
+  char *r3 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  46:	6a 00                	push   $0x0
+  48:	6a ff                	push   $0xffffffff
+  4a:	6a 00                	push   $0x0
+  4c:	6a 00                	push   $0x0
+  4e:	68 c8 00 00 00       	push   $0xc8
+  53:	6a 00                	push   $0x0
+  55:	e8 f8 03 00 00       	call   452 <mmap>
+
+  int rem1 = ((int)r1 % PGSIZE);
+  5a:	89 da                	mov    %ebx,%edx
+  char *r3 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  5c:	89 c7                	mov    %eax,%edi
+  int rem2 = ((int)r2 % PGSIZE);
+  int rem3 = ((int)r3 % PGSIZE);
+
+  printf(1, "XV6_TEST_OUTPUT : rem1 = %d rem2 = %d rem3 = %d\n",rem1,rem2,rem3);
+  5e:	83 c4 14             	add    $0x14,%esp
+  int rem1 = ((int)r1 % PGSIZE);
+  61:	c1 fa 1f             	sar    $0x1f,%edx
+  64:	c1 ea 14             	shr    $0x14,%edx
+  67:	8d 04 13             	lea    (%ebx,%edx,1),%eax
+  6a:	25 ff 0f 00 00       	and    $0xfff,%eax
+  6f:	29 d0                	sub    %edx,%eax
+  int rem2 = ((int)r2 % PGSIZE);
+  71:	89 f2                	mov    %esi,%edx
+  73:	c1 fa 1f             	sar    $0x1f,%edx
+  printf(1, "XV6_TEST_OUTPUT : rem1 = %d rem2 = %d rem3 = %d\n",rem1,rem2,rem3);
+  76:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  int rem2 = ((int)r2 % PGSIZE);
+  79:	c1 ea 14             	shr    $0x14,%edx
+  7c:	8d 0c 16             	lea    (%esi,%edx,1),%ecx
+  7f:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
+  85:	29 d1                	sub    %edx,%ecx
+  int rem3 = ((int)r3 % PGSIZE);
+  87:	89 fa                	mov    %edi,%edx
+  89:	c1 fa 1f             	sar    $0x1f,%edx
+  int rem2 = ((int)r2 % PGSIZE);
+  8c:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+  int rem3 = ((int)r3 % PGSIZE);
+  8f:	c1 ea 14             	shr    $0x14,%edx
+  92:	8d 0c 17             	lea    (%edi,%edx,1),%ecx
+  95:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
+  9b:	29 d1                	sub    %edx,%ecx
+  printf(1, "XV6_TEST_OUTPUT : rem1 = %d rem2 = %d rem3 = %d\n",rem1,rem2,rem3);
+  9d:	51                   	push   %ecx
+  9e:	ff 75 e4             	pushl  -0x1c(%ebp)
+  a1:	50                   	push   %eax
+  a2:	68 68 08 00 00       	push   $0x868
+  a7:	6a 01                	push   $0x1
+  a9:	89 4d dc             	mov    %ecx,-0x24(%ebp)
+  ac:	e8 5f 04 00 00       	call   510 <printf>
+
+  if(rem1 != 0 || rem2 != 0 || rem3 != 0)
+  b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  b4:	0b 45 e4             	or     -0x1c(%ebp),%eax
+  b7:	83 c4 20             	add    $0x20,%esp
+  ba:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  bd:	09 c8                	or     %ecx,%eax
+  bf:	74 13                	je     d4 <main+0xd4>
+  {
+    printf(1, "XV6_TEST_OUTPUT : Address returned by mmap should be page aligned\n");
+  c1:	51                   	push   %ecx
+  c2:	51                   	push   %ecx
+  c3:	68 9c 08 00 00       	push   $0x89c
+  c8:	6a 01                	push   $0x1
+  ca:	e8 41 04 00 00       	call   510 <printf>
+    exit();
+  cf:	e8 ce 02 00 00       	call   3a2 <exit>
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : mmap good --> address returned is page aligned\n");
+  d4:	50                   	push   %eax
+  d5:	50                   	push   %eax
+  d6:	68 e0 08 00 00       	push   $0x8e0
+  db:	6a 01                	push   $0x1
+  dd:	e8 2e 04 00 00       	call   510 <printf>
+
+  int rv1 = munmap(r1, size);
+  e2:	58                   	pop    %eax
+  e3:	5a                   	pop    %edx
+  e4:	68 c8 00 00 00       	push   $0xc8
+  e9:	53                   	push   %ebx
+  ea:	e8 6b 03 00 00       	call   45a <munmap>
+  if (rv1 < 0) {
+  ef:	83 c4 10             	add    $0x10,%esp
+  f2:	85 c0                	test   %eax,%eax
+  f4:	78 3b                	js     131 <main+0x131>
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    exit();
+  }
+
+  int rv2 = munmap(r2, size);
+  f6:	51                   	push   %ecx
+  f7:	51                   	push   %ecx
+  f8:	68 c8 00 00 00       	push   $0xc8
+  fd:	56                   	push   %esi
+  fe:	e8 57 03 00 00       	call   45a <munmap>
+  if (rv2 < 0) {
+ 103:	83 c4 10             	add    $0x10,%esp
+ 106:	85 c0                	test   %eax,%eax
+ 108:	78 27                	js     131 <main+0x131>
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    exit();
+  }
+
+
+  int rv3 = munmap(r3, size);
+ 10a:	52                   	push   %edx
+ 10b:	52                   	push   %edx
+ 10c:	68 c8 00 00 00       	push   $0xc8
+ 111:	57                   	push   %edi
+ 112:	e8 43 03 00 00       	call   45a <munmap>
+  if (rv3 < 0) {
+ 117:	83 c4 10             	add    $0x10,%esp
+ 11a:	85 c0                	test   %eax,%eax
+ 11c:	78 13                	js     131 <main+0x131>
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    exit();
+  }
+  
+  printf(1, "XV6_TEST_OUTPUT : munmap good\n");
+ 11e:	50                   	push   %eax
+ 11f:	50                   	push   %eax
+ 120:	68 48 09 00 00       	push   $0x948
+ 125:	6a 01                	push   $0x1
+ 127:	e8 e4 03 00 00       	call   510 <printf>
+
+  exit();
+ 12c:	e8 71 02 00 00       	call   3a2 <exit>
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+ 131:	53                   	push   %ebx
+ 132:	53                   	push   %ebx
+ 133:	68 24 09 00 00       	push   $0x924
+ 138:	6a 01                	push   $0x1
+ 13a:	e8 d1 03 00 00       	call   510 <printf>
+    exit();
+ 13f:	e8 5e 02 00 00       	call   3a2 <exit>
+ 144:	66 90                	xchg   %ax,%ax
+ 146:	66 90                	xchg   %ax,%ax
+ 148:	66 90                	xchg   %ax,%ax
+ 14a:	66 90                	xchg   %ax,%ax
+ 14c:	66 90                	xchg   %ax,%ax
+ 14e:	66 90                	xchg   %ax,%ax
+
+00000150 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 15a:	89 c2                	mov    %eax,%edx
+ 15c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 160:	83 c1 01             	add    $0x1,%ecx
+ 163:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 167:	83 c2 01             	add    $0x1,%edx
+ 16a:	84 db                	test   %bl,%bl
+ 16c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 16f:	75 ef                	jne    160 <strcpy+0x10>
+    ;
+  return os;
+}
+ 171:	5b                   	pop    %ebx
+ 172:	5d                   	pop    %ebp
+ 173:	c3                   	ret    
+ 174:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 17a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000180 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	53                   	push   %ebx
+ 184:	8b 55 08             	mov    0x8(%ebp),%edx
+ 187:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 18a:	0f b6 02             	movzbl (%edx),%eax
+ 18d:	0f b6 19             	movzbl (%ecx),%ebx
+ 190:	84 c0                	test   %al,%al
+ 192:	75 1c                	jne    1b0 <strcmp+0x30>
+ 194:	eb 2a                	jmp    1c0 <strcmp+0x40>
+ 196:	8d 76 00             	lea    0x0(%esi),%esi
+ 199:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 1a0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1a3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 1a6:	83 c1 01             	add    $0x1,%ecx
+ 1a9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 1ac:	84 c0                	test   %al,%al
+ 1ae:	74 10                	je     1c0 <strcmp+0x40>
+ 1b0:	38 d8                	cmp    %bl,%al
+ 1b2:	74 ec                	je     1a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1b4:	29 d8                	sub    %ebx,%eax
+}
+ 1b6:	5b                   	pop    %ebx
+ 1b7:	5d                   	pop    %ebp
+ 1b8:	c3                   	ret    
+ 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1c2:	29 d8                	sub    %ebx,%eax
+}
+ 1c4:	5b                   	pop    %ebx
+ 1c5:	5d                   	pop    %ebp
+ 1c6:	c3                   	ret    
+ 1c7:	89 f6                	mov    %esi,%esi
+ 1c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1d6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 1d9:	74 15                	je     1f0 <strlen+0x20>
+ 1db:	31 d2                	xor    %edx,%edx
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1e0:	83 c2 01             	add    $0x1,%edx
+ 1e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1e7:	89 d0                	mov    %edx,%eax
+ 1e9:	75 f5                	jne    1e0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1eb:	5d                   	pop    %ebp
+ 1ec:	c3                   	ret    
+ 1ed:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 1f0:	31 c0                	xor    %eax,%eax
+}
+ 1f2:	5d                   	pop    %ebp
+ 1f3:	c3                   	ret    
+ 1f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000200 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	57                   	push   %edi
+ 204:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 207:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 20a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 20d:	89 d7                	mov    %edx,%edi
+ 20f:	fc                   	cld    
+ 210:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 212:	89 d0                	mov    %edx,%eax
+ 214:	5f                   	pop    %edi
+ 215:	5d                   	pop    %ebp
+ 216:	c3                   	ret    
+ 217:	89 f6                	mov    %esi,%esi
+ 219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000220 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	53                   	push   %ebx
+ 224:	8b 45 08             	mov    0x8(%ebp),%eax
+ 227:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 22a:	0f b6 10             	movzbl (%eax),%edx
+ 22d:	84 d2                	test   %dl,%dl
+ 22f:	74 1d                	je     24e <strchr+0x2e>
+    if(*s == c)
+ 231:	38 d3                	cmp    %dl,%bl
+ 233:	89 d9                	mov    %ebx,%ecx
+ 235:	75 0d                	jne    244 <strchr+0x24>
+ 237:	eb 17                	jmp    250 <strchr+0x30>
+ 239:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 240:	38 ca                	cmp    %cl,%dl
+ 242:	74 0c                	je     250 <strchr+0x30>
+  for(; *s; s++)
+ 244:	83 c0 01             	add    $0x1,%eax
+ 247:	0f b6 10             	movzbl (%eax),%edx
+ 24a:	84 d2                	test   %dl,%dl
+ 24c:	75 f2                	jne    240 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 24e:	31 c0                	xor    %eax,%eax
+}
+ 250:	5b                   	pop    %ebx
+ 251:	5d                   	pop    %ebp
+ 252:	c3                   	ret    
+ 253:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000260 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	57                   	push   %edi
+ 264:	56                   	push   %esi
+ 265:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 266:	31 f6                	xor    %esi,%esi
+ 268:	89 f3                	mov    %esi,%ebx
+{
+ 26a:	83 ec 1c             	sub    $0x1c,%esp
+ 26d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 270:	eb 2f                	jmp    2a1 <gets+0x41>
+ 272:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 278:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 27b:	83 ec 04             	sub    $0x4,%esp
+ 27e:	6a 01                	push   $0x1
+ 280:	50                   	push   %eax
+ 281:	6a 00                	push   $0x0
+ 283:	e8 32 01 00 00       	call   3ba <read>
+    if(cc < 1)
+ 288:	83 c4 10             	add    $0x10,%esp
+ 28b:	85 c0                	test   %eax,%eax
+ 28d:	7e 1c                	jle    2ab <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 28f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 293:	83 c7 01             	add    $0x1,%edi
+ 296:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 299:	3c 0a                	cmp    $0xa,%al
+ 29b:	74 23                	je     2c0 <gets+0x60>
+ 29d:	3c 0d                	cmp    $0xd,%al
+ 29f:	74 1f                	je     2c0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 2a1:	83 c3 01             	add    $0x1,%ebx
+ 2a4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2a7:	89 fe                	mov    %edi,%esi
+ 2a9:	7c cd                	jl     278 <gets+0x18>
+ 2ab:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2b0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2b6:	5b                   	pop    %ebx
+ 2b7:	5e                   	pop    %esi
+ 2b8:	5f                   	pop    %edi
+ 2b9:	5d                   	pop    %ebp
+ 2ba:	c3                   	ret    
+ 2bb:	90                   	nop
+ 2bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2c0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2c3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2c6:	01 de                	add    %ebx,%esi
+ 2c8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2ca:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d0:	5b                   	pop    %ebx
+ 2d1:	5e                   	pop    %esi
+ 2d2:	5f                   	pop    %edi
+ 2d3:	5d                   	pop    %ebp
+ 2d4:	c3                   	ret    
+ 2d5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2e0:	55                   	push   %ebp
+ 2e1:	89 e5                	mov    %esp,%ebp
+ 2e3:	56                   	push   %esi
+ 2e4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2e5:	83 ec 08             	sub    $0x8,%esp
+ 2e8:	6a 00                	push   $0x0
+ 2ea:	ff 75 08             	pushl  0x8(%ebp)
+ 2ed:	e8 f0 00 00 00       	call   3e2 <open>
+  if(fd < 0)
+ 2f2:	83 c4 10             	add    $0x10,%esp
+ 2f5:	85 c0                	test   %eax,%eax
+ 2f7:	78 27                	js     320 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2f9:	83 ec 08             	sub    $0x8,%esp
+ 2fc:	ff 75 0c             	pushl  0xc(%ebp)
+ 2ff:	89 c3                	mov    %eax,%ebx
+ 301:	50                   	push   %eax
+ 302:	e8 f3 00 00 00       	call   3fa <fstat>
+  close(fd);
+ 307:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 30a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 30c:	e8 b9 00 00 00       	call   3ca <close>
+  return r;
+ 311:	83 c4 10             	add    $0x10,%esp
+}
+ 314:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 317:	89 f0                	mov    %esi,%eax
+ 319:	5b                   	pop    %ebx
+ 31a:	5e                   	pop    %esi
+ 31b:	5d                   	pop    %ebp
+ 31c:	c3                   	ret    
+ 31d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 320:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 325:	eb ed                	jmp    314 <stat+0x34>
+ 327:	89 f6                	mov    %esi,%esi
+ 329:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000330 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	53                   	push   %ebx
+ 334:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 337:	0f be 11             	movsbl (%ecx),%edx
+ 33a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 33d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 33f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 344:	77 1f                	ja     365 <atoi+0x35>
+ 346:	8d 76 00             	lea    0x0(%esi),%esi
+ 349:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 350:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 353:	83 c1 01             	add    $0x1,%ecx
+ 356:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 35a:	0f be 11             	movsbl (%ecx),%edx
+ 35d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 360:	80 fb 09             	cmp    $0x9,%bl
+ 363:	76 eb                	jbe    350 <atoi+0x20>
+  return n;
+}
+ 365:	5b                   	pop    %ebx
+ 366:	5d                   	pop    %ebp
+ 367:	c3                   	ret    
+ 368:	90                   	nop
+ 369:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000370 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	56                   	push   %esi
+ 374:	53                   	push   %ebx
+ 375:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 378:	8b 45 08             	mov    0x8(%ebp),%eax
+ 37b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 37e:	85 db                	test   %ebx,%ebx
+ 380:	7e 14                	jle    396 <memmove+0x26>
+ 382:	31 d2                	xor    %edx,%edx
+ 384:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 388:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 38c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 38f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 392:	39 d3                	cmp    %edx,%ebx
+ 394:	75 f2                	jne    388 <memmove+0x18>
+  return vdst;
+}
+ 396:	5b                   	pop    %ebx
+ 397:	5e                   	pop    %esi
+ 398:	5d                   	pop    %ebp
+ 399:	c3                   	ret    
+
+0000039a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 39a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <exit>:
+SYSCALL(exit)
+ 3a2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <wait>:
+SYSCALL(wait)
+ 3aa:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <pipe>:
+SYSCALL(pipe)
+ 3b2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <read>:
+SYSCALL(read)
+ 3ba:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <write>:
+SYSCALL(write)
+ 3c2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <close>:
+SYSCALL(close)
+ 3ca:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <kill>:
+SYSCALL(kill)
+ 3d2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <exec>:
+SYSCALL(exec)
+ 3da:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <open>:
+SYSCALL(open)
+ 3e2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <mknod>:
+SYSCALL(mknod)
+ 3ea:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <unlink>:
+SYSCALL(unlink)
+ 3f2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <fstat>:
+SYSCALL(fstat)
+ 3fa:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <link>:
+SYSCALL(link)
+ 402:	b8 13 00 00 00       	mov    $0x13,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <mkdir>:
+SYSCALL(mkdir)
+ 40a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <chdir>:
+SYSCALL(chdir)
+ 412:	b8 09 00 00 00       	mov    $0x9,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+
+0000041a <dup>:
+SYSCALL(dup)
+ 41a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+
+00000422 <getpid>:
+SYSCALL(getpid)
+ 422:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 427:	cd 40                	int    $0x40
+ 429:	c3                   	ret    
+
+0000042a <sbrk>:
+SYSCALL(sbrk)
+ 42a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 42f:	cd 40                	int    $0x40
+ 431:	c3                   	ret    
+
+00000432 <sleep>:
+SYSCALL(sleep)
+ 432:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 437:	cd 40                	int    $0x40
+ 439:	c3                   	ret    
+
+0000043a <uptime>:
+SYSCALL(uptime)
+ 43a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 43f:	cd 40                	int    $0x40
+ 441:	c3                   	ret    
+
+00000442 <kmalloc>:
+SYSCALL(kmalloc)
+ 442:	b8 16 00 00 00       	mov    $0x16,%eax
+ 447:	cd 40                	int    $0x40
+ 449:	c3                   	ret    
+
+0000044a <kmfree>:
+SYSCALL(kmfree) 
+ 44a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 44f:	cd 40                	int    $0x40
+ 451:	c3                   	ret    
+
+00000452 <mmap>:
+SYSCALL(mmap)
+ 452:	b8 18 00 00 00       	mov    $0x18,%eax
+ 457:	cd 40                	int    $0x40
+ 459:	c3                   	ret    
+
+0000045a <munmap>:
+ 45a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 45f:	cd 40                	int    $0x40
+ 461:	c3                   	ret    
+ 462:	66 90                	xchg   %ax,%ax
+ 464:	66 90                	xchg   %ax,%ax
+ 466:	66 90                	xchg   %ax,%ax
+ 468:	66 90                	xchg   %ax,%ax
+ 46a:	66 90                	xchg   %ax,%ax
+ 46c:	66 90                	xchg   %ax,%ax
+ 46e:	66 90                	xchg   %ax,%ax
+
+00000470 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 470:	55                   	push   %ebp
+ 471:	89 e5                	mov    %esp,%ebp
+ 473:	57                   	push   %edi
+ 474:	56                   	push   %esi
+ 475:	53                   	push   %ebx
+ 476:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 479:	85 d2                	test   %edx,%edx
+{
+ 47b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 47e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 480:	79 76                	jns    4f8 <printint+0x88>
+ 482:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 486:	74 70                	je     4f8 <printint+0x88>
+    x = -xx;
+ 488:	f7 d8                	neg    %eax
+    neg = 1;
+ 48a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 491:	31 f6                	xor    %esi,%esi
+ 493:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 496:	eb 0a                	jmp    4a2 <printint+0x32>
+ 498:	90                   	nop
+ 499:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4a0:	89 fe                	mov    %edi,%esi
+ 4a2:	31 d2                	xor    %edx,%edx
+ 4a4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 4a7:	f7 f1                	div    %ecx
+ 4a9:	0f b6 92 70 09 00 00 	movzbl 0x970(%edx),%edx
+  }while((x /= base) != 0);
+ 4b0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 4b2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 4b5:	75 e9                	jne    4a0 <printint+0x30>
+  if(neg)
+ 4b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 4ba:	85 c0                	test   %eax,%eax
+ 4bc:	74 08                	je     4c6 <printint+0x56>
+    buf[i++] = '-';
+ 4be:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 4c3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 4c6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 4ca:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 4cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 4d0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 4d3:	83 ec 04             	sub    $0x4,%esp
+ 4d6:	83 ee 01             	sub    $0x1,%esi
+ 4d9:	6a 01                	push   $0x1
+ 4db:	53                   	push   %ebx
+ 4dc:	57                   	push   %edi
+ 4dd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 4e0:	e8 dd fe ff ff       	call   3c2 <write>
+
+  while(--i >= 0)
+ 4e5:	83 c4 10             	add    $0x10,%esp
+ 4e8:	39 de                	cmp    %ebx,%esi
+ 4ea:	75 e4                	jne    4d0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 4ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ef:	5b                   	pop    %ebx
+ 4f0:	5e                   	pop    %esi
+ 4f1:	5f                   	pop    %edi
+ 4f2:	5d                   	pop    %ebp
+ 4f3:	c3                   	ret    
+ 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4f8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 4ff:	eb 90                	jmp    491 <printint+0x21>
+ 501:	eb 0d                	jmp    510 <printf>
+ 503:	90                   	nop
+ 504:	90                   	nop
+ 505:	90                   	nop
+ 506:	90                   	nop
+ 507:	90                   	nop
+ 508:	90                   	nop
+ 509:	90                   	nop
+ 50a:	90                   	nop
+ 50b:	90                   	nop
+ 50c:	90                   	nop
+ 50d:	90                   	nop
+ 50e:	90                   	nop
+ 50f:	90                   	nop
+
+00000510 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 510:	55                   	push   %ebp
+ 511:	89 e5                	mov    %esp,%ebp
+ 513:	57                   	push   %edi
+ 514:	56                   	push   %esi
+ 515:	53                   	push   %ebx
+ 516:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 519:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 51c:	0f b6 1e             	movzbl (%esi),%ebx
+ 51f:	84 db                	test   %bl,%bl
+ 521:	0f 84 b3 00 00 00    	je     5da <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 527:	8d 45 10             	lea    0x10(%ebp),%eax
+ 52a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 52d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 52f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 532:	eb 2f                	jmp    563 <printf+0x53>
+ 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 538:	83 f8 25             	cmp    $0x25,%eax
+ 53b:	0f 84 a7 00 00 00    	je     5e8 <printf+0xd8>
+  write(fd, &c, 1);
+ 541:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 544:	83 ec 04             	sub    $0x4,%esp
+ 547:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 54a:	6a 01                	push   $0x1
+ 54c:	50                   	push   %eax
+ 54d:	ff 75 08             	pushl  0x8(%ebp)
+ 550:	e8 6d fe ff ff       	call   3c2 <write>
+ 555:	83 c4 10             	add    $0x10,%esp
+ 558:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 55b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 55f:	84 db                	test   %bl,%bl
+ 561:	74 77                	je     5da <printf+0xca>
+    if(state == 0){
+ 563:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 565:	0f be cb             	movsbl %bl,%ecx
+ 568:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 56b:	74 cb                	je     538 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 56d:	83 ff 25             	cmp    $0x25,%edi
+ 570:	75 e6                	jne    558 <printf+0x48>
+      if(c == 'd'){
+ 572:	83 f8 64             	cmp    $0x64,%eax
+ 575:	0f 84 05 01 00 00    	je     680 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 57b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 581:	83 f9 70             	cmp    $0x70,%ecx
+ 584:	74 72                	je     5f8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 586:	83 f8 73             	cmp    $0x73,%eax
+ 589:	0f 84 99 00 00 00    	je     628 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 58f:	83 f8 63             	cmp    $0x63,%eax
+ 592:	0f 84 08 01 00 00    	je     6a0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 598:	83 f8 25             	cmp    $0x25,%eax
+ 59b:	0f 84 ef 00 00 00    	je     690 <printf+0x180>
+  write(fd, &c, 1);
+ 5a1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 5a4:	83 ec 04             	sub    $0x4,%esp
+ 5a7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5ab:	6a 01                	push   $0x1
+ 5ad:	50                   	push   %eax
+ 5ae:	ff 75 08             	pushl  0x8(%ebp)
+ 5b1:	e8 0c fe ff ff       	call   3c2 <write>
+ 5b6:	83 c4 0c             	add    $0xc,%esp
+ 5b9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 5bc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 5bf:	6a 01                	push   $0x1
+ 5c1:	50                   	push   %eax
+ 5c2:	ff 75 08             	pushl  0x8(%ebp)
+ 5c5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5c8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 5ca:	e8 f3 fd ff ff       	call   3c2 <write>
+  for(i = 0; fmt[i]; i++){
+ 5cf:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 5d3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 5d6:	84 db                	test   %bl,%bl
+ 5d8:	75 89                	jne    563 <printf+0x53>
+    }
+  }
+}
+ 5da:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5dd:	5b                   	pop    %ebx
+ 5de:	5e                   	pop    %esi
+ 5df:	5f                   	pop    %edi
+ 5e0:	5d                   	pop    %ebp
+ 5e1:	c3                   	ret    
+ 5e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 5e8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 5ed:	e9 66 ff ff ff       	jmp    558 <printf+0x48>
+ 5f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 5f8:	83 ec 0c             	sub    $0xc,%esp
+ 5fb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 600:	6a 00                	push   $0x0
+ 602:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 605:	8b 45 08             	mov    0x8(%ebp),%eax
+ 608:	8b 17                	mov    (%edi),%edx
+ 60a:	e8 61 fe ff ff       	call   470 <printint>
+        ap++;
+ 60f:	89 f8                	mov    %edi,%eax
+ 611:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 614:	31 ff                	xor    %edi,%edi
+        ap++;
+ 616:	83 c0 04             	add    $0x4,%eax
+ 619:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 61c:	e9 37 ff ff ff       	jmp    558 <printf+0x48>
+ 621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 628:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 62b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 62d:	83 c0 04             	add    $0x4,%eax
+ 630:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 633:	85 c9                	test   %ecx,%ecx
+ 635:	0f 84 8e 00 00 00    	je     6c9 <printf+0x1b9>
+        while(*s != 0){
+ 63b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 63e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 640:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 642:	84 c0                	test   %al,%al
+ 644:	0f 84 0e ff ff ff    	je     558 <printf+0x48>
+ 64a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 64d:	89 de                	mov    %ebx,%esi
+ 64f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 652:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 655:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 658:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 65b:	83 c6 01             	add    $0x1,%esi
+ 65e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 661:	6a 01                	push   $0x1
+ 663:	57                   	push   %edi
+ 664:	53                   	push   %ebx
+ 665:	e8 58 fd ff ff       	call   3c2 <write>
+        while(*s != 0){
+ 66a:	0f b6 06             	movzbl (%esi),%eax
+ 66d:	83 c4 10             	add    $0x10,%esp
+ 670:	84 c0                	test   %al,%al
+ 672:	75 e4                	jne    658 <printf+0x148>
+ 674:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 677:	31 ff                	xor    %edi,%edi
+ 679:	e9 da fe ff ff       	jmp    558 <printf+0x48>
+ 67e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 680:	83 ec 0c             	sub    $0xc,%esp
+ 683:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 688:	6a 01                	push   $0x1
+ 68a:	e9 73 ff ff ff       	jmp    602 <printf+0xf2>
+ 68f:	90                   	nop
+  write(fd, &c, 1);
+ 690:	83 ec 04             	sub    $0x4,%esp
+ 693:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 696:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 699:	6a 01                	push   $0x1
+ 69b:	e9 21 ff ff ff       	jmp    5c1 <printf+0xb1>
+        putc(fd, *ap);
+ 6a0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 6a3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 6a6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 6a8:	6a 01                	push   $0x1
+        ap++;
+ 6aa:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 6ad:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 6b0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 6b3:	50                   	push   %eax
+ 6b4:	ff 75 08             	pushl  0x8(%ebp)
+ 6b7:	e8 06 fd ff ff       	call   3c2 <write>
+        ap++;
+ 6bc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 6bf:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6c2:	31 ff                	xor    %edi,%edi
+ 6c4:	e9 8f fe ff ff       	jmp    558 <printf+0x48>
+          s = "(null)";
+ 6c9:	bb 68 09 00 00       	mov    $0x968,%ebx
+        while(*s != 0){
+ 6ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6d3:	e9 72 ff ff ff       	jmp    64a <printf+0x13a>
+ 6d8:	66 90                	xchg   %ax,%ax
+ 6da:	66 90                	xchg   %ax,%ax
+ 6dc:	66 90                	xchg   %ax,%ax
+ 6de:	66 90                	xchg   %ax,%ax
+
+000006e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6e0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6e1:	a1 20 0c 00 00       	mov    0xc20,%eax
+{
+ 6e6:	89 e5                	mov    %esp,%ebp
+ 6e8:	57                   	push   %edi
+ 6e9:	56                   	push   %esi
+ 6ea:	53                   	push   %ebx
+ 6eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 6ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6f8:	39 c8                	cmp    %ecx,%eax
+ 6fa:	8b 10                	mov    (%eax),%edx
+ 6fc:	73 32                	jae    730 <free+0x50>
+ 6fe:	39 d1                	cmp    %edx,%ecx
+ 700:	72 04                	jb     706 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 702:	39 d0                	cmp    %edx,%eax
+ 704:	72 32                	jb     738 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 706:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 709:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 70c:	39 fa                	cmp    %edi,%edx
+ 70e:	74 30                	je     740 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 710:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 713:	8b 50 04             	mov    0x4(%eax),%edx
+ 716:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 719:	39 f1                	cmp    %esi,%ecx
+ 71b:	74 3a                	je     757 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 71d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 71f:	a3 20 0c 00 00       	mov    %eax,0xc20
+}
+ 724:	5b                   	pop    %ebx
+ 725:	5e                   	pop    %esi
+ 726:	5f                   	pop    %edi
+ 727:	5d                   	pop    %ebp
+ 728:	c3                   	ret    
+ 729:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 730:	39 d0                	cmp    %edx,%eax
+ 732:	72 04                	jb     738 <free+0x58>
+ 734:	39 d1                	cmp    %edx,%ecx
+ 736:	72 ce                	jb     706 <free+0x26>
+{
+ 738:	89 d0                	mov    %edx,%eax
+ 73a:	eb bc                	jmp    6f8 <free+0x18>
+ 73c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 740:	03 72 04             	add    0x4(%edx),%esi
+ 743:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 746:	8b 10                	mov    (%eax),%edx
+ 748:	8b 12                	mov    (%edx),%edx
+ 74a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 74d:	8b 50 04             	mov    0x4(%eax),%edx
+ 750:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 753:	39 f1                	cmp    %esi,%ecx
+ 755:	75 c6                	jne    71d <free+0x3d>
+    p->s.size += bp->s.size;
+ 757:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 75a:	a3 20 0c 00 00       	mov    %eax,0xc20
+    p->s.size += bp->s.size;
+ 75f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 762:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 765:	89 10                	mov    %edx,(%eax)
+}
+ 767:	5b                   	pop    %ebx
+ 768:	5e                   	pop    %esi
+ 769:	5f                   	pop    %edi
+ 76a:	5d                   	pop    %ebp
+ 76b:	c3                   	ret    
+ 76c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000770 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 770:	55                   	push   %ebp
+ 771:	89 e5                	mov    %esp,%ebp
+ 773:	57                   	push   %edi
+ 774:	56                   	push   %esi
+ 775:	53                   	push   %ebx
+ 776:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 779:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 77c:	8b 15 20 0c 00 00    	mov    0xc20,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 782:	8d 78 07             	lea    0x7(%eax),%edi
+ 785:	c1 ef 03             	shr    $0x3,%edi
+ 788:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 78b:	85 d2                	test   %edx,%edx
+ 78d:	0f 84 9d 00 00 00    	je     830 <malloc+0xc0>
+ 793:	8b 02                	mov    (%edx),%eax
+ 795:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 798:	39 cf                	cmp    %ecx,%edi
+ 79a:	76 6c                	jbe    808 <malloc+0x98>
+ 79c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 7a2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7a7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 7aa:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 7b1:	eb 0e                	jmp    7c1 <malloc+0x51>
+ 7b3:	90                   	nop
+ 7b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7b8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 7ba:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7bd:	39 f9                	cmp    %edi,%ecx
+ 7bf:	73 47                	jae    808 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7c1:	39 05 20 0c 00 00    	cmp    %eax,0xc20
+ 7c7:	89 c2                	mov    %eax,%edx
+ 7c9:	75 ed                	jne    7b8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 7cb:	83 ec 0c             	sub    $0xc,%esp
+ 7ce:	56                   	push   %esi
+ 7cf:	e8 56 fc ff ff       	call   42a <sbrk>
+  if(p == (char*)-1)
+ 7d4:	83 c4 10             	add    $0x10,%esp
+ 7d7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7da:	74 1c                	je     7f8 <malloc+0x88>
+  hp->s.size = nu;
+ 7dc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7df:	83 ec 0c             	sub    $0xc,%esp
+ 7e2:	83 c0 08             	add    $0x8,%eax
+ 7e5:	50                   	push   %eax
+ 7e6:	e8 f5 fe ff ff       	call   6e0 <free>
+  return freep;
+ 7eb:	8b 15 20 0c 00 00    	mov    0xc20,%edx
+      if((p = morecore(nunits)) == 0)
+ 7f1:	83 c4 10             	add    $0x10,%esp
+ 7f4:	85 d2                	test   %edx,%edx
+ 7f6:	75 c0                	jne    7b8 <malloc+0x48>
+        return 0;
+  }
+}
+ 7f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7fb:	31 c0                	xor    %eax,%eax
+}
+ 7fd:	5b                   	pop    %ebx
+ 7fe:	5e                   	pop    %esi
+ 7ff:	5f                   	pop    %edi
+ 800:	5d                   	pop    %ebp
+ 801:	c3                   	ret    
+ 802:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 808:	39 cf                	cmp    %ecx,%edi
+ 80a:	74 54                	je     860 <malloc+0xf0>
+        p->s.size -= nunits;
+ 80c:	29 f9                	sub    %edi,%ecx
+ 80e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 811:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 814:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 817:	89 15 20 0c 00 00    	mov    %edx,0xc20
+}
+ 81d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 820:	83 c0 08             	add    $0x8,%eax
+}
+ 823:	5b                   	pop    %ebx
+ 824:	5e                   	pop    %esi
+ 825:	5f                   	pop    %edi
+ 826:	5d                   	pop    %ebp
+ 827:	c3                   	ret    
+ 828:	90                   	nop
+ 829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 830:	c7 05 20 0c 00 00 24 	movl   $0xc24,0xc20
+ 837:	0c 00 00 
+ 83a:	c7 05 24 0c 00 00 24 	movl   $0xc24,0xc24
+ 841:	0c 00 00 
+    base.s.size = 0;
+ 844:	b8 24 0c 00 00       	mov    $0xc24,%eax
+ 849:	c7 05 28 0c 00 00 00 	movl   $0x0,0xc28
+ 850:	00 00 00 
+ 853:	e9 44 ff ff ff       	jmp    79c <malloc+0x2c>
+ 858:	90                   	nop
+ 859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 860:	8b 08                	mov    (%eax),%ecx
+ 862:	89 0a                	mov    %ecx,(%edx)
+ 864:	eb b1                	jmp    817 <malloc+0xa7>
diff -ruN src-old/five.c src/five.c
--- src-old/five.c	1970-01-01 00:00:00.000000000 +0000
+++ src/five.c	2023-04-19 02:17:16.010997630 +0000
@@ -0,0 +1,60 @@
+#include "param.h"
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+#include "mmu.h"
+
+
+/*Testing whether address returned by anonymous mmap is page aligned.*/
+int
+main(int argc, char *argv[])
+{
+  int size = 200;
+  char *r1 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+
+  char *r2 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+
+  char *r3 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+
+  int rem1 = ((int)r1 % PGSIZE);
+  int rem2 = ((int)r2 % PGSIZE);
+  int rem3 = ((int)r3 % PGSIZE);
+
+  printf(1, "XV6_TEST_OUTPUT : rem1 = %d rem2 = %d rem3 = %d\n",rem1,rem2,rem3);
+
+  if(rem1 != 0 || rem2 != 0 || rem3 != 0)
+  {
+    printf(1, "XV6_TEST_OUTPUT : Address returned by mmap should be page aligned\n");
+    exit();
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : mmap good --> address returned is page aligned\n");
+
+  int rv1 = munmap(r1, size);
+  if (rv1 < 0) {
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    exit();
+  }
+
+  int rv2 = munmap(r2, size);
+  if (rv2 < 0) {
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    exit();
+  }
+
+
+  int rv3 = munmap(r3, size);
+  if (rv3 < 0) {
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    exit();
+  }
+  
+  printf(1, "XV6_TEST_OUTPUT : munmap good\n");
+
+  exit();
+}
diff -ruN src-old/five.d src/five.d
--- src-old/five.d	1970-01-01 00:00:00.000000000 +0000
+++ src/five.d	2023-04-19 02:18:57.592362308 +0000
@@ -0,0 +1,2 @@
+five.o: five.c /usr/include/stdc-predef.h param.h types.h stat.h user.h \
+ fs.h fcntl.h syscall.h traps.h memlayout.h mmu.h
Binary files src-old/five.o and src/five.o differ
diff -ruN src-old/five.sym src/five.sym
--- src-old/five.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/five.sym	2023-04-19 02:18:57.624366085 +0000
@@ -0,0 +1,61 @@
+00000000 .text
+00000868 .rodata
+00000984 .eh_frame
+00000c20 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 five.c
+00000000 ulib.c
+00000000 printf.c
+00000470 printint
+00000970 digits.1052
+00000000 umalloc.c
+00000c20 freep
+00000c24 base
+00000150 strcpy
+00000510 printf
+00000370 memmove
+0000045a munmap
+000003ea mknod
+00000260 gets
+00000422 getpid
+00000770 malloc
+00000432 sleep
+0000044a kmfree
+00000452 mmap
+000003b2 pipe
+000003c2 write
+000003fa fstat
+000003d2 kill
+00000412 chdir
+000003da exec
+000003aa wait
+000003ba read
+000003f2 unlink
+0000039a fork
+0000042a sbrk
+0000043a uptime
+00000c20 __bss_start
+00000200 memset
+00000000 main
+00000180 strcmp
+0000041a dup
+000002e0 stat
+00000c20 _edata
+00000c2c _end
+00000402 link
+00000442 kmalloc
+000003a2 exit
+00000330 atoi
+000001d0 strlen
+000003e2 open
+00000220 strchr
+0000040a mkdir
+000003ca close
+000006e0 free
Binary files src-old/_forktest and src/_forktest differ
diff -ruN src-old/forktest.asm src/forktest.asm
--- src-old/forktest.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/forktest.asm	2023-04-19 02:18:55.864157973 +0000
@@ -0,0 +1,931 @@
+
+_forktest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "fork test OK\n");
+}
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  forktest();
+  11:	e8 3a 00 00 00       	call   50 <forktest>
+  exit();
+  16:	e8 87 03 00 00       	call   3a2 <exit>
+  1b:	66 90                	xchg   %ax,%ax
+  1d:	66 90                	xchg   %ax,%ax
+  1f:	90                   	nop
+
+00000020 <printf>:
+{
+  20:	55                   	push   %ebp
+  21:	89 e5                	mov    %esp,%ebp
+  23:	53                   	push   %ebx
+  24:	83 ec 10             	sub    $0x10,%esp
+  27:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  write(fd, s, strlen(s));
+  2a:	53                   	push   %ebx
+  2b:	e8 a0 01 00 00       	call   1d0 <strlen>
+  30:	83 c4 0c             	add    $0xc,%esp
+  33:	50                   	push   %eax
+  34:	53                   	push   %ebx
+  35:	ff 75 08             	pushl  0x8(%ebp)
+  38:	e8 85 03 00 00       	call   3c2 <write>
+}
+  3d:	83 c4 10             	add    $0x10,%esp
+  40:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  43:	c9                   	leave  
+  44:	c3                   	ret    
+  45:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000050 <forktest>:
+{
+  50:	55                   	push   %ebp
+  51:	89 e5                	mov    %esp,%ebp
+  53:	53                   	push   %ebx
+  for(n=0; n<N; n++){
+  54:	31 db                	xor    %ebx,%ebx
+{
+  56:	83 ec 10             	sub    $0x10,%esp
+  write(fd, s, strlen(s));
+  59:	68 f8 05 00 00       	push   $0x5f8
+  5e:	e8 6d 01 00 00       	call   1d0 <strlen>
+  63:	83 c4 0c             	add    $0xc,%esp
+  66:	50                   	push   %eax
+  67:	68 f8 05 00 00       	push   $0x5f8
+  6c:	6a 01                	push   $0x1
+  6e:	e8 4f 03 00 00       	call   3c2 <write>
+  73:	83 c4 10             	add    $0x10,%esp
+  76:	eb 19                	jmp    91 <forktest+0x41>
+  78:	90                   	nop
+  79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(pid == 0)
+  80:	0f 84 7c 00 00 00    	je     102 <forktest+0xb2>
+  for(n=0; n<N; n++){
+  86:	83 c3 01             	add    $0x1,%ebx
+  89:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+  8f:	74 4f                	je     e0 <forktest+0x90>
+    pid = fork();
+  91:	e8 04 03 00 00       	call   39a <fork>
+    if(pid < 0)
+  96:	85 c0                	test   %eax,%eax
+  98:	79 e6                	jns    80 <forktest+0x30>
+  for(; n > 0; n--){
+  9a:	85 db                	test   %ebx,%ebx
+  9c:	74 10                	je     ae <forktest+0x5e>
+  9e:	66 90                	xchg   %ax,%ax
+    if(wait() < 0){
+  a0:	e8 05 03 00 00       	call   3aa <wait>
+  a5:	85 c0                	test   %eax,%eax
+  a7:	78 5e                	js     107 <forktest+0xb7>
+  for(; n > 0; n--){
+  a9:	83 eb 01             	sub    $0x1,%ebx
+  ac:	75 f2                	jne    a0 <forktest+0x50>
+  if(wait() != -1){
+  ae:	e8 f7 02 00 00       	call   3aa <wait>
+  b3:	83 f8 ff             	cmp    $0xffffffff,%eax
+  b6:	75 71                	jne    129 <forktest+0xd9>
+  write(fd, s, strlen(s));
+  b8:	83 ec 0c             	sub    $0xc,%esp
+  bb:	68 2a 06 00 00       	push   $0x62a
+  c0:	e8 0b 01 00 00       	call   1d0 <strlen>
+  c5:	83 c4 0c             	add    $0xc,%esp
+  c8:	50                   	push   %eax
+  c9:	68 2a 06 00 00       	push   $0x62a
+  ce:	6a 01                	push   $0x1
+  d0:	e8 ed 02 00 00       	call   3c2 <write>
+}
+  d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  d8:	c9                   	leave  
+  d9:	c3                   	ret    
+  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  write(fd, s, strlen(s));
+  e0:	83 ec 0c             	sub    $0xc,%esp
+  e3:	68 38 06 00 00       	push   $0x638
+  e8:	e8 e3 00 00 00       	call   1d0 <strlen>
+  ed:	83 c4 0c             	add    $0xc,%esp
+  f0:	50                   	push   %eax
+  f1:	68 38 06 00 00       	push   $0x638
+  f6:	6a 01                	push   $0x1
+  f8:	e8 c5 02 00 00       	call   3c2 <write>
+    exit();
+  fd:	e8 a0 02 00 00       	call   3a2 <exit>
+      exit();
+ 102:	e8 9b 02 00 00       	call   3a2 <exit>
+  write(fd, s, strlen(s));
+ 107:	83 ec 0c             	sub    $0xc,%esp
+ 10a:	68 03 06 00 00       	push   $0x603
+ 10f:	e8 bc 00 00 00       	call   1d0 <strlen>
+ 114:	83 c4 0c             	add    $0xc,%esp
+ 117:	50                   	push   %eax
+ 118:	68 03 06 00 00       	push   $0x603
+ 11d:	6a 01                	push   $0x1
+ 11f:	e8 9e 02 00 00       	call   3c2 <write>
+      exit();
+ 124:	e8 79 02 00 00       	call   3a2 <exit>
+  write(fd, s, strlen(s));
+ 129:	83 ec 0c             	sub    $0xc,%esp
+ 12c:	68 17 06 00 00       	push   $0x617
+ 131:	e8 9a 00 00 00       	call   1d0 <strlen>
+ 136:	83 c4 0c             	add    $0xc,%esp
+ 139:	50                   	push   %eax
+ 13a:	68 17 06 00 00       	push   $0x617
+ 13f:	6a 01                	push   $0x1
+ 141:	e8 7c 02 00 00       	call   3c2 <write>
+    exit();
+ 146:	e8 57 02 00 00       	call   3a2 <exit>
+ 14b:	66 90                	xchg   %ax,%ax
+ 14d:	66 90                	xchg   %ax,%ax
+ 14f:	90                   	nop
+
+00000150 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 15a:	89 c2                	mov    %eax,%edx
+ 15c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 160:	83 c1 01             	add    $0x1,%ecx
+ 163:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 167:	83 c2 01             	add    $0x1,%edx
+ 16a:	84 db                	test   %bl,%bl
+ 16c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 16f:	75 ef                	jne    160 <strcpy+0x10>
+    ;
+  return os;
+}
+ 171:	5b                   	pop    %ebx
+ 172:	5d                   	pop    %ebp
+ 173:	c3                   	ret    
+ 174:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 17a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000180 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	53                   	push   %ebx
+ 184:	8b 55 08             	mov    0x8(%ebp),%edx
+ 187:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 18a:	0f b6 02             	movzbl (%edx),%eax
+ 18d:	0f b6 19             	movzbl (%ecx),%ebx
+ 190:	84 c0                	test   %al,%al
+ 192:	75 1c                	jne    1b0 <strcmp+0x30>
+ 194:	eb 2a                	jmp    1c0 <strcmp+0x40>
+ 196:	8d 76 00             	lea    0x0(%esi),%esi
+ 199:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 1a0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1a3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 1a6:	83 c1 01             	add    $0x1,%ecx
+ 1a9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 1ac:	84 c0                	test   %al,%al
+ 1ae:	74 10                	je     1c0 <strcmp+0x40>
+ 1b0:	38 d8                	cmp    %bl,%al
+ 1b2:	74 ec                	je     1a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1b4:	29 d8                	sub    %ebx,%eax
+}
+ 1b6:	5b                   	pop    %ebx
+ 1b7:	5d                   	pop    %ebp
+ 1b8:	c3                   	ret    
+ 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1c2:	29 d8                	sub    %ebx,%eax
+}
+ 1c4:	5b                   	pop    %ebx
+ 1c5:	5d                   	pop    %ebp
+ 1c6:	c3                   	ret    
+ 1c7:	89 f6                	mov    %esi,%esi
+ 1c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1d6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 1d9:	74 15                	je     1f0 <strlen+0x20>
+ 1db:	31 d2                	xor    %edx,%edx
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1e0:	83 c2 01             	add    $0x1,%edx
+ 1e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1e7:	89 d0                	mov    %edx,%eax
+ 1e9:	75 f5                	jne    1e0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1eb:	5d                   	pop    %ebp
+ 1ec:	c3                   	ret    
+ 1ed:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 1f0:	31 c0                	xor    %eax,%eax
+}
+ 1f2:	5d                   	pop    %ebp
+ 1f3:	c3                   	ret    
+ 1f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000200 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	57                   	push   %edi
+ 204:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 207:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 20a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 20d:	89 d7                	mov    %edx,%edi
+ 20f:	fc                   	cld    
+ 210:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 212:	89 d0                	mov    %edx,%eax
+ 214:	5f                   	pop    %edi
+ 215:	5d                   	pop    %ebp
+ 216:	c3                   	ret    
+ 217:	89 f6                	mov    %esi,%esi
+ 219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000220 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	53                   	push   %ebx
+ 224:	8b 45 08             	mov    0x8(%ebp),%eax
+ 227:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 22a:	0f b6 10             	movzbl (%eax),%edx
+ 22d:	84 d2                	test   %dl,%dl
+ 22f:	74 1d                	je     24e <strchr+0x2e>
+    if(*s == c)
+ 231:	38 d3                	cmp    %dl,%bl
+ 233:	89 d9                	mov    %ebx,%ecx
+ 235:	75 0d                	jne    244 <strchr+0x24>
+ 237:	eb 17                	jmp    250 <strchr+0x30>
+ 239:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 240:	38 ca                	cmp    %cl,%dl
+ 242:	74 0c                	je     250 <strchr+0x30>
+  for(; *s; s++)
+ 244:	83 c0 01             	add    $0x1,%eax
+ 247:	0f b6 10             	movzbl (%eax),%edx
+ 24a:	84 d2                	test   %dl,%dl
+ 24c:	75 f2                	jne    240 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 24e:	31 c0                	xor    %eax,%eax
+}
+ 250:	5b                   	pop    %ebx
+ 251:	5d                   	pop    %ebp
+ 252:	c3                   	ret    
+ 253:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000260 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	57                   	push   %edi
+ 264:	56                   	push   %esi
+ 265:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 266:	31 f6                	xor    %esi,%esi
+ 268:	89 f3                	mov    %esi,%ebx
+{
+ 26a:	83 ec 1c             	sub    $0x1c,%esp
+ 26d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 270:	eb 2f                	jmp    2a1 <gets+0x41>
+ 272:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 278:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 27b:	83 ec 04             	sub    $0x4,%esp
+ 27e:	6a 01                	push   $0x1
+ 280:	50                   	push   %eax
+ 281:	6a 00                	push   $0x0
+ 283:	e8 32 01 00 00       	call   3ba <read>
+    if(cc < 1)
+ 288:	83 c4 10             	add    $0x10,%esp
+ 28b:	85 c0                	test   %eax,%eax
+ 28d:	7e 1c                	jle    2ab <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 28f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 293:	83 c7 01             	add    $0x1,%edi
+ 296:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 299:	3c 0a                	cmp    $0xa,%al
+ 29b:	74 23                	je     2c0 <gets+0x60>
+ 29d:	3c 0d                	cmp    $0xd,%al
+ 29f:	74 1f                	je     2c0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 2a1:	83 c3 01             	add    $0x1,%ebx
+ 2a4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2a7:	89 fe                	mov    %edi,%esi
+ 2a9:	7c cd                	jl     278 <gets+0x18>
+ 2ab:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2b0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2b6:	5b                   	pop    %ebx
+ 2b7:	5e                   	pop    %esi
+ 2b8:	5f                   	pop    %edi
+ 2b9:	5d                   	pop    %ebp
+ 2ba:	c3                   	ret    
+ 2bb:	90                   	nop
+ 2bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2c0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2c3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2c6:	01 de                	add    %ebx,%esi
+ 2c8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2ca:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d0:	5b                   	pop    %ebx
+ 2d1:	5e                   	pop    %esi
+ 2d2:	5f                   	pop    %edi
+ 2d3:	5d                   	pop    %ebp
+ 2d4:	c3                   	ret    
+ 2d5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2e0:	55                   	push   %ebp
+ 2e1:	89 e5                	mov    %esp,%ebp
+ 2e3:	56                   	push   %esi
+ 2e4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2e5:	83 ec 08             	sub    $0x8,%esp
+ 2e8:	6a 00                	push   $0x0
+ 2ea:	ff 75 08             	pushl  0x8(%ebp)
+ 2ed:	e8 f0 00 00 00       	call   3e2 <open>
+  if(fd < 0)
+ 2f2:	83 c4 10             	add    $0x10,%esp
+ 2f5:	85 c0                	test   %eax,%eax
+ 2f7:	78 27                	js     320 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2f9:	83 ec 08             	sub    $0x8,%esp
+ 2fc:	ff 75 0c             	pushl  0xc(%ebp)
+ 2ff:	89 c3                	mov    %eax,%ebx
+ 301:	50                   	push   %eax
+ 302:	e8 f3 00 00 00       	call   3fa <fstat>
+  close(fd);
+ 307:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 30a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 30c:	e8 b9 00 00 00       	call   3ca <close>
+  return r;
+ 311:	83 c4 10             	add    $0x10,%esp
+}
+ 314:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 317:	89 f0                	mov    %esi,%eax
+ 319:	5b                   	pop    %ebx
+ 31a:	5e                   	pop    %esi
+ 31b:	5d                   	pop    %ebp
+ 31c:	c3                   	ret    
+ 31d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 320:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 325:	eb ed                	jmp    314 <stat+0x34>
+ 327:	89 f6                	mov    %esi,%esi
+ 329:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000330 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	53                   	push   %ebx
+ 334:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 337:	0f be 11             	movsbl (%ecx),%edx
+ 33a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 33d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 33f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 344:	77 1f                	ja     365 <atoi+0x35>
+ 346:	8d 76 00             	lea    0x0(%esi),%esi
+ 349:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 350:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 353:	83 c1 01             	add    $0x1,%ecx
+ 356:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 35a:	0f be 11             	movsbl (%ecx),%edx
+ 35d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 360:	80 fb 09             	cmp    $0x9,%bl
+ 363:	76 eb                	jbe    350 <atoi+0x20>
+  return n;
+}
+ 365:	5b                   	pop    %ebx
+ 366:	5d                   	pop    %ebp
+ 367:	c3                   	ret    
+ 368:	90                   	nop
+ 369:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000370 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	56                   	push   %esi
+ 374:	53                   	push   %ebx
+ 375:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 378:	8b 45 08             	mov    0x8(%ebp),%eax
+ 37b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 37e:	85 db                	test   %ebx,%ebx
+ 380:	7e 14                	jle    396 <memmove+0x26>
+ 382:	31 d2                	xor    %edx,%edx
+ 384:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 388:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 38c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 38f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 392:	39 d3                	cmp    %edx,%ebx
+ 394:	75 f2                	jne    388 <memmove+0x18>
+  return vdst;
+}
+ 396:	5b                   	pop    %ebx
+ 397:	5e                   	pop    %esi
+ 398:	5d                   	pop    %ebp
+ 399:	c3                   	ret    
+
+0000039a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 39a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <exit>:
+SYSCALL(exit)
+ 3a2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <wait>:
+SYSCALL(wait)
+ 3aa:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <pipe>:
+SYSCALL(pipe)
+ 3b2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <read>:
+SYSCALL(read)
+ 3ba:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <write>:
+SYSCALL(write)
+ 3c2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <close>:
+SYSCALL(close)
+ 3ca:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <kill>:
+SYSCALL(kill)
+ 3d2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <exec>:
+SYSCALL(exec)
+ 3da:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <open>:
+SYSCALL(open)
+ 3e2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <mknod>:
+SYSCALL(mknod)
+ 3ea:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <unlink>:
+SYSCALL(unlink)
+ 3f2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <fstat>:
+SYSCALL(fstat)
+ 3fa:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <link>:
+SYSCALL(link)
+ 402:	b8 13 00 00 00       	mov    $0x13,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <mkdir>:
+SYSCALL(mkdir)
+ 40a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <chdir>:
+SYSCALL(chdir)
+ 412:	b8 09 00 00 00       	mov    $0x9,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+
+0000041a <dup>:
+SYSCALL(dup)
+ 41a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+
+00000422 <getpid>:
+SYSCALL(getpid)
+ 422:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 427:	cd 40                	int    $0x40
+ 429:	c3                   	ret    
+
+0000042a <sbrk>:
+SYSCALL(sbrk)
+ 42a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 42f:	cd 40                	int    $0x40
+ 431:	c3                   	ret    
+
+00000432 <sleep>:
+SYSCALL(sleep)
+ 432:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 437:	cd 40                	int    $0x40
+ 439:	c3                   	ret    
+
+0000043a <uptime>:
+SYSCALL(uptime)
+ 43a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 43f:	cd 40                	int    $0x40
+ 441:	c3                   	ret    
+
+00000442 <kmalloc>:
+SYSCALL(kmalloc)
+ 442:	b8 16 00 00 00       	mov    $0x16,%eax
+ 447:	cd 40                	int    $0x40
+ 449:	c3                   	ret    
+
+0000044a <kmfree>:
+SYSCALL(kmfree) 
+ 44a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 44f:	cd 40                	int    $0x40
+ 451:	c3                   	ret    
+
+00000452 <mmap>:
+SYSCALL(mmap)
+ 452:	b8 18 00 00 00       	mov    $0x18,%eax
+ 457:	cd 40                	int    $0x40
+ 459:	c3                   	ret    
+
+0000045a <munmap>:
+ 45a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 45f:	cd 40                	int    $0x40
+ 461:	c3                   	ret    
+ 462:	66 90                	xchg   %ax,%ax
+ 464:	66 90                	xchg   %ax,%ax
+ 466:	66 90                	xchg   %ax,%ax
+ 468:	66 90                	xchg   %ax,%ax
+ 46a:	66 90                	xchg   %ax,%ax
+ 46c:	66 90                	xchg   %ax,%ax
+ 46e:	66 90                	xchg   %ax,%ax
+
+00000470 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 470:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 471:	a1 d4 08 00 00       	mov    0x8d4,%eax
+{
+ 476:	89 e5                	mov    %esp,%ebp
+ 478:	57                   	push   %edi
+ 479:	56                   	push   %esi
+ 47a:	53                   	push   %ebx
+ 47b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 47e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 481:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 488:	39 c8                	cmp    %ecx,%eax
+ 48a:	8b 10                	mov    (%eax),%edx
+ 48c:	73 32                	jae    4c0 <free+0x50>
+ 48e:	39 d1                	cmp    %edx,%ecx
+ 490:	72 04                	jb     496 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 492:	39 d0                	cmp    %edx,%eax
+ 494:	72 32                	jb     4c8 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 496:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 499:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 49c:	39 fa                	cmp    %edi,%edx
+ 49e:	74 30                	je     4d0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 4a0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 4a3:	8b 50 04             	mov    0x4(%eax),%edx
+ 4a6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 4a9:	39 f1                	cmp    %esi,%ecx
+ 4ab:	74 3a                	je     4e7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 4ad:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 4af:	a3 d4 08 00 00       	mov    %eax,0x8d4
+}
+ 4b4:	5b                   	pop    %ebx
+ 4b5:	5e                   	pop    %esi
+ 4b6:	5f                   	pop    %edi
+ 4b7:	5d                   	pop    %ebp
+ 4b8:	c3                   	ret    
+ 4b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 4c0:	39 d0                	cmp    %edx,%eax
+ 4c2:	72 04                	jb     4c8 <free+0x58>
+ 4c4:	39 d1                	cmp    %edx,%ecx
+ 4c6:	72 ce                	jb     496 <free+0x26>
+{
+ 4c8:	89 d0                	mov    %edx,%eax
+ 4ca:	eb bc                	jmp    488 <free+0x18>
+ 4cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 4d0:	03 72 04             	add    0x4(%edx),%esi
+ 4d3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 4d6:	8b 10                	mov    (%eax),%edx
+ 4d8:	8b 12                	mov    (%edx),%edx
+ 4da:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 4dd:	8b 50 04             	mov    0x4(%eax),%edx
+ 4e0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 4e3:	39 f1                	cmp    %esi,%ecx
+ 4e5:	75 c6                	jne    4ad <free+0x3d>
+    p->s.size += bp->s.size;
+ 4e7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 4ea:	a3 d4 08 00 00       	mov    %eax,0x8d4
+    p->s.size += bp->s.size;
+ 4ef:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 4f2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 4f5:	89 10                	mov    %edx,(%eax)
+}
+ 4f7:	5b                   	pop    %ebx
+ 4f8:	5e                   	pop    %esi
+ 4f9:	5f                   	pop    %edi
+ 4fa:	5d                   	pop    %ebp
+ 4fb:	c3                   	ret    
+ 4fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000500 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 500:	55                   	push   %ebp
+ 501:	89 e5                	mov    %esp,%ebp
+ 503:	57                   	push   %edi
+ 504:	56                   	push   %esi
+ 505:	53                   	push   %ebx
+ 506:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 509:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 50c:	8b 15 d4 08 00 00    	mov    0x8d4,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 512:	8d 78 07             	lea    0x7(%eax),%edi
+ 515:	c1 ef 03             	shr    $0x3,%edi
+ 518:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 51b:	85 d2                	test   %edx,%edx
+ 51d:	0f 84 9d 00 00 00    	je     5c0 <malloc+0xc0>
+ 523:	8b 02                	mov    (%edx),%eax
+ 525:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 528:	39 cf                	cmp    %ecx,%edi
+ 52a:	76 6c                	jbe    598 <malloc+0x98>
+ 52c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 532:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 537:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 53a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 541:	eb 0e                	jmp    551 <malloc+0x51>
+ 543:	90                   	nop
+ 544:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 548:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 54a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 54d:	39 f9                	cmp    %edi,%ecx
+ 54f:	73 47                	jae    598 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 551:	39 05 d4 08 00 00    	cmp    %eax,0x8d4
+ 557:	89 c2                	mov    %eax,%edx
+ 559:	75 ed                	jne    548 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 55b:	83 ec 0c             	sub    $0xc,%esp
+ 55e:	56                   	push   %esi
+ 55f:	e8 c6 fe ff ff       	call   42a <sbrk>
+  if(p == (char*)-1)
+ 564:	83 c4 10             	add    $0x10,%esp
+ 567:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 56a:	74 1c                	je     588 <malloc+0x88>
+  hp->s.size = nu;
+ 56c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 56f:	83 ec 0c             	sub    $0xc,%esp
+ 572:	83 c0 08             	add    $0x8,%eax
+ 575:	50                   	push   %eax
+ 576:	e8 f5 fe ff ff       	call   470 <free>
+  return freep;
+ 57b:	8b 15 d4 08 00 00    	mov    0x8d4,%edx
+      if((p = morecore(nunits)) == 0)
+ 581:	83 c4 10             	add    $0x10,%esp
+ 584:	85 d2                	test   %edx,%edx
+ 586:	75 c0                	jne    548 <malloc+0x48>
+        return 0;
+  }
+}
+ 588:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 58b:	31 c0                	xor    %eax,%eax
+}
+ 58d:	5b                   	pop    %ebx
+ 58e:	5e                   	pop    %esi
+ 58f:	5f                   	pop    %edi
+ 590:	5d                   	pop    %ebp
+ 591:	c3                   	ret    
+ 592:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 598:	39 cf                	cmp    %ecx,%edi
+ 59a:	74 54                	je     5f0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 59c:	29 f9                	sub    %edi,%ecx
+ 59e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 5a1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 5a4:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 5a7:	89 15 d4 08 00 00    	mov    %edx,0x8d4
+}
+ 5ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 5b0:	83 c0 08             	add    $0x8,%eax
+}
+ 5b3:	5b                   	pop    %ebx
+ 5b4:	5e                   	pop    %esi
+ 5b5:	5f                   	pop    %edi
+ 5b6:	5d                   	pop    %ebp
+ 5b7:	c3                   	ret    
+ 5b8:	90                   	nop
+ 5b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 5c0:	c7 05 d4 08 00 00 d8 	movl   $0x8d8,0x8d4
+ 5c7:	08 00 00 
+ 5ca:	c7 05 d8 08 00 00 d8 	movl   $0x8d8,0x8d8
+ 5d1:	08 00 00 
+    base.s.size = 0;
+ 5d4:	b8 d8 08 00 00       	mov    $0x8d8,%eax
+ 5d9:	c7 05 dc 08 00 00 00 	movl   $0x0,0x8dc
+ 5e0:	00 00 00 
+ 5e3:	e9 44 ff ff ff       	jmp    52c <malloc+0x2c>
+ 5e8:	90                   	nop
+ 5e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 5f0:	8b 08                	mov    (%eax),%ecx
+ 5f2:	89 0a                	mov    %ecx,(%edx)
+ 5f4:	eb b1                	jmp    5a7 <malloc+0xa7>
diff -ruN src-old/forktest.d src/forktest.d
--- src-old/forktest.d	1970-01-01 00:00:00.000000000 +0000
+++ src/forktest.d	2023-04-19 02:18:55.840155129 +0000
@@ -0,0 +1 @@
+forktest.o: forktest.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files src-old/forktest.o and src/forktest.o differ
diff -ruN src-old/fs.d src/fs.d
--- src-old/fs.d	1970-01-01 00:00:00.000000000 +0000
+++ src/fs.d	2023-04-19 02:18:53.863920633 +0000
@@ -0,0 +1,2 @@
+fs.o: fs.c /usr/include/stdc-predef.h types.h defs.h param.h stat.h mmu.h \
+ proc.h spinlock.h sleeplock.h fs.h buf.h file.h
Binary files src-old/fs.img and src/fs.img differ
Binary files src-old/fs.o and src/fs.o differ
Binary files src-old/_grep and src/_grep differ
diff -ruN src-old/grep.asm src/grep.asm
--- src-old/grep.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/grep.asm	2023-04-19 02:18:55.936166506 +0000
@@ -0,0 +1,1581 @@
+
+_grep:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	83 ec 18             	sub    $0x18,%esp
+  14:	8b 39                	mov    (%ecx),%edi
+  16:	8b 59 04             	mov    0x4(%ecx),%ebx
+  int fd, i;
+  char *pattern;
+
+  if(argc <= 1){
+  19:	83 ff 01             	cmp    $0x1,%edi
+  1c:	7e 7c                	jle    9a <main+0x9a>
+    printf(2, "usage: grep pattern [file ...]\n");
+    exit();
+  }
+  pattern = argv[1];
+  1e:	8b 43 04             	mov    0x4(%ebx),%eax
+  21:	83 c3 08             	add    $0x8,%ebx
+
+  if(argc <= 2){
+  24:	83 ff 02             	cmp    $0x2,%edi
+    grep(pattern, 0);
+    exit();
+  }
+
+  for(i = 2; i < argc; i++){
+  27:	be 02 00 00 00       	mov    $0x2,%esi
+  pattern = argv[1];
+  2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(argc <= 2){
+  2f:	74 46                	je     77 <main+0x77>
+  31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if((fd = open(argv[i], 0)) < 0){
+  38:	83 ec 08             	sub    $0x8,%esp
+  3b:	6a 00                	push   $0x0
+  3d:	ff 33                	pushl  (%ebx)
+  3f:	e8 7e 05 00 00       	call   5c2 <open>
+  44:	83 c4 10             	add    $0x10,%esp
+  47:	85 c0                	test   %eax,%eax
+  49:	78 3b                	js     86 <main+0x86>
+      printf(1, "grep: cannot open %s\n", argv[i]);
+      exit();
+    }
+    grep(pattern, fd);
+  4b:	83 ec 08             	sub    $0x8,%esp
+  4e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  for(i = 2; i < argc; i++){
+  51:	83 c6 01             	add    $0x1,%esi
+    grep(pattern, fd);
+  54:	50                   	push   %eax
+  55:	ff 75 e0             	pushl  -0x20(%ebp)
+  58:	83 c3 04             	add    $0x4,%ebx
+  5b:	e8 d0 01 00 00       	call   230 <grep>
+    close(fd);
+  60:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  63:	89 04 24             	mov    %eax,(%esp)
+  66:	e8 3f 05 00 00       	call   5aa <close>
+  for(i = 2; i < argc; i++){
+  6b:	83 c4 10             	add    $0x10,%esp
+  6e:	39 f7                	cmp    %esi,%edi
+  70:	7f c6                	jg     38 <main+0x38>
+  }
+  exit();
+  72:	e8 0b 05 00 00       	call   582 <exit>
+    grep(pattern, 0);
+  77:	52                   	push   %edx
+  78:	52                   	push   %edx
+  79:	6a 00                	push   $0x0
+  7b:	50                   	push   %eax
+  7c:	e8 af 01 00 00       	call   230 <grep>
+    exit();
+  81:	e8 fc 04 00 00       	call   582 <exit>
+      printf(1, "grep: cannot open %s\n", argv[i]);
+  86:	50                   	push   %eax
+  87:	ff 33                	pushl  (%ebx)
+  89:	68 68 0a 00 00       	push   $0xa68
+  8e:	6a 01                	push   $0x1
+  90:	e8 5b 06 00 00       	call   6f0 <printf>
+      exit();
+  95:	e8 e8 04 00 00       	call   582 <exit>
+    printf(2, "usage: grep pattern [file ...]\n");
+  9a:	51                   	push   %ecx
+  9b:	51                   	push   %ecx
+  9c:	68 48 0a 00 00       	push   $0xa48
+  a1:	6a 02                	push   $0x2
+  a3:	e8 48 06 00 00       	call   6f0 <printf>
+    exit();
+  a8:	e8 d5 04 00 00       	call   582 <exit>
+  ad:	66 90                	xchg   %ax,%ax
+  af:	90                   	nop
+
+000000b0 <matchstar>:
+  return 0;
+}
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	57                   	push   %edi
+  b4:	56                   	push   %esi
+  b5:	53                   	push   %ebx
+  b6:	83 ec 0c             	sub    $0xc,%esp
+  b9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  bf:	8b 7d 10             	mov    0x10(%ebp),%edi
+  c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+  c8:	83 ec 08             	sub    $0x8,%esp
+  cb:	57                   	push   %edi
+  cc:	56                   	push   %esi
+  cd:	e8 3e 00 00 00       	call   110 <matchhere>
+  d2:	83 c4 10             	add    $0x10,%esp
+  d5:	85 c0                	test   %eax,%eax
+  d7:	75 1f                	jne    f8 <matchstar+0x48>
+      return 1;
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  d9:	0f be 17             	movsbl (%edi),%edx
+  dc:	84 d2                	test   %dl,%dl
+  de:	74 0c                	je     ec <matchstar+0x3c>
+  e0:	83 c7 01             	add    $0x1,%edi
+  e3:	39 da                	cmp    %ebx,%edx
+  e5:	74 e1                	je     c8 <matchstar+0x18>
+  e7:	83 fb 2e             	cmp    $0x2e,%ebx
+  ea:	74 dc                	je     c8 <matchstar+0x18>
+  return 0;
+}
+  ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  ef:	5b                   	pop    %ebx
+  f0:	5e                   	pop    %esi
+  f1:	5f                   	pop    %edi
+  f2:	5d                   	pop    %ebp
+  f3:	c3                   	ret    
+  f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return 1;
+  fb:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 100:	5b                   	pop    %ebx
+ 101:	5e                   	pop    %esi
+ 102:	5f                   	pop    %edi
+ 103:	5d                   	pop    %ebp
+ 104:	c3                   	ret    
+ 105:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 109:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000110 <matchhere>:
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	56                   	push   %esi
+ 115:	53                   	push   %ebx
+ 116:	83 ec 0c             	sub    $0xc,%esp
+  if(re[0] == '\0')
+ 119:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+ 11c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  if(re[0] == '\0')
+ 11f:	0f b6 08             	movzbl (%eax),%ecx
+ 122:	84 c9                	test   %cl,%cl
+ 124:	74 67                	je     18d <matchhere+0x7d>
+  if(re[1] == '*')
+ 126:	0f be 40 01          	movsbl 0x1(%eax),%eax
+ 12a:	3c 2a                	cmp    $0x2a,%al
+ 12c:	74 6c                	je     19a <matchhere+0x8a>
+  if(re[0] == '$' && re[1] == '\0')
+ 12e:	80 f9 24             	cmp    $0x24,%cl
+ 131:	0f b6 1f             	movzbl (%edi),%ebx
+ 134:	75 08                	jne    13e <matchhere+0x2e>
+ 136:	84 c0                	test   %al,%al
+ 138:	0f 84 81 00 00 00    	je     1bf <matchhere+0xaf>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+ 13e:	84 db                	test   %bl,%bl
+ 140:	74 09                	je     14b <matchhere+0x3b>
+ 142:	38 d9                	cmp    %bl,%cl
+ 144:	74 3c                	je     182 <matchhere+0x72>
+ 146:	80 f9 2e             	cmp    $0x2e,%cl
+ 149:	74 37                	je     182 <matchhere+0x72>
+}
+ 14b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+ 14e:	31 c0                	xor    %eax,%eax
+}
+ 150:	5b                   	pop    %ebx
+ 151:	5e                   	pop    %esi
+ 152:	5f                   	pop    %edi
+ 153:	5d                   	pop    %ebp
+ 154:	c3                   	ret    
+ 155:	8d 76 00             	lea    0x0(%esi),%esi
+  if(re[1] == '*')
+ 158:	8b 75 08             	mov    0x8(%ebp),%esi
+ 15b:	0f b6 4e 01          	movzbl 0x1(%esi),%ecx
+ 15f:	80 f9 2a             	cmp    $0x2a,%cl
+ 162:	74 3b                	je     19f <matchhere+0x8f>
+  if(re[0] == '$' && re[1] == '\0')
+ 164:	3c 24                	cmp    $0x24,%al
+ 166:	75 04                	jne    16c <matchhere+0x5c>
+ 168:	84 c9                	test   %cl,%cl
+ 16a:	74 4f                	je     1bb <matchhere+0xab>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+ 16c:	0f b6 33             	movzbl (%ebx),%esi
+ 16f:	89 f2                	mov    %esi,%edx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	74 d6                	je     14b <matchhere+0x3b>
+ 175:	3c 2e                	cmp    $0x2e,%al
+ 177:	89 df                	mov    %ebx,%edi
+ 179:	74 04                	je     17f <matchhere+0x6f>
+ 17b:	38 c2                	cmp    %al,%dl
+ 17d:	75 cc                	jne    14b <matchhere+0x3b>
+ 17f:	0f be c1             	movsbl %cl,%eax
+    return matchhere(re+1, text+1);
+ 182:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  if(re[0] == '\0')
+ 186:	84 c0                	test   %al,%al
+    return matchhere(re+1, text+1);
+ 188:	8d 5f 01             	lea    0x1(%edi),%ebx
+  if(re[0] == '\0')
+ 18b:	75 cb                	jne    158 <matchhere+0x48>
+    return 1;
+ 18d:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 192:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 195:	5b                   	pop    %ebx
+ 196:	5e                   	pop    %esi
+ 197:	5f                   	pop    %edi
+ 198:	5d                   	pop    %ebp
+ 199:	c3                   	ret    
+  if(re[1] == '*')
+ 19a:	89 fb                	mov    %edi,%ebx
+ 19c:	0f be c1             	movsbl %cl,%eax
+    return matchstar(re[0], re+2, text);
+ 19f:	8b 7d 08             	mov    0x8(%ebp),%edi
+ 1a2:	83 ec 04             	sub    $0x4,%esp
+ 1a5:	53                   	push   %ebx
+ 1a6:	8d 57 02             	lea    0x2(%edi),%edx
+ 1a9:	52                   	push   %edx
+ 1aa:	50                   	push   %eax
+ 1ab:	e8 00 ff ff ff       	call   b0 <matchstar>
+ 1b0:	83 c4 10             	add    $0x10,%esp
+}
+ 1b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1b6:	5b                   	pop    %ebx
+ 1b7:	5e                   	pop    %esi
+ 1b8:	5f                   	pop    %edi
+ 1b9:	5d                   	pop    %ebp
+ 1ba:	c3                   	ret    
+ 1bb:	0f b6 5f 01          	movzbl 0x1(%edi),%ebx
+    return *text == '\0';
+ 1bf:	31 c0                	xor    %eax,%eax
+ 1c1:	84 db                	test   %bl,%bl
+ 1c3:	0f 94 c0             	sete   %al
+ 1c6:	eb ca                	jmp    192 <matchhere+0x82>
+ 1c8:	90                   	nop
+ 1c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001d0 <match>:
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	56                   	push   %esi
+ 1d4:	53                   	push   %ebx
+ 1d5:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1d8:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  if(re[0] == '^')
+ 1db:	80 3e 5e             	cmpb   $0x5e,(%esi)
+ 1de:	75 11                	jne    1f1 <match+0x21>
+ 1e0:	eb 2e                	jmp    210 <match+0x40>
+ 1e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  }while(*text++ != '\0');
+ 1e8:	83 c3 01             	add    $0x1,%ebx
+ 1eb:	80 7b ff 00          	cmpb   $0x0,-0x1(%ebx)
+ 1ef:	74 16                	je     207 <match+0x37>
+    if(matchhere(re, text))
+ 1f1:	83 ec 08             	sub    $0x8,%esp
+ 1f4:	53                   	push   %ebx
+ 1f5:	56                   	push   %esi
+ 1f6:	e8 15 ff ff ff       	call   110 <matchhere>
+ 1fb:	83 c4 10             	add    $0x10,%esp
+ 1fe:	85 c0                	test   %eax,%eax
+ 200:	74 e6                	je     1e8 <match+0x18>
+      return 1;
+ 202:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 207:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 20a:	5b                   	pop    %ebx
+ 20b:	5e                   	pop    %esi
+ 20c:	5d                   	pop    %ebp
+ 20d:	c3                   	ret    
+ 20e:	66 90                	xchg   %ax,%ax
+    return matchhere(re+1, text);
+ 210:	83 c6 01             	add    $0x1,%esi
+ 213:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+ 216:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 219:	5b                   	pop    %ebx
+ 21a:	5e                   	pop    %esi
+ 21b:	5d                   	pop    %ebp
+    return matchhere(re+1, text);
+ 21c:	e9 ef fe ff ff       	jmp    110 <matchhere>
+ 221:	eb 0d                	jmp    230 <grep>
+ 223:	90                   	nop
+ 224:	90                   	nop
+ 225:	90                   	nop
+ 226:	90                   	nop
+ 227:	90                   	nop
+ 228:	90                   	nop
+ 229:	90                   	nop
+ 22a:	90                   	nop
+ 22b:	90                   	nop
+ 22c:	90                   	nop
+ 22d:	90                   	nop
+ 22e:	90                   	nop
+ 22f:	90                   	nop
+
+00000230 <grep>:
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	57                   	push   %edi
+ 234:	56                   	push   %esi
+ 235:	53                   	push   %ebx
+  m = 0;
+ 236:	31 f6                	xor    %esi,%esi
+{
+ 238:	83 ec 1c             	sub    $0x1c,%esp
+ 23b:	90                   	nop
+ 23c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+ 240:	b8 ff 03 00 00       	mov    $0x3ff,%eax
+ 245:	83 ec 04             	sub    $0x4,%esp
+ 248:	29 f0                	sub    %esi,%eax
+ 24a:	50                   	push   %eax
+ 24b:	8d 86 40 0e 00 00    	lea    0xe40(%esi),%eax
+ 251:	50                   	push   %eax
+ 252:	ff 75 0c             	pushl  0xc(%ebp)
+ 255:	e8 40 03 00 00       	call   59a <read>
+ 25a:	83 c4 10             	add    $0x10,%esp
+ 25d:	85 c0                	test   %eax,%eax
+ 25f:	0f 8e bb 00 00 00    	jle    320 <grep+0xf0>
+    m += n;
+ 265:	01 c6                	add    %eax,%esi
+    p = buf;
+ 267:	bb 40 0e 00 00       	mov    $0xe40,%ebx
+    buf[m] = '\0';
+ 26c:	c6 86 40 0e 00 00 00 	movb   $0x0,0xe40(%esi)
+ 273:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+ 276:	8d 76 00             	lea    0x0(%esi),%esi
+ 279:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    while((q = strchr(p, '\n')) != 0){
+ 280:	83 ec 08             	sub    $0x8,%esp
+ 283:	6a 0a                	push   $0xa
+ 285:	53                   	push   %ebx
+ 286:	e8 75 01 00 00       	call   400 <strchr>
+ 28b:	83 c4 10             	add    $0x10,%esp
+ 28e:	85 c0                	test   %eax,%eax
+ 290:	89 c6                	mov    %eax,%esi
+ 292:	74 44                	je     2d8 <grep+0xa8>
+      if(match(pattern, p)){
+ 294:	83 ec 08             	sub    $0x8,%esp
+      *q = 0;
+ 297:	c6 06 00             	movb   $0x0,(%esi)
+ 29a:	8d 7e 01             	lea    0x1(%esi),%edi
+      if(match(pattern, p)){
+ 29d:	53                   	push   %ebx
+ 29e:	ff 75 08             	pushl  0x8(%ebp)
+ 2a1:	e8 2a ff ff ff       	call   1d0 <match>
+ 2a6:	83 c4 10             	add    $0x10,%esp
+ 2a9:	85 c0                	test   %eax,%eax
+ 2ab:	75 0b                	jne    2b8 <grep+0x88>
+      p = q+1;
+ 2ad:	89 fb                	mov    %edi,%ebx
+ 2af:	eb cf                	jmp    280 <grep+0x50>
+ 2b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        write(1, p, q+1 - p);
+ 2b8:	89 f8                	mov    %edi,%eax
+ 2ba:	83 ec 04             	sub    $0x4,%esp
+        *q = '\n';
+ 2bd:	c6 06 0a             	movb   $0xa,(%esi)
+        write(1, p, q+1 - p);
+ 2c0:	29 d8                	sub    %ebx,%eax
+ 2c2:	50                   	push   %eax
+ 2c3:	53                   	push   %ebx
+      p = q+1;
+ 2c4:	89 fb                	mov    %edi,%ebx
+        write(1, p, q+1 - p);
+ 2c6:	6a 01                	push   $0x1
+ 2c8:	e8 d5 02 00 00       	call   5a2 <write>
+ 2cd:	83 c4 10             	add    $0x10,%esp
+ 2d0:	eb ae                	jmp    280 <grep+0x50>
+ 2d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(p == buf)
+ 2d8:	81 fb 40 0e 00 00    	cmp    $0xe40,%ebx
+ 2de:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+ 2e1:	74 2d                	je     310 <grep+0xe0>
+    if(m > 0){
+ 2e3:	85 f6                	test   %esi,%esi
+ 2e5:	0f 8e 55 ff ff ff    	jle    240 <grep+0x10>
+      m -= p - buf;
+ 2eb:	89 d8                	mov    %ebx,%eax
+      memmove(buf, p, m);
+ 2ed:	83 ec 04             	sub    $0x4,%esp
+      m -= p - buf;
+ 2f0:	2d 40 0e 00 00       	sub    $0xe40,%eax
+ 2f5:	29 c6                	sub    %eax,%esi
+      memmove(buf, p, m);
+ 2f7:	56                   	push   %esi
+ 2f8:	53                   	push   %ebx
+ 2f9:	68 40 0e 00 00       	push   $0xe40
+ 2fe:	e8 4d 02 00 00       	call   550 <memmove>
+ 303:	83 c4 10             	add    $0x10,%esp
+ 306:	e9 35 ff ff ff       	jmp    240 <grep+0x10>
+ 30b:	90                   	nop
+ 30c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      m = 0;
+ 310:	31 f6                	xor    %esi,%esi
+ 312:	e9 29 ff ff ff       	jmp    240 <grep+0x10>
+ 317:	89 f6                	mov    %esi,%esi
+ 319:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+}
+ 320:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 323:	5b                   	pop    %ebx
+ 324:	5e                   	pop    %esi
+ 325:	5f                   	pop    %edi
+ 326:	5d                   	pop    %ebp
+ 327:	c3                   	ret    
+ 328:	66 90                	xchg   %ax,%ax
+ 32a:	66 90                	xchg   %ax,%ax
+ 32c:	66 90                	xchg   %ax,%ax
+ 32e:	66 90                	xchg   %ax,%ax
+
+00000330 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	53                   	push   %ebx
+ 334:	8b 45 08             	mov    0x8(%ebp),%eax
+ 337:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 33a:	89 c2                	mov    %eax,%edx
+ 33c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 340:	83 c1 01             	add    $0x1,%ecx
+ 343:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 347:	83 c2 01             	add    $0x1,%edx
+ 34a:	84 db                	test   %bl,%bl
+ 34c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 34f:	75 ef                	jne    340 <strcpy+0x10>
+    ;
+  return os;
+}
+ 351:	5b                   	pop    %ebx
+ 352:	5d                   	pop    %ebp
+ 353:	c3                   	ret    
+ 354:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 35a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000360 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	53                   	push   %ebx
+ 364:	8b 55 08             	mov    0x8(%ebp),%edx
+ 367:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 36a:	0f b6 02             	movzbl (%edx),%eax
+ 36d:	0f b6 19             	movzbl (%ecx),%ebx
+ 370:	84 c0                	test   %al,%al
+ 372:	75 1c                	jne    390 <strcmp+0x30>
+ 374:	eb 2a                	jmp    3a0 <strcmp+0x40>
+ 376:	8d 76 00             	lea    0x0(%esi),%esi
+ 379:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 380:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 383:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 386:	83 c1 01             	add    $0x1,%ecx
+ 389:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 38c:	84 c0                	test   %al,%al
+ 38e:	74 10                	je     3a0 <strcmp+0x40>
+ 390:	38 d8                	cmp    %bl,%al
+ 392:	74 ec                	je     380 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 394:	29 d8                	sub    %ebx,%eax
+}
+ 396:	5b                   	pop    %ebx
+ 397:	5d                   	pop    %ebp
+ 398:	c3                   	ret    
+ 399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 3a2:	29 d8                	sub    %ebx,%eax
+}
+ 3a4:	5b                   	pop    %ebx
+ 3a5:	5d                   	pop    %ebp
+ 3a6:	c3                   	ret    
+ 3a7:	89 f6                	mov    %esi,%esi
+ 3a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000003b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3b6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 3b9:	74 15                	je     3d0 <strlen+0x20>
+ 3bb:	31 d2                	xor    %edx,%edx
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c0:	83 c2 01             	add    $0x1,%edx
+ 3c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 3c7:	89 d0                	mov    %edx,%eax
+ 3c9:	75 f5                	jne    3c0 <strlen+0x10>
+    ;
+  return n;
+}
+ 3cb:	5d                   	pop    %ebp
+ 3cc:	c3                   	ret    
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 3d0:	31 c0                	xor    %eax,%eax
+}
+ 3d2:	5d                   	pop    %ebp
+ 3d3:	c3                   	ret    
+ 3d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000003e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 3e0:	55                   	push   %ebp
+ 3e1:	89 e5                	mov    %esp,%ebp
+ 3e3:	57                   	push   %edi
+ 3e4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 3e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 3ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3ed:	89 d7                	mov    %edx,%edi
+ 3ef:	fc                   	cld    
+ 3f0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 3f2:	89 d0                	mov    %edx,%eax
+ 3f4:	5f                   	pop    %edi
+ 3f5:	5d                   	pop    %ebp
+ 3f6:	c3                   	ret    
+ 3f7:	89 f6                	mov    %esi,%esi
+ 3f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000400 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	53                   	push   %ebx
+ 404:	8b 45 08             	mov    0x8(%ebp),%eax
+ 407:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 40a:	0f b6 10             	movzbl (%eax),%edx
+ 40d:	84 d2                	test   %dl,%dl
+ 40f:	74 1d                	je     42e <strchr+0x2e>
+    if(*s == c)
+ 411:	38 d3                	cmp    %dl,%bl
+ 413:	89 d9                	mov    %ebx,%ecx
+ 415:	75 0d                	jne    424 <strchr+0x24>
+ 417:	eb 17                	jmp    430 <strchr+0x30>
+ 419:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 420:	38 ca                	cmp    %cl,%dl
+ 422:	74 0c                	je     430 <strchr+0x30>
+  for(; *s; s++)
+ 424:	83 c0 01             	add    $0x1,%eax
+ 427:	0f b6 10             	movzbl (%eax),%edx
+ 42a:	84 d2                	test   %dl,%dl
+ 42c:	75 f2                	jne    420 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 42e:	31 c0                	xor    %eax,%eax
+}
+ 430:	5b                   	pop    %ebx
+ 431:	5d                   	pop    %ebp
+ 432:	c3                   	ret    
+ 433:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 439:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000440 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 446:	31 f6                	xor    %esi,%esi
+ 448:	89 f3                	mov    %esi,%ebx
+{
+ 44a:	83 ec 1c             	sub    $0x1c,%esp
+ 44d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 450:	eb 2f                	jmp    481 <gets+0x41>
+ 452:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 458:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 45b:	83 ec 04             	sub    $0x4,%esp
+ 45e:	6a 01                	push   $0x1
+ 460:	50                   	push   %eax
+ 461:	6a 00                	push   $0x0
+ 463:	e8 32 01 00 00       	call   59a <read>
+    if(cc < 1)
+ 468:	83 c4 10             	add    $0x10,%esp
+ 46b:	85 c0                	test   %eax,%eax
+ 46d:	7e 1c                	jle    48b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 46f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 473:	83 c7 01             	add    $0x1,%edi
+ 476:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 479:	3c 0a                	cmp    $0xa,%al
+ 47b:	74 23                	je     4a0 <gets+0x60>
+ 47d:	3c 0d                	cmp    $0xd,%al
+ 47f:	74 1f                	je     4a0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 481:	83 c3 01             	add    $0x1,%ebx
+ 484:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 487:	89 fe                	mov    %edi,%esi
+ 489:	7c cd                	jl     458 <gets+0x18>
+ 48b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 48d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 490:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 493:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 496:	5b                   	pop    %ebx
+ 497:	5e                   	pop    %esi
+ 498:	5f                   	pop    %edi
+ 499:	5d                   	pop    %ebp
+ 49a:	c3                   	ret    
+ 49b:	90                   	nop
+ 49c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4a0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4a3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4a6:	01 de                	add    %ebx,%esi
+ 4a8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4aa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4b0:	5b                   	pop    %ebx
+ 4b1:	5e                   	pop    %esi
+ 4b2:	5f                   	pop    %edi
+ 4b3:	5d                   	pop    %ebp
+ 4b4:	c3                   	ret    
+ 4b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000004c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4c0:	55                   	push   %ebp
+ 4c1:	89 e5                	mov    %esp,%ebp
+ 4c3:	56                   	push   %esi
+ 4c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4c5:	83 ec 08             	sub    $0x8,%esp
+ 4c8:	6a 00                	push   $0x0
+ 4ca:	ff 75 08             	pushl  0x8(%ebp)
+ 4cd:	e8 f0 00 00 00       	call   5c2 <open>
+  if(fd < 0)
+ 4d2:	83 c4 10             	add    $0x10,%esp
+ 4d5:	85 c0                	test   %eax,%eax
+ 4d7:	78 27                	js     500 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 4d9:	83 ec 08             	sub    $0x8,%esp
+ 4dc:	ff 75 0c             	pushl  0xc(%ebp)
+ 4df:	89 c3                	mov    %eax,%ebx
+ 4e1:	50                   	push   %eax
+ 4e2:	e8 f3 00 00 00       	call   5da <fstat>
+  close(fd);
+ 4e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 4ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 4ec:	e8 b9 00 00 00       	call   5aa <close>
+  return r;
+ 4f1:	83 c4 10             	add    $0x10,%esp
+}
+ 4f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 4f7:	89 f0                	mov    %esi,%eax
+ 4f9:	5b                   	pop    %ebx
+ 4fa:	5e                   	pop    %esi
+ 4fb:	5d                   	pop    %ebp
+ 4fc:	c3                   	ret    
+ 4fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 500:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 505:	eb ed                	jmp    4f4 <stat+0x34>
+ 507:	89 f6                	mov    %esi,%esi
+ 509:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000510 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 510:	55                   	push   %ebp
+ 511:	89 e5                	mov    %esp,%ebp
+ 513:	53                   	push   %ebx
+ 514:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 517:	0f be 11             	movsbl (%ecx),%edx
+ 51a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 51d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 51f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 524:	77 1f                	ja     545 <atoi+0x35>
+ 526:	8d 76 00             	lea    0x0(%esi),%esi
+ 529:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 530:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 533:	83 c1 01             	add    $0x1,%ecx
+ 536:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 53a:	0f be 11             	movsbl (%ecx),%edx
+ 53d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 540:	80 fb 09             	cmp    $0x9,%bl
+ 543:	76 eb                	jbe    530 <atoi+0x20>
+  return n;
+}
+ 545:	5b                   	pop    %ebx
+ 546:	5d                   	pop    %ebp
+ 547:	c3                   	ret    
+ 548:	90                   	nop
+ 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000550 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 550:	55                   	push   %ebp
+ 551:	89 e5                	mov    %esp,%ebp
+ 553:	56                   	push   %esi
+ 554:	53                   	push   %ebx
+ 555:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 558:	8b 45 08             	mov    0x8(%ebp),%eax
+ 55b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 55e:	85 db                	test   %ebx,%ebx
+ 560:	7e 14                	jle    576 <memmove+0x26>
+ 562:	31 d2                	xor    %edx,%edx
+ 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 568:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 56c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 56f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 572:	39 d3                	cmp    %edx,%ebx
+ 574:	75 f2                	jne    568 <memmove+0x18>
+  return vdst;
+}
+ 576:	5b                   	pop    %ebx
+ 577:	5e                   	pop    %esi
+ 578:	5d                   	pop    %ebp
+ 579:	c3                   	ret    
+
+0000057a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 57a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 57f:	cd 40                	int    $0x40
+ 581:	c3                   	ret    
+
+00000582 <exit>:
+SYSCALL(exit)
+ 582:	b8 02 00 00 00       	mov    $0x2,%eax
+ 587:	cd 40                	int    $0x40
+ 589:	c3                   	ret    
+
+0000058a <wait>:
+SYSCALL(wait)
+ 58a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 58f:	cd 40                	int    $0x40
+ 591:	c3                   	ret    
+
+00000592 <pipe>:
+SYSCALL(pipe)
+ 592:	b8 04 00 00 00       	mov    $0x4,%eax
+ 597:	cd 40                	int    $0x40
+ 599:	c3                   	ret    
+
+0000059a <read>:
+SYSCALL(read)
+ 59a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 59f:	cd 40                	int    $0x40
+ 5a1:	c3                   	ret    
+
+000005a2 <write>:
+SYSCALL(write)
+ 5a2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5a7:	cd 40                	int    $0x40
+ 5a9:	c3                   	ret    
+
+000005aa <close>:
+SYSCALL(close)
+ 5aa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5af:	cd 40                	int    $0x40
+ 5b1:	c3                   	ret    
+
+000005b2 <kill>:
+SYSCALL(kill)
+ 5b2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5b7:	cd 40                	int    $0x40
+ 5b9:	c3                   	ret    
+
+000005ba <exec>:
+SYSCALL(exec)
+ 5ba:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5bf:	cd 40                	int    $0x40
+ 5c1:	c3                   	ret    
+
+000005c2 <open>:
+SYSCALL(open)
+ 5c2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5c7:	cd 40                	int    $0x40
+ 5c9:	c3                   	ret    
+
+000005ca <mknod>:
+SYSCALL(mknod)
+ 5ca:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5cf:	cd 40                	int    $0x40
+ 5d1:	c3                   	ret    
+
+000005d2 <unlink>:
+SYSCALL(unlink)
+ 5d2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5d7:	cd 40                	int    $0x40
+ 5d9:	c3                   	ret    
+
+000005da <fstat>:
+SYSCALL(fstat)
+ 5da:	b8 08 00 00 00       	mov    $0x8,%eax
+ 5df:	cd 40                	int    $0x40
+ 5e1:	c3                   	ret    
+
+000005e2 <link>:
+SYSCALL(link)
+ 5e2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 5e7:	cd 40                	int    $0x40
+ 5e9:	c3                   	ret    
+
+000005ea <mkdir>:
+SYSCALL(mkdir)
+ 5ea:	b8 14 00 00 00       	mov    $0x14,%eax
+ 5ef:	cd 40                	int    $0x40
+ 5f1:	c3                   	ret    
+
+000005f2 <chdir>:
+SYSCALL(chdir)
+ 5f2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 5f7:	cd 40                	int    $0x40
+ 5f9:	c3                   	ret    
+
+000005fa <dup>:
+SYSCALL(dup)
+ 5fa:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 5ff:	cd 40                	int    $0x40
+ 601:	c3                   	ret    
+
+00000602 <getpid>:
+SYSCALL(getpid)
+ 602:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 607:	cd 40                	int    $0x40
+ 609:	c3                   	ret    
+
+0000060a <sbrk>:
+SYSCALL(sbrk)
+ 60a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 60f:	cd 40                	int    $0x40
+ 611:	c3                   	ret    
+
+00000612 <sleep>:
+SYSCALL(sleep)
+ 612:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 617:	cd 40                	int    $0x40
+ 619:	c3                   	ret    
+
+0000061a <uptime>:
+SYSCALL(uptime)
+ 61a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 61f:	cd 40                	int    $0x40
+ 621:	c3                   	ret    
+
+00000622 <kmalloc>:
+SYSCALL(kmalloc)
+ 622:	b8 16 00 00 00       	mov    $0x16,%eax
+ 627:	cd 40                	int    $0x40
+ 629:	c3                   	ret    
+
+0000062a <kmfree>:
+SYSCALL(kmfree) 
+ 62a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 62f:	cd 40                	int    $0x40
+ 631:	c3                   	ret    
+
+00000632 <mmap>:
+SYSCALL(mmap)
+ 632:	b8 18 00 00 00       	mov    $0x18,%eax
+ 637:	cd 40                	int    $0x40
+ 639:	c3                   	ret    
+
+0000063a <munmap>:
+ 63a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 63f:	cd 40                	int    $0x40
+ 641:	c3                   	ret    
+ 642:	66 90                	xchg   %ax,%ax
+ 644:	66 90                	xchg   %ax,%ax
+ 646:	66 90                	xchg   %ax,%ax
+ 648:	66 90                	xchg   %ax,%ax
+ 64a:	66 90                	xchg   %ax,%ax
+ 64c:	66 90                	xchg   %ax,%ax
+ 64e:	66 90                	xchg   %ax,%ax
+
+00000650 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 650:	55                   	push   %ebp
+ 651:	89 e5                	mov    %esp,%ebp
+ 653:	57                   	push   %edi
+ 654:	56                   	push   %esi
+ 655:	53                   	push   %ebx
+ 656:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 659:	85 d2                	test   %edx,%edx
+{
+ 65b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 65e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 660:	79 76                	jns    6d8 <printint+0x88>
+ 662:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 666:	74 70                	je     6d8 <printint+0x88>
+    x = -xx;
+ 668:	f7 d8                	neg    %eax
+    neg = 1;
+ 66a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 671:	31 f6                	xor    %esi,%esi
+ 673:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 676:	eb 0a                	jmp    682 <printint+0x32>
+ 678:	90                   	nop
+ 679:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 680:	89 fe                	mov    %edi,%esi
+ 682:	31 d2                	xor    %edx,%edx
+ 684:	8d 7e 01             	lea    0x1(%esi),%edi
+ 687:	f7 f1                	div    %ecx
+ 689:	0f b6 92 88 0a 00 00 	movzbl 0xa88(%edx),%edx
+  }while((x /= base) != 0);
+ 690:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 692:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 695:	75 e9                	jne    680 <printint+0x30>
+  if(neg)
+ 697:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 69a:	85 c0                	test   %eax,%eax
+ 69c:	74 08                	je     6a6 <printint+0x56>
+    buf[i++] = '-';
+ 69e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 6a3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 6a6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 6aa:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 6ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 6b0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 6b3:	83 ec 04             	sub    $0x4,%esp
+ 6b6:	83 ee 01             	sub    $0x1,%esi
+ 6b9:	6a 01                	push   $0x1
+ 6bb:	53                   	push   %ebx
+ 6bc:	57                   	push   %edi
+ 6bd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 6c0:	e8 dd fe ff ff       	call   5a2 <write>
+
+  while(--i >= 0)
+ 6c5:	83 c4 10             	add    $0x10,%esp
+ 6c8:	39 de                	cmp    %ebx,%esi
+ 6ca:	75 e4                	jne    6b0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 6cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6cf:	5b                   	pop    %ebx
+ 6d0:	5e                   	pop    %esi
+ 6d1:	5f                   	pop    %edi
+ 6d2:	5d                   	pop    %ebp
+ 6d3:	c3                   	ret    
+ 6d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 6d8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 6df:	eb 90                	jmp    671 <printint+0x21>
+ 6e1:	eb 0d                	jmp    6f0 <printf>
+ 6e3:	90                   	nop
+ 6e4:	90                   	nop
+ 6e5:	90                   	nop
+ 6e6:	90                   	nop
+ 6e7:	90                   	nop
+ 6e8:	90                   	nop
+ 6e9:	90                   	nop
+ 6ea:	90                   	nop
+ 6eb:	90                   	nop
+ 6ec:	90                   	nop
+ 6ed:	90                   	nop
+ 6ee:	90                   	nop
+ 6ef:	90                   	nop
+
+000006f0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 6f0:	55                   	push   %ebp
+ 6f1:	89 e5                	mov    %esp,%ebp
+ 6f3:	57                   	push   %edi
+ 6f4:	56                   	push   %esi
+ 6f5:	53                   	push   %ebx
+ 6f6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 6f9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 6fc:	0f b6 1e             	movzbl (%esi),%ebx
+ 6ff:	84 db                	test   %bl,%bl
+ 701:	0f 84 b3 00 00 00    	je     7ba <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 707:	8d 45 10             	lea    0x10(%ebp),%eax
+ 70a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 70d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 70f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 712:	eb 2f                	jmp    743 <printf+0x53>
+ 714:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 718:	83 f8 25             	cmp    $0x25,%eax
+ 71b:	0f 84 a7 00 00 00    	je     7c8 <printf+0xd8>
+  write(fd, &c, 1);
+ 721:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 724:	83 ec 04             	sub    $0x4,%esp
+ 727:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 72a:	6a 01                	push   $0x1
+ 72c:	50                   	push   %eax
+ 72d:	ff 75 08             	pushl  0x8(%ebp)
+ 730:	e8 6d fe ff ff       	call   5a2 <write>
+ 735:	83 c4 10             	add    $0x10,%esp
+ 738:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 73b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 73f:	84 db                	test   %bl,%bl
+ 741:	74 77                	je     7ba <printf+0xca>
+    if(state == 0){
+ 743:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 745:	0f be cb             	movsbl %bl,%ecx
+ 748:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 74b:	74 cb                	je     718 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 74d:	83 ff 25             	cmp    $0x25,%edi
+ 750:	75 e6                	jne    738 <printf+0x48>
+      if(c == 'd'){
+ 752:	83 f8 64             	cmp    $0x64,%eax
+ 755:	0f 84 05 01 00 00    	je     860 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 75b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 761:	83 f9 70             	cmp    $0x70,%ecx
+ 764:	74 72                	je     7d8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 766:	83 f8 73             	cmp    $0x73,%eax
+ 769:	0f 84 99 00 00 00    	je     808 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 76f:	83 f8 63             	cmp    $0x63,%eax
+ 772:	0f 84 08 01 00 00    	je     880 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 778:	83 f8 25             	cmp    $0x25,%eax
+ 77b:	0f 84 ef 00 00 00    	je     870 <printf+0x180>
+  write(fd, &c, 1);
+ 781:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 784:	83 ec 04             	sub    $0x4,%esp
+ 787:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 78b:	6a 01                	push   $0x1
+ 78d:	50                   	push   %eax
+ 78e:	ff 75 08             	pushl  0x8(%ebp)
+ 791:	e8 0c fe ff ff       	call   5a2 <write>
+ 796:	83 c4 0c             	add    $0xc,%esp
+ 799:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 79c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 79f:	6a 01                	push   $0x1
+ 7a1:	50                   	push   %eax
+ 7a2:	ff 75 08             	pushl  0x8(%ebp)
+ 7a5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 7a8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 7aa:	e8 f3 fd ff ff       	call   5a2 <write>
+  for(i = 0; fmt[i]; i++){
+ 7af:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 7b3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 7b6:	84 db                	test   %bl,%bl
+ 7b8:	75 89                	jne    743 <printf+0x53>
+    }
+  }
+}
+ 7ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7bd:	5b                   	pop    %ebx
+ 7be:	5e                   	pop    %esi
+ 7bf:	5f                   	pop    %edi
+ 7c0:	5d                   	pop    %ebp
+ 7c1:	c3                   	ret    
+ 7c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 7c8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 7cd:	e9 66 ff ff ff       	jmp    738 <printf+0x48>
+ 7d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 7d8:	83 ec 0c             	sub    $0xc,%esp
+ 7db:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7e0:	6a 00                	push   $0x0
+ 7e2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 7e5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 7e8:	8b 17                	mov    (%edi),%edx
+ 7ea:	e8 61 fe ff ff       	call   650 <printint>
+        ap++;
+ 7ef:	89 f8                	mov    %edi,%eax
+ 7f1:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 7f4:	31 ff                	xor    %edi,%edi
+        ap++;
+ 7f6:	83 c0 04             	add    $0x4,%eax
+ 7f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 7fc:	e9 37 ff ff ff       	jmp    738 <printf+0x48>
+ 801:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 808:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 80b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 80d:	83 c0 04             	add    $0x4,%eax
+ 810:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 813:	85 c9                	test   %ecx,%ecx
+ 815:	0f 84 8e 00 00 00    	je     8a9 <printf+0x1b9>
+        while(*s != 0){
+ 81b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 81e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 820:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 822:	84 c0                	test   %al,%al
+ 824:	0f 84 0e ff ff ff    	je     738 <printf+0x48>
+ 82a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 82d:	89 de                	mov    %ebx,%esi
+ 82f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 832:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 835:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 838:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 83b:	83 c6 01             	add    $0x1,%esi
+ 83e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 841:	6a 01                	push   $0x1
+ 843:	57                   	push   %edi
+ 844:	53                   	push   %ebx
+ 845:	e8 58 fd ff ff       	call   5a2 <write>
+        while(*s != 0){
+ 84a:	0f b6 06             	movzbl (%esi),%eax
+ 84d:	83 c4 10             	add    $0x10,%esp
+ 850:	84 c0                	test   %al,%al
+ 852:	75 e4                	jne    838 <printf+0x148>
+ 854:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 857:	31 ff                	xor    %edi,%edi
+ 859:	e9 da fe ff ff       	jmp    738 <printf+0x48>
+ 85e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 860:	83 ec 0c             	sub    $0xc,%esp
+ 863:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 868:	6a 01                	push   $0x1
+ 86a:	e9 73 ff ff ff       	jmp    7e2 <printf+0xf2>
+ 86f:	90                   	nop
+  write(fd, &c, 1);
+ 870:	83 ec 04             	sub    $0x4,%esp
+ 873:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 876:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 879:	6a 01                	push   $0x1
+ 87b:	e9 21 ff ff ff       	jmp    7a1 <printf+0xb1>
+        putc(fd, *ap);
+ 880:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 883:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 886:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 888:	6a 01                	push   $0x1
+        ap++;
+ 88a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 88d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 890:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 893:	50                   	push   %eax
+ 894:	ff 75 08             	pushl  0x8(%ebp)
+ 897:	e8 06 fd ff ff       	call   5a2 <write>
+        ap++;
+ 89c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 89f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 8a2:	31 ff                	xor    %edi,%edi
+ 8a4:	e9 8f fe ff ff       	jmp    738 <printf+0x48>
+          s = "(null)";
+ 8a9:	bb 7e 0a 00 00       	mov    $0xa7e,%ebx
+        while(*s != 0){
+ 8ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8b3:	e9 72 ff ff ff       	jmp    82a <printf+0x13a>
+ 8b8:	66 90                	xchg   %ax,%ax
+ 8ba:	66 90                	xchg   %ax,%ax
+ 8bc:	66 90                	xchg   %ax,%ax
+ 8be:	66 90                	xchg   %ax,%ax
+
+000008c0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8c0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8c1:	a1 20 0e 00 00       	mov    0xe20,%eax
+{
+ 8c6:	89 e5                	mov    %esp,%ebp
+ 8c8:	57                   	push   %edi
+ 8c9:	56                   	push   %esi
+ 8ca:	53                   	push   %ebx
+ 8cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 8ce:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 8d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8d8:	39 c8                	cmp    %ecx,%eax
+ 8da:	8b 10                	mov    (%eax),%edx
+ 8dc:	73 32                	jae    910 <free+0x50>
+ 8de:	39 d1                	cmp    %edx,%ecx
+ 8e0:	72 04                	jb     8e6 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 8e2:	39 d0                	cmp    %edx,%eax
+ 8e4:	72 32                	jb     918 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 8e6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 8e9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 8ec:	39 fa                	cmp    %edi,%edx
+ 8ee:	74 30                	je     920 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 8f0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 8f3:	8b 50 04             	mov    0x4(%eax),%edx
+ 8f6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 8f9:	39 f1                	cmp    %esi,%ecx
+ 8fb:	74 3a                	je     937 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 8fd:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 8ff:	a3 20 0e 00 00       	mov    %eax,0xe20
+}
+ 904:	5b                   	pop    %ebx
+ 905:	5e                   	pop    %esi
+ 906:	5f                   	pop    %edi
+ 907:	5d                   	pop    %ebp
+ 908:	c3                   	ret    
+ 909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 910:	39 d0                	cmp    %edx,%eax
+ 912:	72 04                	jb     918 <free+0x58>
+ 914:	39 d1                	cmp    %edx,%ecx
+ 916:	72 ce                	jb     8e6 <free+0x26>
+{
+ 918:	89 d0                	mov    %edx,%eax
+ 91a:	eb bc                	jmp    8d8 <free+0x18>
+ 91c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 920:	03 72 04             	add    0x4(%edx),%esi
+ 923:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 926:	8b 10                	mov    (%eax),%edx
+ 928:	8b 12                	mov    (%edx),%edx
+ 92a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 92d:	8b 50 04             	mov    0x4(%eax),%edx
+ 930:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 933:	39 f1                	cmp    %esi,%ecx
+ 935:	75 c6                	jne    8fd <free+0x3d>
+    p->s.size += bp->s.size;
+ 937:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 93a:	a3 20 0e 00 00       	mov    %eax,0xe20
+    p->s.size += bp->s.size;
+ 93f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 942:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 945:	89 10                	mov    %edx,(%eax)
+}
+ 947:	5b                   	pop    %ebx
+ 948:	5e                   	pop    %esi
+ 949:	5f                   	pop    %edi
+ 94a:	5d                   	pop    %ebp
+ 94b:	c3                   	ret    
+ 94c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000950 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 950:	55                   	push   %ebp
+ 951:	89 e5                	mov    %esp,%ebp
+ 953:	57                   	push   %edi
+ 954:	56                   	push   %esi
+ 955:	53                   	push   %ebx
+ 956:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 959:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 95c:	8b 15 20 0e 00 00    	mov    0xe20,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 962:	8d 78 07             	lea    0x7(%eax),%edi
+ 965:	c1 ef 03             	shr    $0x3,%edi
+ 968:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 96b:	85 d2                	test   %edx,%edx
+ 96d:	0f 84 9d 00 00 00    	je     a10 <malloc+0xc0>
+ 973:	8b 02                	mov    (%edx),%eax
+ 975:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 978:	39 cf                	cmp    %ecx,%edi
+ 97a:	76 6c                	jbe    9e8 <malloc+0x98>
+ 97c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 982:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 987:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 98a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 991:	eb 0e                	jmp    9a1 <malloc+0x51>
+ 993:	90                   	nop
+ 994:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 998:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 99a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 99d:	39 f9                	cmp    %edi,%ecx
+ 99f:	73 47                	jae    9e8 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9a1:	39 05 20 0e 00 00    	cmp    %eax,0xe20
+ 9a7:	89 c2                	mov    %eax,%edx
+ 9a9:	75 ed                	jne    998 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 9ab:	83 ec 0c             	sub    $0xc,%esp
+ 9ae:	56                   	push   %esi
+ 9af:	e8 56 fc ff ff       	call   60a <sbrk>
+  if(p == (char*)-1)
+ 9b4:	83 c4 10             	add    $0x10,%esp
+ 9b7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9ba:	74 1c                	je     9d8 <malloc+0x88>
+  hp->s.size = nu;
+ 9bc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9bf:	83 ec 0c             	sub    $0xc,%esp
+ 9c2:	83 c0 08             	add    $0x8,%eax
+ 9c5:	50                   	push   %eax
+ 9c6:	e8 f5 fe ff ff       	call   8c0 <free>
+  return freep;
+ 9cb:	8b 15 20 0e 00 00    	mov    0xe20,%edx
+      if((p = morecore(nunits)) == 0)
+ 9d1:	83 c4 10             	add    $0x10,%esp
+ 9d4:	85 d2                	test   %edx,%edx
+ 9d6:	75 c0                	jne    998 <malloc+0x48>
+        return 0;
+  }
+}
+ 9d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 9db:	31 c0                	xor    %eax,%eax
+}
+ 9dd:	5b                   	pop    %ebx
+ 9de:	5e                   	pop    %esi
+ 9df:	5f                   	pop    %edi
+ 9e0:	5d                   	pop    %ebp
+ 9e1:	c3                   	ret    
+ 9e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 9e8:	39 cf                	cmp    %ecx,%edi
+ 9ea:	74 54                	je     a40 <malloc+0xf0>
+        p->s.size -= nunits;
+ 9ec:	29 f9                	sub    %edi,%ecx
+ 9ee:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 9f1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 9f4:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 9f7:	89 15 20 0e 00 00    	mov    %edx,0xe20
+}
+ 9fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a00:	83 c0 08             	add    $0x8,%eax
+}
+ a03:	5b                   	pop    %ebx
+ a04:	5e                   	pop    %esi
+ a05:	5f                   	pop    %edi
+ a06:	5d                   	pop    %ebp
+ a07:	c3                   	ret    
+ a08:	90                   	nop
+ a09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ a10:	c7 05 20 0e 00 00 24 	movl   $0xe24,0xe20
+ a17:	0e 00 00 
+ a1a:	c7 05 24 0e 00 00 24 	movl   $0xe24,0xe24
+ a21:	0e 00 00 
+    base.s.size = 0;
+ a24:	b8 24 0e 00 00       	mov    $0xe24,%eax
+ a29:	c7 05 28 0e 00 00 00 	movl   $0x0,0xe28
+ a30:	00 00 00 
+ a33:	e9 44 ff ff ff       	jmp    97c <malloc+0x2c>
+ a38:	90                   	nop
+ a39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ a40:	8b 08                	mov    (%eax),%ecx
+ a42:	89 0a                	mov    %ecx,(%edx)
+ a44:	eb b1                	jmp    9f7 <malloc+0xa7>
diff -ruN src-old/grep.d src/grep.d
--- src-old/grep.d	1970-01-01 00:00:00.000000000 +0000
+++ src/grep.d	2023-04-19 02:18:55.904162715 +0000
@@ -0,0 +1 @@
+grep.o: grep.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files src-old/grep.o and src/grep.o differ
diff -ruN src-old/grep.sym src/grep.sym
--- src-old/grep.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/grep.sym	2023-04-19 02:18:55.944167455 +0000
@@ -0,0 +1,66 @@
+00000000 .text
+00000a48 .rodata
+00000a9c .eh_frame
+00000e20 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 grep.c
+00000000 ulib.c
+00000000 printf.c
+00000650 printint
+00000a88 digits.1052
+00000000 umalloc.c
+00000e20 freep
+00000e24 base
+00000330 strcpy
+000006f0 printf
+00000550 memmove
+00000110 matchhere
+0000063a munmap
+000005ca mknod
+00000440 gets
+00000602 getpid
+00000230 grep
+00000950 malloc
+00000612 sleep
+0000062a kmfree
+00000632 mmap
+00000592 pipe
+000005a2 write
+000005da fstat
+000005b2 kill
+000005f2 chdir
+000005ba exec
+0000058a wait
+0000059a read
+000005d2 unlink
+0000057a fork
+0000060a sbrk
+0000061a uptime
+00000e20 __bss_start
+000003e0 memset
+00000000 main
+000000b0 matchstar
+00000360 strcmp
+000005fa dup
+00000e40 buf
+000004c0 stat
+00000e20 _edata
+00001240 _end
+000001d0 match
+000005e2 link
+00000622 kmalloc
+00000582 exit
+00000510 atoi
+000003b0 strlen
+000005c2 open
+00000400 strchr
+000005ea mkdir
+000005aa close
+000008c0 free
diff -ruN src-old/ide.d src/ide.d
--- src-old/ide.d	1970-01-01 00:00:00.000000000 +0000
+++ src/ide.d	2023-04-19 02:18:53.987935388 +0000
@@ -0,0 +1,2 @@
+ide.o: ide.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h sleeplock.h fs.h buf.h
Binary files src-old/ide.o and src/ide.o differ
Binary files src-old/_init and src/_init differ
diff -ruN src-old/init.asm src/init.asm
--- src-old/init.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/init.asm	2023-04-19 02:18:55.992173144 +0000
@@ -0,0 +1,1250 @@
+
+_init:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+char *argv[] = { "sh", 0 };
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	51                   	push   %ecx
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+   f:	83 ec 08             	sub    $0x8,%esp
+  12:	6a 02                	push   $0x2
+  14:	68 08 08 00 00       	push   $0x808
+  19:	e8 64 03 00 00       	call   382 <open>
+  1e:	83 c4 10             	add    $0x10,%esp
+  21:	85 c0                	test   %eax,%eax
+  23:	0f 88 9f 00 00 00    	js     c8 <main+0xc8>
+    mknod("console", 1, 1);
+    open("console", O_RDWR);
+  }
+  dup(0);  // stdout
+  29:	83 ec 0c             	sub    $0xc,%esp
+  2c:	6a 00                	push   $0x0
+  2e:	e8 87 03 00 00       	call   3ba <dup>
+  dup(0);  // stderr
+  33:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  3a:	e8 7b 03 00 00       	call   3ba <dup>
+  3f:	83 c4 10             	add    $0x10,%esp
+  42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+  for(;;){
+    printf(1, "init: starting sh\n");
+  48:	83 ec 08             	sub    $0x8,%esp
+  4b:	68 10 08 00 00       	push   $0x810
+  50:	6a 01                	push   $0x1
+  52:	e8 59 04 00 00       	call   4b0 <printf>
+    pid = fork();
+  57:	e8 de 02 00 00       	call   33a <fork>
+    if(pid < 0){
+  5c:	83 c4 10             	add    $0x10,%esp
+  5f:	85 c0                	test   %eax,%eax
+    pid = fork();
+  61:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+  63:	78 2c                	js     91 <main+0x91>
+      printf(1, "init: fork failed\n");
+      exit();
+    }
+    if(pid == 0){
+  65:	74 3d                	je     a4 <main+0xa4>
+  67:	89 f6                	mov    %esi,%esi
+  69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      exec("sh", argv);
+      printf(1, "init: exec sh failed\n");
+      exit();
+    }
+    while((wpid=wait()) >= 0 && wpid != pid)
+  70:	e8 d5 02 00 00       	call   34a <wait>
+  75:	85 c0                	test   %eax,%eax
+  77:	78 cf                	js     48 <main+0x48>
+  79:	39 c3                	cmp    %eax,%ebx
+  7b:	74 cb                	je     48 <main+0x48>
+      printf(1, "zombie!\n");
+  7d:	83 ec 08             	sub    $0x8,%esp
+  80:	68 4f 08 00 00       	push   $0x84f
+  85:	6a 01                	push   $0x1
+  87:	e8 24 04 00 00       	call   4b0 <printf>
+  8c:	83 c4 10             	add    $0x10,%esp
+  8f:	eb df                	jmp    70 <main+0x70>
+      printf(1, "init: fork failed\n");
+  91:	53                   	push   %ebx
+  92:	53                   	push   %ebx
+  93:	68 23 08 00 00       	push   $0x823
+  98:	6a 01                	push   $0x1
+  9a:	e8 11 04 00 00       	call   4b0 <printf>
+      exit();
+  9f:	e8 9e 02 00 00       	call   342 <exit>
+      exec("sh", argv);
+  a4:	50                   	push   %eax
+  a5:	50                   	push   %eax
+  a6:	68 08 0b 00 00       	push   $0xb08
+  ab:	68 36 08 00 00       	push   $0x836
+  b0:	e8 c5 02 00 00       	call   37a <exec>
+      printf(1, "init: exec sh failed\n");
+  b5:	5a                   	pop    %edx
+  b6:	59                   	pop    %ecx
+  b7:	68 39 08 00 00       	push   $0x839
+  bc:	6a 01                	push   $0x1
+  be:	e8 ed 03 00 00       	call   4b0 <printf>
+      exit();
+  c3:	e8 7a 02 00 00       	call   342 <exit>
+    mknod("console", 1, 1);
+  c8:	50                   	push   %eax
+  c9:	6a 01                	push   $0x1
+  cb:	6a 01                	push   $0x1
+  cd:	68 08 08 00 00       	push   $0x808
+  d2:	e8 b3 02 00 00       	call   38a <mknod>
+    open("console", O_RDWR);
+  d7:	58                   	pop    %eax
+  d8:	5a                   	pop    %edx
+  d9:	6a 02                	push   $0x2
+  db:	68 08 08 00 00       	push   $0x808
+  e0:	e8 9d 02 00 00       	call   382 <open>
+  e5:	83 c4 10             	add    $0x10,%esp
+  e8:	e9 3c ff ff ff       	jmp    29 <main+0x29>
+  ed:	66 90                	xchg   %ax,%ax
+  ef:	90                   	nop
+
+000000f0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	53                   	push   %ebx
+  f4:	8b 45 08             	mov    0x8(%ebp),%eax
+  f7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  fa:	89 c2                	mov    %eax,%edx
+  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 100:	83 c1 01             	add    $0x1,%ecx
+ 103:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 107:	83 c2 01             	add    $0x1,%edx
+ 10a:	84 db                	test   %bl,%bl
+ 10c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 10f:	75 ef                	jne    100 <strcpy+0x10>
+    ;
+  return os;
+}
+ 111:	5b                   	pop    %ebx
+ 112:	5d                   	pop    %ebp
+ 113:	c3                   	ret    
+ 114:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 11a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000120 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	53                   	push   %ebx
+ 124:	8b 55 08             	mov    0x8(%ebp),%edx
+ 127:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 12a:	0f b6 02             	movzbl (%edx),%eax
+ 12d:	0f b6 19             	movzbl (%ecx),%ebx
+ 130:	84 c0                	test   %al,%al
+ 132:	75 1c                	jne    150 <strcmp+0x30>
+ 134:	eb 2a                	jmp    160 <strcmp+0x40>
+ 136:	8d 76 00             	lea    0x0(%esi),%esi
+ 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 140:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 143:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 146:	83 c1 01             	add    $0x1,%ecx
+ 149:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 14c:	84 c0                	test   %al,%al
+ 14e:	74 10                	je     160 <strcmp+0x40>
+ 150:	38 d8                	cmp    %bl,%al
+ 152:	74 ec                	je     140 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 154:	29 d8                	sub    %ebx,%eax
+}
+ 156:	5b                   	pop    %ebx
+ 157:	5d                   	pop    %ebp
+ 158:	c3                   	ret    
+ 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 160:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 162:	29 d8                	sub    %ebx,%eax
+}
+ 164:	5b                   	pop    %ebx
+ 165:	5d                   	pop    %ebp
+ 166:	c3                   	ret    
+ 167:	89 f6                	mov    %esi,%esi
+ 169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000170 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 176:	80 39 00             	cmpb   $0x0,(%ecx)
+ 179:	74 15                	je     190 <strlen+0x20>
+ 17b:	31 d2                	xor    %edx,%edx
+ 17d:	8d 76 00             	lea    0x0(%esi),%esi
+ 180:	83 c2 01             	add    $0x1,%edx
+ 183:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 187:	89 d0                	mov    %edx,%eax
+ 189:	75 f5                	jne    180 <strlen+0x10>
+    ;
+  return n;
+}
+ 18b:	5d                   	pop    %ebp
+ 18c:	c3                   	ret    
+ 18d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 190:	31 c0                	xor    %eax,%eax
+}
+ 192:	5d                   	pop    %ebp
+ 193:	c3                   	ret    
+ 194:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 19a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000001a0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1a0:	55                   	push   %ebp
+ 1a1:	89 e5                	mov    %esp,%ebp
+ 1a3:	57                   	push   %edi
+ 1a4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1a7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1aa:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1ad:	89 d7                	mov    %edx,%edi
+ 1af:	fc                   	cld    
+ 1b0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1b2:	89 d0                	mov    %edx,%eax
+ 1b4:	5f                   	pop    %edi
+ 1b5:	5d                   	pop    %ebp
+ 1b6:	c3                   	ret    
+ 1b7:	89 f6                	mov    %esi,%esi
+ 1b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001c0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	53                   	push   %ebx
+ 1c4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1c7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 1ca:	0f b6 10             	movzbl (%eax),%edx
+ 1cd:	84 d2                	test   %dl,%dl
+ 1cf:	74 1d                	je     1ee <strchr+0x2e>
+    if(*s == c)
+ 1d1:	38 d3                	cmp    %dl,%bl
+ 1d3:	89 d9                	mov    %ebx,%ecx
+ 1d5:	75 0d                	jne    1e4 <strchr+0x24>
+ 1d7:	eb 17                	jmp    1f0 <strchr+0x30>
+ 1d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1e0:	38 ca                	cmp    %cl,%dl
+ 1e2:	74 0c                	je     1f0 <strchr+0x30>
+  for(; *s; s++)
+ 1e4:	83 c0 01             	add    $0x1,%eax
+ 1e7:	0f b6 10             	movzbl (%eax),%edx
+ 1ea:	84 d2                	test   %dl,%dl
+ 1ec:	75 f2                	jne    1e0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 1ee:	31 c0                	xor    %eax,%eax
+}
+ 1f0:	5b                   	pop    %ebx
+ 1f1:	5d                   	pop    %ebp
+ 1f2:	c3                   	ret    
+ 1f3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000200 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	57                   	push   %edi
+ 204:	56                   	push   %esi
+ 205:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 206:	31 f6                	xor    %esi,%esi
+ 208:	89 f3                	mov    %esi,%ebx
+{
+ 20a:	83 ec 1c             	sub    $0x1c,%esp
+ 20d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 210:	eb 2f                	jmp    241 <gets+0x41>
+ 212:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 218:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 21b:	83 ec 04             	sub    $0x4,%esp
+ 21e:	6a 01                	push   $0x1
+ 220:	50                   	push   %eax
+ 221:	6a 00                	push   $0x0
+ 223:	e8 32 01 00 00       	call   35a <read>
+    if(cc < 1)
+ 228:	83 c4 10             	add    $0x10,%esp
+ 22b:	85 c0                	test   %eax,%eax
+ 22d:	7e 1c                	jle    24b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 22f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 233:	83 c7 01             	add    $0x1,%edi
+ 236:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 239:	3c 0a                	cmp    $0xa,%al
+ 23b:	74 23                	je     260 <gets+0x60>
+ 23d:	3c 0d                	cmp    $0xd,%al
+ 23f:	74 1f                	je     260 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 241:	83 c3 01             	add    $0x1,%ebx
+ 244:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 247:	89 fe                	mov    %edi,%esi
+ 249:	7c cd                	jl     218 <gets+0x18>
+ 24b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 24d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 250:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 253:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 256:	5b                   	pop    %ebx
+ 257:	5e                   	pop    %esi
+ 258:	5f                   	pop    %edi
+ 259:	5d                   	pop    %ebp
+ 25a:	c3                   	ret    
+ 25b:	90                   	nop
+ 25c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 260:	8b 75 08             	mov    0x8(%ebp),%esi
+ 263:	8b 45 08             	mov    0x8(%ebp),%eax
+ 266:	01 de                	add    %ebx,%esi
+ 268:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 26a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 26d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 270:	5b                   	pop    %ebx
+ 271:	5e                   	pop    %esi
+ 272:	5f                   	pop    %edi
+ 273:	5d                   	pop    %ebp
+ 274:	c3                   	ret    
+ 275:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 279:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000280 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	56                   	push   %esi
+ 284:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 285:	83 ec 08             	sub    $0x8,%esp
+ 288:	6a 00                	push   $0x0
+ 28a:	ff 75 08             	pushl  0x8(%ebp)
+ 28d:	e8 f0 00 00 00       	call   382 <open>
+  if(fd < 0)
+ 292:	83 c4 10             	add    $0x10,%esp
+ 295:	85 c0                	test   %eax,%eax
+ 297:	78 27                	js     2c0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 299:	83 ec 08             	sub    $0x8,%esp
+ 29c:	ff 75 0c             	pushl  0xc(%ebp)
+ 29f:	89 c3                	mov    %eax,%ebx
+ 2a1:	50                   	push   %eax
+ 2a2:	e8 f3 00 00 00       	call   39a <fstat>
+  close(fd);
+ 2a7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2aa:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2ac:	e8 b9 00 00 00       	call   36a <close>
+  return r;
+ 2b1:	83 c4 10             	add    $0x10,%esp
+}
+ 2b4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2b7:	89 f0                	mov    %esi,%eax
+ 2b9:	5b                   	pop    %ebx
+ 2ba:	5e                   	pop    %esi
+ 2bb:	5d                   	pop    %ebp
+ 2bc:	c3                   	ret    
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 2c0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2c5:	eb ed                	jmp    2b4 <stat+0x34>
+ 2c7:	89 f6                	mov    %esi,%esi
+ 2c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002d0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2d0:	55                   	push   %ebp
+ 2d1:	89 e5                	mov    %esp,%ebp
+ 2d3:	53                   	push   %ebx
+ 2d4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2d7:	0f be 11             	movsbl (%ecx),%edx
+ 2da:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 2dd:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 2df:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 2e4:	77 1f                	ja     305 <atoi+0x35>
+ 2e6:	8d 76 00             	lea    0x0(%esi),%esi
+ 2e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 2f0:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 2f3:	83 c1 01             	add    $0x1,%ecx
+ 2f6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 2fa:	0f be 11             	movsbl (%ecx),%edx
+ 2fd:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 300:	80 fb 09             	cmp    $0x9,%bl
+ 303:	76 eb                	jbe    2f0 <atoi+0x20>
+  return n;
+}
+ 305:	5b                   	pop    %ebx
+ 306:	5d                   	pop    %ebp
+ 307:	c3                   	ret    
+ 308:	90                   	nop
+ 309:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000310 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	56                   	push   %esi
+ 314:	53                   	push   %ebx
+ 315:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 318:	8b 45 08             	mov    0x8(%ebp),%eax
+ 31b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 31e:	85 db                	test   %ebx,%ebx
+ 320:	7e 14                	jle    336 <memmove+0x26>
+ 322:	31 d2                	xor    %edx,%edx
+ 324:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 328:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 32c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 32f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 332:	39 d3                	cmp    %edx,%ebx
+ 334:	75 f2                	jne    328 <memmove+0x18>
+  return vdst;
+}
+ 336:	5b                   	pop    %ebx
+ 337:	5e                   	pop    %esi
+ 338:	5d                   	pop    %ebp
+ 339:	c3                   	ret    
+
+0000033a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 33a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <exit>:
+SYSCALL(exit)
+ 342:	b8 02 00 00 00       	mov    $0x2,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <wait>:
+SYSCALL(wait)
+ 34a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <pipe>:
+SYSCALL(pipe)
+ 352:	b8 04 00 00 00       	mov    $0x4,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <read>:
+SYSCALL(read)
+ 35a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <write>:
+SYSCALL(write)
+ 362:	b8 10 00 00 00       	mov    $0x10,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <close>:
+SYSCALL(close)
+ 36a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <kill>:
+SYSCALL(kill)
+ 372:	b8 06 00 00 00       	mov    $0x6,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <exec>:
+SYSCALL(exec)
+ 37a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <open>:
+SYSCALL(open)
+ 382:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <mknod>:
+SYSCALL(mknod)
+ 38a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <unlink>:
+SYSCALL(unlink)
+ 392:	b8 12 00 00 00       	mov    $0x12,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <fstat>:
+SYSCALL(fstat)
+ 39a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <link>:
+SYSCALL(link)
+ 3a2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <mkdir>:
+SYSCALL(mkdir)
+ 3aa:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <chdir>:
+SYSCALL(chdir)
+ 3b2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <dup>:
+SYSCALL(dup)
+ 3ba:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <getpid>:
+SYSCALL(getpid)
+ 3c2:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <sbrk>:
+SYSCALL(sbrk)
+ 3ca:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <sleep>:
+SYSCALL(sleep)
+ 3d2:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <uptime>:
+SYSCALL(uptime)
+ 3da:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <kmalloc>:
+SYSCALL(kmalloc)
+ 3e2:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <kmfree>:
+SYSCALL(kmfree) 
+ 3ea:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <mmap>:
+SYSCALL(mmap)
+ 3f2:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <munmap>:
+ 3fa:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+ 402:	66 90                	xchg   %ax,%ax
+ 404:	66 90                	xchg   %ax,%ax
+ 406:	66 90                	xchg   %ax,%ax
+ 408:	66 90                	xchg   %ax,%ax
+ 40a:	66 90                	xchg   %ax,%ax
+ 40c:	66 90                	xchg   %ax,%ax
+ 40e:	66 90                	xchg   %ax,%ax
+
+00000410 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 419:	85 d2                	test   %edx,%edx
+{
+ 41b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 41e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 420:	79 76                	jns    498 <printint+0x88>
+ 422:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 426:	74 70                	je     498 <printint+0x88>
+    x = -xx;
+ 428:	f7 d8                	neg    %eax
+    neg = 1;
+ 42a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 431:	31 f6                	xor    %esi,%esi
+ 433:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 436:	eb 0a                	jmp    442 <printint+0x32>
+ 438:	90                   	nop
+ 439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 440:	89 fe                	mov    %edi,%esi
+ 442:	31 d2                	xor    %edx,%edx
+ 444:	8d 7e 01             	lea    0x1(%esi),%edi
+ 447:	f7 f1                	div    %ecx
+ 449:	0f b6 92 60 08 00 00 	movzbl 0x860(%edx),%edx
+  }while((x /= base) != 0);
+ 450:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 452:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 455:	75 e9                	jne    440 <printint+0x30>
+  if(neg)
+ 457:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 45a:	85 c0                	test   %eax,%eax
+ 45c:	74 08                	je     466 <printint+0x56>
+    buf[i++] = '-';
+ 45e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 463:	8d 7e 02             	lea    0x2(%esi),%edi
+ 466:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 46a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 46d:	8d 76 00             	lea    0x0(%esi),%esi
+ 470:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 473:	83 ec 04             	sub    $0x4,%esp
+ 476:	83 ee 01             	sub    $0x1,%esi
+ 479:	6a 01                	push   $0x1
+ 47b:	53                   	push   %ebx
+ 47c:	57                   	push   %edi
+ 47d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 480:	e8 dd fe ff ff       	call   362 <write>
+
+  while(--i >= 0)
+ 485:	83 c4 10             	add    $0x10,%esp
+ 488:	39 de                	cmp    %ebx,%esi
+ 48a:	75 e4                	jne    470 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 48c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 48f:	5b                   	pop    %ebx
+ 490:	5e                   	pop    %esi
+ 491:	5f                   	pop    %edi
+ 492:	5d                   	pop    %ebp
+ 493:	c3                   	ret    
+ 494:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 498:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 49f:	eb 90                	jmp    431 <printint+0x21>
+ 4a1:	eb 0d                	jmp    4b0 <printf>
+ 4a3:	90                   	nop
+ 4a4:	90                   	nop
+ 4a5:	90                   	nop
+ 4a6:	90                   	nop
+ 4a7:	90                   	nop
+ 4a8:	90                   	nop
+ 4a9:	90                   	nop
+ 4aa:	90                   	nop
+ 4ab:	90                   	nop
+ 4ac:	90                   	nop
+ 4ad:	90                   	nop
+ 4ae:	90                   	nop
+ 4af:	90                   	nop
+
+000004b0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4b0:	55                   	push   %ebp
+ 4b1:	89 e5                	mov    %esp,%ebp
+ 4b3:	57                   	push   %edi
+ 4b4:	56                   	push   %esi
+ 4b5:	53                   	push   %ebx
+ 4b6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4b9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4bc:	0f b6 1e             	movzbl (%esi),%ebx
+ 4bf:	84 db                	test   %bl,%bl
+ 4c1:	0f 84 b3 00 00 00    	je     57a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 4c7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4ca:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 4cd:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 4cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4d2:	eb 2f                	jmp    503 <printf+0x53>
+ 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 4d8:	83 f8 25             	cmp    $0x25,%eax
+ 4db:	0f 84 a7 00 00 00    	je     588 <printf+0xd8>
+  write(fd, &c, 1);
+ 4e1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 4e4:	83 ec 04             	sub    $0x4,%esp
+ 4e7:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 4ea:	6a 01                	push   $0x1
+ 4ec:	50                   	push   %eax
+ 4ed:	ff 75 08             	pushl  0x8(%ebp)
+ 4f0:	e8 6d fe ff ff       	call   362 <write>
+ 4f5:	83 c4 10             	add    $0x10,%esp
+ 4f8:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 4fb:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4ff:	84 db                	test   %bl,%bl
+ 501:	74 77                	je     57a <printf+0xca>
+    if(state == 0){
+ 503:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 505:	0f be cb             	movsbl %bl,%ecx
+ 508:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 50b:	74 cb                	je     4d8 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 50d:	83 ff 25             	cmp    $0x25,%edi
+ 510:	75 e6                	jne    4f8 <printf+0x48>
+      if(c == 'd'){
+ 512:	83 f8 64             	cmp    $0x64,%eax
+ 515:	0f 84 05 01 00 00    	je     620 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 51b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 521:	83 f9 70             	cmp    $0x70,%ecx
+ 524:	74 72                	je     598 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 526:	83 f8 73             	cmp    $0x73,%eax
+ 529:	0f 84 99 00 00 00    	je     5c8 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 52f:	83 f8 63             	cmp    $0x63,%eax
+ 532:	0f 84 08 01 00 00    	je     640 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 538:	83 f8 25             	cmp    $0x25,%eax
+ 53b:	0f 84 ef 00 00 00    	je     630 <printf+0x180>
+  write(fd, &c, 1);
+ 541:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 544:	83 ec 04             	sub    $0x4,%esp
+ 547:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 54b:	6a 01                	push   $0x1
+ 54d:	50                   	push   %eax
+ 54e:	ff 75 08             	pushl  0x8(%ebp)
+ 551:	e8 0c fe ff ff       	call   362 <write>
+ 556:	83 c4 0c             	add    $0xc,%esp
+ 559:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 55c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 55f:	6a 01                	push   $0x1
+ 561:	50                   	push   %eax
+ 562:	ff 75 08             	pushl  0x8(%ebp)
+ 565:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 568:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 56a:	e8 f3 fd ff ff       	call   362 <write>
+  for(i = 0; fmt[i]; i++){
+ 56f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 573:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 576:	84 db                	test   %bl,%bl
+ 578:	75 89                	jne    503 <printf+0x53>
+    }
+  }
+}
+ 57a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 57d:	5b                   	pop    %ebx
+ 57e:	5e                   	pop    %esi
+ 57f:	5f                   	pop    %edi
+ 580:	5d                   	pop    %ebp
+ 581:	c3                   	ret    
+ 582:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 588:	bf 25 00 00 00       	mov    $0x25,%edi
+ 58d:	e9 66 ff ff ff       	jmp    4f8 <printf+0x48>
+ 592:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 598:	83 ec 0c             	sub    $0xc,%esp
+ 59b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5a0:	6a 00                	push   $0x0
+ 5a2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 5a5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5a8:	8b 17                	mov    (%edi),%edx
+ 5aa:	e8 61 fe ff ff       	call   410 <printint>
+        ap++;
+ 5af:	89 f8                	mov    %edi,%eax
+ 5b1:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5b4:	31 ff                	xor    %edi,%edi
+        ap++;
+ 5b6:	83 c0 04             	add    $0x4,%eax
+ 5b9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 5bc:	e9 37 ff ff ff       	jmp    4f8 <printf+0x48>
+ 5c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 5c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 5cb:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 5cd:	83 c0 04             	add    $0x4,%eax
+ 5d0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 5d3:	85 c9                	test   %ecx,%ecx
+ 5d5:	0f 84 8e 00 00 00    	je     669 <printf+0x1b9>
+        while(*s != 0){
+ 5db:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 5de:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 5e0:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 5e2:	84 c0                	test   %al,%al
+ 5e4:	0f 84 0e ff ff ff    	je     4f8 <printf+0x48>
+ 5ea:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 5ed:	89 de                	mov    %ebx,%esi
+ 5ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 5f5:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 5f8:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5fb:	83 c6 01             	add    $0x1,%esi
+ 5fe:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 601:	6a 01                	push   $0x1
+ 603:	57                   	push   %edi
+ 604:	53                   	push   %ebx
+ 605:	e8 58 fd ff ff       	call   362 <write>
+        while(*s != 0){
+ 60a:	0f b6 06             	movzbl (%esi),%eax
+ 60d:	83 c4 10             	add    $0x10,%esp
+ 610:	84 c0                	test   %al,%al
+ 612:	75 e4                	jne    5f8 <printf+0x148>
+ 614:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 617:	31 ff                	xor    %edi,%edi
+ 619:	e9 da fe ff ff       	jmp    4f8 <printf+0x48>
+ 61e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 620:	83 ec 0c             	sub    $0xc,%esp
+ 623:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 628:	6a 01                	push   $0x1
+ 62a:	e9 73 ff ff ff       	jmp    5a2 <printf+0xf2>
+ 62f:	90                   	nop
+  write(fd, &c, 1);
+ 630:	83 ec 04             	sub    $0x4,%esp
+ 633:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 636:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 639:	6a 01                	push   $0x1
+ 63b:	e9 21 ff ff ff       	jmp    561 <printf+0xb1>
+        putc(fd, *ap);
+ 640:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 643:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 646:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 648:	6a 01                	push   $0x1
+        ap++;
+ 64a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 64d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 650:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 653:	50                   	push   %eax
+ 654:	ff 75 08             	pushl  0x8(%ebp)
+ 657:	e8 06 fd ff ff       	call   362 <write>
+        ap++;
+ 65c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 65f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 662:	31 ff                	xor    %edi,%edi
+ 664:	e9 8f fe ff ff       	jmp    4f8 <printf+0x48>
+          s = "(null)";
+ 669:	bb 58 08 00 00       	mov    $0x858,%ebx
+        while(*s != 0){
+ 66e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 673:	e9 72 ff ff ff       	jmp    5ea <printf+0x13a>
+ 678:	66 90                	xchg   %ax,%ax
+ 67a:	66 90                	xchg   %ax,%ax
+ 67c:	66 90                	xchg   %ax,%ax
+ 67e:	66 90                	xchg   %ax,%ax
+
+00000680 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 680:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 681:	a1 10 0b 00 00       	mov    0xb10,%eax
+{
+ 686:	89 e5                	mov    %esp,%ebp
+ 688:	57                   	push   %edi
+ 689:	56                   	push   %esi
+ 68a:	53                   	push   %ebx
+ 68b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 68e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 691:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 698:	39 c8                	cmp    %ecx,%eax
+ 69a:	8b 10                	mov    (%eax),%edx
+ 69c:	73 32                	jae    6d0 <free+0x50>
+ 69e:	39 d1                	cmp    %edx,%ecx
+ 6a0:	72 04                	jb     6a6 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6a2:	39 d0                	cmp    %edx,%eax
+ 6a4:	72 32                	jb     6d8 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6a6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6a9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ac:	39 fa                	cmp    %edi,%edx
+ 6ae:	74 30                	je     6e0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6b0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6b3:	8b 50 04             	mov    0x4(%eax),%edx
+ 6b6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6b9:	39 f1                	cmp    %esi,%ecx
+ 6bb:	74 3a                	je     6f7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6bd:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 6bf:	a3 10 0b 00 00       	mov    %eax,0xb10
+}
+ 6c4:	5b                   	pop    %ebx
+ 6c5:	5e                   	pop    %esi
+ 6c6:	5f                   	pop    %edi
+ 6c7:	5d                   	pop    %ebp
+ 6c8:	c3                   	ret    
+ 6c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6d0:	39 d0                	cmp    %edx,%eax
+ 6d2:	72 04                	jb     6d8 <free+0x58>
+ 6d4:	39 d1                	cmp    %edx,%ecx
+ 6d6:	72 ce                	jb     6a6 <free+0x26>
+{
+ 6d8:	89 d0                	mov    %edx,%eax
+ 6da:	eb bc                	jmp    698 <free+0x18>
+ 6dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 6e0:	03 72 04             	add    0x4(%edx),%esi
+ 6e3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6e6:	8b 10                	mov    (%eax),%edx
+ 6e8:	8b 12                	mov    (%edx),%edx
+ 6ea:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6ed:	8b 50 04             	mov    0x4(%eax),%edx
+ 6f0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6f3:	39 f1                	cmp    %esi,%ecx
+ 6f5:	75 c6                	jne    6bd <free+0x3d>
+    p->s.size += bp->s.size;
+ 6f7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6fa:	a3 10 0b 00 00       	mov    %eax,0xb10
+    p->s.size += bp->s.size;
+ 6ff:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 702:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 705:	89 10                	mov    %edx,(%eax)
+}
+ 707:	5b                   	pop    %ebx
+ 708:	5e                   	pop    %esi
+ 709:	5f                   	pop    %edi
+ 70a:	5d                   	pop    %ebp
+ 70b:	c3                   	ret    
+ 70c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000710 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 710:	55                   	push   %ebp
+ 711:	89 e5                	mov    %esp,%ebp
+ 713:	57                   	push   %edi
+ 714:	56                   	push   %esi
+ 715:	53                   	push   %ebx
+ 716:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 719:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 71c:	8b 15 10 0b 00 00    	mov    0xb10,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 722:	8d 78 07             	lea    0x7(%eax),%edi
+ 725:	c1 ef 03             	shr    $0x3,%edi
+ 728:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 72b:	85 d2                	test   %edx,%edx
+ 72d:	0f 84 9d 00 00 00    	je     7d0 <malloc+0xc0>
+ 733:	8b 02                	mov    (%edx),%eax
+ 735:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 738:	39 cf                	cmp    %ecx,%edi
+ 73a:	76 6c                	jbe    7a8 <malloc+0x98>
+ 73c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 742:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 747:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 74a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 751:	eb 0e                	jmp    761 <malloc+0x51>
+ 753:	90                   	nop
+ 754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 758:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 75a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 75d:	39 f9                	cmp    %edi,%ecx
+ 75f:	73 47                	jae    7a8 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 761:	39 05 10 0b 00 00    	cmp    %eax,0xb10
+ 767:	89 c2                	mov    %eax,%edx
+ 769:	75 ed                	jne    758 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 76b:	83 ec 0c             	sub    $0xc,%esp
+ 76e:	56                   	push   %esi
+ 76f:	e8 56 fc ff ff       	call   3ca <sbrk>
+  if(p == (char*)-1)
+ 774:	83 c4 10             	add    $0x10,%esp
+ 777:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 77a:	74 1c                	je     798 <malloc+0x88>
+  hp->s.size = nu;
+ 77c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 77f:	83 ec 0c             	sub    $0xc,%esp
+ 782:	83 c0 08             	add    $0x8,%eax
+ 785:	50                   	push   %eax
+ 786:	e8 f5 fe ff ff       	call   680 <free>
+  return freep;
+ 78b:	8b 15 10 0b 00 00    	mov    0xb10,%edx
+      if((p = morecore(nunits)) == 0)
+ 791:	83 c4 10             	add    $0x10,%esp
+ 794:	85 d2                	test   %edx,%edx
+ 796:	75 c0                	jne    758 <malloc+0x48>
+        return 0;
+  }
+}
+ 798:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 79b:	31 c0                	xor    %eax,%eax
+}
+ 79d:	5b                   	pop    %ebx
+ 79e:	5e                   	pop    %esi
+ 79f:	5f                   	pop    %edi
+ 7a0:	5d                   	pop    %ebp
+ 7a1:	c3                   	ret    
+ 7a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 7a8:	39 cf                	cmp    %ecx,%edi
+ 7aa:	74 54                	je     800 <malloc+0xf0>
+        p->s.size -= nunits;
+ 7ac:	29 f9                	sub    %edi,%ecx
+ 7ae:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 7b1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 7b4:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 7b7:	89 15 10 0b 00 00    	mov    %edx,0xb10
+}
+ 7bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7c0:	83 c0 08             	add    $0x8,%eax
+}
+ 7c3:	5b                   	pop    %ebx
+ 7c4:	5e                   	pop    %esi
+ 7c5:	5f                   	pop    %edi
+ 7c6:	5d                   	pop    %ebp
+ 7c7:	c3                   	ret    
+ 7c8:	90                   	nop
+ 7c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 7d0:	c7 05 10 0b 00 00 14 	movl   $0xb14,0xb10
+ 7d7:	0b 00 00 
+ 7da:	c7 05 14 0b 00 00 14 	movl   $0xb14,0xb14
+ 7e1:	0b 00 00 
+    base.s.size = 0;
+ 7e4:	b8 14 0b 00 00       	mov    $0xb14,%eax
+ 7e9:	c7 05 18 0b 00 00 00 	movl   $0x0,0xb18
+ 7f0:	00 00 00 
+ 7f3:	e9 44 ff ff ff       	jmp    73c <malloc+0x2c>
+ 7f8:	90                   	nop
+ 7f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 800:	8b 08                	mov    (%eax),%ecx
+ 802:	89 0a                	mov    %ecx,(%edx)
+ 804:	eb b1                	jmp    7b7 <malloc+0xa7>
Binary files src-old/initcode and src/initcode differ
diff -ruN src-old/initcode.asm src/initcode.asm
--- src-old/initcode.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/initcode.asm	2023-04-19 02:18:55.368099188 +0000
@@ -0,0 +1,43 @@
+
+initcode.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <start>:
+
+
+# exec(init, argv)
+.globl start
+start:
+  pushl $argv
+   0:	68 24 00 00 00       	push   $0x24
+  pushl $init
+   5:	68 1c 00 00 00       	push   $0x1c
+  pushl $0  // where caller pc would be
+   a:	6a 00                	push   $0x0
+  movl $SYS_exec, %eax
+   c:	b8 07 00 00 00       	mov    $0x7,%eax
+  int $T_SYSCALL
+  11:	cd 40                	int    $0x40
+
+00000013 <exit>:
+
+# for(;;) exit();
+exit:
+  movl $SYS_exit, %eax
+  13:	b8 02 00 00 00       	mov    $0x2,%eax
+  int $T_SYSCALL
+  18:	cd 40                	int    $0x40
+  jmp exit
+  1a:	eb f7                	jmp    13 <exit>
+
+0000001c <init>:
+  1c:	2f                   	das    
+  1d:	69 6e 69 74 00 00 90 	imul   $0x90000074,0x69(%esi),%ebp
+
+00000024 <argv>:
+  24:	1c 00                	sbb    $0x0,%al
+  26:	00 00                	add    %al,(%eax)
+  28:	00 00                	add    %al,(%eax)
+	...
diff -ruN src-old/initcode.d src/initcode.d
--- src-old/initcode.d	1970-01-01 00:00:00.000000000 +0000
+++ src/initcode.d	2023-04-19 02:18:55.352097291 +0000
@@ -0,0 +1 @@
+initcode.o: initcode.S syscall.h traps.h
Binary files src-old/initcode.o and src/initcode.o differ
Binary files src-old/initcode.out and src/initcode.out differ
diff -ruN src-old/init.d src/init.d
--- src-old/init.d	1970-01-01 00:00:00.000000000 +0000
+++ src/init.d	2023-04-19 02:18:55.968170300 +0000
@@ -0,0 +1 @@
+init.o: init.c /usr/include/stdc-predef.h types.h stat.h user.h fcntl.h
Binary files src-old/init.o and src/init.o differ
diff -ruN src-old/init.sym src/init.sym
--- src-old/init.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/init.sym	2023-04-19 02:18:56.000174092 +0000
@@ -0,0 +1,63 @@
+00000000 .text
+00000808 .rodata
+00000874 .eh_frame
+00000b08 .data
+00000b10 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 init.c
+00000000 ulib.c
+00000000 printf.c
+00000410 printint
+00000860 digits.1052
+00000000 umalloc.c
+00000b10 freep
+00000b14 base
+000000f0 strcpy
+000004b0 printf
+00000b08 argv
+00000310 memmove
+000003fa munmap
+0000038a mknod
+00000200 gets
+000003c2 getpid
+00000710 malloc
+000003d2 sleep
+000003ea kmfree
+000003f2 mmap
+00000352 pipe
+00000362 write
+0000039a fstat
+00000372 kill
+000003b2 chdir
+0000037a exec
+0000034a wait
+0000035a read
+00000392 unlink
+0000033a fork
+000003ca sbrk
+000003da uptime
+00000b10 __bss_start
+000001a0 memset
+00000000 main
+00000120 strcmp
+000003ba dup
+00000280 stat
+00000b10 _edata
+00000b1c _end
+000003a2 link
+000003e2 kmalloc
+00000342 exit
+000002d0 atoi
+00000170 strlen
+00000382 open
+000001c0 strchr
+000003aa mkdir
+0000036a close
+00000680 free
diff -ruN src-old/ioapic.d src/ioapic.d
--- src-old/ioapic.d	1970-01-01 00:00:00.000000000 +0000
+++ src/ioapic.d	2023-04-19 02:18:54.023939667 +0000
@@ -0,0 +1 @@
+ioapic.o: ioapic.c /usr/include/stdc-predef.h types.h defs.h traps.h
Binary files src-old/ioapic.o and src/ioapic.o differ
diff -ruN src-old/kalloc.d src/kalloc.d
--- src-old/kalloc.d	1970-01-01 00:00:00.000000000 +0000
+++ src/kalloc.d	2023-04-19 02:18:54.071945367 +0000
@@ -0,0 +1,2 @@
+kalloc.o: kalloc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h spinlock.h
Binary files src-old/kalloc.o and src/kalloc.o differ
diff -ruN src-old/kbd.d src/kbd.d
--- src-old/kbd.d	1970-01-01 00:00:00.000000000 +0000
+++ src/kbd.d	2023-04-19 02:18:54.207961518 +0000
@@ -0,0 +1 @@
+kbd.o: kbd.c /usr/include/stdc-predef.h types.h x86.h defs.h kbd.h
Binary files src-old/kbd.o and src/kbd.o differ
Binary files src-old/kernel and src/kernel differ
diff -ruN src-old/kernel.asm src/kernel.asm
--- src-old/kernel.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/kernel.asm	2023-04-19 02:18:55.400102980 +0000
@@ -0,0 +1,16234 @@
+
+kernel:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+80100000 <multiboot_header>:
+80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
+80100006:	00 00                	add    %al,(%eax)
+80100008:	fe 4f 52             	decb   0x52(%edi)
+8010000b:	e4                   	.byte 0xe4
+
+8010000c <entry>:
+
+# Entering xv6 on boot processor, with paging off.
+.globl entry
+entry:
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+8010000c:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+8010000f:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+80100012:	0f 22 e0             	mov    %eax,%cr4
+  # Set page directory
+  movl    $(V2P_WO(entrypgdir)), %eax
+80100015:	b8 00 90 10 00       	mov    $0x109000,%eax
+  movl    %eax, %cr3
+8010001a:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+8010001d:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PG|CR0_WP), %eax
+80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
+  movl    %eax, %cr0
+80100025:	0f 22 c0             	mov    %eax,%cr0
+
+  # Set up the stack pointer.
+  movl $(stack + KSTACKSIZE), %esp
+80100028:	bc d0 b5 10 80       	mov    $0x8010b5d0,%esp
+
+  # Jump to main(), and switch to executing at
+  # high addresses. The indirect call is needed because
+  # the assembler produces a PC-relative instruction
+  # for a direct jump.
+  mov $main, %eax
+8010002d:	b8 b0 31 10 80       	mov    $0x801031b0,%eax
+  jmp *%eax
+80100032:	ff e0                	jmp    *%eax
+80100034:	66 90                	xchg   %ax,%ax
+80100036:	66 90                	xchg   %ax,%ax
+80100038:	66 90                	xchg   %ax,%ax
+8010003a:	66 90                	xchg   %ax,%ax
+8010003c:	66 90                	xchg   %ax,%ax
+8010003e:	66 90                	xchg   %ax,%ax
+
+80100040 <binit>:
+  struct buf head;
+} bcache;
+
+void
+binit(void)
+{
+80100040:	55                   	push   %ebp
+80100041:	89 e5                	mov    %esp,%ebp
+80100043:	53                   	push   %ebx
+
+//PAGEBREAK!
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+  bcache.head.next = &bcache.head;
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+80100044:	bb 14 b6 10 80       	mov    $0x8010b614,%ebx
+{
+80100049:	83 ec 0c             	sub    $0xc,%esp
+  initlock(&bcache.lock, "bcache");
+8010004c:	68 a0 73 10 80       	push   $0x801073a0
+80100051:	68 e0 b5 10 80       	push   $0x8010b5e0
+80100056:	e8 15 45 00 00       	call   80104570 <initlock>
+  bcache.head.prev = &bcache.head;
+8010005b:	c7 05 2c fd 10 80 dc 	movl   $0x8010fcdc,0x8010fd2c
+80100062:	fc 10 80 
+  bcache.head.next = &bcache.head;
+80100065:	c7 05 30 fd 10 80 dc 	movl   $0x8010fcdc,0x8010fd30
+8010006c:	fc 10 80 
+8010006f:	83 c4 10             	add    $0x10,%esp
+80100072:	ba dc fc 10 80       	mov    $0x8010fcdc,%edx
+80100077:	eb 09                	jmp    80100082 <binit+0x42>
+80100079:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100080:	89 c3                	mov    %eax,%ebx
+    b->next = bcache.head.next;
+    b->prev = &bcache.head;
+    initsleeplock(&b->lock, "buffer");
+80100082:	8d 43 0c             	lea    0xc(%ebx),%eax
+80100085:	83 ec 08             	sub    $0x8,%esp
+    b->next = bcache.head.next;
+80100088:	89 53 54             	mov    %edx,0x54(%ebx)
+    b->prev = &bcache.head;
+8010008b:	c7 43 50 dc fc 10 80 	movl   $0x8010fcdc,0x50(%ebx)
+    initsleeplock(&b->lock, "buffer");
+80100092:	68 a7 73 10 80       	push   $0x801073a7
+80100097:	50                   	push   %eax
+80100098:	e8 a3 43 00 00       	call   80104440 <initsleeplock>
+    bcache.head.next->prev = b;
+8010009d:	a1 30 fd 10 80       	mov    0x8010fd30,%eax
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000a2:	83 c4 10             	add    $0x10,%esp
+801000a5:	89 da                	mov    %ebx,%edx
+    bcache.head.next->prev = b;
+801000a7:	89 58 50             	mov    %ebx,0x50(%eax)
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000aa:	8d 83 5c 02 00 00    	lea    0x25c(%ebx),%eax
+    bcache.head.next = b;
+801000b0:	89 1d 30 fd 10 80    	mov    %ebx,0x8010fd30
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000b6:	3d dc fc 10 80       	cmp    $0x8010fcdc,%eax
+801000bb:	72 c3                	jb     80100080 <binit+0x40>
+  }
+}
+801000bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801000c0:	c9                   	leave  
+801000c1:	c3                   	ret    
+801000c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801000c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801000d0 <bread>:
+}
+
+// Return a locked buf with the contents of the indicated block.
+struct buf*
+bread(uint dev, uint blockno)
+{
+801000d0:	55                   	push   %ebp
+801000d1:	89 e5                	mov    %esp,%ebp
+801000d3:	57                   	push   %edi
+801000d4:	56                   	push   %esi
+801000d5:	53                   	push   %ebx
+801000d6:	83 ec 18             	sub    $0x18,%esp
+801000d9:	8b 75 08             	mov    0x8(%ebp),%esi
+801000dc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  acquire(&bcache.lock);
+801000df:	68 e0 b5 10 80       	push   $0x8010b5e0
+801000e4:	e8 c7 45 00 00       	call   801046b0 <acquire>
+  for(b = bcache.head.next; b != &bcache.head; b = b->next){
+801000e9:	8b 1d 30 fd 10 80    	mov    0x8010fd30,%ebx
+801000ef:	83 c4 10             	add    $0x10,%esp
+801000f2:	81 fb dc fc 10 80    	cmp    $0x8010fcdc,%ebx
+801000f8:	75 11                	jne    8010010b <bread+0x3b>
+801000fa:	eb 24                	jmp    80100120 <bread+0x50>
+801000fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
+80100103:	81 fb dc fc 10 80    	cmp    $0x8010fcdc,%ebx
+80100109:	74 15                	je     80100120 <bread+0x50>
+    if(b->dev == dev && b->blockno == blockno){
+8010010b:	3b 73 04             	cmp    0x4(%ebx),%esi
+8010010e:	75 f0                	jne    80100100 <bread+0x30>
+80100110:	3b 7b 08             	cmp    0x8(%ebx),%edi
+80100113:	75 eb                	jne    80100100 <bread+0x30>
+      b->refcnt++;
+80100115:	83 43 4c 01          	addl   $0x1,0x4c(%ebx)
+80100119:	eb 3f                	jmp    8010015a <bread+0x8a>
+8010011b:	90                   	nop
+8010011c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
+80100120:	8b 1d 2c fd 10 80    	mov    0x8010fd2c,%ebx
+80100126:	81 fb dc fc 10 80    	cmp    $0x8010fcdc,%ebx
+8010012c:	75 0d                	jne    8010013b <bread+0x6b>
+8010012e:	eb 60                	jmp    80100190 <bread+0xc0>
+80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
+80100133:	81 fb dc fc 10 80    	cmp    $0x8010fcdc,%ebx
+80100139:	74 55                	je     80100190 <bread+0xc0>
+    if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
+8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
+8010013e:	85 c0                	test   %eax,%eax
+80100140:	75 ee                	jne    80100130 <bread+0x60>
+80100142:	f6 03 04             	testb  $0x4,(%ebx)
+80100145:	75 e9                	jne    80100130 <bread+0x60>
+      b->dev = dev;
+80100147:	89 73 04             	mov    %esi,0x4(%ebx)
+      b->blockno = blockno;
+8010014a:	89 7b 08             	mov    %edi,0x8(%ebx)
+      b->flags = 0;
+8010014d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+      b->refcnt = 1;
+80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+      release(&bcache.lock);
+8010015a:	83 ec 0c             	sub    $0xc,%esp
+8010015d:	68 e0 b5 10 80       	push   $0x8010b5e0
+80100162:	e8 09 46 00 00       	call   80104770 <release>
+      acquiresleep(&b->lock);
+80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
+8010016a:	89 04 24             	mov    %eax,(%esp)
+8010016d:	e8 0e 43 00 00       	call   80104480 <acquiresleep>
+80100172:	83 c4 10             	add    $0x10,%esp
+  struct buf *b;
+
+  b = bget(dev, blockno);
+  if((b->flags & B_VALID) == 0) {
+80100175:	f6 03 02             	testb  $0x2,(%ebx)
+80100178:	75 0c                	jne    80100186 <bread+0xb6>
+    iderw(b);
+8010017a:	83 ec 0c             	sub    $0xc,%esp
+8010017d:	53                   	push   %ebx
+8010017e:	e8 ad 1f 00 00       	call   80102130 <iderw>
+80100183:	83 c4 10             	add    $0x10,%esp
+  }
+  return b;
+}
+80100186:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100189:	89 d8                	mov    %ebx,%eax
+8010018b:	5b                   	pop    %ebx
+8010018c:	5e                   	pop    %esi
+8010018d:	5f                   	pop    %edi
+8010018e:	5d                   	pop    %ebp
+8010018f:	c3                   	ret    
+  panic("bget: no buffers");
+80100190:	83 ec 0c             	sub    $0xc,%esp
+80100193:	68 ae 73 10 80       	push   $0x801073ae
+80100198:	e8 f3 01 00 00       	call   80100390 <panic>
+8010019d:	8d 76 00             	lea    0x0(%esi),%esi
+
+801001a0 <bwrite>:
+
+// Write b's contents to disk.  Must be locked.
+void
+bwrite(struct buf *b)
+{
+801001a0:	55                   	push   %ebp
+801001a1:	89 e5                	mov    %esp,%ebp
+801001a3:	53                   	push   %ebx
+801001a4:	83 ec 10             	sub    $0x10,%esp
+801001a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holdingsleep(&b->lock))
+801001aa:	8d 43 0c             	lea    0xc(%ebx),%eax
+801001ad:	50                   	push   %eax
+801001ae:	e8 6d 43 00 00       	call   80104520 <holdingsleep>
+801001b3:	83 c4 10             	add    $0x10,%esp
+801001b6:	85 c0                	test   %eax,%eax
+801001b8:	74 0f                	je     801001c9 <bwrite+0x29>
+    panic("bwrite");
+  b->flags |= B_DIRTY;
+801001ba:	83 0b 04             	orl    $0x4,(%ebx)
+  iderw(b);
+801001bd:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+801001c0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801001c3:	c9                   	leave  
+  iderw(b);
+801001c4:	e9 67 1f 00 00       	jmp    80102130 <iderw>
+    panic("bwrite");
+801001c9:	83 ec 0c             	sub    $0xc,%esp
+801001cc:	68 bf 73 10 80       	push   $0x801073bf
+801001d1:	e8 ba 01 00 00       	call   80100390 <panic>
+801001d6:	8d 76 00             	lea    0x0(%esi),%esi
+801001d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801001e0 <brelse>:
+
+// Release a locked buffer.
+// Move to the head of the MRU list.
+void
+brelse(struct buf *b)
+{
+801001e0:	55                   	push   %ebp
+801001e1:	89 e5                	mov    %esp,%ebp
+801001e3:	56                   	push   %esi
+801001e4:	53                   	push   %ebx
+801001e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holdingsleep(&b->lock))
+801001e8:	83 ec 0c             	sub    $0xc,%esp
+801001eb:	8d 73 0c             	lea    0xc(%ebx),%esi
+801001ee:	56                   	push   %esi
+801001ef:	e8 2c 43 00 00       	call   80104520 <holdingsleep>
+801001f4:	83 c4 10             	add    $0x10,%esp
+801001f7:	85 c0                	test   %eax,%eax
+801001f9:	74 66                	je     80100261 <brelse+0x81>
+    panic("brelse");
+
+  releasesleep(&b->lock);
+801001fb:	83 ec 0c             	sub    $0xc,%esp
+801001fe:	56                   	push   %esi
+801001ff:	e8 dc 42 00 00       	call   801044e0 <releasesleep>
+
+  acquire(&bcache.lock);
+80100204:	c7 04 24 e0 b5 10 80 	movl   $0x8010b5e0,(%esp)
+8010020b:	e8 a0 44 00 00       	call   801046b0 <acquire>
+  b->refcnt--;
+80100210:	8b 43 4c             	mov    0x4c(%ebx),%eax
+  if (b->refcnt == 0) {
+80100213:	83 c4 10             	add    $0x10,%esp
+  b->refcnt--;
+80100216:	83 e8 01             	sub    $0x1,%eax
+  if (b->refcnt == 0) {
+80100219:	85 c0                	test   %eax,%eax
+  b->refcnt--;
+8010021b:	89 43 4c             	mov    %eax,0x4c(%ebx)
+  if (b->refcnt == 0) {
+8010021e:	75 2f                	jne    8010024f <brelse+0x6f>
+    // no one is waiting for it.
+    b->next->prev = b->prev;
+80100220:	8b 43 54             	mov    0x54(%ebx),%eax
+80100223:	8b 53 50             	mov    0x50(%ebx),%edx
+80100226:	89 50 50             	mov    %edx,0x50(%eax)
+    b->prev->next = b->next;
+80100229:	8b 43 50             	mov    0x50(%ebx),%eax
+8010022c:	8b 53 54             	mov    0x54(%ebx),%edx
+8010022f:	89 50 54             	mov    %edx,0x54(%eax)
+    b->next = bcache.head.next;
+80100232:	a1 30 fd 10 80       	mov    0x8010fd30,%eax
+    b->prev = &bcache.head;
+80100237:	c7 43 50 dc fc 10 80 	movl   $0x8010fcdc,0x50(%ebx)
+    b->next = bcache.head.next;
+8010023e:	89 43 54             	mov    %eax,0x54(%ebx)
+    bcache.head.next->prev = b;
+80100241:	a1 30 fd 10 80       	mov    0x8010fd30,%eax
+80100246:	89 58 50             	mov    %ebx,0x50(%eax)
+    bcache.head.next = b;
+80100249:	89 1d 30 fd 10 80    	mov    %ebx,0x8010fd30
+  }
+  
+  release(&bcache.lock);
+8010024f:	c7 45 08 e0 b5 10 80 	movl   $0x8010b5e0,0x8(%ebp)
+}
+80100256:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80100259:	5b                   	pop    %ebx
+8010025a:	5e                   	pop    %esi
+8010025b:	5d                   	pop    %ebp
+  release(&bcache.lock);
+8010025c:	e9 0f 45 00 00       	jmp    80104770 <release>
+    panic("brelse");
+80100261:	83 ec 0c             	sub    $0xc,%esp
+80100264:	68 c6 73 10 80       	push   $0x801073c6
+80100269:	e8 22 01 00 00       	call   80100390 <panic>
+8010026e:	66 90                	xchg   %ax,%ax
+
+80100270 <consoleread>:
+  }
+}
+
+int
+consoleread(struct inode *ip, char *dst, int n)
+{
+80100270:	55                   	push   %ebp
+80100271:	89 e5                	mov    %esp,%ebp
+80100273:	57                   	push   %edi
+80100274:	56                   	push   %esi
+80100275:	53                   	push   %ebx
+80100276:	83 ec 28             	sub    $0x28,%esp
+80100279:	8b 7d 08             	mov    0x8(%ebp),%edi
+8010027c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  uint target;
+  int c;
+
+  iunlock(ip);
+8010027f:	57                   	push   %edi
+80100280:	e8 eb 14 00 00       	call   80101770 <iunlock>
+  target = n;
+  acquire(&cons.lock);
+80100285:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
+8010028c:	e8 1f 44 00 00       	call   801046b0 <acquire>
+  while(n > 0){
+80100291:	8b 5d 10             	mov    0x10(%ebp),%ebx
+80100294:	83 c4 10             	add    $0x10,%esp
+80100297:	31 c0                	xor    %eax,%eax
+80100299:	85 db                	test   %ebx,%ebx
+8010029b:	0f 8e a1 00 00 00    	jle    80100342 <consoleread+0xd2>
+    while(input.r == input.w){
+801002a1:	8b 15 c0 ff 10 80    	mov    0x8010ffc0,%edx
+801002a7:	39 15 c4 ff 10 80    	cmp    %edx,0x8010ffc4
+801002ad:	74 2c                	je     801002db <consoleread+0x6b>
+801002af:	eb 5f                	jmp    80100310 <consoleread+0xa0>
+801002b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(myproc()->killed){
+        release(&cons.lock);
+        ilock(ip);
+        return -1;
+      }
+      sleep(&input.r, &cons.lock);
+801002b8:	83 ec 08             	sub    $0x8,%esp
+801002bb:	68 20 a5 10 80       	push   $0x8010a520
+801002c0:	68 c0 ff 10 80       	push   $0x8010ffc0
+801002c5:	e8 06 3e 00 00       	call   801040d0 <sleep>
+    while(input.r == input.w){
+801002ca:	8b 15 c0 ff 10 80    	mov    0x8010ffc0,%edx
+801002d0:	83 c4 10             	add    $0x10,%esp
+801002d3:	3b 15 c4 ff 10 80    	cmp    0x8010ffc4,%edx
+801002d9:	75 35                	jne    80100310 <consoleread+0xa0>
+      if(myproc()->killed){
+801002db:	e8 10 38 00 00       	call   80103af0 <myproc>
+801002e0:	8b 40 24             	mov    0x24(%eax),%eax
+801002e3:	85 c0                	test   %eax,%eax
+801002e5:	74 d1                	je     801002b8 <consoleread+0x48>
+        release(&cons.lock);
+801002e7:	83 ec 0c             	sub    $0xc,%esp
+801002ea:	68 20 a5 10 80       	push   $0x8010a520
+801002ef:	e8 7c 44 00 00       	call   80104770 <release>
+        ilock(ip);
+801002f4:	89 3c 24             	mov    %edi,(%esp)
+801002f7:	e8 94 13 00 00       	call   80101690 <ilock>
+        return -1;
+801002fc:	83 c4 10             	add    $0x10,%esp
+  }
+  release(&cons.lock);
+  ilock(ip);
+
+  return target - n;
+}
+801002ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return -1;
+80100302:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80100307:	5b                   	pop    %ebx
+80100308:	5e                   	pop    %esi
+80100309:	5f                   	pop    %edi
+8010030a:	5d                   	pop    %ebp
+8010030b:	c3                   	ret    
+8010030c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = input.buf[input.r++ % INPUT_BUF];
+80100310:	8d 42 01             	lea    0x1(%edx),%eax
+80100313:	a3 c0 ff 10 80       	mov    %eax,0x8010ffc0
+80100318:	89 d0                	mov    %edx,%eax
+8010031a:	83 e0 7f             	and    $0x7f,%eax
+8010031d:	0f be 80 40 ff 10 80 	movsbl -0x7fef00c0(%eax),%eax
+    if(c == C('D')){  // EOF
+80100324:	83 f8 04             	cmp    $0x4,%eax
+80100327:	74 3f                	je     80100368 <consoleread+0xf8>
+    *dst++ = c;
+80100329:	83 c6 01             	add    $0x1,%esi
+    --n;
+8010032c:	83 eb 01             	sub    $0x1,%ebx
+    if(c == '\n')
+8010032f:	83 f8 0a             	cmp    $0xa,%eax
+    *dst++ = c;
+80100332:	88 46 ff             	mov    %al,-0x1(%esi)
+    if(c == '\n')
+80100335:	74 43                	je     8010037a <consoleread+0x10a>
+  while(n > 0){
+80100337:	85 db                	test   %ebx,%ebx
+80100339:	0f 85 62 ff ff ff    	jne    801002a1 <consoleread+0x31>
+8010033f:	8b 45 10             	mov    0x10(%ebp),%eax
+  release(&cons.lock);
+80100342:	83 ec 0c             	sub    $0xc,%esp
+80100345:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80100348:	68 20 a5 10 80       	push   $0x8010a520
+8010034d:	e8 1e 44 00 00       	call   80104770 <release>
+  ilock(ip);
+80100352:	89 3c 24             	mov    %edi,(%esp)
+80100355:	e8 36 13 00 00       	call   80101690 <ilock>
+  return target - n;
+8010035a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010035d:	83 c4 10             	add    $0x10,%esp
+}
+80100360:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100363:	5b                   	pop    %ebx
+80100364:	5e                   	pop    %esi
+80100365:	5f                   	pop    %edi
+80100366:	5d                   	pop    %ebp
+80100367:	c3                   	ret    
+80100368:	8b 45 10             	mov    0x10(%ebp),%eax
+8010036b:	29 d8                	sub    %ebx,%eax
+      if(n < target){
+8010036d:	3b 5d 10             	cmp    0x10(%ebp),%ebx
+80100370:	73 d0                	jae    80100342 <consoleread+0xd2>
+        input.r--;
+80100372:	89 15 c0 ff 10 80    	mov    %edx,0x8010ffc0
+80100378:	eb c8                	jmp    80100342 <consoleread+0xd2>
+8010037a:	8b 45 10             	mov    0x10(%ebp),%eax
+8010037d:	29 d8                	sub    %ebx,%eax
+8010037f:	eb c1                	jmp    80100342 <consoleread+0xd2>
+80100381:	eb 0d                	jmp    80100390 <panic>
+80100383:	90                   	nop
+80100384:	90                   	nop
+80100385:	90                   	nop
+80100386:	90                   	nop
+80100387:	90                   	nop
+80100388:	90                   	nop
+80100389:	90                   	nop
+8010038a:	90                   	nop
+8010038b:	90                   	nop
+8010038c:	90                   	nop
+8010038d:	90                   	nop
+8010038e:	90                   	nop
+8010038f:	90                   	nop
+
+80100390 <panic>:
+{
+80100390:	55                   	push   %ebp
+80100391:	89 e5                	mov    %esp,%ebp
+80100393:	56                   	push   %esi
+80100394:	53                   	push   %ebx
+80100395:	83 ec 30             	sub    $0x30,%esp
+}
+
+static inline void
+cli(void)
+{
+  asm volatile("cli");
+80100398:	fa                   	cli    
+  cons.locking = 0;
+80100399:	c7 05 54 a5 10 80 00 	movl   $0x0,0x8010a554
+801003a0:	00 00 00 
+  getcallerpcs(&s, pcs);
+801003a3:	8d 5d d0             	lea    -0x30(%ebp),%ebx
+801003a6:	8d 75 f8             	lea    -0x8(%ebp),%esi
+  cprintf("lapicid %d: panic: ", lapicid());
+801003a9:	e8 92 26 00 00       	call   80102a40 <lapicid>
+801003ae:	83 ec 08             	sub    $0x8,%esp
+801003b1:	50                   	push   %eax
+801003b2:	68 cd 73 10 80       	push   $0x801073cd
+801003b7:	e8 a4 02 00 00       	call   80100660 <cprintf>
+  cprintf(s);
+801003bc:	58                   	pop    %eax
+801003bd:	ff 75 08             	pushl  0x8(%ebp)
+801003c0:	e8 9b 02 00 00       	call   80100660 <cprintf>
+  cprintf("\n");
+801003c5:	c7 04 24 67 7d 10 80 	movl   $0x80107d67,(%esp)
+801003cc:	e8 8f 02 00 00       	call   80100660 <cprintf>
+  getcallerpcs(&s, pcs);
+801003d1:	5a                   	pop    %edx
+801003d2:	8d 45 08             	lea    0x8(%ebp),%eax
+801003d5:	59                   	pop    %ecx
+801003d6:	53                   	push   %ebx
+801003d7:	50                   	push   %eax
+801003d8:	e8 b3 41 00 00       	call   80104590 <getcallerpcs>
+801003dd:	83 c4 10             	add    $0x10,%esp
+    cprintf(" %p", pcs[i]);
+801003e0:	83 ec 08             	sub    $0x8,%esp
+801003e3:	ff 33                	pushl  (%ebx)
+801003e5:	83 c3 04             	add    $0x4,%ebx
+801003e8:	68 e1 73 10 80       	push   $0x801073e1
+801003ed:	e8 6e 02 00 00       	call   80100660 <cprintf>
+  for(i=0; i<10; i++)
+801003f2:	83 c4 10             	add    $0x10,%esp
+801003f5:	39 f3                	cmp    %esi,%ebx
+801003f7:	75 e7                	jne    801003e0 <panic+0x50>
+  panicked = 1; // freeze other CPU
+801003f9:	c7 05 58 a5 10 80 01 	movl   $0x1,0x8010a558
+80100400:	00 00 00 
+80100403:	eb fe                	jmp    80100403 <panic+0x73>
+80100405:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100409:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80100410 <consputc>:
+  if(panicked){
+80100410:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
+80100416:	85 c9                	test   %ecx,%ecx
+80100418:	74 06                	je     80100420 <consputc+0x10>
+8010041a:	fa                   	cli    
+8010041b:	eb fe                	jmp    8010041b <consputc+0xb>
+8010041d:	8d 76 00             	lea    0x0(%esi),%esi
+{
+80100420:	55                   	push   %ebp
+80100421:	89 e5                	mov    %esp,%ebp
+80100423:	57                   	push   %edi
+80100424:	56                   	push   %esi
+80100425:	53                   	push   %ebx
+80100426:	89 c6                	mov    %eax,%esi
+80100428:	83 ec 0c             	sub    $0xc,%esp
+  if(c == BACKSPACE){
+8010042b:	3d 00 01 00 00       	cmp    $0x100,%eax
+80100430:	0f 84 b1 00 00 00    	je     801004e7 <consputc+0xd7>
+    uartputc(c);
+80100436:	83 ec 0c             	sub    $0xc,%esp
+80100439:	50                   	push   %eax
+8010043a:	e8 71 5b 00 00       	call   80105fb0 <uartputc>
+8010043f:	83 c4 10             	add    $0x10,%esp
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80100442:	bb d4 03 00 00       	mov    $0x3d4,%ebx
+80100447:	b8 0e 00 00 00       	mov    $0xe,%eax
+8010044c:	89 da                	mov    %ebx,%edx
+8010044e:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010044f:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
+80100454:	89 ca                	mov    %ecx,%edx
+80100456:	ec                   	in     (%dx),%al
+  pos = inb(CRTPORT+1) << 8;
+80100457:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010045a:	89 da                	mov    %ebx,%edx
+8010045c:	c1 e0 08             	shl    $0x8,%eax
+8010045f:	89 c7                	mov    %eax,%edi
+80100461:	b8 0f 00 00 00       	mov    $0xf,%eax
+80100466:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80100467:	89 ca                	mov    %ecx,%edx
+80100469:	ec                   	in     (%dx),%al
+8010046a:	0f b6 d8             	movzbl %al,%ebx
+  pos |= inb(CRTPORT+1);
+8010046d:	09 fb                	or     %edi,%ebx
+  if(c == '\n')
+8010046f:	83 fe 0a             	cmp    $0xa,%esi
+80100472:	0f 84 f3 00 00 00    	je     8010056b <consputc+0x15b>
+  else if(c == BACKSPACE){
+80100478:	81 fe 00 01 00 00    	cmp    $0x100,%esi
+8010047e:	0f 84 d7 00 00 00    	je     8010055b <consputc+0x14b>
+    crt[pos++] = (c&0xff) | 0x0700;  // black on white
+80100484:	89 f0                	mov    %esi,%eax
+80100486:	0f b6 c0             	movzbl %al,%eax
+80100489:	80 cc 07             	or     $0x7,%ah
+8010048c:	66 89 84 1b 00 80 0b 	mov    %ax,-0x7ff48000(%ebx,%ebx,1)
+80100493:	80 
+80100494:	83 c3 01             	add    $0x1,%ebx
+  if(pos < 0 || pos > 25*80)
+80100497:	81 fb d0 07 00 00    	cmp    $0x7d0,%ebx
+8010049d:	0f 8f ab 00 00 00    	jg     8010054e <consputc+0x13e>
+  if((pos/80) >= 24){  // Scroll up.
+801004a3:	81 fb 7f 07 00 00    	cmp    $0x77f,%ebx
+801004a9:	7f 66                	jg     80100511 <consputc+0x101>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801004ab:	be d4 03 00 00       	mov    $0x3d4,%esi
+801004b0:	b8 0e 00 00 00       	mov    $0xe,%eax
+801004b5:	89 f2                	mov    %esi,%edx
+801004b7:	ee                   	out    %al,(%dx)
+801004b8:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
+  outb(CRTPORT+1, pos>>8);
+801004bd:	89 d8                	mov    %ebx,%eax
+801004bf:	c1 f8 08             	sar    $0x8,%eax
+801004c2:	89 ca                	mov    %ecx,%edx
+801004c4:	ee                   	out    %al,(%dx)
+801004c5:	b8 0f 00 00 00       	mov    $0xf,%eax
+801004ca:	89 f2                	mov    %esi,%edx
+801004cc:	ee                   	out    %al,(%dx)
+801004cd:	89 d8                	mov    %ebx,%eax
+801004cf:	89 ca                	mov    %ecx,%edx
+801004d1:	ee                   	out    %al,(%dx)
+  crt[pos] = ' ' | 0x0700;
+801004d2:	b8 20 07 00 00       	mov    $0x720,%eax
+801004d7:	66 89 84 1b 00 80 0b 	mov    %ax,-0x7ff48000(%ebx,%ebx,1)
+801004de:	80 
+}
+801004df:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801004e2:	5b                   	pop    %ebx
+801004e3:	5e                   	pop    %esi
+801004e4:	5f                   	pop    %edi
+801004e5:	5d                   	pop    %ebp
+801004e6:	c3                   	ret    
+    uartputc('\b'); uartputc(' '); uartputc('\b');
+801004e7:	83 ec 0c             	sub    $0xc,%esp
+801004ea:	6a 08                	push   $0x8
+801004ec:	e8 bf 5a 00 00       	call   80105fb0 <uartputc>
+801004f1:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+801004f8:	e8 b3 5a 00 00       	call   80105fb0 <uartputc>
+801004fd:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+80100504:	e8 a7 5a 00 00       	call   80105fb0 <uartputc>
+80100509:	83 c4 10             	add    $0x10,%esp
+8010050c:	e9 31 ff ff ff       	jmp    80100442 <consputc+0x32>
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+80100511:	52                   	push   %edx
+80100512:	68 60 0e 00 00       	push   $0xe60
+    pos -= 80;
+80100517:	83 eb 50             	sub    $0x50,%ebx
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+8010051a:	68 a0 80 0b 80       	push   $0x800b80a0
+8010051f:	68 00 80 0b 80       	push   $0x800b8000
+80100524:	e8 47 43 00 00       	call   80104870 <memmove>
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
+80100529:	b8 80 07 00 00       	mov    $0x780,%eax
+8010052e:	83 c4 0c             	add    $0xc,%esp
+80100531:	29 d8                	sub    %ebx,%eax
+80100533:	01 c0                	add    %eax,%eax
+80100535:	50                   	push   %eax
+80100536:	8d 04 1b             	lea    (%ebx,%ebx,1),%eax
+80100539:	6a 00                	push   $0x0
+8010053b:	2d 00 80 f4 7f       	sub    $0x7ff48000,%eax
+80100540:	50                   	push   %eax
+80100541:	e8 7a 42 00 00       	call   801047c0 <memset>
+80100546:	83 c4 10             	add    $0x10,%esp
+80100549:	e9 5d ff ff ff       	jmp    801004ab <consputc+0x9b>
+    panic("pos under/overflow");
+8010054e:	83 ec 0c             	sub    $0xc,%esp
+80100551:	68 e5 73 10 80       	push   $0x801073e5
+80100556:	e8 35 fe ff ff       	call   80100390 <panic>
+    if(pos > 0) --pos;
+8010055b:	85 db                	test   %ebx,%ebx
+8010055d:	0f 84 48 ff ff ff    	je     801004ab <consputc+0x9b>
+80100563:	83 eb 01             	sub    $0x1,%ebx
+80100566:	e9 2c ff ff ff       	jmp    80100497 <consputc+0x87>
+    pos += 80 - pos%80;
+8010056b:	89 d8                	mov    %ebx,%eax
+8010056d:	b9 50 00 00 00       	mov    $0x50,%ecx
+80100572:	99                   	cltd   
+80100573:	f7 f9                	idiv   %ecx
+80100575:	29 d1                	sub    %edx,%ecx
+80100577:	01 cb                	add    %ecx,%ebx
+80100579:	e9 19 ff ff ff       	jmp    80100497 <consputc+0x87>
+8010057e:	66 90                	xchg   %ax,%ax
+
+80100580 <printint>:
+{
+80100580:	55                   	push   %ebp
+80100581:	89 e5                	mov    %esp,%ebp
+80100583:	57                   	push   %edi
+80100584:	56                   	push   %esi
+80100585:	53                   	push   %ebx
+80100586:	89 d3                	mov    %edx,%ebx
+80100588:	83 ec 2c             	sub    $0x2c,%esp
+  if(sign && (sign = xx < 0))
+8010058b:	85 c9                	test   %ecx,%ecx
+{
+8010058d:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+  if(sign && (sign = xx < 0))
+80100590:	74 04                	je     80100596 <printint+0x16>
+80100592:	85 c0                	test   %eax,%eax
+80100594:	78 5a                	js     801005f0 <printint+0x70>
+    x = xx;
+80100596:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+  i = 0;
+8010059d:	31 c9                	xor    %ecx,%ecx
+8010059f:	8d 75 d7             	lea    -0x29(%ebp),%esi
+801005a2:	eb 06                	jmp    801005aa <printint+0x2a>
+801005a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    buf[i++] = digits[x % base];
+801005a8:	89 f9                	mov    %edi,%ecx
+801005aa:	31 d2                	xor    %edx,%edx
+801005ac:	8d 79 01             	lea    0x1(%ecx),%edi
+801005af:	f7 f3                	div    %ebx
+801005b1:	0f b6 92 10 74 10 80 	movzbl -0x7fef8bf0(%edx),%edx
+  }while((x /= base) != 0);
+801005b8:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+801005ba:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+801005bd:	75 e9                	jne    801005a8 <printint+0x28>
+  if(sign)
+801005bf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+801005c2:	85 c0                	test   %eax,%eax
+801005c4:	74 08                	je     801005ce <printint+0x4e>
+    buf[i++] = '-';
+801005c6:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+801005cb:	8d 79 02             	lea    0x2(%ecx),%edi
+801005ce:	8d 5c 3d d7          	lea    -0x29(%ebp,%edi,1),%ebx
+801005d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    consputc(buf[i]);
+801005d8:	0f be 03             	movsbl (%ebx),%eax
+801005db:	83 eb 01             	sub    $0x1,%ebx
+801005de:	e8 2d fe ff ff       	call   80100410 <consputc>
+  while(--i >= 0)
+801005e3:	39 f3                	cmp    %esi,%ebx
+801005e5:	75 f1                	jne    801005d8 <printint+0x58>
+}
+801005e7:	83 c4 2c             	add    $0x2c,%esp
+801005ea:	5b                   	pop    %ebx
+801005eb:	5e                   	pop    %esi
+801005ec:	5f                   	pop    %edi
+801005ed:	5d                   	pop    %ebp
+801005ee:	c3                   	ret    
+801005ef:	90                   	nop
+    x = -xx;
+801005f0:	f7 d8                	neg    %eax
+801005f2:	eb a9                	jmp    8010059d <printint+0x1d>
+801005f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801005fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80100600 <consolewrite>:
+
+int
+consolewrite(struct inode *ip, char *buf, int n)
+{
+80100600:	55                   	push   %ebp
+80100601:	89 e5                	mov    %esp,%ebp
+80100603:	57                   	push   %edi
+80100604:	56                   	push   %esi
+80100605:	53                   	push   %ebx
+80100606:	83 ec 18             	sub    $0x18,%esp
+80100609:	8b 75 10             	mov    0x10(%ebp),%esi
+  int i;
+
+  iunlock(ip);
+8010060c:	ff 75 08             	pushl  0x8(%ebp)
+8010060f:	e8 5c 11 00 00       	call   80101770 <iunlock>
+  acquire(&cons.lock);
+80100614:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
+8010061b:	e8 90 40 00 00       	call   801046b0 <acquire>
+  for(i = 0; i < n; i++)
+80100620:	83 c4 10             	add    $0x10,%esp
+80100623:	85 f6                	test   %esi,%esi
+80100625:	7e 18                	jle    8010063f <consolewrite+0x3f>
+80100627:	8b 7d 0c             	mov    0xc(%ebp),%edi
+8010062a:	8d 1c 37             	lea    (%edi,%esi,1),%ebx
+8010062d:	8d 76 00             	lea    0x0(%esi),%esi
+    consputc(buf[i] & 0xff);
+80100630:	0f b6 07             	movzbl (%edi),%eax
+80100633:	83 c7 01             	add    $0x1,%edi
+80100636:	e8 d5 fd ff ff       	call   80100410 <consputc>
+  for(i = 0; i < n; i++)
+8010063b:	39 fb                	cmp    %edi,%ebx
+8010063d:	75 f1                	jne    80100630 <consolewrite+0x30>
+  release(&cons.lock);
+8010063f:	83 ec 0c             	sub    $0xc,%esp
+80100642:	68 20 a5 10 80       	push   $0x8010a520
+80100647:	e8 24 41 00 00       	call   80104770 <release>
+  ilock(ip);
+8010064c:	58                   	pop    %eax
+8010064d:	ff 75 08             	pushl  0x8(%ebp)
+80100650:	e8 3b 10 00 00       	call   80101690 <ilock>
+
+  return n;
+}
+80100655:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100658:	89 f0                	mov    %esi,%eax
+8010065a:	5b                   	pop    %ebx
+8010065b:	5e                   	pop    %esi
+8010065c:	5f                   	pop    %edi
+8010065d:	5d                   	pop    %ebp
+8010065e:	c3                   	ret    
+8010065f:	90                   	nop
+
+80100660 <cprintf>:
+{
+80100660:	55                   	push   %ebp
+80100661:	89 e5                	mov    %esp,%ebp
+80100663:	57                   	push   %edi
+80100664:	56                   	push   %esi
+80100665:	53                   	push   %ebx
+80100666:	83 ec 1c             	sub    $0x1c,%esp
+  locking = cons.locking;
+80100669:	a1 54 a5 10 80       	mov    0x8010a554,%eax
+  if(locking)
+8010066e:	85 c0                	test   %eax,%eax
+  locking = cons.locking;
+80100670:	89 45 dc             	mov    %eax,-0x24(%ebp)
+  if(locking)
+80100673:	0f 85 6f 01 00 00    	jne    801007e8 <cprintf+0x188>
+  if (fmt == 0)
+80100679:	8b 45 08             	mov    0x8(%ebp),%eax
+8010067c:	85 c0                	test   %eax,%eax
+8010067e:	89 c7                	mov    %eax,%edi
+80100680:	0f 84 77 01 00 00    	je     801007fd <cprintf+0x19d>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+80100686:	0f b6 00             	movzbl (%eax),%eax
+  argp = (uint*)(void*)(&fmt + 1);
+80100689:	8d 4d 0c             	lea    0xc(%ebp),%ecx
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+8010068c:	31 db                	xor    %ebx,%ebx
+  argp = (uint*)(void*)(&fmt + 1);
+8010068e:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+80100691:	85 c0                	test   %eax,%eax
+80100693:	75 56                	jne    801006eb <cprintf+0x8b>
+80100695:	eb 79                	jmp    80100710 <cprintf+0xb0>
+80100697:	89 f6                	mov    %esi,%esi
+80100699:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[++i] & 0xff;
+801006a0:	0f b6 16             	movzbl (%esi),%edx
+    if(c == 0)
+801006a3:	85 d2                	test   %edx,%edx
+801006a5:	74 69                	je     80100710 <cprintf+0xb0>
+801006a7:	83 c3 02             	add    $0x2,%ebx
+    switch(c){
+801006aa:	83 fa 70             	cmp    $0x70,%edx
+801006ad:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
+801006b0:	0f 84 84 00 00 00    	je     8010073a <cprintf+0xda>
+801006b6:	7f 78                	jg     80100730 <cprintf+0xd0>
+801006b8:	83 fa 25             	cmp    $0x25,%edx
+801006bb:	0f 84 ff 00 00 00    	je     801007c0 <cprintf+0x160>
+801006c1:	83 fa 64             	cmp    $0x64,%edx
+801006c4:	0f 85 8e 00 00 00    	jne    80100758 <cprintf+0xf8>
+      printint(*argp++, 10, 1);
+801006ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801006cd:	ba 0a 00 00 00       	mov    $0xa,%edx
+801006d2:	8d 48 04             	lea    0x4(%eax),%ecx
+801006d5:	8b 00                	mov    (%eax),%eax
+801006d7:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+801006da:	b9 01 00 00 00       	mov    $0x1,%ecx
+801006df:	e8 9c fe ff ff       	call   80100580 <printint>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+801006e4:	0f b6 06             	movzbl (%esi),%eax
+801006e7:	85 c0                	test   %eax,%eax
+801006e9:	74 25                	je     80100710 <cprintf+0xb0>
+801006eb:	8d 53 01             	lea    0x1(%ebx),%edx
+    if(c != '%'){
+801006ee:	83 f8 25             	cmp    $0x25,%eax
+801006f1:	8d 34 17             	lea    (%edi,%edx,1),%esi
+801006f4:	74 aa                	je     801006a0 <cprintf+0x40>
+801006f6:	89 55 e0             	mov    %edx,-0x20(%ebp)
+      consputc(c);
+801006f9:	e8 12 fd ff ff       	call   80100410 <consputc>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+801006fe:	0f b6 06             	movzbl (%esi),%eax
+      continue;
+80100701:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80100704:	89 d3                	mov    %edx,%ebx
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+80100706:	85 c0                	test   %eax,%eax
+80100708:	75 e1                	jne    801006eb <cprintf+0x8b>
+8010070a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  if(locking)
+80100710:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80100713:	85 c0                	test   %eax,%eax
+80100715:	74 10                	je     80100727 <cprintf+0xc7>
+    release(&cons.lock);
+80100717:	83 ec 0c             	sub    $0xc,%esp
+8010071a:	68 20 a5 10 80       	push   $0x8010a520
+8010071f:	e8 4c 40 00 00       	call   80104770 <release>
+80100724:	83 c4 10             	add    $0x10,%esp
+}
+80100727:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010072a:	5b                   	pop    %ebx
+8010072b:	5e                   	pop    %esi
+8010072c:	5f                   	pop    %edi
+8010072d:	5d                   	pop    %ebp
+8010072e:	c3                   	ret    
+8010072f:	90                   	nop
+    switch(c){
+80100730:	83 fa 73             	cmp    $0x73,%edx
+80100733:	74 43                	je     80100778 <cprintf+0x118>
+80100735:	83 fa 78             	cmp    $0x78,%edx
+80100738:	75 1e                	jne    80100758 <cprintf+0xf8>
+      printint(*argp++, 16, 0);
+8010073a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010073d:	ba 10 00 00 00       	mov    $0x10,%edx
+80100742:	8d 48 04             	lea    0x4(%eax),%ecx
+80100745:	8b 00                	mov    (%eax),%eax
+80100747:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+8010074a:	31 c9                	xor    %ecx,%ecx
+8010074c:	e8 2f fe ff ff       	call   80100580 <printint>
+      break;
+80100751:	eb 91                	jmp    801006e4 <cprintf+0x84>
+80100753:	90                   	nop
+80100754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      consputc('%');
+80100758:	b8 25 00 00 00       	mov    $0x25,%eax
+8010075d:	89 55 e0             	mov    %edx,-0x20(%ebp)
+80100760:	e8 ab fc ff ff       	call   80100410 <consputc>
+      consputc(c);
+80100765:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80100768:	89 d0                	mov    %edx,%eax
+8010076a:	e8 a1 fc ff ff       	call   80100410 <consputc>
+      break;
+8010076f:	e9 70 ff ff ff       	jmp    801006e4 <cprintf+0x84>
+80100774:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      if((s = (char*)*argp++) == 0)
+80100778:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010077b:	8b 10                	mov    (%eax),%edx
+8010077d:	8d 48 04             	lea    0x4(%eax),%ecx
+80100780:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80100783:	85 d2                	test   %edx,%edx
+80100785:	74 49                	je     801007d0 <cprintf+0x170>
+      for(; *s; s++)
+80100787:	0f be 02             	movsbl (%edx),%eax
+      if((s = (char*)*argp++) == 0)
+8010078a:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+      for(; *s; s++)
+8010078d:	84 c0                	test   %al,%al
+8010078f:	0f 84 4f ff ff ff    	je     801006e4 <cprintf+0x84>
+80100795:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+80100798:	89 d3                	mov    %edx,%ebx
+8010079a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801007a0:	83 c3 01             	add    $0x1,%ebx
+        consputc(*s);
+801007a3:	e8 68 fc ff ff       	call   80100410 <consputc>
+      for(; *s; s++)
+801007a8:	0f be 03             	movsbl (%ebx),%eax
+801007ab:	84 c0                	test   %al,%al
+801007ad:	75 f1                	jne    801007a0 <cprintf+0x140>
+      if((s = (char*)*argp++) == 0)
+801007af:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801007b2:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+801007b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801007b8:	e9 27 ff ff ff       	jmp    801006e4 <cprintf+0x84>
+801007bd:	8d 76 00             	lea    0x0(%esi),%esi
+      consputc('%');
+801007c0:	b8 25 00 00 00       	mov    $0x25,%eax
+801007c5:	e8 46 fc ff ff       	call   80100410 <consputc>
+      break;
+801007ca:	e9 15 ff ff ff       	jmp    801006e4 <cprintf+0x84>
+801007cf:	90                   	nop
+        s = "(null)";
+801007d0:	ba f8 73 10 80       	mov    $0x801073f8,%edx
+      for(; *s; s++)
+801007d5:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+801007d8:	b8 28 00 00 00       	mov    $0x28,%eax
+801007dd:	89 d3                	mov    %edx,%ebx
+801007df:	eb bf                	jmp    801007a0 <cprintf+0x140>
+801007e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    acquire(&cons.lock);
+801007e8:	83 ec 0c             	sub    $0xc,%esp
+801007eb:	68 20 a5 10 80       	push   $0x8010a520
+801007f0:	e8 bb 3e 00 00       	call   801046b0 <acquire>
+801007f5:	83 c4 10             	add    $0x10,%esp
+801007f8:	e9 7c fe ff ff       	jmp    80100679 <cprintf+0x19>
+    panic("null fmt");
+801007fd:	83 ec 0c             	sub    $0xc,%esp
+80100800:	68 ff 73 10 80       	push   $0x801073ff
+80100805:	e8 86 fb ff ff       	call   80100390 <panic>
+8010080a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80100810 <consoleintr>:
+{
+80100810:	55                   	push   %ebp
+80100811:	89 e5                	mov    %esp,%ebp
+80100813:	57                   	push   %edi
+80100814:	56                   	push   %esi
+80100815:	53                   	push   %ebx
+  int c, doprocdump = 0;
+80100816:	31 f6                	xor    %esi,%esi
+{
+80100818:	83 ec 18             	sub    $0x18,%esp
+8010081b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&cons.lock);
+8010081e:	68 20 a5 10 80       	push   $0x8010a520
+80100823:	e8 88 3e 00 00       	call   801046b0 <acquire>
+  while((c = getc()) >= 0){
+80100828:	83 c4 10             	add    $0x10,%esp
+8010082b:	90                   	nop
+8010082c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100830:	ff d3                	call   *%ebx
+80100832:	85 c0                	test   %eax,%eax
+80100834:	89 c7                	mov    %eax,%edi
+80100836:	78 48                	js     80100880 <consoleintr+0x70>
+    switch(c){
+80100838:	83 ff 10             	cmp    $0x10,%edi
+8010083b:	0f 84 e7 00 00 00    	je     80100928 <consoleintr+0x118>
+80100841:	7e 5d                	jle    801008a0 <consoleintr+0x90>
+80100843:	83 ff 15             	cmp    $0x15,%edi
+80100846:	0f 84 ec 00 00 00    	je     80100938 <consoleintr+0x128>
+8010084c:	83 ff 7f             	cmp    $0x7f,%edi
+8010084f:	75 54                	jne    801008a5 <consoleintr+0x95>
+      if(input.e != input.w){
+80100851:	a1 c8 ff 10 80       	mov    0x8010ffc8,%eax
+80100856:	3b 05 c4 ff 10 80    	cmp    0x8010ffc4,%eax
+8010085c:	74 d2                	je     80100830 <consoleintr+0x20>
+        input.e--;
+8010085e:	83 e8 01             	sub    $0x1,%eax
+80100861:	a3 c8 ff 10 80       	mov    %eax,0x8010ffc8
+        consputc(BACKSPACE);
+80100866:	b8 00 01 00 00       	mov    $0x100,%eax
+8010086b:	e8 a0 fb ff ff       	call   80100410 <consputc>
+  while((c = getc()) >= 0){
+80100870:	ff d3                	call   *%ebx
+80100872:	85 c0                	test   %eax,%eax
+80100874:	89 c7                	mov    %eax,%edi
+80100876:	79 c0                	jns    80100838 <consoleintr+0x28>
+80100878:	90                   	nop
+80100879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  release(&cons.lock);
+80100880:	83 ec 0c             	sub    $0xc,%esp
+80100883:	68 20 a5 10 80       	push   $0x8010a520
+80100888:	e8 e3 3e 00 00       	call   80104770 <release>
+  if(doprocdump) {
+8010088d:	83 c4 10             	add    $0x10,%esp
+80100890:	85 f6                	test   %esi,%esi
+80100892:	0f 85 f8 00 00 00    	jne    80100990 <consoleintr+0x180>
+}
+80100898:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010089b:	5b                   	pop    %ebx
+8010089c:	5e                   	pop    %esi
+8010089d:	5f                   	pop    %edi
+8010089e:	5d                   	pop    %ebp
+8010089f:	c3                   	ret    
+    switch(c){
+801008a0:	83 ff 08             	cmp    $0x8,%edi
+801008a3:	74 ac                	je     80100851 <consoleintr+0x41>
+      if(c != 0 && input.e-input.r < INPUT_BUF){
+801008a5:	85 ff                	test   %edi,%edi
+801008a7:	74 87                	je     80100830 <consoleintr+0x20>
+801008a9:	a1 c8 ff 10 80       	mov    0x8010ffc8,%eax
+801008ae:	89 c2                	mov    %eax,%edx
+801008b0:	2b 15 c0 ff 10 80    	sub    0x8010ffc0,%edx
+801008b6:	83 fa 7f             	cmp    $0x7f,%edx
+801008b9:	0f 87 71 ff ff ff    	ja     80100830 <consoleintr+0x20>
+801008bf:	8d 50 01             	lea    0x1(%eax),%edx
+801008c2:	83 e0 7f             	and    $0x7f,%eax
+        c = (c == '\r') ? '\n' : c;
+801008c5:	83 ff 0d             	cmp    $0xd,%edi
+        input.buf[input.e++ % INPUT_BUF] = c;
+801008c8:	89 15 c8 ff 10 80    	mov    %edx,0x8010ffc8
+        c = (c == '\r') ? '\n' : c;
+801008ce:	0f 84 cc 00 00 00    	je     801009a0 <consoleintr+0x190>
+        input.buf[input.e++ % INPUT_BUF] = c;
+801008d4:	89 f9                	mov    %edi,%ecx
+801008d6:	88 88 40 ff 10 80    	mov    %cl,-0x7fef00c0(%eax)
+        consputc(c);
+801008dc:	89 f8                	mov    %edi,%eax
+801008de:	e8 2d fb ff ff       	call   80100410 <consputc>
+        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
+801008e3:	83 ff 0a             	cmp    $0xa,%edi
+801008e6:	0f 84 c5 00 00 00    	je     801009b1 <consoleintr+0x1a1>
+801008ec:	83 ff 04             	cmp    $0x4,%edi
+801008ef:	0f 84 bc 00 00 00    	je     801009b1 <consoleintr+0x1a1>
+801008f5:	a1 c0 ff 10 80       	mov    0x8010ffc0,%eax
+801008fa:	83 e8 80             	sub    $0xffffff80,%eax
+801008fd:	39 05 c8 ff 10 80    	cmp    %eax,0x8010ffc8
+80100903:	0f 85 27 ff ff ff    	jne    80100830 <consoleintr+0x20>
+          wakeup(&input.r);
+80100909:	83 ec 0c             	sub    $0xc,%esp
+          input.w = input.e;
+8010090c:	a3 c4 ff 10 80       	mov    %eax,0x8010ffc4
+          wakeup(&input.r);
+80100911:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100916:	e8 75 39 00 00       	call   80104290 <wakeup>
+8010091b:	83 c4 10             	add    $0x10,%esp
+8010091e:	e9 0d ff ff ff       	jmp    80100830 <consoleintr+0x20>
+80100923:	90                   	nop
+80100924:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      doprocdump = 1;
+80100928:	be 01 00 00 00       	mov    $0x1,%esi
+8010092d:	e9 fe fe ff ff       	jmp    80100830 <consoleintr+0x20>
+80100932:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      while(input.e != input.w &&
+80100938:	a1 c8 ff 10 80       	mov    0x8010ffc8,%eax
+8010093d:	39 05 c4 ff 10 80    	cmp    %eax,0x8010ffc4
+80100943:	75 2b                	jne    80100970 <consoleintr+0x160>
+80100945:	e9 e6 fe ff ff       	jmp    80100830 <consoleintr+0x20>
+8010094a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        input.e--;
+80100950:	a3 c8 ff 10 80       	mov    %eax,0x8010ffc8
+        consputc(BACKSPACE);
+80100955:	b8 00 01 00 00       	mov    $0x100,%eax
+8010095a:	e8 b1 fa ff ff       	call   80100410 <consputc>
+      while(input.e != input.w &&
+8010095f:	a1 c8 ff 10 80       	mov    0x8010ffc8,%eax
+80100964:	3b 05 c4 ff 10 80    	cmp    0x8010ffc4,%eax
+8010096a:	0f 84 c0 fe ff ff    	je     80100830 <consoleintr+0x20>
+            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
+80100970:	83 e8 01             	sub    $0x1,%eax
+80100973:	89 c2                	mov    %eax,%edx
+80100975:	83 e2 7f             	and    $0x7f,%edx
+      while(input.e != input.w &&
+80100978:	80 ba 40 ff 10 80 0a 	cmpb   $0xa,-0x7fef00c0(%edx)
+8010097f:	75 cf                	jne    80100950 <consoleintr+0x140>
+80100981:	e9 aa fe ff ff       	jmp    80100830 <consoleintr+0x20>
+80100986:	8d 76 00             	lea    0x0(%esi),%esi
+80100989:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+}
+80100990:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100993:	5b                   	pop    %ebx
+80100994:	5e                   	pop    %esi
+80100995:	5f                   	pop    %edi
+80100996:	5d                   	pop    %ebp
+    procdump();  // now call procdump() wo. cons.lock held
+80100997:	e9 d4 39 00 00       	jmp    80104370 <procdump>
+8010099c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        input.buf[input.e++ % INPUT_BUF] = c;
+801009a0:	c6 80 40 ff 10 80 0a 	movb   $0xa,-0x7fef00c0(%eax)
+        consputc(c);
+801009a7:	b8 0a 00 00 00       	mov    $0xa,%eax
+801009ac:	e8 5f fa ff ff       	call   80100410 <consputc>
+801009b1:	a1 c8 ff 10 80       	mov    0x8010ffc8,%eax
+801009b6:	e9 4e ff ff ff       	jmp    80100909 <consoleintr+0xf9>
+801009bb:	90                   	nop
+801009bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801009c0 <consoleinit>:
+
+void
+consoleinit(void)
+{
+801009c0:	55                   	push   %ebp
+801009c1:	89 e5                	mov    %esp,%ebp
+801009c3:	83 ec 10             	sub    $0x10,%esp
+  initlock(&cons.lock, "console");
+801009c6:	68 08 74 10 80       	push   $0x80107408
+801009cb:	68 20 a5 10 80       	push   $0x8010a520
+801009d0:	e8 9b 3b 00 00       	call   80104570 <initlock>
+
+  devsw[CONSOLE].write = consolewrite;
+  devsw[CONSOLE].read = consoleread;
+  cons.locking = 1;
+
+  ioapicenable(IRQ_KBD, 0);
+801009d5:	58                   	pop    %eax
+801009d6:	5a                   	pop    %edx
+801009d7:	6a 00                	push   $0x0
+801009d9:	6a 01                	push   $0x1
+  devsw[CONSOLE].write = consolewrite;
+801009db:	c7 05 8c 09 11 80 00 	movl   $0x80100600,0x8011098c
+801009e2:	06 10 80 
+  devsw[CONSOLE].read = consoleread;
+801009e5:	c7 05 88 09 11 80 70 	movl   $0x80100270,0x80110988
+801009ec:	02 10 80 
+  cons.locking = 1;
+801009ef:	c7 05 54 a5 10 80 01 	movl   $0x1,0x8010a554
+801009f6:	00 00 00 
+  ioapicenable(IRQ_KBD, 0);
+801009f9:	e8 e2 18 00 00       	call   801022e0 <ioapicenable>
+}
+801009fe:	83 c4 10             	add    $0x10,%esp
+80100a01:	c9                   	leave  
+80100a02:	c3                   	ret    
+80100a03:	66 90                	xchg   %ax,%ax
+80100a05:	66 90                	xchg   %ax,%ax
+80100a07:	66 90                	xchg   %ax,%ax
+80100a09:	66 90                	xchg   %ax,%ax
+80100a0b:	66 90                	xchg   %ax,%ax
+80100a0d:	66 90                	xchg   %ax,%ax
+80100a0f:	90                   	nop
+
+80100a10 <exec>:
+#include "x86.h"
+#include "elf.h"
+
+int
+exec(char *path, char **argv)
+{
+80100a10:	55                   	push   %ebp
+80100a11:	89 e5                	mov    %esp,%ebp
+80100a13:	57                   	push   %edi
+80100a14:	56                   	push   %esi
+80100a15:	53                   	push   %ebx
+80100a16:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
+  uint argc, sz, sp, ustack[3+MAXARG+1];
+  struct elfhdr elf;
+  struct inode *ip;
+  struct proghdr ph;
+  pde_t *pgdir, *oldpgdir;
+  struct proc *curproc = myproc();
+80100a1c:	e8 cf 30 00 00       	call   80103af0 <myproc>
+80100a21:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
+
+  begin_op();
+80100a27:	e8 84 24 00 00       	call   80102eb0 <begin_op>
+
+  if((ip = namei(path)) == 0){
+80100a2c:	83 ec 0c             	sub    $0xc,%esp
+80100a2f:	ff 75 08             	pushl  0x8(%ebp)
+80100a32:	e8 b9 14 00 00       	call   80101ef0 <namei>
+80100a37:	83 c4 10             	add    $0x10,%esp
+80100a3a:	85 c0                	test   %eax,%eax
+80100a3c:	0f 84 91 01 00 00    	je     80100bd3 <exec+0x1c3>
+    end_op();
+    cprintf("exec: fail\n");
+    return -1;
+  }
+  ilock(ip);
+80100a42:	83 ec 0c             	sub    $0xc,%esp
+80100a45:	89 c3                	mov    %eax,%ebx
+80100a47:	50                   	push   %eax
+80100a48:	e8 43 0c 00 00       	call   80101690 <ilock>
+  pgdir = 0;
+
+  // Check ELF header
+  if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
+80100a4d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
+80100a53:	6a 34                	push   $0x34
+80100a55:	6a 00                	push   $0x0
+80100a57:	50                   	push   %eax
+80100a58:	53                   	push   %ebx
+80100a59:	e8 12 0f 00 00       	call   80101970 <readi>
+80100a5e:	83 c4 20             	add    $0x20,%esp
+80100a61:	83 f8 34             	cmp    $0x34,%eax
+80100a64:	74 22                	je     80100a88 <exec+0x78>
+
+ bad:
+  if(pgdir)
+    freevm(pgdir);
+  if(ip){
+    iunlockput(ip);
+80100a66:	83 ec 0c             	sub    $0xc,%esp
+80100a69:	53                   	push   %ebx
+80100a6a:	e8 b1 0e 00 00       	call   80101920 <iunlockput>
+    end_op();
+80100a6f:	e8 ac 24 00 00       	call   80102f20 <end_op>
+80100a74:	83 c4 10             	add    $0x10,%esp
+  }
+  return -1;
+80100a77:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80100a7c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100a7f:	5b                   	pop    %ebx
+80100a80:	5e                   	pop    %esi
+80100a81:	5f                   	pop    %edi
+80100a82:	5d                   	pop    %ebp
+80100a83:	c3                   	ret    
+80100a84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(elf.magic != ELF_MAGIC)
+80100a88:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
+80100a8f:	45 4c 46 
+80100a92:	75 d2                	jne    80100a66 <exec+0x56>
+  if((pgdir = setupkvm()) == 0)
+80100a94:	e8 67 66 00 00       	call   80107100 <setupkvm>
+80100a99:	85 c0                	test   %eax,%eax
+80100a9b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
+80100aa1:	74 c3                	je     80100a66 <exec+0x56>
+  sz = 0;
+80100aa3:	31 ff                	xor    %edi,%edi
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100aa5:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
+80100aac:	00 
+80100aad:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
+80100ab3:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
+80100ab9:	0f 84 8c 02 00 00    	je     80100d4b <exec+0x33b>
+80100abf:	31 f6                	xor    %esi,%esi
+80100ac1:	eb 7f                	jmp    80100b42 <exec+0x132>
+80100ac3:	90                   	nop
+80100ac4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(ph.type != ELF_PROG_LOAD)
+80100ac8:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
+80100acf:	75 63                	jne    80100b34 <exec+0x124>
+    if(ph.memsz < ph.filesz)
+80100ad1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
+80100ad7:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
+80100add:	0f 82 86 00 00 00    	jb     80100b69 <exec+0x159>
+80100ae3:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
+80100ae9:	72 7e                	jb     80100b69 <exec+0x159>
+    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
+80100aeb:	83 ec 04             	sub    $0x4,%esp
+80100aee:	50                   	push   %eax
+80100aef:	57                   	push   %edi
+80100af0:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100af6:	e8 25 64 00 00       	call   80106f20 <allocuvm>
+80100afb:	83 c4 10             	add    $0x10,%esp
+80100afe:	85 c0                	test   %eax,%eax
+80100b00:	89 c7                	mov    %eax,%edi
+80100b02:	74 65                	je     80100b69 <exec+0x159>
+    if(ph.vaddr % PGSIZE != 0)
+80100b04:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
+80100b0a:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80100b0f:	75 58                	jne    80100b69 <exec+0x159>
+    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
+80100b11:	83 ec 0c             	sub    $0xc,%esp
+80100b14:	ff b5 14 ff ff ff    	pushl  -0xec(%ebp)
+80100b1a:	ff b5 08 ff ff ff    	pushl  -0xf8(%ebp)
+80100b20:	53                   	push   %ebx
+80100b21:	50                   	push   %eax
+80100b22:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100b28:	e8 33 63 00 00       	call   80106e60 <loaduvm>
+80100b2d:	83 c4 20             	add    $0x20,%esp
+80100b30:	85 c0                	test   %eax,%eax
+80100b32:	78 35                	js     80100b69 <exec+0x159>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100b34:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
+80100b3b:	83 c6 01             	add    $0x1,%esi
+80100b3e:	39 f0                	cmp    %esi,%eax
+80100b40:	7e 3d                	jle    80100b7f <exec+0x16f>
+    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
+80100b42:	89 f0                	mov    %esi,%eax
+80100b44:	6a 20                	push   $0x20
+80100b46:	c1 e0 05             	shl    $0x5,%eax
+80100b49:	03 85 ec fe ff ff    	add    -0x114(%ebp),%eax
+80100b4f:	50                   	push   %eax
+80100b50:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
+80100b56:	50                   	push   %eax
+80100b57:	53                   	push   %ebx
+80100b58:	e8 13 0e 00 00       	call   80101970 <readi>
+80100b5d:	83 c4 10             	add    $0x10,%esp
+80100b60:	83 f8 20             	cmp    $0x20,%eax
+80100b63:	0f 84 5f ff ff ff    	je     80100ac8 <exec+0xb8>
+    freevm(pgdir);
+80100b69:	83 ec 0c             	sub    $0xc,%esp
+80100b6c:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100b72:	e8 09 65 00 00       	call   80107080 <freevm>
+80100b77:	83 c4 10             	add    $0x10,%esp
+80100b7a:	e9 e7 fe ff ff       	jmp    80100a66 <exec+0x56>
+80100b7f:	81 c7 ff 0f 00 00    	add    $0xfff,%edi
+80100b85:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80100b8b:	8d b7 00 20 00 00    	lea    0x2000(%edi),%esi
+  iunlockput(ip);
+80100b91:	83 ec 0c             	sub    $0xc,%esp
+80100b94:	53                   	push   %ebx
+80100b95:	e8 86 0d 00 00       	call   80101920 <iunlockput>
+  end_op();
+80100b9a:	e8 81 23 00 00       	call   80102f20 <end_op>
+  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+80100b9f:	83 c4 0c             	add    $0xc,%esp
+80100ba2:	56                   	push   %esi
+80100ba3:	57                   	push   %edi
+80100ba4:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100baa:	e8 71 63 00 00       	call   80106f20 <allocuvm>
+80100baf:	83 c4 10             	add    $0x10,%esp
+80100bb2:	85 c0                	test   %eax,%eax
+80100bb4:	89 c6                	mov    %eax,%esi
+80100bb6:	75 3a                	jne    80100bf2 <exec+0x1e2>
+    freevm(pgdir);
+80100bb8:	83 ec 0c             	sub    $0xc,%esp
+80100bbb:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100bc1:	e8 ba 64 00 00       	call   80107080 <freevm>
+80100bc6:	83 c4 10             	add    $0x10,%esp
+  return -1;
+80100bc9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100bce:	e9 a9 fe ff ff       	jmp    80100a7c <exec+0x6c>
+    end_op();
+80100bd3:	e8 48 23 00 00       	call   80102f20 <end_op>
+    cprintf("exec: fail\n");
+80100bd8:	83 ec 0c             	sub    $0xc,%esp
+80100bdb:	68 21 74 10 80       	push   $0x80107421
+80100be0:	e8 7b fa ff ff       	call   80100660 <cprintf>
+    return -1;
+80100be5:	83 c4 10             	add    $0x10,%esp
+80100be8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100bed:	e9 8a fe ff ff       	jmp    80100a7c <exec+0x6c>
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80100bf2:	8d 80 00 e0 ff ff    	lea    -0x2000(%eax),%eax
+80100bf8:	83 ec 08             	sub    $0x8,%esp
+  for(argc = 0; argv[argc]; argc++) {
+80100bfb:	31 ff                	xor    %edi,%edi
+80100bfd:	89 f3                	mov    %esi,%ebx
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80100bff:	50                   	push   %eax
+80100c00:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100c06:	e8 95 65 00 00       	call   801071a0 <clearpteu>
+  for(argc = 0; argv[argc]; argc++) {
+80100c0b:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100c0e:	83 c4 10             	add    $0x10,%esp
+80100c11:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+80100c17:	8b 00                	mov    (%eax),%eax
+80100c19:	85 c0                	test   %eax,%eax
+80100c1b:	74 70                	je     80100c8d <exec+0x27d>
+80100c1d:	89 b5 ec fe ff ff    	mov    %esi,-0x114(%ebp)
+80100c23:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
+80100c29:	eb 0a                	jmp    80100c35 <exec+0x225>
+80100c2b:	90                   	nop
+80100c2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(argc >= MAXARG)
+80100c30:	83 ff 20             	cmp    $0x20,%edi
+80100c33:	74 83                	je     80100bb8 <exec+0x1a8>
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+80100c35:	83 ec 0c             	sub    $0xc,%esp
+80100c38:	50                   	push   %eax
+80100c39:	e8 a2 3d 00 00       	call   801049e0 <strlen>
+80100c3e:	f7 d0                	not    %eax
+80100c40:	01 c3                	add    %eax,%ebx
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+80100c42:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100c45:	5a                   	pop    %edx
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+80100c46:	83 e3 fc             	and    $0xfffffffc,%ebx
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+80100c49:	ff 34 b8             	pushl  (%eax,%edi,4)
+80100c4c:	e8 8f 3d 00 00       	call   801049e0 <strlen>
+80100c51:	83 c0 01             	add    $0x1,%eax
+80100c54:	50                   	push   %eax
+80100c55:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100c58:	ff 34 b8             	pushl  (%eax,%edi,4)
+80100c5b:	53                   	push   %ebx
+80100c5c:	56                   	push   %esi
+80100c5d:	e8 9e 66 00 00       	call   80107300 <copyout>
+80100c62:	83 c4 20             	add    $0x20,%esp
+80100c65:	85 c0                	test   %eax,%eax
+80100c67:	0f 88 4b ff ff ff    	js     80100bb8 <exec+0x1a8>
+  for(argc = 0; argv[argc]; argc++) {
+80100c6d:	8b 45 0c             	mov    0xc(%ebp),%eax
+    ustack[3+argc] = sp;
+80100c70:	89 9c bd 64 ff ff ff 	mov    %ebx,-0x9c(%ebp,%edi,4)
+  for(argc = 0; argv[argc]; argc++) {
+80100c77:	83 c7 01             	add    $0x1,%edi
+    ustack[3+argc] = sp;
+80100c7a:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+  for(argc = 0; argv[argc]; argc++) {
+80100c80:	8b 04 b8             	mov    (%eax,%edi,4),%eax
+80100c83:	85 c0                	test   %eax,%eax
+80100c85:	75 a9                	jne    80100c30 <exec+0x220>
+80100c87:	8b b5 ec fe ff ff    	mov    -0x114(%ebp),%esi
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100c8d:	8d 04 bd 04 00 00 00 	lea    0x4(,%edi,4),%eax
+80100c94:	89 d9                	mov    %ebx,%ecx
+  ustack[3+argc] = 0;
+80100c96:	c7 84 bd 64 ff ff ff 	movl   $0x0,-0x9c(%ebp,%edi,4)
+80100c9d:	00 00 00 00 
+  ustack[0] = 0xffffffff;  // fake return PC
+80100ca1:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
+80100ca8:	ff ff ff 
+  ustack[1] = argc;
+80100cab:	89 bd 5c ff ff ff    	mov    %edi,-0xa4(%ebp)
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100cb1:	29 c1                	sub    %eax,%ecx
+  sp -= (3+argc+1) * 4;
+80100cb3:	83 c0 0c             	add    $0xc,%eax
+80100cb6:	29 c3                	sub    %eax,%ebx
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+80100cb8:	50                   	push   %eax
+80100cb9:	52                   	push   %edx
+80100cba:	53                   	push   %ebx
+80100cbb:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100cc1:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+80100cc7:	e8 34 66 00 00       	call   80107300 <copyout>
+80100ccc:	83 c4 10             	add    $0x10,%esp
+80100ccf:	85 c0                	test   %eax,%eax
+80100cd1:	0f 88 e1 fe ff ff    	js     80100bb8 <exec+0x1a8>
+  for(last=s=path; *s; s++)
+80100cd7:	8b 45 08             	mov    0x8(%ebp),%eax
+80100cda:	0f b6 00             	movzbl (%eax),%eax
+80100cdd:	84 c0                	test   %al,%al
+80100cdf:	74 17                	je     80100cf8 <exec+0x2e8>
+80100ce1:	8b 55 08             	mov    0x8(%ebp),%edx
+80100ce4:	89 d1                	mov    %edx,%ecx
+80100ce6:	83 c1 01             	add    $0x1,%ecx
+80100ce9:	3c 2f                	cmp    $0x2f,%al
+80100ceb:	0f b6 01             	movzbl (%ecx),%eax
+80100cee:	0f 44 d1             	cmove  %ecx,%edx
+80100cf1:	84 c0                	test   %al,%al
+80100cf3:	75 f1                	jne    80100ce6 <exec+0x2d6>
+80100cf5:	89 55 08             	mov    %edx,0x8(%ebp)
+  safestrcpy(curproc->name, last, sizeof(curproc->name));
+80100cf8:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
+80100cfe:	50                   	push   %eax
+80100cff:	6a 10                	push   $0x10
+80100d01:	ff 75 08             	pushl  0x8(%ebp)
+80100d04:	89 f8                	mov    %edi,%eax
+80100d06:	83 c0 6c             	add    $0x6c,%eax
+80100d09:	50                   	push   %eax
+80100d0a:	e8 91 3c 00 00       	call   801049a0 <safestrcpy>
+  curproc->pgdir = pgdir;
+80100d0f:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
+  oldpgdir = curproc->pgdir;
+80100d15:	89 f9                	mov    %edi,%ecx
+80100d17:	8b 7f 04             	mov    0x4(%edi),%edi
+  curproc->tf->eip = elf.entry;  // main
+80100d1a:	8b 41 18             	mov    0x18(%ecx),%eax
+  curproc->sz = sz;
+80100d1d:	89 31                	mov    %esi,(%ecx)
+  curproc->pgdir = pgdir;
+80100d1f:	89 51 04             	mov    %edx,0x4(%ecx)
+  curproc->tf->eip = elf.entry;  // main
+80100d22:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
+80100d28:	89 50 38             	mov    %edx,0x38(%eax)
+  curproc->tf->esp = sp;
+80100d2b:	8b 41 18             	mov    0x18(%ecx),%eax
+80100d2e:	89 58 44             	mov    %ebx,0x44(%eax)
+  switchuvm(curproc);
+80100d31:	89 0c 24             	mov    %ecx,(%esp)
+80100d34:	e8 97 5f 00 00       	call   80106cd0 <switchuvm>
+  freevm(oldpgdir);
+80100d39:	89 3c 24             	mov    %edi,(%esp)
+80100d3c:	e8 3f 63 00 00       	call   80107080 <freevm>
+  return 0;
+80100d41:	83 c4 10             	add    $0x10,%esp
+80100d44:	31 c0                	xor    %eax,%eax
+80100d46:	e9 31 fd ff ff       	jmp    80100a7c <exec+0x6c>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100d4b:	be 00 20 00 00       	mov    $0x2000,%esi
+80100d50:	e9 3c fe ff ff       	jmp    80100b91 <exec+0x181>
+80100d55:	66 90                	xchg   %ax,%ax
+80100d57:	66 90                	xchg   %ax,%ax
+80100d59:	66 90                	xchg   %ax,%ax
+80100d5b:	66 90                	xchg   %ax,%ax
+80100d5d:	66 90                	xchg   %ax,%ax
+80100d5f:	90                   	nop
+
+80100d60 <fileinit>:
+  struct file file[NFILE];
+} ftable;
+
+void
+fileinit(void)
+{
+80100d60:	55                   	push   %ebp
+80100d61:	89 e5                	mov    %esp,%ebp
+80100d63:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ftable.lock, "ftable");
+80100d66:	68 2d 74 10 80       	push   $0x8010742d
+80100d6b:	68 e0 ff 10 80       	push   $0x8010ffe0
+80100d70:	e8 fb 37 00 00       	call   80104570 <initlock>
+}
+80100d75:	83 c4 10             	add    $0x10,%esp
+80100d78:	c9                   	leave  
+80100d79:	c3                   	ret    
+80100d7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80100d80 <filealloc>:
+
+// Allocate a file structure.
+struct file*
+filealloc(void)
+{
+80100d80:	55                   	push   %ebp
+80100d81:	89 e5                	mov    %esp,%ebp
+80100d83:	53                   	push   %ebx
+  struct file *f;
+
+  acquire(&ftable.lock);
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+80100d84:	bb 14 00 11 80       	mov    $0x80110014,%ebx
+{
+80100d89:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ftable.lock);
+80100d8c:	68 e0 ff 10 80       	push   $0x8010ffe0
+80100d91:	e8 1a 39 00 00       	call   801046b0 <acquire>
+80100d96:	83 c4 10             	add    $0x10,%esp
+80100d99:	eb 10                	jmp    80100dab <filealloc+0x2b>
+80100d9b:	90                   	nop
+80100d9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+80100da0:	83 c3 18             	add    $0x18,%ebx
+80100da3:	81 fb 74 09 11 80    	cmp    $0x80110974,%ebx
+80100da9:	73 25                	jae    80100dd0 <filealloc+0x50>
+    if(f->ref == 0){
+80100dab:	8b 43 04             	mov    0x4(%ebx),%eax
+80100dae:	85 c0                	test   %eax,%eax
+80100db0:	75 ee                	jne    80100da0 <filealloc+0x20>
+      f->ref = 1;
+      release(&ftable.lock);
+80100db2:	83 ec 0c             	sub    $0xc,%esp
+      f->ref = 1;
+80100db5:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
+      release(&ftable.lock);
+80100dbc:	68 e0 ff 10 80       	push   $0x8010ffe0
+80100dc1:	e8 aa 39 00 00       	call   80104770 <release>
+      return f;
+    }
+  }
+  release(&ftable.lock);
+  return 0;
+}
+80100dc6:	89 d8                	mov    %ebx,%eax
+      return f;
+80100dc8:	83 c4 10             	add    $0x10,%esp
+}
+80100dcb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100dce:	c9                   	leave  
+80100dcf:	c3                   	ret    
+  release(&ftable.lock);
+80100dd0:	83 ec 0c             	sub    $0xc,%esp
+  return 0;
+80100dd3:	31 db                	xor    %ebx,%ebx
+  release(&ftable.lock);
+80100dd5:	68 e0 ff 10 80       	push   $0x8010ffe0
+80100dda:	e8 91 39 00 00       	call   80104770 <release>
+}
+80100ddf:	89 d8                	mov    %ebx,%eax
+  return 0;
+80100de1:	83 c4 10             	add    $0x10,%esp
+}
+80100de4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100de7:	c9                   	leave  
+80100de8:	c3                   	ret    
+80100de9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80100df0 <filedup>:
+
+// Increment ref count for file f.
+struct file*
+filedup(struct file *f)
+{
+80100df0:	55                   	push   %ebp
+80100df1:	89 e5                	mov    %esp,%ebp
+80100df3:	53                   	push   %ebx
+80100df4:	83 ec 10             	sub    $0x10,%esp
+80100df7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&ftable.lock);
+80100dfa:	68 e0 ff 10 80       	push   $0x8010ffe0
+80100dff:	e8 ac 38 00 00       	call   801046b0 <acquire>
+  if(f->ref < 1)
+80100e04:	8b 43 04             	mov    0x4(%ebx),%eax
+80100e07:	83 c4 10             	add    $0x10,%esp
+80100e0a:	85 c0                	test   %eax,%eax
+80100e0c:	7e 1a                	jle    80100e28 <filedup+0x38>
+    panic("filedup");
+  f->ref++;
+80100e0e:	83 c0 01             	add    $0x1,%eax
+  release(&ftable.lock);
+80100e11:	83 ec 0c             	sub    $0xc,%esp
+  f->ref++;
+80100e14:	89 43 04             	mov    %eax,0x4(%ebx)
+  release(&ftable.lock);
+80100e17:	68 e0 ff 10 80       	push   $0x8010ffe0
+80100e1c:	e8 4f 39 00 00       	call   80104770 <release>
+  return f;
+}
+80100e21:	89 d8                	mov    %ebx,%eax
+80100e23:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100e26:	c9                   	leave  
+80100e27:	c3                   	ret    
+    panic("filedup");
+80100e28:	83 ec 0c             	sub    $0xc,%esp
+80100e2b:	68 34 74 10 80       	push   $0x80107434
+80100e30:	e8 5b f5 ff ff       	call   80100390 <panic>
+80100e35:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100e39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80100e40 <fileclose>:
+
+// Close file f.  (Decrement ref count, close when reaches 0.)
+void
+fileclose(struct file *f)
+{
+80100e40:	55                   	push   %ebp
+80100e41:	89 e5                	mov    %esp,%ebp
+80100e43:	57                   	push   %edi
+80100e44:	56                   	push   %esi
+80100e45:	53                   	push   %ebx
+80100e46:	83 ec 28             	sub    $0x28,%esp
+80100e49:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct file ff;
+
+  acquire(&ftable.lock);
+80100e4c:	68 e0 ff 10 80       	push   $0x8010ffe0
+80100e51:	e8 5a 38 00 00       	call   801046b0 <acquire>
+  if(f->ref < 1)
+80100e56:	8b 43 04             	mov    0x4(%ebx),%eax
+80100e59:	83 c4 10             	add    $0x10,%esp
+80100e5c:	85 c0                	test   %eax,%eax
+80100e5e:	0f 8e 9b 00 00 00    	jle    80100eff <fileclose+0xbf>
+    panic("fileclose");
+  if(--f->ref > 0){
+80100e64:	83 e8 01             	sub    $0x1,%eax
+80100e67:	85 c0                	test   %eax,%eax
+80100e69:	89 43 04             	mov    %eax,0x4(%ebx)
+80100e6c:	74 1a                	je     80100e88 <fileclose+0x48>
+    release(&ftable.lock);
+80100e6e:	c7 45 08 e0 ff 10 80 	movl   $0x8010ffe0,0x8(%ebp)
+  else if(ff.type == FD_INODE){
+    begin_op();
+    iput(ff.ip);
+    end_op();
+  }
+}
+80100e75:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100e78:	5b                   	pop    %ebx
+80100e79:	5e                   	pop    %esi
+80100e7a:	5f                   	pop    %edi
+80100e7b:	5d                   	pop    %ebp
+    release(&ftable.lock);
+80100e7c:	e9 ef 38 00 00       	jmp    80104770 <release>
+80100e81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ff = *f;
+80100e88:	0f b6 43 09          	movzbl 0x9(%ebx),%eax
+80100e8c:	8b 3b                	mov    (%ebx),%edi
+  release(&ftable.lock);
+80100e8e:	83 ec 0c             	sub    $0xc,%esp
+  ff = *f;
+80100e91:	8b 73 0c             	mov    0xc(%ebx),%esi
+  f->type = FD_NONE;
+80100e94:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  ff = *f;
+80100e9a:	88 45 e7             	mov    %al,-0x19(%ebp)
+80100e9d:	8b 43 10             	mov    0x10(%ebx),%eax
+  release(&ftable.lock);
+80100ea0:	68 e0 ff 10 80       	push   $0x8010ffe0
+  ff = *f;
+80100ea5:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  release(&ftable.lock);
+80100ea8:	e8 c3 38 00 00       	call   80104770 <release>
+  if(ff.type == FD_PIPE)
+80100ead:	83 c4 10             	add    $0x10,%esp
+80100eb0:	83 ff 01             	cmp    $0x1,%edi
+80100eb3:	74 13                	je     80100ec8 <fileclose+0x88>
+  else if(ff.type == FD_INODE){
+80100eb5:	83 ff 02             	cmp    $0x2,%edi
+80100eb8:	74 26                	je     80100ee0 <fileclose+0xa0>
+}
+80100eba:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100ebd:	5b                   	pop    %ebx
+80100ebe:	5e                   	pop    %esi
+80100ebf:	5f                   	pop    %edi
+80100ec0:	5d                   	pop    %ebp
+80100ec1:	c3                   	ret    
+80100ec2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    pipeclose(ff.pipe, ff.writable);
+80100ec8:	0f be 5d e7          	movsbl -0x19(%ebp),%ebx
+80100ecc:	83 ec 08             	sub    $0x8,%esp
+80100ecf:	53                   	push   %ebx
+80100ed0:	56                   	push   %esi
+80100ed1:	e8 8a 27 00 00       	call   80103660 <pipeclose>
+80100ed6:	83 c4 10             	add    $0x10,%esp
+80100ed9:	eb df                	jmp    80100eba <fileclose+0x7a>
+80100edb:	90                   	nop
+80100edc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    begin_op();
+80100ee0:	e8 cb 1f 00 00       	call   80102eb0 <begin_op>
+    iput(ff.ip);
+80100ee5:	83 ec 0c             	sub    $0xc,%esp
+80100ee8:	ff 75 e0             	pushl  -0x20(%ebp)
+80100eeb:	e8 d0 08 00 00       	call   801017c0 <iput>
+    end_op();
+80100ef0:	83 c4 10             	add    $0x10,%esp
+}
+80100ef3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100ef6:	5b                   	pop    %ebx
+80100ef7:	5e                   	pop    %esi
+80100ef8:	5f                   	pop    %edi
+80100ef9:	5d                   	pop    %ebp
+    end_op();
+80100efa:	e9 21 20 00 00       	jmp    80102f20 <end_op>
+    panic("fileclose");
+80100eff:	83 ec 0c             	sub    $0xc,%esp
+80100f02:	68 3c 74 10 80       	push   $0x8010743c
+80100f07:	e8 84 f4 ff ff       	call   80100390 <panic>
+80100f0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100f10 <filestat>:
+
+// Get metadata about file f.
+int
+filestat(struct file *f, struct stat *st)
+{
+80100f10:	55                   	push   %ebp
+80100f11:	89 e5                	mov    %esp,%ebp
+80100f13:	53                   	push   %ebx
+80100f14:	83 ec 04             	sub    $0x4,%esp
+80100f17:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(f->type == FD_INODE){
+80100f1a:	83 3b 02             	cmpl   $0x2,(%ebx)
+80100f1d:	75 31                	jne    80100f50 <filestat+0x40>
+    ilock(f->ip);
+80100f1f:	83 ec 0c             	sub    $0xc,%esp
+80100f22:	ff 73 10             	pushl  0x10(%ebx)
+80100f25:	e8 66 07 00 00       	call   80101690 <ilock>
+    stati(f->ip, st);
+80100f2a:	58                   	pop    %eax
+80100f2b:	5a                   	pop    %edx
+80100f2c:	ff 75 0c             	pushl  0xc(%ebp)
+80100f2f:	ff 73 10             	pushl  0x10(%ebx)
+80100f32:	e8 09 0a 00 00       	call   80101940 <stati>
+    iunlock(f->ip);
+80100f37:	59                   	pop    %ecx
+80100f38:	ff 73 10             	pushl  0x10(%ebx)
+80100f3b:	e8 30 08 00 00       	call   80101770 <iunlock>
+    return 0;
+80100f40:	83 c4 10             	add    $0x10,%esp
+80100f43:	31 c0                	xor    %eax,%eax
+  }
+  return -1;
+}
+80100f45:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100f48:	c9                   	leave  
+80100f49:	c3                   	ret    
+80100f4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  return -1;
+80100f50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100f55:	eb ee                	jmp    80100f45 <filestat+0x35>
+80100f57:	89 f6                	mov    %esi,%esi
+80100f59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80100f60 <fileread>:
+
+// Read from file f.
+int
+fileread(struct file *f, char *addr, int n)
+{
+80100f60:	55                   	push   %ebp
+80100f61:	89 e5                	mov    %esp,%ebp
+80100f63:	57                   	push   %edi
+80100f64:	56                   	push   %esi
+80100f65:	53                   	push   %ebx
+80100f66:	83 ec 0c             	sub    $0xc,%esp
+80100f69:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80100f6c:	8b 75 0c             	mov    0xc(%ebp),%esi
+80100f6f:	8b 7d 10             	mov    0x10(%ebp),%edi
+  int r;
+
+  if(f->readable == 0)
+80100f72:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
+80100f76:	74 60                	je     80100fd8 <fileread+0x78>
+    return -1;
+  if(f->type == FD_PIPE)
+80100f78:	8b 03                	mov    (%ebx),%eax
+80100f7a:	83 f8 01             	cmp    $0x1,%eax
+80100f7d:	74 41                	je     80100fc0 <fileread+0x60>
+    return piperead(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+80100f7f:	83 f8 02             	cmp    $0x2,%eax
+80100f82:	75 5b                	jne    80100fdf <fileread+0x7f>
+    ilock(f->ip);
+80100f84:	83 ec 0c             	sub    $0xc,%esp
+80100f87:	ff 73 10             	pushl  0x10(%ebx)
+80100f8a:	e8 01 07 00 00       	call   80101690 <ilock>
+    if((r = readi(f->ip, addr, f->off, n)) > 0)
+80100f8f:	57                   	push   %edi
+80100f90:	ff 73 14             	pushl  0x14(%ebx)
+80100f93:	56                   	push   %esi
+80100f94:	ff 73 10             	pushl  0x10(%ebx)
+80100f97:	e8 d4 09 00 00       	call   80101970 <readi>
+80100f9c:	83 c4 20             	add    $0x20,%esp
+80100f9f:	85 c0                	test   %eax,%eax
+80100fa1:	89 c6                	mov    %eax,%esi
+80100fa3:	7e 03                	jle    80100fa8 <fileread+0x48>
+      f->off += r;
+80100fa5:	01 43 14             	add    %eax,0x14(%ebx)
+    iunlock(f->ip);
+80100fa8:	83 ec 0c             	sub    $0xc,%esp
+80100fab:	ff 73 10             	pushl  0x10(%ebx)
+80100fae:	e8 bd 07 00 00       	call   80101770 <iunlock>
+    return r;
+80100fb3:	83 c4 10             	add    $0x10,%esp
+  }
+  panic("fileread");
+}
+80100fb6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100fb9:	89 f0                	mov    %esi,%eax
+80100fbb:	5b                   	pop    %ebx
+80100fbc:	5e                   	pop    %esi
+80100fbd:	5f                   	pop    %edi
+80100fbe:	5d                   	pop    %ebp
+80100fbf:	c3                   	ret    
+    return piperead(f->pipe, addr, n);
+80100fc0:	8b 43 0c             	mov    0xc(%ebx),%eax
+80100fc3:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+80100fc6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100fc9:	5b                   	pop    %ebx
+80100fca:	5e                   	pop    %esi
+80100fcb:	5f                   	pop    %edi
+80100fcc:	5d                   	pop    %ebp
+    return piperead(f->pipe, addr, n);
+80100fcd:	e9 3e 28 00 00       	jmp    80103810 <piperead>
+80100fd2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+80100fd8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+80100fdd:	eb d7                	jmp    80100fb6 <fileread+0x56>
+  panic("fileread");
+80100fdf:	83 ec 0c             	sub    $0xc,%esp
+80100fe2:	68 46 74 10 80       	push   $0x80107446
+80100fe7:	e8 a4 f3 ff ff       	call   80100390 <panic>
+80100fec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100ff0 <filewrite>:
+
+//PAGEBREAK!
+// Write to file f.
+int
+filewrite(struct file *f, char *addr, int n)
+{
+80100ff0:	55                   	push   %ebp
+80100ff1:	89 e5                	mov    %esp,%ebp
+80100ff3:	57                   	push   %edi
+80100ff4:	56                   	push   %esi
+80100ff5:	53                   	push   %ebx
+80100ff6:	83 ec 1c             	sub    $0x1c,%esp
+80100ff9:	8b 75 08             	mov    0x8(%ebp),%esi
+80100ffc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  int r;
+
+  if(f->writable == 0)
+80100fff:	80 7e 09 00          	cmpb   $0x0,0x9(%esi)
+{
+80101003:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80101006:	8b 45 10             	mov    0x10(%ebp),%eax
+80101009:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(f->writable == 0)
+8010100c:	0f 84 aa 00 00 00    	je     801010bc <filewrite+0xcc>
+    return -1;
+  if(f->type == FD_PIPE)
+80101012:	8b 06                	mov    (%esi),%eax
+80101014:	83 f8 01             	cmp    $0x1,%eax
+80101017:	0f 84 c3 00 00 00    	je     801010e0 <filewrite+0xf0>
+    return pipewrite(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+8010101d:	83 f8 02             	cmp    $0x2,%eax
+80101020:	0f 85 d9 00 00 00    	jne    801010ff <filewrite+0x10f>
+    // and 2 blocks of slop for non-aligned writes.
+    // this really belongs lower down, since writei()
+    // might be writing a device like the console.
+    int max = ((MAXOPBLOCKS-1-1-2) / 2) * 512;
+    int i = 0;
+    while(i < n){
+80101026:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    int i = 0;
+80101029:	31 ff                	xor    %edi,%edi
+    while(i < n){
+8010102b:	85 c0                	test   %eax,%eax
+8010102d:	7f 34                	jg     80101063 <filewrite+0x73>
+8010102f:	e9 9c 00 00 00       	jmp    801010d0 <filewrite+0xe0>
+80101034:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        n1 = max;
+
+      begin_op();
+      ilock(f->ip);
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+        f->off += r;
+80101038:	01 46 14             	add    %eax,0x14(%esi)
+      iunlock(f->ip);
+8010103b:	83 ec 0c             	sub    $0xc,%esp
+8010103e:	ff 76 10             	pushl  0x10(%esi)
+        f->off += r;
+80101041:	89 45 e0             	mov    %eax,-0x20(%ebp)
+      iunlock(f->ip);
+80101044:	e8 27 07 00 00       	call   80101770 <iunlock>
+      end_op();
+80101049:	e8 d2 1e 00 00       	call   80102f20 <end_op>
+8010104e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101051:	83 c4 10             	add    $0x10,%esp
+
+      if(r < 0)
+        break;
+      if(r != n1)
+80101054:	39 c3                	cmp    %eax,%ebx
+80101056:	0f 85 96 00 00 00    	jne    801010f2 <filewrite+0x102>
+        panic("short filewrite");
+      i += r;
+8010105c:	01 df                	add    %ebx,%edi
+    while(i < n){
+8010105e:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80101061:	7e 6d                	jle    801010d0 <filewrite+0xe0>
+      int n1 = n - i;
+80101063:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80101066:	b8 00 06 00 00       	mov    $0x600,%eax
+8010106b:	29 fb                	sub    %edi,%ebx
+8010106d:	81 fb 00 06 00 00    	cmp    $0x600,%ebx
+80101073:	0f 4f d8             	cmovg  %eax,%ebx
+      begin_op();
+80101076:	e8 35 1e 00 00       	call   80102eb0 <begin_op>
+      ilock(f->ip);
+8010107b:	83 ec 0c             	sub    $0xc,%esp
+8010107e:	ff 76 10             	pushl  0x10(%esi)
+80101081:	e8 0a 06 00 00       	call   80101690 <ilock>
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+80101086:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101089:	53                   	push   %ebx
+8010108a:	ff 76 14             	pushl  0x14(%esi)
+8010108d:	01 f8                	add    %edi,%eax
+8010108f:	50                   	push   %eax
+80101090:	ff 76 10             	pushl  0x10(%esi)
+80101093:	e8 d8 09 00 00       	call   80101a70 <writei>
+80101098:	83 c4 20             	add    $0x20,%esp
+8010109b:	85 c0                	test   %eax,%eax
+8010109d:	7f 99                	jg     80101038 <filewrite+0x48>
+      iunlock(f->ip);
+8010109f:	83 ec 0c             	sub    $0xc,%esp
+801010a2:	ff 76 10             	pushl  0x10(%esi)
+801010a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801010a8:	e8 c3 06 00 00       	call   80101770 <iunlock>
+      end_op();
+801010ad:	e8 6e 1e 00 00       	call   80102f20 <end_op>
+      if(r < 0)
+801010b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801010b5:	83 c4 10             	add    $0x10,%esp
+801010b8:	85 c0                	test   %eax,%eax
+801010ba:	74 98                	je     80101054 <filewrite+0x64>
+    }
+    return i == n ? n : -1;
+  }
+  panic("filewrite");
+}
+801010bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return -1;
+801010bf:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+}
+801010c4:	89 f8                	mov    %edi,%eax
+801010c6:	5b                   	pop    %ebx
+801010c7:	5e                   	pop    %esi
+801010c8:	5f                   	pop    %edi
+801010c9:	5d                   	pop    %ebp
+801010ca:	c3                   	ret    
+801010cb:	90                   	nop
+801010cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return i == n ? n : -1;
+801010d0:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+801010d3:	75 e7                	jne    801010bc <filewrite+0xcc>
+}
+801010d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801010d8:	89 f8                	mov    %edi,%eax
+801010da:	5b                   	pop    %ebx
+801010db:	5e                   	pop    %esi
+801010dc:	5f                   	pop    %edi
+801010dd:	5d                   	pop    %ebp
+801010de:	c3                   	ret    
+801010df:	90                   	nop
+    return pipewrite(f->pipe, addr, n);
+801010e0:	8b 46 0c             	mov    0xc(%esi),%eax
+801010e3:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+801010e6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801010e9:	5b                   	pop    %ebx
+801010ea:	5e                   	pop    %esi
+801010eb:	5f                   	pop    %edi
+801010ec:	5d                   	pop    %ebp
+    return pipewrite(f->pipe, addr, n);
+801010ed:	e9 0e 26 00 00       	jmp    80103700 <pipewrite>
+        panic("short filewrite");
+801010f2:	83 ec 0c             	sub    $0xc,%esp
+801010f5:	68 4f 74 10 80       	push   $0x8010744f
+801010fa:	e8 91 f2 ff ff       	call   80100390 <panic>
+  panic("filewrite");
+801010ff:	83 ec 0c             	sub    $0xc,%esp
+80101102:	68 55 74 10 80       	push   $0x80107455
+80101107:	e8 84 f2 ff ff       	call   80100390 <panic>
+8010110c:	66 90                	xchg   %ax,%ax
+8010110e:	66 90                	xchg   %ax,%ax
+
+80101110 <balloc>:
+// Blocks.
+
+// Allocate a zeroed disk block.
+static uint
+balloc(uint dev)
+{
+80101110:	55                   	push   %ebp
+80101111:	89 e5                	mov    %esp,%ebp
+80101113:	57                   	push   %edi
+80101114:	56                   	push   %esi
+80101115:	53                   	push   %ebx
+80101116:	83 ec 1c             	sub    $0x1c,%esp
+  int b, bi, m;
+  struct buf *bp;
+
+  bp = 0;
+  for(b = 0; b < sb.size; b += BPB){
+80101119:	8b 0d e0 09 11 80    	mov    0x801109e0,%ecx
+{
+8010111f:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  for(b = 0; b < sb.size; b += BPB){
+80101122:	85 c9                	test   %ecx,%ecx
+80101124:	0f 84 87 00 00 00    	je     801011b1 <balloc+0xa1>
+8010112a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    bp = bread(dev, BBLOCK(b, sb));
+80101131:	8b 75 dc             	mov    -0x24(%ebp),%esi
+80101134:	83 ec 08             	sub    $0x8,%esp
+80101137:	89 f0                	mov    %esi,%eax
+80101139:	c1 f8 0c             	sar    $0xc,%eax
+8010113c:	03 05 f8 09 11 80    	add    0x801109f8,%eax
+80101142:	50                   	push   %eax
+80101143:	ff 75 d8             	pushl  -0x28(%ebp)
+80101146:	e8 85 ef ff ff       	call   801000d0 <bread>
+8010114b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+8010114e:	a1 e0 09 11 80       	mov    0x801109e0,%eax
+80101153:	83 c4 10             	add    $0x10,%esp
+80101156:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80101159:	31 c0                	xor    %eax,%eax
+8010115b:	eb 2f                	jmp    8010118c <balloc+0x7c>
+8010115d:	8d 76 00             	lea    0x0(%esi),%esi
+      m = 1 << (bi % 8);
+80101160:	89 c1                	mov    %eax,%ecx
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+80101162:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+      m = 1 << (bi % 8);
+80101165:	bb 01 00 00 00       	mov    $0x1,%ebx
+8010116a:	83 e1 07             	and    $0x7,%ecx
+8010116d:	d3 e3                	shl    %cl,%ebx
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+8010116f:	89 c1                	mov    %eax,%ecx
+80101171:	c1 f9 03             	sar    $0x3,%ecx
+80101174:	0f b6 7c 0a 5c       	movzbl 0x5c(%edx,%ecx,1),%edi
+80101179:	85 df                	test   %ebx,%edi
+8010117b:	89 fa                	mov    %edi,%edx
+8010117d:	74 41                	je     801011c0 <balloc+0xb0>
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+8010117f:	83 c0 01             	add    $0x1,%eax
+80101182:	83 c6 01             	add    $0x1,%esi
+80101185:	3d 00 10 00 00       	cmp    $0x1000,%eax
+8010118a:	74 05                	je     80101191 <balloc+0x81>
+8010118c:	39 75 e0             	cmp    %esi,-0x20(%ebp)
+8010118f:	77 cf                	ja     80101160 <balloc+0x50>
+        brelse(bp);
+        bzero(dev, b + bi);
+        return b + bi;
+      }
+    }
+    brelse(bp);
+80101191:	83 ec 0c             	sub    $0xc,%esp
+80101194:	ff 75 e4             	pushl  -0x1c(%ebp)
+80101197:	e8 44 f0 ff ff       	call   801001e0 <brelse>
+  for(b = 0; b < sb.size; b += BPB){
+8010119c:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
+801011a3:	83 c4 10             	add    $0x10,%esp
+801011a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801011a9:	39 05 e0 09 11 80    	cmp    %eax,0x801109e0
+801011af:	77 80                	ja     80101131 <balloc+0x21>
+  }
+  panic("balloc: out of blocks");
+801011b1:	83 ec 0c             	sub    $0xc,%esp
+801011b4:	68 5f 74 10 80       	push   $0x8010745f
+801011b9:	e8 d2 f1 ff ff       	call   80100390 <panic>
+801011be:	66 90                	xchg   %ax,%ax
+        bp->data[bi/8] |= m;  // Mark block in use.
+801011c0:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+        log_write(bp);
+801011c3:	83 ec 0c             	sub    $0xc,%esp
+        bp->data[bi/8] |= m;  // Mark block in use.
+801011c6:	09 da                	or     %ebx,%edx
+801011c8:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
+        log_write(bp);
+801011cc:	57                   	push   %edi
+801011cd:	e8 ae 1e 00 00       	call   80103080 <log_write>
+        brelse(bp);
+801011d2:	89 3c 24             	mov    %edi,(%esp)
+801011d5:	e8 06 f0 ff ff       	call   801001e0 <brelse>
+  bp = bread(dev, bno);
+801011da:	58                   	pop    %eax
+801011db:	5a                   	pop    %edx
+801011dc:	56                   	push   %esi
+801011dd:	ff 75 d8             	pushl  -0x28(%ebp)
+801011e0:	e8 eb ee ff ff       	call   801000d0 <bread>
+801011e5:	89 c3                	mov    %eax,%ebx
+  memset(bp->data, 0, BSIZE);
+801011e7:	8d 40 5c             	lea    0x5c(%eax),%eax
+801011ea:	83 c4 0c             	add    $0xc,%esp
+801011ed:	68 00 02 00 00       	push   $0x200
+801011f2:	6a 00                	push   $0x0
+801011f4:	50                   	push   %eax
+801011f5:	e8 c6 35 00 00       	call   801047c0 <memset>
+  log_write(bp);
+801011fa:	89 1c 24             	mov    %ebx,(%esp)
+801011fd:	e8 7e 1e 00 00       	call   80103080 <log_write>
+  brelse(bp);
+80101202:	89 1c 24             	mov    %ebx,(%esp)
+80101205:	e8 d6 ef ff ff       	call   801001e0 <brelse>
+}
+8010120a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010120d:	89 f0                	mov    %esi,%eax
+8010120f:	5b                   	pop    %ebx
+80101210:	5e                   	pop    %esi
+80101211:	5f                   	pop    %edi
+80101212:	5d                   	pop    %ebp
+80101213:	c3                   	ret    
+80101214:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010121a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80101220 <iget>:
+// Find the inode with number inum on device dev
+// and return the in-memory copy. Does not lock
+// the inode and does not read it from disk.
+static struct inode*
+iget(uint dev, uint inum)
+{
+80101220:	55                   	push   %ebp
+80101221:	89 e5                	mov    %esp,%ebp
+80101223:	57                   	push   %edi
+80101224:	56                   	push   %esi
+80101225:	53                   	push   %ebx
+80101226:	89 c7                	mov    %eax,%edi
+  struct inode *ip, *empty;
+
+  acquire(&icache.lock);
+
+  // Is the inode already cached?
+  empty = 0;
+80101228:	31 f6                	xor    %esi,%esi
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+8010122a:	bb 34 0a 11 80       	mov    $0x80110a34,%ebx
+{
+8010122f:	83 ec 28             	sub    $0x28,%esp
+80101232:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  acquire(&icache.lock);
+80101235:	68 00 0a 11 80       	push   $0x80110a00
+8010123a:	e8 71 34 00 00       	call   801046b0 <acquire>
+8010123f:	83 c4 10             	add    $0x10,%esp
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101242:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80101245:	eb 17                	jmp    8010125e <iget+0x3e>
+80101247:	89 f6                	mov    %esi,%esi
+80101249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80101250:	81 c3 90 00 00 00    	add    $0x90,%ebx
+80101256:	81 fb 54 26 11 80    	cmp    $0x80112654,%ebx
+8010125c:	73 22                	jae    80101280 <iget+0x60>
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+8010125e:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80101261:	85 c9                	test   %ecx,%ecx
+80101263:	7e 04                	jle    80101269 <iget+0x49>
+80101265:	39 3b                	cmp    %edi,(%ebx)
+80101267:	74 4f                	je     801012b8 <iget+0x98>
+      ip->ref++;
+      release(&icache.lock);
+      return ip;
+    }
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+80101269:	85 f6                	test   %esi,%esi
+8010126b:	75 e3                	jne    80101250 <iget+0x30>
+8010126d:	85 c9                	test   %ecx,%ecx
+8010126f:	0f 44 f3             	cmove  %ebx,%esi
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101272:	81 c3 90 00 00 00    	add    $0x90,%ebx
+80101278:	81 fb 54 26 11 80    	cmp    $0x80112654,%ebx
+8010127e:	72 de                	jb     8010125e <iget+0x3e>
+      empty = ip;
+  }
+
+  // Recycle an inode cache entry.
+  if(empty == 0)
+80101280:	85 f6                	test   %esi,%esi
+80101282:	74 5b                	je     801012df <iget+0xbf>
+  ip = empty;
+  ip->dev = dev;
+  ip->inum = inum;
+  ip->ref = 1;
+  ip->valid = 0;
+  release(&icache.lock);
+80101284:	83 ec 0c             	sub    $0xc,%esp
+  ip->dev = dev;
+80101287:	89 3e                	mov    %edi,(%esi)
+  ip->inum = inum;
+80101289:	89 56 04             	mov    %edx,0x4(%esi)
+  ip->ref = 1;
+8010128c:	c7 46 08 01 00 00 00 	movl   $0x1,0x8(%esi)
+  ip->valid = 0;
+80101293:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
+  release(&icache.lock);
+8010129a:	68 00 0a 11 80       	push   $0x80110a00
+8010129f:	e8 cc 34 00 00       	call   80104770 <release>
+
+  return ip;
+801012a4:	83 c4 10             	add    $0x10,%esp
+}
+801012a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801012aa:	89 f0                	mov    %esi,%eax
+801012ac:	5b                   	pop    %ebx
+801012ad:	5e                   	pop    %esi
+801012ae:	5f                   	pop    %edi
+801012af:	5d                   	pop    %ebp
+801012b0:	c3                   	ret    
+801012b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+801012b8:	39 53 04             	cmp    %edx,0x4(%ebx)
+801012bb:	75 ac                	jne    80101269 <iget+0x49>
+      release(&icache.lock);
+801012bd:	83 ec 0c             	sub    $0xc,%esp
+      ip->ref++;
+801012c0:	83 c1 01             	add    $0x1,%ecx
+      return ip;
+801012c3:	89 de                	mov    %ebx,%esi
+      release(&icache.lock);
+801012c5:	68 00 0a 11 80       	push   $0x80110a00
+      ip->ref++;
+801012ca:	89 4b 08             	mov    %ecx,0x8(%ebx)
+      release(&icache.lock);
+801012cd:	e8 9e 34 00 00       	call   80104770 <release>
+      return ip;
+801012d2:	83 c4 10             	add    $0x10,%esp
+}
+801012d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801012d8:	89 f0                	mov    %esi,%eax
+801012da:	5b                   	pop    %ebx
+801012db:	5e                   	pop    %esi
+801012dc:	5f                   	pop    %edi
+801012dd:	5d                   	pop    %ebp
+801012de:	c3                   	ret    
+    panic("iget: no inodes");
+801012df:	83 ec 0c             	sub    $0xc,%esp
+801012e2:	68 75 74 10 80       	push   $0x80107475
+801012e7:	e8 a4 f0 ff ff       	call   80100390 <panic>
+801012ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801012f0 <bmap>:
+
+// Return the disk block address of the nth block in inode ip.
+// If there is no such block, bmap allocates one.
+static uint
+bmap(struct inode *ip, uint bn)
+{
+801012f0:	55                   	push   %ebp
+801012f1:	89 e5                	mov    %esp,%ebp
+801012f3:	57                   	push   %edi
+801012f4:	56                   	push   %esi
+801012f5:	53                   	push   %ebx
+801012f6:	89 c6                	mov    %eax,%esi
+801012f8:	83 ec 1c             	sub    $0x1c,%esp
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+801012fb:	83 fa 0b             	cmp    $0xb,%edx
+801012fe:	77 18                	ja     80101318 <bmap+0x28>
+80101300:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+    if((addr = ip->addrs[bn]) == 0)
+80101303:	8b 5f 5c             	mov    0x5c(%edi),%ebx
+80101306:	85 db                	test   %ebx,%ebx
+80101308:	74 76                	je     80101380 <bmap+0x90>
+    brelse(bp);
+    return addr;
+  }
+
+  panic("bmap: out of range");
+}
+8010130a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010130d:	89 d8                	mov    %ebx,%eax
+8010130f:	5b                   	pop    %ebx
+80101310:	5e                   	pop    %esi
+80101311:	5f                   	pop    %edi
+80101312:	5d                   	pop    %ebp
+80101313:	c3                   	ret    
+80101314:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  bn -= NDIRECT;
+80101318:	8d 5a f4             	lea    -0xc(%edx),%ebx
+  if(bn < NINDIRECT){
+8010131b:	83 fb 7f             	cmp    $0x7f,%ebx
+8010131e:	0f 87 90 00 00 00    	ja     801013b4 <bmap+0xc4>
+    if((addr = ip->addrs[NDIRECT]) == 0)
+80101324:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
+8010132a:	8b 00                	mov    (%eax),%eax
+8010132c:	85 d2                	test   %edx,%edx
+8010132e:	74 70                	je     801013a0 <bmap+0xb0>
+    bp = bread(ip->dev, addr);
+80101330:	83 ec 08             	sub    $0x8,%esp
+80101333:	52                   	push   %edx
+80101334:	50                   	push   %eax
+80101335:	e8 96 ed ff ff       	call   801000d0 <bread>
+    if((addr = a[bn]) == 0){
+8010133a:	8d 54 98 5c          	lea    0x5c(%eax,%ebx,4),%edx
+8010133e:	83 c4 10             	add    $0x10,%esp
+    bp = bread(ip->dev, addr);
+80101341:	89 c7                	mov    %eax,%edi
+    if((addr = a[bn]) == 0){
+80101343:	8b 1a                	mov    (%edx),%ebx
+80101345:	85 db                	test   %ebx,%ebx
+80101347:	75 1d                	jne    80101366 <bmap+0x76>
+      a[bn] = addr = balloc(ip->dev);
+80101349:	8b 06                	mov    (%esi),%eax
+8010134b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+8010134e:	e8 bd fd ff ff       	call   80101110 <balloc>
+80101353:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+      log_write(bp);
+80101356:	83 ec 0c             	sub    $0xc,%esp
+      a[bn] = addr = balloc(ip->dev);
+80101359:	89 c3                	mov    %eax,%ebx
+8010135b:	89 02                	mov    %eax,(%edx)
+      log_write(bp);
+8010135d:	57                   	push   %edi
+8010135e:	e8 1d 1d 00 00       	call   80103080 <log_write>
+80101363:	83 c4 10             	add    $0x10,%esp
+    brelse(bp);
+80101366:	83 ec 0c             	sub    $0xc,%esp
+80101369:	57                   	push   %edi
+8010136a:	e8 71 ee ff ff       	call   801001e0 <brelse>
+8010136f:	83 c4 10             	add    $0x10,%esp
+}
+80101372:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101375:	89 d8                	mov    %ebx,%eax
+80101377:	5b                   	pop    %ebx
+80101378:	5e                   	pop    %esi
+80101379:	5f                   	pop    %edi
+8010137a:	5d                   	pop    %ebp
+8010137b:	c3                   	ret    
+8010137c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      ip->addrs[bn] = addr = balloc(ip->dev);
+80101380:	8b 00                	mov    (%eax),%eax
+80101382:	e8 89 fd ff ff       	call   80101110 <balloc>
+80101387:	89 47 5c             	mov    %eax,0x5c(%edi)
+}
+8010138a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      ip->addrs[bn] = addr = balloc(ip->dev);
+8010138d:	89 c3                	mov    %eax,%ebx
+}
+8010138f:	89 d8                	mov    %ebx,%eax
+80101391:	5b                   	pop    %ebx
+80101392:	5e                   	pop    %esi
+80101393:	5f                   	pop    %edi
+80101394:	5d                   	pop    %ebp
+80101395:	c3                   	ret    
+80101396:	8d 76 00             	lea    0x0(%esi),%esi
+80101399:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+801013a0:	e8 6b fd ff ff       	call   80101110 <balloc>
+801013a5:	89 c2                	mov    %eax,%edx
+801013a7:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
+801013ad:	8b 06                	mov    (%esi),%eax
+801013af:	e9 7c ff ff ff       	jmp    80101330 <bmap+0x40>
+  panic("bmap: out of range");
+801013b4:	83 ec 0c             	sub    $0xc,%esp
+801013b7:	68 85 74 10 80       	push   $0x80107485
+801013bc:	e8 cf ef ff ff       	call   80100390 <panic>
+801013c1:	eb 0d                	jmp    801013d0 <readsb>
+801013c3:	90                   	nop
+801013c4:	90                   	nop
+801013c5:	90                   	nop
+801013c6:	90                   	nop
+801013c7:	90                   	nop
+801013c8:	90                   	nop
+801013c9:	90                   	nop
+801013ca:	90                   	nop
+801013cb:	90                   	nop
+801013cc:	90                   	nop
+801013cd:	90                   	nop
+801013ce:	90                   	nop
+801013cf:	90                   	nop
+
+801013d0 <readsb>:
+{
+801013d0:	55                   	push   %ebp
+801013d1:	89 e5                	mov    %esp,%ebp
+801013d3:	56                   	push   %esi
+801013d4:	53                   	push   %ebx
+801013d5:	8b 75 0c             	mov    0xc(%ebp),%esi
+  bp = bread(dev, 1);
+801013d8:	83 ec 08             	sub    $0x8,%esp
+801013db:	6a 01                	push   $0x1
+801013dd:	ff 75 08             	pushl  0x8(%ebp)
+801013e0:	e8 eb ec ff ff       	call   801000d0 <bread>
+801013e5:	89 c3                	mov    %eax,%ebx
+  memmove(sb, bp->data, sizeof(*sb));
+801013e7:	8d 40 5c             	lea    0x5c(%eax),%eax
+801013ea:	83 c4 0c             	add    $0xc,%esp
+801013ed:	6a 1c                	push   $0x1c
+801013ef:	50                   	push   %eax
+801013f0:	56                   	push   %esi
+801013f1:	e8 7a 34 00 00       	call   80104870 <memmove>
+  brelse(bp);
+801013f6:	89 5d 08             	mov    %ebx,0x8(%ebp)
+801013f9:	83 c4 10             	add    $0x10,%esp
+}
+801013fc:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801013ff:	5b                   	pop    %ebx
+80101400:	5e                   	pop    %esi
+80101401:	5d                   	pop    %ebp
+  brelse(bp);
+80101402:	e9 d9 ed ff ff       	jmp    801001e0 <brelse>
+80101407:	89 f6                	mov    %esi,%esi
+80101409:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101410 <bfree>:
+{
+80101410:	55                   	push   %ebp
+80101411:	89 e5                	mov    %esp,%ebp
+80101413:	56                   	push   %esi
+80101414:	53                   	push   %ebx
+80101415:	89 d3                	mov    %edx,%ebx
+80101417:	89 c6                	mov    %eax,%esi
+  readsb(dev, &sb);
+80101419:	83 ec 08             	sub    $0x8,%esp
+8010141c:	68 e0 09 11 80       	push   $0x801109e0
+80101421:	50                   	push   %eax
+80101422:	e8 a9 ff ff ff       	call   801013d0 <readsb>
+  bp = bread(dev, BBLOCK(b, sb));
+80101427:	58                   	pop    %eax
+80101428:	5a                   	pop    %edx
+80101429:	89 da                	mov    %ebx,%edx
+8010142b:	c1 ea 0c             	shr    $0xc,%edx
+8010142e:	03 15 f8 09 11 80    	add    0x801109f8,%edx
+80101434:	52                   	push   %edx
+80101435:	56                   	push   %esi
+80101436:	e8 95 ec ff ff       	call   801000d0 <bread>
+  m = 1 << (bi % 8);
+8010143b:	89 d9                	mov    %ebx,%ecx
+  if((bp->data[bi/8] & m) == 0)
+8010143d:	c1 fb 03             	sar    $0x3,%ebx
+  m = 1 << (bi % 8);
+80101440:	ba 01 00 00 00       	mov    $0x1,%edx
+80101445:	83 e1 07             	and    $0x7,%ecx
+  if((bp->data[bi/8] & m) == 0)
+80101448:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
+8010144e:	83 c4 10             	add    $0x10,%esp
+  m = 1 << (bi % 8);
+80101451:	d3 e2                	shl    %cl,%edx
+  if((bp->data[bi/8] & m) == 0)
+80101453:	0f b6 4c 18 5c       	movzbl 0x5c(%eax,%ebx,1),%ecx
+80101458:	85 d1                	test   %edx,%ecx
+8010145a:	74 25                	je     80101481 <bfree+0x71>
+  bp->data[bi/8] &= ~m;
+8010145c:	f7 d2                	not    %edx
+8010145e:	89 c6                	mov    %eax,%esi
+  log_write(bp);
+80101460:	83 ec 0c             	sub    $0xc,%esp
+  bp->data[bi/8] &= ~m;
+80101463:	21 ca                	and    %ecx,%edx
+80101465:	88 54 1e 5c          	mov    %dl,0x5c(%esi,%ebx,1)
+  log_write(bp);
+80101469:	56                   	push   %esi
+8010146a:	e8 11 1c 00 00       	call   80103080 <log_write>
+  brelse(bp);
+8010146f:	89 34 24             	mov    %esi,(%esp)
+80101472:	e8 69 ed ff ff       	call   801001e0 <brelse>
+}
+80101477:	83 c4 10             	add    $0x10,%esp
+8010147a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010147d:	5b                   	pop    %ebx
+8010147e:	5e                   	pop    %esi
+8010147f:	5d                   	pop    %ebp
+80101480:	c3                   	ret    
+    panic("freeing free block");
+80101481:	83 ec 0c             	sub    $0xc,%esp
+80101484:	68 98 74 10 80       	push   $0x80107498
+80101489:	e8 02 ef ff ff       	call   80100390 <panic>
+8010148e:	66 90                	xchg   %ax,%ax
+
+80101490 <iinit>:
+{
+80101490:	55                   	push   %ebp
+80101491:	89 e5                	mov    %esp,%ebp
+80101493:	53                   	push   %ebx
+80101494:	bb 40 0a 11 80       	mov    $0x80110a40,%ebx
+80101499:	83 ec 0c             	sub    $0xc,%esp
+  initlock(&icache.lock, "icache");
+8010149c:	68 ab 74 10 80       	push   $0x801074ab
+801014a1:	68 00 0a 11 80       	push   $0x80110a00
+801014a6:	e8 c5 30 00 00       	call   80104570 <initlock>
+801014ab:	83 c4 10             	add    $0x10,%esp
+801014ae:	66 90                	xchg   %ax,%ax
+    initsleeplock(&icache.inode[i].lock, "inode");
+801014b0:	83 ec 08             	sub    $0x8,%esp
+801014b3:	68 b2 74 10 80       	push   $0x801074b2
+801014b8:	53                   	push   %ebx
+801014b9:	81 c3 90 00 00 00    	add    $0x90,%ebx
+801014bf:	e8 7c 2f 00 00       	call   80104440 <initsleeplock>
+  for(i = 0; i < NINODE; i++) {
+801014c4:	83 c4 10             	add    $0x10,%esp
+801014c7:	81 fb 60 26 11 80    	cmp    $0x80112660,%ebx
+801014cd:	75 e1                	jne    801014b0 <iinit+0x20>
+  readsb(dev, &sb);
+801014cf:	83 ec 08             	sub    $0x8,%esp
+801014d2:	68 e0 09 11 80       	push   $0x801109e0
+801014d7:	ff 75 08             	pushl  0x8(%ebp)
+801014da:	e8 f1 fe ff ff       	call   801013d0 <readsb>
+  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
+801014df:	ff 35 f8 09 11 80    	pushl  0x801109f8
+801014e5:	ff 35 f4 09 11 80    	pushl  0x801109f4
+801014eb:	ff 35 f0 09 11 80    	pushl  0x801109f0
+801014f1:	ff 35 ec 09 11 80    	pushl  0x801109ec
+801014f7:	ff 35 e8 09 11 80    	pushl  0x801109e8
+801014fd:	ff 35 e4 09 11 80    	pushl  0x801109e4
+80101503:	ff 35 e0 09 11 80    	pushl  0x801109e0
+80101509:	68 18 75 10 80       	push   $0x80107518
+8010150e:	e8 4d f1 ff ff       	call   80100660 <cprintf>
+}
+80101513:	83 c4 30             	add    $0x30,%esp
+80101516:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101519:	c9                   	leave  
+8010151a:	c3                   	ret    
+8010151b:	90                   	nop
+8010151c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101520 <ialloc>:
+{
+80101520:	55                   	push   %ebp
+80101521:	89 e5                	mov    %esp,%ebp
+80101523:	57                   	push   %edi
+80101524:	56                   	push   %esi
+80101525:	53                   	push   %ebx
+80101526:	83 ec 1c             	sub    $0x1c,%esp
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101529:	83 3d e8 09 11 80 01 	cmpl   $0x1,0x801109e8
+{
+80101530:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101533:	8b 75 08             	mov    0x8(%ebp),%esi
+80101536:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101539:	0f 86 91 00 00 00    	jbe    801015d0 <ialloc+0xb0>
+8010153f:	bb 01 00 00 00       	mov    $0x1,%ebx
+80101544:	eb 21                	jmp    80101567 <ialloc+0x47>
+80101546:	8d 76 00             	lea    0x0(%esi),%esi
+80101549:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    brelse(bp);
+80101550:	83 ec 0c             	sub    $0xc,%esp
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101553:	83 c3 01             	add    $0x1,%ebx
+    brelse(bp);
+80101556:	57                   	push   %edi
+80101557:	e8 84 ec ff ff       	call   801001e0 <brelse>
+  for(inum = 1; inum < sb.ninodes; inum++){
+8010155c:	83 c4 10             	add    $0x10,%esp
+8010155f:	39 1d e8 09 11 80    	cmp    %ebx,0x801109e8
+80101565:	76 69                	jbe    801015d0 <ialloc+0xb0>
+    bp = bread(dev, IBLOCK(inum, sb));
+80101567:	89 d8                	mov    %ebx,%eax
+80101569:	83 ec 08             	sub    $0x8,%esp
+8010156c:	c1 e8 03             	shr    $0x3,%eax
+8010156f:	03 05 f4 09 11 80    	add    0x801109f4,%eax
+80101575:	50                   	push   %eax
+80101576:	56                   	push   %esi
+80101577:	e8 54 eb ff ff       	call   801000d0 <bread>
+8010157c:	89 c7                	mov    %eax,%edi
+    dip = (struct dinode*)bp->data + inum%IPB;
+8010157e:	89 d8                	mov    %ebx,%eax
+    if(dip->type == 0){  // a free inode
+80101580:	83 c4 10             	add    $0x10,%esp
+    dip = (struct dinode*)bp->data + inum%IPB;
+80101583:	83 e0 07             	and    $0x7,%eax
+80101586:	c1 e0 06             	shl    $0x6,%eax
+80101589:	8d 4c 07 5c          	lea    0x5c(%edi,%eax,1),%ecx
+    if(dip->type == 0){  // a free inode
+8010158d:	66 83 39 00          	cmpw   $0x0,(%ecx)
+80101591:	75 bd                	jne    80101550 <ialloc+0x30>
+      memset(dip, 0, sizeof(*dip));
+80101593:	83 ec 04             	sub    $0x4,%esp
+80101596:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80101599:	6a 40                	push   $0x40
+8010159b:	6a 00                	push   $0x0
+8010159d:	51                   	push   %ecx
+8010159e:	e8 1d 32 00 00       	call   801047c0 <memset>
+      dip->type = type;
+801015a3:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
+801015a7:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+801015aa:	66 89 01             	mov    %ax,(%ecx)
+      log_write(bp);   // mark it allocated on the disk
+801015ad:	89 3c 24             	mov    %edi,(%esp)
+801015b0:	e8 cb 1a 00 00       	call   80103080 <log_write>
+      brelse(bp);
+801015b5:	89 3c 24             	mov    %edi,(%esp)
+801015b8:	e8 23 ec ff ff       	call   801001e0 <brelse>
+      return iget(dev, inum);
+801015bd:	83 c4 10             	add    $0x10,%esp
+}
+801015c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return iget(dev, inum);
+801015c3:	89 da                	mov    %ebx,%edx
+801015c5:	89 f0                	mov    %esi,%eax
+}
+801015c7:	5b                   	pop    %ebx
+801015c8:	5e                   	pop    %esi
+801015c9:	5f                   	pop    %edi
+801015ca:	5d                   	pop    %ebp
+      return iget(dev, inum);
+801015cb:	e9 50 fc ff ff       	jmp    80101220 <iget>
+  panic("ialloc: no inodes");
+801015d0:	83 ec 0c             	sub    $0xc,%esp
+801015d3:	68 b8 74 10 80       	push   $0x801074b8
+801015d8:	e8 b3 ed ff ff       	call   80100390 <panic>
+801015dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801015e0 <iupdate>:
+{
+801015e0:	55                   	push   %ebp
+801015e1:	89 e5                	mov    %esp,%ebp
+801015e3:	56                   	push   %esi
+801015e4:	53                   	push   %ebx
+801015e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801015e8:	83 ec 08             	sub    $0x8,%esp
+801015eb:	8b 43 04             	mov    0x4(%ebx),%eax
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801015ee:	83 c3 5c             	add    $0x5c,%ebx
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801015f1:	c1 e8 03             	shr    $0x3,%eax
+801015f4:	03 05 f4 09 11 80    	add    0x801109f4,%eax
+801015fa:	50                   	push   %eax
+801015fb:	ff 73 a4             	pushl  -0x5c(%ebx)
+801015fe:	e8 cd ea ff ff       	call   801000d0 <bread>
+80101603:	89 c6                	mov    %eax,%esi
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+80101605:	8b 43 a8             	mov    -0x58(%ebx),%eax
+  dip->type = ip->type;
+80101608:	0f b7 53 f4          	movzwl -0xc(%ebx),%edx
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+8010160c:	83 c4 0c             	add    $0xc,%esp
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+8010160f:	83 e0 07             	and    $0x7,%eax
+80101612:	c1 e0 06             	shl    $0x6,%eax
+80101615:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+  dip->type = ip->type;
+80101619:	66 89 10             	mov    %dx,(%eax)
+  dip->major = ip->major;
+8010161c:	0f b7 53 f6          	movzwl -0xa(%ebx),%edx
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+80101620:	83 c0 0c             	add    $0xc,%eax
+  dip->major = ip->major;
+80101623:	66 89 50 f6          	mov    %dx,-0xa(%eax)
+  dip->minor = ip->minor;
+80101627:	0f b7 53 f8          	movzwl -0x8(%ebx),%edx
+8010162b:	66 89 50 f8          	mov    %dx,-0x8(%eax)
+  dip->nlink = ip->nlink;
+8010162f:	0f b7 53 fa          	movzwl -0x6(%ebx),%edx
+80101633:	66 89 50 fa          	mov    %dx,-0x6(%eax)
+  dip->size = ip->size;
+80101637:	8b 53 fc             	mov    -0x4(%ebx),%edx
+8010163a:	89 50 fc             	mov    %edx,-0x4(%eax)
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+8010163d:	6a 34                	push   $0x34
+8010163f:	53                   	push   %ebx
+80101640:	50                   	push   %eax
+80101641:	e8 2a 32 00 00       	call   80104870 <memmove>
+  log_write(bp);
+80101646:	89 34 24             	mov    %esi,(%esp)
+80101649:	e8 32 1a 00 00       	call   80103080 <log_write>
+  brelse(bp);
+8010164e:	89 75 08             	mov    %esi,0x8(%ebp)
+80101651:	83 c4 10             	add    $0x10,%esp
+}
+80101654:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101657:	5b                   	pop    %ebx
+80101658:	5e                   	pop    %esi
+80101659:	5d                   	pop    %ebp
+  brelse(bp);
+8010165a:	e9 81 eb ff ff       	jmp    801001e0 <brelse>
+8010165f:	90                   	nop
+
+80101660 <idup>:
+{
+80101660:	55                   	push   %ebp
+80101661:	89 e5                	mov    %esp,%ebp
+80101663:	53                   	push   %ebx
+80101664:	83 ec 10             	sub    $0x10,%esp
+80101667:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&icache.lock);
+8010166a:	68 00 0a 11 80       	push   $0x80110a00
+8010166f:	e8 3c 30 00 00       	call   801046b0 <acquire>
+  ip->ref++;
+80101674:	83 43 08 01          	addl   $0x1,0x8(%ebx)
+  release(&icache.lock);
+80101678:	c7 04 24 00 0a 11 80 	movl   $0x80110a00,(%esp)
+8010167f:	e8 ec 30 00 00       	call   80104770 <release>
+}
+80101684:	89 d8                	mov    %ebx,%eax
+80101686:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101689:	c9                   	leave  
+8010168a:	c3                   	ret    
+8010168b:	90                   	nop
+8010168c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101690 <ilock>:
+{
+80101690:	55                   	push   %ebp
+80101691:	89 e5                	mov    %esp,%ebp
+80101693:	56                   	push   %esi
+80101694:	53                   	push   %ebx
+80101695:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(ip == 0 || ip->ref < 1)
+80101698:	85 db                	test   %ebx,%ebx
+8010169a:	0f 84 b7 00 00 00    	je     80101757 <ilock+0xc7>
+801016a0:	8b 53 08             	mov    0x8(%ebx),%edx
+801016a3:	85 d2                	test   %edx,%edx
+801016a5:	0f 8e ac 00 00 00    	jle    80101757 <ilock+0xc7>
+  acquiresleep(&ip->lock);
+801016ab:	8d 43 0c             	lea    0xc(%ebx),%eax
+801016ae:	83 ec 0c             	sub    $0xc,%esp
+801016b1:	50                   	push   %eax
+801016b2:	e8 c9 2d 00 00       	call   80104480 <acquiresleep>
+  if(ip->valid == 0){
+801016b7:	8b 43 4c             	mov    0x4c(%ebx),%eax
+801016ba:	83 c4 10             	add    $0x10,%esp
+801016bd:	85 c0                	test   %eax,%eax
+801016bf:	74 0f                	je     801016d0 <ilock+0x40>
+}
+801016c1:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801016c4:	5b                   	pop    %ebx
+801016c5:	5e                   	pop    %esi
+801016c6:	5d                   	pop    %ebp
+801016c7:	c3                   	ret    
+801016c8:	90                   	nop
+801016c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801016d0:	8b 43 04             	mov    0x4(%ebx),%eax
+801016d3:	83 ec 08             	sub    $0x8,%esp
+801016d6:	c1 e8 03             	shr    $0x3,%eax
+801016d9:	03 05 f4 09 11 80    	add    0x801109f4,%eax
+801016df:	50                   	push   %eax
+801016e0:	ff 33                	pushl  (%ebx)
+801016e2:	e8 e9 e9 ff ff       	call   801000d0 <bread>
+801016e7:	89 c6                	mov    %eax,%esi
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+801016e9:	8b 43 04             	mov    0x4(%ebx),%eax
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801016ec:	83 c4 0c             	add    $0xc,%esp
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+801016ef:	83 e0 07             	and    $0x7,%eax
+801016f2:	c1 e0 06             	shl    $0x6,%eax
+801016f5:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+    ip->type = dip->type;
+801016f9:	0f b7 10             	movzwl (%eax),%edx
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801016fc:	83 c0 0c             	add    $0xc,%eax
+    ip->type = dip->type;
+801016ff:	66 89 53 50          	mov    %dx,0x50(%ebx)
+    ip->major = dip->major;
+80101703:	0f b7 50 f6          	movzwl -0xa(%eax),%edx
+80101707:	66 89 53 52          	mov    %dx,0x52(%ebx)
+    ip->minor = dip->minor;
+8010170b:	0f b7 50 f8          	movzwl -0x8(%eax),%edx
+8010170f:	66 89 53 54          	mov    %dx,0x54(%ebx)
+    ip->nlink = dip->nlink;
+80101713:	0f b7 50 fa          	movzwl -0x6(%eax),%edx
+80101717:	66 89 53 56          	mov    %dx,0x56(%ebx)
+    ip->size = dip->size;
+8010171b:	8b 50 fc             	mov    -0x4(%eax),%edx
+8010171e:	89 53 58             	mov    %edx,0x58(%ebx)
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+80101721:	6a 34                	push   $0x34
+80101723:	50                   	push   %eax
+80101724:	8d 43 5c             	lea    0x5c(%ebx),%eax
+80101727:	50                   	push   %eax
+80101728:	e8 43 31 00 00       	call   80104870 <memmove>
+    brelse(bp);
+8010172d:	89 34 24             	mov    %esi,(%esp)
+80101730:	e8 ab ea ff ff       	call   801001e0 <brelse>
+    if(ip->type == 0)
+80101735:	83 c4 10             	add    $0x10,%esp
+80101738:	66 83 7b 50 00       	cmpw   $0x0,0x50(%ebx)
+    ip->valid = 1;
+8010173d:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+    if(ip->type == 0)
+80101744:	0f 85 77 ff ff ff    	jne    801016c1 <ilock+0x31>
+      panic("ilock: no type");
+8010174a:	83 ec 0c             	sub    $0xc,%esp
+8010174d:	68 d0 74 10 80       	push   $0x801074d0
+80101752:	e8 39 ec ff ff       	call   80100390 <panic>
+    panic("ilock");
+80101757:	83 ec 0c             	sub    $0xc,%esp
+8010175a:	68 ca 74 10 80       	push   $0x801074ca
+8010175f:	e8 2c ec ff ff       	call   80100390 <panic>
+80101764:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010176a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80101770 <iunlock>:
+{
+80101770:	55                   	push   %ebp
+80101771:	89 e5                	mov    %esp,%ebp
+80101773:	56                   	push   %esi
+80101774:	53                   	push   %ebx
+80101775:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+80101778:	85 db                	test   %ebx,%ebx
+8010177a:	74 28                	je     801017a4 <iunlock+0x34>
+8010177c:	8d 73 0c             	lea    0xc(%ebx),%esi
+8010177f:	83 ec 0c             	sub    $0xc,%esp
+80101782:	56                   	push   %esi
+80101783:	e8 98 2d 00 00       	call   80104520 <holdingsleep>
+80101788:	83 c4 10             	add    $0x10,%esp
+8010178b:	85 c0                	test   %eax,%eax
+8010178d:	74 15                	je     801017a4 <iunlock+0x34>
+8010178f:	8b 43 08             	mov    0x8(%ebx),%eax
+80101792:	85 c0                	test   %eax,%eax
+80101794:	7e 0e                	jle    801017a4 <iunlock+0x34>
+  releasesleep(&ip->lock);
+80101796:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+80101799:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010179c:	5b                   	pop    %ebx
+8010179d:	5e                   	pop    %esi
+8010179e:	5d                   	pop    %ebp
+  releasesleep(&ip->lock);
+8010179f:	e9 3c 2d 00 00       	jmp    801044e0 <releasesleep>
+    panic("iunlock");
+801017a4:	83 ec 0c             	sub    $0xc,%esp
+801017a7:	68 df 74 10 80       	push   $0x801074df
+801017ac:	e8 df eb ff ff       	call   80100390 <panic>
+801017b1:	eb 0d                	jmp    801017c0 <iput>
+801017b3:	90                   	nop
+801017b4:	90                   	nop
+801017b5:	90                   	nop
+801017b6:	90                   	nop
+801017b7:	90                   	nop
+801017b8:	90                   	nop
+801017b9:	90                   	nop
+801017ba:	90                   	nop
+801017bb:	90                   	nop
+801017bc:	90                   	nop
+801017bd:	90                   	nop
+801017be:	90                   	nop
+801017bf:	90                   	nop
+
+801017c0 <iput>:
+{
+801017c0:	55                   	push   %ebp
+801017c1:	89 e5                	mov    %esp,%ebp
+801017c3:	57                   	push   %edi
+801017c4:	56                   	push   %esi
+801017c5:	53                   	push   %ebx
+801017c6:	83 ec 28             	sub    $0x28,%esp
+801017c9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquiresleep(&ip->lock);
+801017cc:	8d 7b 0c             	lea    0xc(%ebx),%edi
+801017cf:	57                   	push   %edi
+801017d0:	e8 ab 2c 00 00       	call   80104480 <acquiresleep>
+  if(ip->valid && ip->nlink == 0){
+801017d5:	8b 53 4c             	mov    0x4c(%ebx),%edx
+801017d8:	83 c4 10             	add    $0x10,%esp
+801017db:	85 d2                	test   %edx,%edx
+801017dd:	74 07                	je     801017e6 <iput+0x26>
+801017df:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+801017e4:	74 32                	je     80101818 <iput+0x58>
+  releasesleep(&ip->lock);
+801017e6:	83 ec 0c             	sub    $0xc,%esp
+801017e9:	57                   	push   %edi
+801017ea:	e8 f1 2c 00 00       	call   801044e0 <releasesleep>
+  acquire(&icache.lock);
+801017ef:	c7 04 24 00 0a 11 80 	movl   $0x80110a00,(%esp)
+801017f6:	e8 b5 2e 00 00       	call   801046b0 <acquire>
+  ip->ref--;
+801017fb:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
+  release(&icache.lock);
+801017ff:	83 c4 10             	add    $0x10,%esp
+80101802:	c7 45 08 00 0a 11 80 	movl   $0x80110a00,0x8(%ebp)
+}
+80101809:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010180c:	5b                   	pop    %ebx
+8010180d:	5e                   	pop    %esi
+8010180e:	5f                   	pop    %edi
+8010180f:	5d                   	pop    %ebp
+  release(&icache.lock);
+80101810:	e9 5b 2f 00 00       	jmp    80104770 <release>
+80101815:	8d 76 00             	lea    0x0(%esi),%esi
+    acquire(&icache.lock);
+80101818:	83 ec 0c             	sub    $0xc,%esp
+8010181b:	68 00 0a 11 80       	push   $0x80110a00
+80101820:	e8 8b 2e 00 00       	call   801046b0 <acquire>
+    int r = ip->ref;
+80101825:	8b 73 08             	mov    0x8(%ebx),%esi
+    release(&icache.lock);
+80101828:	c7 04 24 00 0a 11 80 	movl   $0x80110a00,(%esp)
+8010182f:	e8 3c 2f 00 00       	call   80104770 <release>
+    if(r == 1){
+80101834:	83 c4 10             	add    $0x10,%esp
+80101837:	83 fe 01             	cmp    $0x1,%esi
+8010183a:	75 aa                	jne    801017e6 <iput+0x26>
+8010183c:	8d 8b 8c 00 00 00    	lea    0x8c(%ebx),%ecx
+80101842:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+80101845:	8d 73 5c             	lea    0x5c(%ebx),%esi
+80101848:	89 cf                	mov    %ecx,%edi
+8010184a:	eb 0b                	jmp    80101857 <iput+0x97>
+8010184c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101850:	83 c6 04             	add    $0x4,%esi
+{
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+80101853:	39 fe                	cmp    %edi,%esi
+80101855:	74 19                	je     80101870 <iput+0xb0>
+    if(ip->addrs[i]){
+80101857:	8b 16                	mov    (%esi),%edx
+80101859:	85 d2                	test   %edx,%edx
+8010185b:	74 f3                	je     80101850 <iput+0x90>
+      bfree(ip->dev, ip->addrs[i]);
+8010185d:	8b 03                	mov    (%ebx),%eax
+8010185f:	e8 ac fb ff ff       	call   80101410 <bfree>
+      ip->addrs[i] = 0;
+80101864:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+8010186a:	eb e4                	jmp    80101850 <iput+0x90>
+8010186c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+
+  if(ip->addrs[NDIRECT]){
+80101870:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
+80101876:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80101879:	85 c0                	test   %eax,%eax
+8010187b:	75 33                	jne    801018b0 <iput+0xf0>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
+  ip->size = 0;
+  iupdate(ip);
+8010187d:	83 ec 0c             	sub    $0xc,%esp
+  ip->size = 0;
+80101880:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+  iupdate(ip);
+80101887:	53                   	push   %ebx
+80101888:	e8 53 fd ff ff       	call   801015e0 <iupdate>
+      ip->type = 0;
+8010188d:	31 c0                	xor    %eax,%eax
+8010188f:	66 89 43 50          	mov    %ax,0x50(%ebx)
+      iupdate(ip);
+80101893:	89 1c 24             	mov    %ebx,(%esp)
+80101896:	e8 45 fd ff ff       	call   801015e0 <iupdate>
+      ip->valid = 0;
+8010189b:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
+801018a2:	83 c4 10             	add    $0x10,%esp
+801018a5:	e9 3c ff ff ff       	jmp    801017e6 <iput+0x26>
+801018aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+801018b0:	83 ec 08             	sub    $0x8,%esp
+801018b3:	50                   	push   %eax
+801018b4:	ff 33                	pushl  (%ebx)
+801018b6:	e8 15 e8 ff ff       	call   801000d0 <bread>
+801018bb:	8d 88 5c 02 00 00    	lea    0x25c(%eax),%ecx
+801018c1:	89 7d e0             	mov    %edi,-0x20(%ebp)
+801018c4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    a = (uint*)bp->data;
+801018c7:	8d 70 5c             	lea    0x5c(%eax),%esi
+801018ca:	83 c4 10             	add    $0x10,%esp
+801018cd:	89 cf                	mov    %ecx,%edi
+801018cf:	eb 0e                	jmp    801018df <iput+0x11f>
+801018d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801018d8:	83 c6 04             	add    $0x4,%esi
+    for(j = 0; j < NINDIRECT; j++){
+801018db:	39 fe                	cmp    %edi,%esi
+801018dd:	74 0f                	je     801018ee <iput+0x12e>
+      if(a[j])
+801018df:	8b 16                	mov    (%esi),%edx
+801018e1:	85 d2                	test   %edx,%edx
+801018e3:	74 f3                	je     801018d8 <iput+0x118>
+        bfree(ip->dev, a[j]);
+801018e5:	8b 03                	mov    (%ebx),%eax
+801018e7:	e8 24 fb ff ff       	call   80101410 <bfree>
+801018ec:	eb ea                	jmp    801018d8 <iput+0x118>
+    brelse(bp);
+801018ee:	83 ec 0c             	sub    $0xc,%esp
+801018f1:	ff 75 e4             	pushl  -0x1c(%ebp)
+801018f4:	8b 7d e0             	mov    -0x20(%ebp),%edi
+801018f7:	e8 e4 e8 ff ff       	call   801001e0 <brelse>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+801018fc:	8b 93 8c 00 00 00    	mov    0x8c(%ebx),%edx
+80101902:	8b 03                	mov    (%ebx),%eax
+80101904:	e8 07 fb ff ff       	call   80101410 <bfree>
+    ip->addrs[NDIRECT] = 0;
+80101909:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%ebx)
+80101910:	00 00 00 
+80101913:	83 c4 10             	add    $0x10,%esp
+80101916:	e9 62 ff ff ff       	jmp    8010187d <iput+0xbd>
+8010191b:	90                   	nop
+8010191c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101920 <iunlockput>:
+{
+80101920:	55                   	push   %ebp
+80101921:	89 e5                	mov    %esp,%ebp
+80101923:	53                   	push   %ebx
+80101924:	83 ec 10             	sub    $0x10,%esp
+80101927:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  iunlock(ip);
+8010192a:	53                   	push   %ebx
+8010192b:	e8 40 fe ff ff       	call   80101770 <iunlock>
+  iput(ip);
+80101930:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80101933:	83 c4 10             	add    $0x10,%esp
+}
+80101936:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101939:	c9                   	leave  
+  iput(ip);
+8010193a:	e9 81 fe ff ff       	jmp    801017c0 <iput>
+8010193f:	90                   	nop
+
+80101940 <stati>:
+
+// Copy stat information from inode.
+// Caller must hold ip->lock.
+void
+stati(struct inode *ip, struct stat *st)
+{
+80101940:	55                   	push   %ebp
+80101941:	89 e5                	mov    %esp,%ebp
+80101943:	8b 55 08             	mov    0x8(%ebp),%edx
+80101946:	8b 45 0c             	mov    0xc(%ebp),%eax
+  st->dev = ip->dev;
+80101949:	8b 0a                	mov    (%edx),%ecx
+8010194b:	89 48 04             	mov    %ecx,0x4(%eax)
+  st->ino = ip->inum;
+8010194e:	8b 4a 04             	mov    0x4(%edx),%ecx
+80101951:	89 48 08             	mov    %ecx,0x8(%eax)
+  st->type = ip->type;
+80101954:	0f b7 4a 50          	movzwl 0x50(%edx),%ecx
+80101958:	66 89 08             	mov    %cx,(%eax)
+  st->nlink = ip->nlink;
+8010195b:	0f b7 4a 56          	movzwl 0x56(%edx),%ecx
+8010195f:	66 89 48 0c          	mov    %cx,0xc(%eax)
+  st->size = ip->size;
+80101963:	8b 52 58             	mov    0x58(%edx),%edx
+80101966:	89 50 10             	mov    %edx,0x10(%eax)
+}
+80101969:	5d                   	pop    %ebp
+8010196a:	c3                   	ret    
+8010196b:	90                   	nop
+8010196c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101970 <readi>:
+//PAGEBREAK!
+// Read data from inode.
+// Caller must hold ip->lock.
+int
+readi(struct inode *ip, char *dst, uint off, uint n)
+{
+80101970:	55                   	push   %ebp
+80101971:	89 e5                	mov    %esp,%ebp
+80101973:	57                   	push   %edi
+80101974:	56                   	push   %esi
+80101975:	53                   	push   %ebx
+80101976:	83 ec 1c             	sub    $0x1c,%esp
+80101979:	8b 45 08             	mov    0x8(%ebp),%eax
+8010197c:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010197f:	8b 7d 14             	mov    0x14(%ebp),%edi
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80101982:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+{
+80101987:	89 75 e0             	mov    %esi,-0x20(%ebp)
+8010198a:	89 45 d8             	mov    %eax,-0x28(%ebp)
+8010198d:	8b 75 10             	mov    0x10(%ebp),%esi
+80101990:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+  if(ip->type == T_DEV){
+80101993:	0f 84 a7 00 00 00    	je     80101a40 <readi+0xd0>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+      return -1;
+    return devsw[ip->major].read(ip, dst, n);
+  }
+
+  if(off > ip->size || off + n < off)
+80101999:	8b 45 d8             	mov    -0x28(%ebp),%eax
+8010199c:	8b 40 58             	mov    0x58(%eax),%eax
+8010199f:	39 c6                	cmp    %eax,%esi
+801019a1:	0f 87 ba 00 00 00    	ja     80101a61 <readi+0xf1>
+801019a7:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+801019aa:	89 f9                	mov    %edi,%ecx
+801019ac:	01 f1                	add    %esi,%ecx
+801019ae:	0f 82 ad 00 00 00    	jb     80101a61 <readi+0xf1>
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+801019b4:	89 c2                	mov    %eax,%edx
+801019b6:	29 f2                	sub    %esi,%edx
+801019b8:	39 c8                	cmp    %ecx,%eax
+801019ba:	0f 43 d7             	cmovae %edi,%edx
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+801019bd:	31 ff                	xor    %edi,%edi
+801019bf:	85 d2                	test   %edx,%edx
+    n = ip->size - off;
+801019c1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+801019c4:	74 6c                	je     80101a32 <readi+0xc2>
+801019c6:	8d 76 00             	lea    0x0(%esi),%esi
+801019c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+801019d0:	8b 5d d8             	mov    -0x28(%ebp),%ebx
+801019d3:	89 f2                	mov    %esi,%edx
+801019d5:	c1 ea 09             	shr    $0x9,%edx
+801019d8:	89 d8                	mov    %ebx,%eax
+801019da:	e8 11 f9 ff ff       	call   801012f0 <bmap>
+801019df:	83 ec 08             	sub    $0x8,%esp
+801019e2:	50                   	push   %eax
+801019e3:	ff 33                	pushl  (%ebx)
+801019e5:	e8 e6 e6 ff ff       	call   801000d0 <bread>
+    m = min(n - tot, BSIZE - off%BSIZE);
+801019ea:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+801019ed:	89 c2                	mov    %eax,%edx
+    m = min(n - tot, BSIZE - off%BSIZE);
+801019ef:	89 f0                	mov    %esi,%eax
+801019f1:	25 ff 01 00 00       	and    $0x1ff,%eax
+801019f6:	b9 00 02 00 00       	mov    $0x200,%ecx
+801019fb:	83 c4 0c             	add    $0xc,%esp
+801019fe:	29 c1                	sub    %eax,%ecx
+    memmove(dst, bp->data + off%BSIZE, m);
+80101a00:	8d 44 02 5c          	lea    0x5c(%edx,%eax,1),%eax
+80101a04:	89 55 dc             	mov    %edx,-0x24(%ebp)
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101a07:	29 fb                	sub    %edi,%ebx
+80101a09:	39 d9                	cmp    %ebx,%ecx
+80101a0b:	0f 46 d9             	cmovbe %ecx,%ebx
+    memmove(dst, bp->data + off%BSIZE, m);
+80101a0e:	53                   	push   %ebx
+80101a0f:	50                   	push   %eax
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80101a10:	01 df                	add    %ebx,%edi
+    memmove(dst, bp->data + off%BSIZE, m);
+80101a12:	ff 75 e0             	pushl  -0x20(%ebp)
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80101a15:	01 de                	add    %ebx,%esi
+    memmove(dst, bp->data + off%BSIZE, m);
+80101a17:	e8 54 2e 00 00       	call   80104870 <memmove>
+    brelse(bp);
+80101a1c:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80101a1f:	89 14 24             	mov    %edx,(%esp)
+80101a22:	e8 b9 e7 ff ff       	call   801001e0 <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80101a27:	01 5d e0             	add    %ebx,-0x20(%ebp)
+80101a2a:	83 c4 10             	add    $0x10,%esp
+80101a2d:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80101a30:	77 9e                	ja     801019d0 <readi+0x60>
+  }
+  return n;
+80101a32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+}
+80101a35:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101a38:	5b                   	pop    %ebx
+80101a39:	5e                   	pop    %esi
+80101a3a:	5f                   	pop    %edi
+80101a3b:	5d                   	pop    %ebp
+80101a3c:	c3                   	ret    
+80101a3d:	8d 76 00             	lea    0x0(%esi),%esi
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+80101a40:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80101a44:	66 83 f8 09          	cmp    $0x9,%ax
+80101a48:	77 17                	ja     80101a61 <readi+0xf1>
+80101a4a:	8b 04 c5 80 09 11 80 	mov    -0x7feef680(,%eax,8),%eax
+80101a51:	85 c0                	test   %eax,%eax
+80101a53:	74 0c                	je     80101a61 <readi+0xf1>
+    return devsw[ip->major].read(ip, dst, n);
+80101a55:	89 7d 10             	mov    %edi,0x10(%ebp)
+}
+80101a58:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101a5b:	5b                   	pop    %ebx
+80101a5c:	5e                   	pop    %esi
+80101a5d:	5f                   	pop    %edi
+80101a5e:	5d                   	pop    %ebp
+    return devsw[ip->major].read(ip, dst, n);
+80101a5f:	ff e0                	jmp    *%eax
+      return -1;
+80101a61:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101a66:	eb cd                	jmp    80101a35 <readi+0xc5>
+80101a68:	90                   	nop
+80101a69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80101a70 <writei>:
+// PAGEBREAK!
+// Write data to inode.
+// Caller must hold ip->lock.
+int
+writei(struct inode *ip, char *src, uint off, uint n)
+{
+80101a70:	55                   	push   %ebp
+80101a71:	89 e5                	mov    %esp,%ebp
+80101a73:	57                   	push   %edi
+80101a74:	56                   	push   %esi
+80101a75:	53                   	push   %ebx
+80101a76:	83 ec 1c             	sub    $0x1c,%esp
+80101a79:	8b 45 08             	mov    0x8(%ebp),%eax
+80101a7c:	8b 75 0c             	mov    0xc(%ebp),%esi
+80101a7f:	8b 7d 14             	mov    0x14(%ebp),%edi
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80101a82:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+{
+80101a87:	89 75 dc             	mov    %esi,-0x24(%ebp)
+80101a8a:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80101a8d:	8b 75 10             	mov    0x10(%ebp),%esi
+80101a90:	89 7d e0             	mov    %edi,-0x20(%ebp)
+  if(ip->type == T_DEV){
+80101a93:	0f 84 b7 00 00 00    	je     80101b50 <writei+0xe0>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+      return -1;
+    return devsw[ip->major].write(ip, src, n);
+  }
+
+  if(off > ip->size || off + n < off)
+80101a99:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101a9c:	39 70 58             	cmp    %esi,0x58(%eax)
+80101a9f:	0f 82 eb 00 00 00    	jb     80101b90 <writei+0x120>
+80101aa5:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80101aa8:	31 d2                	xor    %edx,%edx
+80101aaa:	89 f8                	mov    %edi,%eax
+80101aac:	01 f0                	add    %esi,%eax
+80101aae:	0f 92 c2             	setb   %dl
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+80101ab1:	3d 00 18 01 00       	cmp    $0x11800,%eax
+80101ab6:	0f 87 d4 00 00 00    	ja     80101b90 <writei+0x120>
+80101abc:	85 d2                	test   %edx,%edx
+80101abe:	0f 85 cc 00 00 00    	jne    80101b90 <writei+0x120>
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80101ac4:	85 ff                	test   %edi,%edi
+80101ac6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80101acd:	74 72                	je     80101b41 <writei+0xd1>
+80101acf:	90                   	nop
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80101ad0:	8b 7d d8             	mov    -0x28(%ebp),%edi
+80101ad3:	89 f2                	mov    %esi,%edx
+80101ad5:	c1 ea 09             	shr    $0x9,%edx
+80101ad8:	89 f8                	mov    %edi,%eax
+80101ada:	e8 11 f8 ff ff       	call   801012f0 <bmap>
+80101adf:	83 ec 08             	sub    $0x8,%esp
+80101ae2:	50                   	push   %eax
+80101ae3:	ff 37                	pushl  (%edi)
+80101ae5:	e8 e6 e5 ff ff       	call   801000d0 <bread>
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101aea:	8b 5d e0             	mov    -0x20(%ebp),%ebx
+80101aed:	2b 5d e4             	sub    -0x1c(%ebp),%ebx
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80101af0:	89 c7                	mov    %eax,%edi
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101af2:	89 f0                	mov    %esi,%eax
+80101af4:	b9 00 02 00 00       	mov    $0x200,%ecx
+80101af9:	83 c4 0c             	add    $0xc,%esp
+80101afc:	25 ff 01 00 00       	and    $0x1ff,%eax
+80101b01:	29 c1                	sub    %eax,%ecx
+    memmove(bp->data + off%BSIZE, src, m);
+80101b03:	8d 44 07 5c          	lea    0x5c(%edi,%eax,1),%eax
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101b07:	39 d9                	cmp    %ebx,%ecx
+80101b09:	0f 46 d9             	cmovbe %ecx,%ebx
+    memmove(bp->data + off%BSIZE, src, m);
+80101b0c:	53                   	push   %ebx
+80101b0d:	ff 75 dc             	pushl  -0x24(%ebp)
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80101b10:	01 de                	add    %ebx,%esi
+    memmove(bp->data + off%BSIZE, src, m);
+80101b12:	50                   	push   %eax
+80101b13:	e8 58 2d 00 00       	call   80104870 <memmove>
+    log_write(bp);
+80101b18:	89 3c 24             	mov    %edi,(%esp)
+80101b1b:	e8 60 15 00 00       	call   80103080 <log_write>
+    brelse(bp);
+80101b20:	89 3c 24             	mov    %edi,(%esp)
+80101b23:	e8 b8 e6 ff ff       	call   801001e0 <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80101b28:	01 5d e4             	add    %ebx,-0x1c(%ebp)
+80101b2b:	01 5d dc             	add    %ebx,-0x24(%ebp)
+80101b2e:	83 c4 10             	add    $0x10,%esp
+80101b31:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101b34:	39 45 e0             	cmp    %eax,-0x20(%ebp)
+80101b37:	77 97                	ja     80101ad0 <writei+0x60>
+  }
+
+  if(n > 0 && off > ip->size){
+80101b39:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101b3c:	3b 70 58             	cmp    0x58(%eax),%esi
+80101b3f:	77 37                	ja     80101b78 <writei+0x108>
+    ip->size = off;
+    iupdate(ip);
+  }
+  return n;
+80101b41:	8b 45 e0             	mov    -0x20(%ebp),%eax
+}
+80101b44:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b47:	5b                   	pop    %ebx
+80101b48:	5e                   	pop    %esi
+80101b49:	5f                   	pop    %edi
+80101b4a:	5d                   	pop    %ebp
+80101b4b:	c3                   	ret    
+80101b4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+80101b50:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80101b54:	66 83 f8 09          	cmp    $0x9,%ax
+80101b58:	77 36                	ja     80101b90 <writei+0x120>
+80101b5a:	8b 04 c5 84 09 11 80 	mov    -0x7feef67c(,%eax,8),%eax
+80101b61:	85 c0                	test   %eax,%eax
+80101b63:	74 2b                	je     80101b90 <writei+0x120>
+    return devsw[ip->major].write(ip, src, n);
+80101b65:	89 7d 10             	mov    %edi,0x10(%ebp)
+}
+80101b68:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b6b:	5b                   	pop    %ebx
+80101b6c:	5e                   	pop    %esi
+80101b6d:	5f                   	pop    %edi
+80101b6e:	5d                   	pop    %ebp
+    return devsw[ip->major].write(ip, src, n);
+80101b6f:	ff e0                	jmp    *%eax
+80101b71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    ip->size = off;
+80101b78:	8b 45 d8             	mov    -0x28(%ebp),%eax
+    iupdate(ip);
+80101b7b:	83 ec 0c             	sub    $0xc,%esp
+    ip->size = off;
+80101b7e:	89 70 58             	mov    %esi,0x58(%eax)
+    iupdate(ip);
+80101b81:	50                   	push   %eax
+80101b82:	e8 59 fa ff ff       	call   801015e0 <iupdate>
+80101b87:	83 c4 10             	add    $0x10,%esp
+80101b8a:	eb b5                	jmp    80101b41 <writei+0xd1>
+80101b8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      return -1;
+80101b90:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101b95:	eb ad                	jmp    80101b44 <writei+0xd4>
+80101b97:	89 f6                	mov    %esi,%esi
+80101b99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101ba0 <namecmp>:
+//PAGEBREAK!
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+80101ba0:	55                   	push   %ebp
+80101ba1:	89 e5                	mov    %esp,%ebp
+80101ba3:	83 ec 0c             	sub    $0xc,%esp
+  return strncmp(s, t, DIRSIZ);
+80101ba6:	6a 0e                	push   $0xe
+80101ba8:	ff 75 0c             	pushl  0xc(%ebp)
+80101bab:	ff 75 08             	pushl  0x8(%ebp)
+80101bae:	e8 2d 2d 00 00       	call   801048e0 <strncmp>
+}
+80101bb3:	c9                   	leave  
+80101bb4:	c3                   	ret    
+80101bb5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101bb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101bc0 <dirlookup>:
+
+// Look for a directory entry in a directory.
+// If found, set *poff to byte offset of entry.
+struct inode*
+dirlookup(struct inode *dp, char *name, uint *poff)
+{
+80101bc0:	55                   	push   %ebp
+80101bc1:	89 e5                	mov    %esp,%ebp
+80101bc3:	57                   	push   %edi
+80101bc4:	56                   	push   %esi
+80101bc5:	53                   	push   %ebx
+80101bc6:	83 ec 1c             	sub    $0x1c,%esp
+80101bc9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+80101bcc:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80101bd1:	0f 85 85 00 00 00    	jne    80101c5c <dirlookup+0x9c>
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80101bd7:	8b 53 58             	mov    0x58(%ebx),%edx
+80101bda:	31 ff                	xor    %edi,%edi
+80101bdc:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101bdf:	85 d2                	test   %edx,%edx
+80101be1:	74 3e                	je     80101c21 <dirlookup+0x61>
+80101be3:	90                   	nop
+80101be4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101be8:	6a 10                	push   $0x10
+80101bea:	57                   	push   %edi
+80101beb:	56                   	push   %esi
+80101bec:	53                   	push   %ebx
+80101bed:	e8 7e fd ff ff       	call   80101970 <readi>
+80101bf2:	83 c4 10             	add    $0x10,%esp
+80101bf5:	83 f8 10             	cmp    $0x10,%eax
+80101bf8:	75 55                	jne    80101c4f <dirlookup+0x8f>
+      panic("dirlookup read");
+    if(de.inum == 0)
+80101bfa:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80101bff:	74 18                	je     80101c19 <dirlookup+0x59>
+  return strncmp(s, t, DIRSIZ);
+80101c01:	8d 45 da             	lea    -0x26(%ebp),%eax
+80101c04:	83 ec 04             	sub    $0x4,%esp
+80101c07:	6a 0e                	push   $0xe
+80101c09:	50                   	push   %eax
+80101c0a:	ff 75 0c             	pushl  0xc(%ebp)
+80101c0d:	e8 ce 2c 00 00       	call   801048e0 <strncmp>
+      continue;
+    if(namecmp(name, de.name) == 0){
+80101c12:	83 c4 10             	add    $0x10,%esp
+80101c15:	85 c0                	test   %eax,%eax
+80101c17:	74 17                	je     80101c30 <dirlookup+0x70>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80101c19:	83 c7 10             	add    $0x10,%edi
+80101c1c:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80101c1f:	72 c7                	jb     80101be8 <dirlookup+0x28>
+      return iget(dp->dev, inum);
+    }
+  }
+
+  return 0;
+}
+80101c21:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80101c24:	31 c0                	xor    %eax,%eax
+}
+80101c26:	5b                   	pop    %ebx
+80101c27:	5e                   	pop    %esi
+80101c28:	5f                   	pop    %edi
+80101c29:	5d                   	pop    %ebp
+80101c2a:	c3                   	ret    
+80101c2b:	90                   	nop
+80101c2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      if(poff)
+80101c30:	8b 45 10             	mov    0x10(%ebp),%eax
+80101c33:	85 c0                	test   %eax,%eax
+80101c35:	74 05                	je     80101c3c <dirlookup+0x7c>
+        *poff = off;
+80101c37:	8b 45 10             	mov    0x10(%ebp),%eax
+80101c3a:	89 38                	mov    %edi,(%eax)
+      inum = de.inum;
+80101c3c:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
+      return iget(dp->dev, inum);
+80101c40:	8b 03                	mov    (%ebx),%eax
+80101c42:	e8 d9 f5 ff ff       	call   80101220 <iget>
+}
+80101c47:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101c4a:	5b                   	pop    %ebx
+80101c4b:	5e                   	pop    %esi
+80101c4c:	5f                   	pop    %edi
+80101c4d:	5d                   	pop    %ebp
+80101c4e:	c3                   	ret    
+      panic("dirlookup read");
+80101c4f:	83 ec 0c             	sub    $0xc,%esp
+80101c52:	68 f9 74 10 80       	push   $0x801074f9
+80101c57:	e8 34 e7 ff ff       	call   80100390 <panic>
+    panic("dirlookup not DIR");
+80101c5c:	83 ec 0c             	sub    $0xc,%esp
+80101c5f:	68 e7 74 10 80       	push   $0x801074e7
+80101c64:	e8 27 e7 ff ff       	call   80100390 <panic>
+80101c69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80101c70 <namex>:
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+80101c70:	55                   	push   %ebp
+80101c71:	89 e5                	mov    %esp,%ebp
+80101c73:	57                   	push   %edi
+80101c74:	56                   	push   %esi
+80101c75:	53                   	push   %ebx
+80101c76:	89 cf                	mov    %ecx,%edi
+80101c78:	89 c3                	mov    %eax,%ebx
+80101c7a:	83 ec 1c             	sub    $0x1c,%esp
+  struct inode *ip, *next;
+
+  if(*path == '/')
+80101c7d:	80 38 2f             	cmpb   $0x2f,(%eax)
+{
+80101c80:	89 55 e0             	mov    %edx,-0x20(%ebp)
+  if(*path == '/')
+80101c83:	0f 84 67 01 00 00    	je     80101df0 <namex+0x180>
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(myproc()->cwd);
+80101c89:	e8 62 1e 00 00       	call   80103af0 <myproc>
+  acquire(&icache.lock);
+80101c8e:	83 ec 0c             	sub    $0xc,%esp
+    ip = idup(myproc()->cwd);
+80101c91:	8b 70 68             	mov    0x68(%eax),%esi
+  acquire(&icache.lock);
+80101c94:	68 00 0a 11 80       	push   $0x80110a00
+80101c99:	e8 12 2a 00 00       	call   801046b0 <acquire>
+  ip->ref++;
+80101c9e:	83 46 08 01          	addl   $0x1,0x8(%esi)
+  release(&icache.lock);
+80101ca2:	c7 04 24 00 0a 11 80 	movl   $0x80110a00,(%esp)
+80101ca9:	e8 c2 2a 00 00       	call   80104770 <release>
+80101cae:	83 c4 10             	add    $0x10,%esp
+80101cb1:	eb 08                	jmp    80101cbb <namex+0x4b>
+80101cb3:	90                   	nop
+80101cb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    path++;
+80101cb8:	83 c3 01             	add    $0x1,%ebx
+  while(*path == '/')
+80101cbb:	0f b6 03             	movzbl (%ebx),%eax
+80101cbe:	3c 2f                	cmp    $0x2f,%al
+80101cc0:	74 f6                	je     80101cb8 <namex+0x48>
+  if(*path == 0)
+80101cc2:	84 c0                	test   %al,%al
+80101cc4:	0f 84 ee 00 00 00    	je     80101db8 <namex+0x148>
+  while(*path != '/' && *path != 0)
+80101cca:	0f b6 03             	movzbl (%ebx),%eax
+80101ccd:	3c 2f                	cmp    $0x2f,%al
+80101ccf:	0f 84 b3 00 00 00    	je     80101d88 <namex+0x118>
+80101cd5:	84 c0                	test   %al,%al
+80101cd7:	89 da                	mov    %ebx,%edx
+80101cd9:	75 09                	jne    80101ce4 <namex+0x74>
+80101cdb:	e9 a8 00 00 00       	jmp    80101d88 <namex+0x118>
+80101ce0:	84 c0                	test   %al,%al
+80101ce2:	74 0a                	je     80101cee <namex+0x7e>
+    path++;
+80101ce4:	83 c2 01             	add    $0x1,%edx
+  while(*path != '/' && *path != 0)
+80101ce7:	0f b6 02             	movzbl (%edx),%eax
+80101cea:	3c 2f                	cmp    $0x2f,%al
+80101cec:	75 f2                	jne    80101ce0 <namex+0x70>
+80101cee:	89 d1                	mov    %edx,%ecx
+80101cf0:	29 d9                	sub    %ebx,%ecx
+  if(len >= DIRSIZ)
+80101cf2:	83 f9 0d             	cmp    $0xd,%ecx
+80101cf5:	0f 8e 91 00 00 00    	jle    80101d8c <namex+0x11c>
+    memmove(name, s, DIRSIZ);
+80101cfb:	83 ec 04             	sub    $0x4,%esp
+80101cfe:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80101d01:	6a 0e                	push   $0xe
+80101d03:	53                   	push   %ebx
+80101d04:	57                   	push   %edi
+80101d05:	e8 66 2b 00 00       	call   80104870 <memmove>
+    path++;
+80101d0a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+    memmove(name, s, DIRSIZ);
+80101d0d:	83 c4 10             	add    $0x10,%esp
+    path++;
+80101d10:	89 d3                	mov    %edx,%ebx
+  while(*path == '/')
+80101d12:	80 3a 2f             	cmpb   $0x2f,(%edx)
+80101d15:	75 11                	jne    80101d28 <namex+0xb8>
+80101d17:	89 f6                	mov    %esi,%esi
+80101d19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    path++;
+80101d20:	83 c3 01             	add    $0x1,%ebx
+  while(*path == '/')
+80101d23:	80 3b 2f             	cmpb   $0x2f,(%ebx)
+80101d26:	74 f8                	je     80101d20 <namex+0xb0>
+
+  while((path = skipelem(path, name)) != 0){
+    ilock(ip);
+80101d28:	83 ec 0c             	sub    $0xc,%esp
+80101d2b:	56                   	push   %esi
+80101d2c:	e8 5f f9 ff ff       	call   80101690 <ilock>
+    if(ip->type != T_DIR){
+80101d31:	83 c4 10             	add    $0x10,%esp
+80101d34:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80101d39:	0f 85 91 00 00 00    	jne    80101dd0 <namex+0x160>
+      iunlockput(ip);
+      return 0;
+    }
+    if(nameiparent && *path == '\0'){
+80101d3f:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80101d42:	85 d2                	test   %edx,%edx
+80101d44:	74 09                	je     80101d4f <namex+0xdf>
+80101d46:	80 3b 00             	cmpb   $0x0,(%ebx)
+80101d49:	0f 84 b7 00 00 00    	je     80101e06 <namex+0x196>
+      // Stop one level early.
+      iunlock(ip);
+      return ip;
+    }
+    if((next = dirlookup(ip, name, 0)) == 0){
+80101d4f:	83 ec 04             	sub    $0x4,%esp
+80101d52:	6a 00                	push   $0x0
+80101d54:	57                   	push   %edi
+80101d55:	56                   	push   %esi
+80101d56:	e8 65 fe ff ff       	call   80101bc0 <dirlookup>
+80101d5b:	83 c4 10             	add    $0x10,%esp
+80101d5e:	85 c0                	test   %eax,%eax
+80101d60:	74 6e                	je     80101dd0 <namex+0x160>
+  iunlock(ip);
+80101d62:	83 ec 0c             	sub    $0xc,%esp
+80101d65:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80101d68:	56                   	push   %esi
+80101d69:	e8 02 fa ff ff       	call   80101770 <iunlock>
+  iput(ip);
+80101d6e:	89 34 24             	mov    %esi,(%esp)
+80101d71:	e8 4a fa ff ff       	call   801017c0 <iput>
+80101d76:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101d79:	83 c4 10             	add    $0x10,%esp
+80101d7c:	89 c6                	mov    %eax,%esi
+80101d7e:	e9 38 ff ff ff       	jmp    80101cbb <namex+0x4b>
+80101d83:	90                   	nop
+80101d84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while(*path != '/' && *path != 0)
+80101d88:	89 da                	mov    %ebx,%edx
+80101d8a:	31 c9                	xor    %ecx,%ecx
+    memmove(name, s, len);
+80101d8c:	83 ec 04             	sub    $0x4,%esp
+80101d8f:	89 55 dc             	mov    %edx,-0x24(%ebp)
+80101d92:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80101d95:	51                   	push   %ecx
+80101d96:	53                   	push   %ebx
+80101d97:	57                   	push   %edi
+80101d98:	e8 d3 2a 00 00       	call   80104870 <memmove>
+    name[len] = 0;
+80101d9d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80101da0:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80101da3:	83 c4 10             	add    $0x10,%esp
+80101da6:	c6 04 0f 00          	movb   $0x0,(%edi,%ecx,1)
+80101daa:	89 d3                	mov    %edx,%ebx
+80101dac:	e9 61 ff ff ff       	jmp    80101d12 <namex+0xa2>
+80101db1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      return 0;
+    }
+    iunlockput(ip);
+    ip = next;
+  }
+  if(nameiparent){
+80101db8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101dbb:	85 c0                	test   %eax,%eax
+80101dbd:	75 5d                	jne    80101e1c <namex+0x1ac>
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+80101dbf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101dc2:	89 f0                	mov    %esi,%eax
+80101dc4:	5b                   	pop    %ebx
+80101dc5:	5e                   	pop    %esi
+80101dc6:	5f                   	pop    %edi
+80101dc7:	5d                   	pop    %ebp
+80101dc8:	c3                   	ret    
+80101dc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  iunlock(ip);
+80101dd0:	83 ec 0c             	sub    $0xc,%esp
+80101dd3:	56                   	push   %esi
+80101dd4:	e8 97 f9 ff ff       	call   80101770 <iunlock>
+  iput(ip);
+80101dd9:	89 34 24             	mov    %esi,(%esp)
+      return 0;
+80101ddc:	31 f6                	xor    %esi,%esi
+  iput(ip);
+80101dde:	e8 dd f9 ff ff       	call   801017c0 <iput>
+      return 0;
+80101de3:	83 c4 10             	add    $0x10,%esp
+}
+80101de6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101de9:	89 f0                	mov    %esi,%eax
+80101deb:	5b                   	pop    %ebx
+80101dec:	5e                   	pop    %esi
+80101ded:	5f                   	pop    %edi
+80101dee:	5d                   	pop    %ebp
+80101def:	c3                   	ret    
+    ip = iget(ROOTDEV, ROOTINO);
+80101df0:	ba 01 00 00 00       	mov    $0x1,%edx
+80101df5:	b8 01 00 00 00       	mov    $0x1,%eax
+80101dfa:	e8 21 f4 ff ff       	call   80101220 <iget>
+80101dff:	89 c6                	mov    %eax,%esi
+80101e01:	e9 b5 fe ff ff       	jmp    80101cbb <namex+0x4b>
+      iunlock(ip);
+80101e06:	83 ec 0c             	sub    $0xc,%esp
+80101e09:	56                   	push   %esi
+80101e0a:	e8 61 f9 ff ff       	call   80101770 <iunlock>
+      return ip;
+80101e0f:	83 c4 10             	add    $0x10,%esp
+}
+80101e12:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101e15:	89 f0                	mov    %esi,%eax
+80101e17:	5b                   	pop    %ebx
+80101e18:	5e                   	pop    %esi
+80101e19:	5f                   	pop    %edi
+80101e1a:	5d                   	pop    %ebp
+80101e1b:	c3                   	ret    
+    iput(ip);
+80101e1c:	83 ec 0c             	sub    $0xc,%esp
+80101e1f:	56                   	push   %esi
+    return 0;
+80101e20:	31 f6                	xor    %esi,%esi
+    iput(ip);
+80101e22:	e8 99 f9 ff ff       	call   801017c0 <iput>
+    return 0;
+80101e27:	83 c4 10             	add    $0x10,%esp
+80101e2a:	eb 93                	jmp    80101dbf <namex+0x14f>
+80101e2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101e30 <dirlink>:
+{
+80101e30:	55                   	push   %ebp
+80101e31:	89 e5                	mov    %esp,%ebp
+80101e33:	57                   	push   %edi
+80101e34:	56                   	push   %esi
+80101e35:	53                   	push   %ebx
+80101e36:	83 ec 20             	sub    $0x20,%esp
+80101e39:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if((ip = dirlookup(dp, name, 0)) != 0){
+80101e3c:	6a 00                	push   $0x0
+80101e3e:	ff 75 0c             	pushl  0xc(%ebp)
+80101e41:	53                   	push   %ebx
+80101e42:	e8 79 fd ff ff       	call   80101bc0 <dirlookup>
+80101e47:	83 c4 10             	add    $0x10,%esp
+80101e4a:	85 c0                	test   %eax,%eax
+80101e4c:	75 67                	jne    80101eb5 <dirlink+0x85>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80101e4e:	8b 7b 58             	mov    0x58(%ebx),%edi
+80101e51:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101e54:	85 ff                	test   %edi,%edi
+80101e56:	74 29                	je     80101e81 <dirlink+0x51>
+80101e58:	31 ff                	xor    %edi,%edi
+80101e5a:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101e5d:	eb 09                	jmp    80101e68 <dirlink+0x38>
+80101e5f:	90                   	nop
+80101e60:	83 c7 10             	add    $0x10,%edi
+80101e63:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80101e66:	73 19                	jae    80101e81 <dirlink+0x51>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101e68:	6a 10                	push   $0x10
+80101e6a:	57                   	push   %edi
+80101e6b:	56                   	push   %esi
+80101e6c:	53                   	push   %ebx
+80101e6d:	e8 fe fa ff ff       	call   80101970 <readi>
+80101e72:	83 c4 10             	add    $0x10,%esp
+80101e75:	83 f8 10             	cmp    $0x10,%eax
+80101e78:	75 4e                	jne    80101ec8 <dirlink+0x98>
+    if(de.inum == 0)
+80101e7a:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80101e7f:	75 df                	jne    80101e60 <dirlink+0x30>
+  strncpy(de.name, name, DIRSIZ);
+80101e81:	8d 45 da             	lea    -0x26(%ebp),%eax
+80101e84:	83 ec 04             	sub    $0x4,%esp
+80101e87:	6a 0e                	push   $0xe
+80101e89:	ff 75 0c             	pushl  0xc(%ebp)
+80101e8c:	50                   	push   %eax
+80101e8d:	e8 ae 2a 00 00       	call   80104940 <strncpy>
+  de.inum = inum;
+80101e92:	8b 45 10             	mov    0x10(%ebp),%eax
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101e95:	6a 10                	push   $0x10
+80101e97:	57                   	push   %edi
+80101e98:	56                   	push   %esi
+80101e99:	53                   	push   %ebx
+  de.inum = inum;
+80101e9a:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101e9e:	e8 cd fb ff ff       	call   80101a70 <writei>
+80101ea3:	83 c4 20             	add    $0x20,%esp
+80101ea6:	83 f8 10             	cmp    $0x10,%eax
+80101ea9:	75 2a                	jne    80101ed5 <dirlink+0xa5>
+  return 0;
+80101eab:	31 c0                	xor    %eax,%eax
+}
+80101ead:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101eb0:	5b                   	pop    %ebx
+80101eb1:	5e                   	pop    %esi
+80101eb2:	5f                   	pop    %edi
+80101eb3:	5d                   	pop    %ebp
+80101eb4:	c3                   	ret    
+    iput(ip);
+80101eb5:	83 ec 0c             	sub    $0xc,%esp
+80101eb8:	50                   	push   %eax
+80101eb9:	e8 02 f9 ff ff       	call   801017c0 <iput>
+    return -1;
+80101ebe:	83 c4 10             	add    $0x10,%esp
+80101ec1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101ec6:	eb e5                	jmp    80101ead <dirlink+0x7d>
+      panic("dirlink read");
+80101ec8:	83 ec 0c             	sub    $0xc,%esp
+80101ecb:	68 08 75 10 80       	push   $0x80107508
+80101ed0:	e8 bb e4 ff ff       	call   80100390 <panic>
+    panic("dirlink");
+80101ed5:	83 ec 0c             	sub    $0xc,%esp
+80101ed8:	68 4e 7b 10 80       	push   $0x80107b4e
+80101edd:	e8 ae e4 ff ff       	call   80100390 <panic>
+80101ee2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101ee9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101ef0 <namei>:
+
+struct inode*
+namei(char *path)
+{
+80101ef0:	55                   	push   %ebp
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+80101ef1:	31 d2                	xor    %edx,%edx
+{
+80101ef3:	89 e5                	mov    %esp,%ebp
+80101ef5:	83 ec 18             	sub    $0x18,%esp
+  return namex(path, 0, name);
+80101ef8:	8b 45 08             	mov    0x8(%ebp),%eax
+80101efb:	8d 4d ea             	lea    -0x16(%ebp),%ecx
+80101efe:	e8 6d fd ff ff       	call   80101c70 <namex>
+}
+80101f03:	c9                   	leave  
+80101f04:	c3                   	ret    
+80101f05:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101f09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101f10 <nameiparent>:
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+80101f10:	55                   	push   %ebp
+  return namex(path, 1, name);
+80101f11:	ba 01 00 00 00       	mov    $0x1,%edx
+{
+80101f16:	89 e5                	mov    %esp,%ebp
+  return namex(path, 1, name);
+80101f18:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80101f1b:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+80101f1e:	5d                   	pop    %ebp
+  return namex(path, 1, name);
+80101f1f:	e9 4c fd ff ff       	jmp    80101c70 <namex>
+80101f24:	66 90                	xchg   %ax,%ax
+80101f26:	66 90                	xchg   %ax,%ax
+80101f28:	66 90                	xchg   %ax,%ax
+80101f2a:	66 90                	xchg   %ax,%ax
+80101f2c:	66 90                	xchg   %ax,%ax
+80101f2e:	66 90                	xchg   %ax,%ax
+
+80101f30 <idestart>:
+}
+
+// Start the request for b.  Caller must hold idelock.
+static void
+idestart(struct buf *b)
+{
+80101f30:	55                   	push   %ebp
+80101f31:	89 e5                	mov    %esp,%ebp
+80101f33:	57                   	push   %edi
+80101f34:	56                   	push   %esi
+80101f35:	53                   	push   %ebx
+80101f36:	83 ec 0c             	sub    $0xc,%esp
+  if(b == 0)
+80101f39:	85 c0                	test   %eax,%eax
+80101f3b:	0f 84 b4 00 00 00    	je     80101ff5 <idestart+0xc5>
+    panic("idestart");
+  if(b->blockno >= FSSIZE)
+80101f41:	8b 58 08             	mov    0x8(%eax),%ebx
+80101f44:	89 c6                	mov    %eax,%esi
+80101f46:	81 fb e7 03 00 00    	cmp    $0x3e7,%ebx
+80101f4c:	0f 87 96 00 00 00    	ja     80101fe8 <idestart+0xb8>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80101f52:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
+80101f57:	89 f6                	mov    %esi,%esi
+80101f59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80101f60:	89 ca                	mov    %ecx,%edx
+80101f62:	ec                   	in     (%dx),%al
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80101f63:	83 e0 c0             	and    $0xffffffc0,%eax
+80101f66:	3c 40                	cmp    $0x40,%al
+80101f68:	75 f6                	jne    80101f60 <idestart+0x30>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80101f6a:	31 ff                	xor    %edi,%edi
+80101f6c:	ba f6 03 00 00       	mov    $0x3f6,%edx
+80101f71:	89 f8                	mov    %edi,%eax
+80101f73:	ee                   	out    %al,(%dx)
+80101f74:	b8 01 00 00 00       	mov    $0x1,%eax
+80101f79:	ba f2 01 00 00       	mov    $0x1f2,%edx
+80101f7e:	ee                   	out    %al,(%dx)
+80101f7f:	ba f3 01 00 00       	mov    $0x1f3,%edx
+80101f84:	89 d8                	mov    %ebx,%eax
+80101f86:	ee                   	out    %al,(%dx)
+
+  idewait(0);
+  outb(0x3f6, 0);  // generate interrupt
+  outb(0x1f2, sector_per_block);  // number of sectors
+  outb(0x1f3, sector & 0xff);
+  outb(0x1f4, (sector >> 8) & 0xff);
+80101f87:	89 d8                	mov    %ebx,%eax
+80101f89:	ba f4 01 00 00       	mov    $0x1f4,%edx
+80101f8e:	c1 f8 08             	sar    $0x8,%eax
+80101f91:	ee                   	out    %al,(%dx)
+80101f92:	ba f5 01 00 00       	mov    $0x1f5,%edx
+80101f97:	89 f8                	mov    %edi,%eax
+80101f99:	ee                   	out    %al,(%dx)
+  outb(0x1f5, (sector >> 16) & 0xff);
+  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
+80101f9a:	0f b6 46 04          	movzbl 0x4(%esi),%eax
+80101f9e:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80101fa3:	c1 e0 04             	shl    $0x4,%eax
+80101fa6:	83 e0 10             	and    $0x10,%eax
+80101fa9:	83 c8 e0             	or     $0xffffffe0,%eax
+80101fac:	ee                   	out    %al,(%dx)
+  if(b->flags & B_DIRTY){
+80101fad:	f6 06 04             	testb  $0x4,(%esi)
+80101fb0:	75 16                	jne    80101fc8 <idestart+0x98>
+80101fb2:	b8 20 00 00 00       	mov    $0x20,%eax
+80101fb7:	89 ca                	mov    %ecx,%edx
+80101fb9:	ee                   	out    %al,(%dx)
+    outb(0x1f7, write_cmd);
+    outsl(0x1f0, b->data, BSIZE/4);
+  } else {
+    outb(0x1f7, read_cmd);
+  }
+}
+80101fba:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101fbd:	5b                   	pop    %ebx
+80101fbe:	5e                   	pop    %esi
+80101fbf:	5f                   	pop    %edi
+80101fc0:	5d                   	pop    %ebp
+80101fc1:	c3                   	ret    
+80101fc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80101fc8:	b8 30 00 00 00       	mov    $0x30,%eax
+80101fcd:	89 ca                	mov    %ecx,%edx
+80101fcf:	ee                   	out    %al,(%dx)
+  asm volatile("cld; rep outsl" :
+80101fd0:	b9 80 00 00 00       	mov    $0x80,%ecx
+    outsl(0x1f0, b->data, BSIZE/4);
+80101fd5:	83 c6 5c             	add    $0x5c,%esi
+80101fd8:	ba f0 01 00 00       	mov    $0x1f0,%edx
+80101fdd:	fc                   	cld    
+80101fde:	f3 6f                	rep outsl %ds:(%esi),(%dx)
+}
+80101fe0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101fe3:	5b                   	pop    %ebx
+80101fe4:	5e                   	pop    %esi
+80101fe5:	5f                   	pop    %edi
+80101fe6:	5d                   	pop    %ebp
+80101fe7:	c3                   	ret    
+    panic("incorrect blockno");
+80101fe8:	83 ec 0c             	sub    $0xc,%esp
+80101feb:	68 74 75 10 80       	push   $0x80107574
+80101ff0:	e8 9b e3 ff ff       	call   80100390 <panic>
+    panic("idestart");
+80101ff5:	83 ec 0c             	sub    $0xc,%esp
+80101ff8:	68 6b 75 10 80       	push   $0x8010756b
+80101ffd:	e8 8e e3 ff ff       	call   80100390 <panic>
+80102002:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102009:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102010 <ideinit>:
+{
+80102010:	55                   	push   %ebp
+80102011:	89 e5                	mov    %esp,%ebp
+80102013:	83 ec 10             	sub    $0x10,%esp
+  initlock(&idelock, "ide");
+80102016:	68 86 75 10 80       	push   $0x80107586
+8010201b:	68 80 a5 10 80       	push   $0x8010a580
+80102020:	e8 4b 25 00 00       	call   80104570 <initlock>
+  ioapicenable(IRQ_IDE, ncpu - 1);
+80102025:	58                   	pop    %eax
+80102026:	a1 20 2d 11 80       	mov    0x80112d20,%eax
+8010202b:	5a                   	pop    %edx
+8010202c:	83 e8 01             	sub    $0x1,%eax
+8010202f:	50                   	push   %eax
+80102030:	6a 0e                	push   $0xe
+80102032:	e8 a9 02 00 00       	call   801022e0 <ioapicenable>
+80102037:	83 c4 10             	add    $0x10,%esp
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010203a:	ba f7 01 00 00       	mov    $0x1f7,%edx
+8010203f:	90                   	nop
+80102040:	ec                   	in     (%dx),%al
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80102041:	83 e0 c0             	and    $0xffffffc0,%eax
+80102044:	3c 40                	cmp    $0x40,%al
+80102046:	75 f8                	jne    80102040 <ideinit+0x30>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102048:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
+8010204d:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80102052:	ee                   	out    %al,(%dx)
+80102053:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102058:	ba f7 01 00 00       	mov    $0x1f7,%edx
+8010205d:	eb 06                	jmp    80102065 <ideinit+0x55>
+8010205f:	90                   	nop
+  for(i=0; i<1000; i++){
+80102060:	83 e9 01             	sub    $0x1,%ecx
+80102063:	74 0f                	je     80102074 <ideinit+0x64>
+80102065:	ec                   	in     (%dx),%al
+    if(inb(0x1f7) != 0){
+80102066:	84 c0                	test   %al,%al
+80102068:	74 f6                	je     80102060 <ideinit+0x50>
+      havedisk1 = 1;
+8010206a:	c7 05 60 a5 10 80 01 	movl   $0x1,0x8010a560
+80102071:	00 00 00 
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102074:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
+80102079:	ba f6 01 00 00       	mov    $0x1f6,%edx
+8010207e:	ee                   	out    %al,(%dx)
+}
+8010207f:	c9                   	leave  
+80102080:	c3                   	ret    
+80102081:	eb 0d                	jmp    80102090 <ideintr>
+80102083:	90                   	nop
+80102084:	90                   	nop
+80102085:	90                   	nop
+80102086:	90                   	nop
+80102087:	90                   	nop
+80102088:	90                   	nop
+80102089:	90                   	nop
+8010208a:	90                   	nop
+8010208b:	90                   	nop
+8010208c:	90                   	nop
+8010208d:	90                   	nop
+8010208e:	90                   	nop
+8010208f:	90                   	nop
+
+80102090 <ideintr>:
+
+// Interrupt handler.
+void
+ideintr(void)
+{
+80102090:	55                   	push   %ebp
+80102091:	89 e5                	mov    %esp,%ebp
+80102093:	57                   	push   %edi
+80102094:	56                   	push   %esi
+80102095:	53                   	push   %ebx
+80102096:	83 ec 18             	sub    $0x18,%esp
+  struct buf *b;
+
+  // First queued buffer is the active request.
+  acquire(&idelock);
+80102099:	68 80 a5 10 80       	push   $0x8010a580
+8010209e:	e8 0d 26 00 00       	call   801046b0 <acquire>
+
+  if((b = idequeue) == 0){
+801020a3:	8b 1d 64 a5 10 80    	mov    0x8010a564,%ebx
+801020a9:	83 c4 10             	add    $0x10,%esp
+801020ac:	85 db                	test   %ebx,%ebx
+801020ae:	74 67                	je     80102117 <ideintr+0x87>
+    release(&idelock);
+    return;
+  }
+  idequeue = b->qnext;
+801020b0:	8b 43 58             	mov    0x58(%ebx),%eax
+801020b3:	a3 64 a5 10 80       	mov    %eax,0x8010a564
+
+  // Read data if needed.
+  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
+801020b8:	8b 3b                	mov    (%ebx),%edi
+801020ba:	f7 c7 04 00 00 00    	test   $0x4,%edi
+801020c0:	75 31                	jne    801020f3 <ideintr+0x63>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801020c2:	ba f7 01 00 00       	mov    $0x1f7,%edx
+801020c7:	89 f6                	mov    %esi,%esi
+801020c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+801020d0:	ec                   	in     (%dx),%al
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+801020d1:	89 c6                	mov    %eax,%esi
+801020d3:	83 e6 c0             	and    $0xffffffc0,%esi
+801020d6:	89 f1                	mov    %esi,%ecx
+801020d8:	80 f9 40             	cmp    $0x40,%cl
+801020db:	75 f3                	jne    801020d0 <ideintr+0x40>
+  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
+801020dd:	a8 21                	test   $0x21,%al
+801020df:	75 12                	jne    801020f3 <ideintr+0x63>
+    insl(0x1f0, b->data, BSIZE/4);
+801020e1:	8d 7b 5c             	lea    0x5c(%ebx),%edi
+  asm volatile("cld; rep insl" :
+801020e4:	b9 80 00 00 00       	mov    $0x80,%ecx
+801020e9:	ba f0 01 00 00       	mov    $0x1f0,%edx
+801020ee:	fc                   	cld    
+801020ef:	f3 6d                	rep insl (%dx),%es:(%edi)
+801020f1:	8b 3b                	mov    (%ebx),%edi
+
+  // Wake process waiting for this buf.
+  b->flags |= B_VALID;
+  b->flags &= ~B_DIRTY;
+801020f3:	83 e7 fb             	and    $0xfffffffb,%edi
+  wakeup(b);
+801020f6:	83 ec 0c             	sub    $0xc,%esp
+  b->flags &= ~B_DIRTY;
+801020f9:	89 f9                	mov    %edi,%ecx
+801020fb:	83 c9 02             	or     $0x2,%ecx
+801020fe:	89 0b                	mov    %ecx,(%ebx)
+  wakeup(b);
+80102100:	53                   	push   %ebx
+80102101:	e8 8a 21 00 00       	call   80104290 <wakeup>
+
+  // Start disk on next buf in queue.
+  if(idequeue != 0)
+80102106:	a1 64 a5 10 80       	mov    0x8010a564,%eax
+8010210b:	83 c4 10             	add    $0x10,%esp
+8010210e:	85 c0                	test   %eax,%eax
+80102110:	74 05                	je     80102117 <ideintr+0x87>
+    idestart(idequeue);
+80102112:	e8 19 fe ff ff       	call   80101f30 <idestart>
+    release(&idelock);
+80102117:	83 ec 0c             	sub    $0xc,%esp
+8010211a:	68 80 a5 10 80       	push   $0x8010a580
+8010211f:	e8 4c 26 00 00       	call   80104770 <release>
+
+  release(&idelock);
+}
+80102124:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102127:	5b                   	pop    %ebx
+80102128:	5e                   	pop    %esi
+80102129:	5f                   	pop    %edi
+8010212a:	5d                   	pop    %ebp
+8010212b:	c3                   	ret    
+8010212c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102130 <iderw>:
+// Sync buf with disk.
+// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
+// Else if B_VALID is not set, read buf from disk, set B_VALID.
+void
+iderw(struct buf *b)
+{
+80102130:	55                   	push   %ebp
+80102131:	89 e5                	mov    %esp,%ebp
+80102133:	53                   	push   %ebx
+80102134:	83 ec 10             	sub    $0x10,%esp
+80102137:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct buf **pp;
+
+  if(!holdingsleep(&b->lock))
+8010213a:	8d 43 0c             	lea    0xc(%ebx),%eax
+8010213d:	50                   	push   %eax
+8010213e:	e8 dd 23 00 00       	call   80104520 <holdingsleep>
+80102143:	83 c4 10             	add    $0x10,%esp
+80102146:	85 c0                	test   %eax,%eax
+80102148:	0f 84 c6 00 00 00    	je     80102214 <iderw+0xe4>
+    panic("iderw: buf not locked");
+  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
+8010214e:	8b 03                	mov    (%ebx),%eax
+80102150:	83 e0 06             	and    $0x6,%eax
+80102153:	83 f8 02             	cmp    $0x2,%eax
+80102156:	0f 84 ab 00 00 00    	je     80102207 <iderw+0xd7>
+    panic("iderw: nothing to do");
+  if(b->dev != 0 && !havedisk1)
+8010215c:	8b 53 04             	mov    0x4(%ebx),%edx
+8010215f:	85 d2                	test   %edx,%edx
+80102161:	74 0d                	je     80102170 <iderw+0x40>
+80102163:	a1 60 a5 10 80       	mov    0x8010a560,%eax
+80102168:	85 c0                	test   %eax,%eax
+8010216a:	0f 84 b1 00 00 00    	je     80102221 <iderw+0xf1>
+    panic("iderw: ide disk 1 not present");
+
+  acquire(&idelock);  //DOC:acquire-lock
+80102170:	83 ec 0c             	sub    $0xc,%esp
+80102173:	68 80 a5 10 80       	push   $0x8010a580
+80102178:	e8 33 25 00 00       	call   801046b0 <acquire>
+
+  // Append b to idequeue.
+  b->qnext = 0;
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+8010217d:	8b 15 64 a5 10 80    	mov    0x8010a564,%edx
+80102183:	83 c4 10             	add    $0x10,%esp
+  b->qnext = 0;
+80102186:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+8010218d:	85 d2                	test   %edx,%edx
+8010218f:	75 09                	jne    8010219a <iderw+0x6a>
+80102191:	eb 6d                	jmp    80102200 <iderw+0xd0>
+80102193:	90                   	nop
+80102194:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102198:	89 c2                	mov    %eax,%edx
+8010219a:	8b 42 58             	mov    0x58(%edx),%eax
+8010219d:	85 c0                	test   %eax,%eax
+8010219f:	75 f7                	jne    80102198 <iderw+0x68>
+801021a1:	83 c2 58             	add    $0x58,%edx
+    ;
+  *pp = b;
+801021a4:	89 1a                	mov    %ebx,(%edx)
+
+  // Start disk if necessary.
+  if(idequeue == b)
+801021a6:	39 1d 64 a5 10 80    	cmp    %ebx,0x8010a564
+801021ac:	74 42                	je     801021f0 <iderw+0xc0>
+    idestart(b);
+
+  // Wait for request to finish.
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+801021ae:	8b 03                	mov    (%ebx),%eax
+801021b0:	83 e0 06             	and    $0x6,%eax
+801021b3:	83 f8 02             	cmp    $0x2,%eax
+801021b6:	74 23                	je     801021db <iderw+0xab>
+801021b8:	90                   	nop
+801021b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    sleep(b, &idelock);
+801021c0:	83 ec 08             	sub    $0x8,%esp
+801021c3:	68 80 a5 10 80       	push   $0x8010a580
+801021c8:	53                   	push   %ebx
+801021c9:	e8 02 1f 00 00       	call   801040d0 <sleep>
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+801021ce:	8b 03                	mov    (%ebx),%eax
+801021d0:	83 c4 10             	add    $0x10,%esp
+801021d3:	83 e0 06             	and    $0x6,%eax
+801021d6:	83 f8 02             	cmp    $0x2,%eax
+801021d9:	75 e5                	jne    801021c0 <iderw+0x90>
+  }
+
+
+  release(&idelock);
+801021db:	c7 45 08 80 a5 10 80 	movl   $0x8010a580,0x8(%ebp)
+}
+801021e2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801021e5:	c9                   	leave  
+  release(&idelock);
+801021e6:	e9 85 25 00 00       	jmp    80104770 <release>
+801021eb:	90                   	nop
+801021ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    idestart(b);
+801021f0:	89 d8                	mov    %ebx,%eax
+801021f2:	e8 39 fd ff ff       	call   80101f30 <idestart>
+801021f7:	eb b5                	jmp    801021ae <iderw+0x7e>
+801021f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+80102200:	ba 64 a5 10 80       	mov    $0x8010a564,%edx
+80102205:	eb 9d                	jmp    801021a4 <iderw+0x74>
+    panic("iderw: nothing to do");
+80102207:	83 ec 0c             	sub    $0xc,%esp
+8010220a:	68 a0 75 10 80       	push   $0x801075a0
+8010220f:	e8 7c e1 ff ff       	call   80100390 <panic>
+    panic("iderw: buf not locked");
+80102214:	83 ec 0c             	sub    $0xc,%esp
+80102217:	68 8a 75 10 80       	push   $0x8010758a
+8010221c:	e8 6f e1 ff ff       	call   80100390 <panic>
+    panic("iderw: ide disk 1 not present");
+80102221:	83 ec 0c             	sub    $0xc,%esp
+80102224:	68 b5 75 10 80       	push   $0x801075b5
+80102229:	e8 62 e1 ff ff       	call   80100390 <panic>
+8010222e:	66 90                	xchg   %ax,%ax
+
+80102230 <ioapicinit>:
+  ioapic->data = data;
+}
+
+void
+ioapicinit(void)
+{
+80102230:	55                   	push   %ebp
+  int i, id, maxintr;
+
+  ioapic = (volatile struct ioapic*)IOAPIC;
+80102231:	c7 05 54 26 11 80 00 	movl   $0xfec00000,0x80112654
+80102238:	00 c0 fe 
+{
+8010223b:	89 e5                	mov    %esp,%ebp
+8010223d:	56                   	push   %esi
+8010223e:	53                   	push   %ebx
+  ioapic->reg = reg;
+8010223f:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
+80102246:	00 00 00 
+  return ioapic->data;
+80102249:	a1 54 26 11 80       	mov    0x80112654,%eax
+8010224e:	8b 58 10             	mov    0x10(%eax),%ebx
+  ioapic->reg = reg;
+80102251:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  return ioapic->data;
+80102257:	8b 0d 54 26 11 80    	mov    0x80112654,%ecx
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+  id = ioapicread(REG_ID) >> 24;
+  if(id != ioapicid)
+8010225d:	0f b6 15 80 27 11 80 	movzbl 0x80112780,%edx
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+80102264:	c1 eb 10             	shr    $0x10,%ebx
+  return ioapic->data;
+80102267:	8b 41 10             	mov    0x10(%ecx),%eax
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+8010226a:	0f b6 db             	movzbl %bl,%ebx
+  id = ioapicread(REG_ID) >> 24;
+8010226d:	c1 e8 18             	shr    $0x18,%eax
+  if(id != ioapicid)
+80102270:	39 c2                	cmp    %eax,%edx
+80102272:	74 16                	je     8010228a <ioapicinit+0x5a>
+    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
+80102274:	83 ec 0c             	sub    $0xc,%esp
+80102277:	68 d4 75 10 80       	push   $0x801075d4
+8010227c:	e8 df e3 ff ff       	call   80100660 <cprintf>
+80102281:	8b 0d 54 26 11 80    	mov    0x80112654,%ecx
+80102287:	83 c4 10             	add    $0x10,%esp
+8010228a:	83 c3 21             	add    $0x21,%ebx
+{
+8010228d:	ba 10 00 00 00       	mov    $0x10,%edx
+80102292:	b8 20 00 00 00       	mov    $0x20,%eax
+80102297:	89 f6                	mov    %esi,%esi
+80102299:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  ioapic->reg = reg;
+801022a0:	89 11                	mov    %edx,(%ecx)
+  ioapic->data = data;
+801022a2:	8b 0d 54 26 11 80    	mov    0x80112654,%ecx
+
+  // Mark all interrupts edge-triggered, active high, disabled,
+  // and not routed to any CPUs.
+  for(i = 0; i <= maxintr; i++){
+    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
+801022a8:	89 c6                	mov    %eax,%esi
+801022aa:	81 ce 00 00 01 00    	or     $0x10000,%esi
+801022b0:	83 c0 01             	add    $0x1,%eax
+  ioapic->data = data;
+801022b3:	89 71 10             	mov    %esi,0x10(%ecx)
+801022b6:	8d 72 01             	lea    0x1(%edx),%esi
+801022b9:	83 c2 02             	add    $0x2,%edx
+  for(i = 0; i <= maxintr; i++){
+801022bc:	39 d8                	cmp    %ebx,%eax
+  ioapic->reg = reg;
+801022be:	89 31                	mov    %esi,(%ecx)
+  ioapic->data = data;
+801022c0:	8b 0d 54 26 11 80    	mov    0x80112654,%ecx
+801022c6:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
+  for(i = 0; i <= maxintr; i++){
+801022cd:	75 d1                	jne    801022a0 <ioapicinit+0x70>
+    ioapicwrite(REG_TABLE+2*i+1, 0);
+  }
+}
+801022cf:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801022d2:	5b                   	pop    %ebx
+801022d3:	5e                   	pop    %esi
+801022d4:	5d                   	pop    %ebp
+801022d5:	c3                   	ret    
+801022d6:	8d 76 00             	lea    0x0(%esi),%esi
+801022d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801022e0 <ioapicenable>:
+
+void
+ioapicenable(int irq, int cpunum)
+{
+801022e0:	55                   	push   %ebp
+  ioapic->reg = reg;
+801022e1:	8b 0d 54 26 11 80    	mov    0x80112654,%ecx
+{
+801022e7:	89 e5                	mov    %esp,%ebp
+801022e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  // Mark interrupt edge-triggered, active high,
+  // enabled, and routed to the given cpunum,
+  // which happens to be that cpu's APIC ID.
+  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
+801022ec:	8d 50 20             	lea    0x20(%eax),%edx
+801022ef:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
+  ioapic->reg = reg;
+801022f3:	89 01                	mov    %eax,(%ecx)
+  ioapic->data = data;
+801022f5:	8b 0d 54 26 11 80    	mov    0x80112654,%ecx
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+801022fb:	83 c0 01             	add    $0x1,%eax
+  ioapic->data = data;
+801022fe:	89 51 10             	mov    %edx,0x10(%ecx)
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+80102301:	8b 55 0c             	mov    0xc(%ebp),%edx
+  ioapic->reg = reg;
+80102304:	89 01                	mov    %eax,(%ecx)
+  ioapic->data = data;
+80102306:	a1 54 26 11 80       	mov    0x80112654,%eax
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+8010230b:	c1 e2 18             	shl    $0x18,%edx
+  ioapic->data = data;
+8010230e:	89 50 10             	mov    %edx,0x10(%eax)
+}
+80102311:	5d                   	pop    %ebp
+80102312:	c3                   	ret    
+80102313:	66 90                	xchg   %ax,%ax
+80102315:	66 90                	xchg   %ax,%ax
+80102317:	66 90                	xchg   %ax,%ax
+80102319:	66 90                	xchg   %ax,%ax
+8010231b:	66 90                	xchg   %ax,%ax
+8010231d:	66 90                	xchg   %ax,%ax
+8010231f:	90                   	nop
+
+80102320 <kfree>:
+// which normally should have been returned by a
+// call to kalloc().  (The exception is when
+// initializing the allocator; see kinit above.)
+void
+kfree(char *v)
+{
+80102320:	55                   	push   %ebp
+80102321:	89 e5                	mov    %esp,%ebp
+80102323:	53                   	push   %ebx
+80102324:	83 ec 04             	sub    $0x4,%esp
+80102327:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct run *r;
+
+  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
+8010232a:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
+80102330:	75 70                	jne    801023a2 <kfree+0x82>
+80102332:	81 fb c8 56 11 80    	cmp    $0x801156c8,%ebx
+80102338:	72 68                	jb     801023a2 <kfree+0x82>
+8010233a:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80102340:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
+80102345:	77 5b                	ja     801023a2 <kfree+0x82>
+    panic("kfree");
+
+  // Fill with junk to catch dangling refs.
+  memset(v, 1, PGSIZE);
+80102347:	83 ec 04             	sub    $0x4,%esp
+8010234a:	68 00 10 00 00       	push   $0x1000
+8010234f:	6a 01                	push   $0x1
+80102351:	53                   	push   %ebx
+80102352:	e8 69 24 00 00       	call   801047c0 <memset>
+
+  if(kmem.use_lock)
+80102357:	8b 15 94 26 11 80    	mov    0x80112694,%edx
+8010235d:	83 c4 10             	add    $0x10,%esp
+80102360:	85 d2                	test   %edx,%edx
+80102362:	75 2c                	jne    80102390 <kfree+0x70>
+    acquire(&kmem.lock);
+  r = (struct run*)v;
+  r->next = kmem.freelist;
+80102364:	a1 98 26 11 80       	mov    0x80112698,%eax
+80102369:	89 03                	mov    %eax,(%ebx)
+  kmem.freelist = r;
+  if(kmem.use_lock)
+8010236b:	a1 94 26 11 80       	mov    0x80112694,%eax
+  kmem.freelist = r;
+80102370:	89 1d 98 26 11 80    	mov    %ebx,0x80112698
+  if(kmem.use_lock)
+80102376:	85 c0                	test   %eax,%eax
+80102378:	75 06                	jne    80102380 <kfree+0x60>
+    release(&kmem.lock);
+}
+8010237a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010237d:	c9                   	leave  
+8010237e:	c3                   	ret    
+8010237f:	90                   	nop
+    release(&kmem.lock);
+80102380:	c7 45 08 60 26 11 80 	movl   $0x80112660,0x8(%ebp)
+}
+80102387:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010238a:	c9                   	leave  
+    release(&kmem.lock);
+8010238b:	e9 e0 23 00 00       	jmp    80104770 <release>
+    acquire(&kmem.lock);
+80102390:	83 ec 0c             	sub    $0xc,%esp
+80102393:	68 60 26 11 80       	push   $0x80112660
+80102398:	e8 13 23 00 00       	call   801046b0 <acquire>
+8010239d:	83 c4 10             	add    $0x10,%esp
+801023a0:	eb c2                	jmp    80102364 <kfree+0x44>
+    panic("kfree");
+801023a2:	83 ec 0c             	sub    $0xc,%esp
+801023a5:	68 06 76 10 80       	push   $0x80107606
+801023aa:	e8 e1 df ff ff       	call   80100390 <panic>
+801023af:	90                   	nop
+
+801023b0 <freerange>:
+{
+801023b0:	55                   	push   %ebp
+801023b1:	89 e5                	mov    %esp,%ebp
+801023b3:	56                   	push   %esi
+801023b4:	53                   	push   %ebx
+  p = (char*)PGROUNDUP((uint)vstart);
+801023b5:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+801023b8:	8b 75 0c             	mov    0xc(%ebp),%esi
+  p = (char*)PGROUNDUP((uint)vstart);
+801023bb:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+801023c1:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801023c7:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801023cd:	39 de                	cmp    %ebx,%esi
+801023cf:	72 23                	jb     801023f4 <freerange+0x44>
+801023d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    kfree(p);
+801023d8:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+801023de:	83 ec 0c             	sub    $0xc,%esp
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801023e1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+801023e7:	50                   	push   %eax
+801023e8:	e8 33 ff ff ff       	call   80102320 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801023ed:	83 c4 10             	add    $0x10,%esp
+801023f0:	39 f3                	cmp    %esi,%ebx
+801023f2:	76 e4                	jbe    801023d8 <freerange+0x28>
+}
+801023f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801023f7:	5b                   	pop    %ebx
+801023f8:	5e                   	pop    %esi
+801023f9:	5d                   	pop    %ebp
+801023fa:	c3                   	ret    
+801023fb:	90                   	nop
+801023fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102400 <kinit1>:
+{
+80102400:	55                   	push   %ebp
+80102401:	89 e5                	mov    %esp,%ebp
+80102403:	56                   	push   %esi
+80102404:	53                   	push   %ebx
+80102405:	8b 75 0c             	mov    0xc(%ebp),%esi
+  initlock(&kmem.lock, "kmem");
+80102408:	83 ec 08             	sub    $0x8,%esp
+8010240b:	68 0c 76 10 80       	push   $0x8010760c
+80102410:	68 60 26 11 80       	push   $0x80112660
+80102415:	e8 56 21 00 00       	call   80104570 <initlock>
+  p = (char*)PGROUNDUP((uint)vstart);
+8010241a:	8b 45 08             	mov    0x8(%ebp),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+8010241d:	83 c4 10             	add    $0x10,%esp
+  kmem.use_lock = 0;
+80102420:	c7 05 94 26 11 80 00 	movl   $0x0,0x80112694
+80102427:	00 00 00 
+  p = (char*)PGROUNDUP((uint)vstart);
+8010242a:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102430:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102436:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010243c:	39 de                	cmp    %ebx,%esi
+8010243e:	72 1c                	jb     8010245c <kinit1+0x5c>
+    kfree(p);
+80102440:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+80102446:	83 ec 0c             	sub    $0xc,%esp
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102449:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+8010244f:	50                   	push   %eax
+80102450:	e8 cb fe ff ff       	call   80102320 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102455:	83 c4 10             	add    $0x10,%esp
+80102458:	39 de                	cmp    %ebx,%esi
+8010245a:	73 e4                	jae    80102440 <kinit1+0x40>
+}
+8010245c:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010245f:	5b                   	pop    %ebx
+80102460:	5e                   	pop    %esi
+80102461:	5d                   	pop    %ebp
+80102462:	c3                   	ret    
+80102463:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102469:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102470 <kinit2>:
+{
+80102470:	55                   	push   %ebp
+80102471:	89 e5                	mov    %esp,%ebp
+80102473:	56                   	push   %esi
+80102474:	53                   	push   %ebx
+  p = (char*)PGROUNDUP((uint)vstart);
+80102475:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+80102478:	8b 75 0c             	mov    0xc(%ebp),%esi
+  p = (char*)PGROUNDUP((uint)vstart);
+8010247b:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102481:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102487:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010248d:	39 de                	cmp    %ebx,%esi
+8010248f:	72 23                	jb     801024b4 <kinit2+0x44>
+80102491:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    kfree(p);
+80102498:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+8010249e:	83 ec 0c             	sub    $0xc,%esp
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801024a1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+801024a7:	50                   	push   %eax
+801024a8:	e8 73 fe ff ff       	call   80102320 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801024ad:	83 c4 10             	add    $0x10,%esp
+801024b0:	39 de                	cmp    %ebx,%esi
+801024b2:	73 e4                	jae    80102498 <kinit2+0x28>
+  kmem.use_lock = 1;
+801024b4:	c7 05 94 26 11 80 01 	movl   $0x1,0x80112694
+801024bb:	00 00 00 
+}
+801024be:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801024c1:	5b                   	pop    %ebx
+801024c2:	5e                   	pop    %esi
+801024c3:	5d                   	pop    %ebp
+801024c4:	c3                   	ret    
+801024c5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801024c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801024d0 <kalloc>:
+char*
+kalloc(void)
+{
+  struct run *r;
+
+  if(kmem.use_lock)
+801024d0:	a1 94 26 11 80       	mov    0x80112694,%eax
+801024d5:	85 c0                	test   %eax,%eax
+801024d7:	75 1f                	jne    801024f8 <kalloc+0x28>
+    acquire(&kmem.lock);
+  r = kmem.freelist;
+801024d9:	a1 98 26 11 80       	mov    0x80112698,%eax
+  if(r)
+801024de:	85 c0                	test   %eax,%eax
+801024e0:	74 0e                	je     801024f0 <kalloc+0x20>
+    kmem.freelist = r->next;
+801024e2:	8b 10                	mov    (%eax),%edx
+801024e4:	89 15 98 26 11 80    	mov    %edx,0x80112698
+801024ea:	c3                   	ret    
+801024eb:	90                   	nop
+801024ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(kmem.use_lock)
+    release(&kmem.lock);
+  return (char*)r;
+}
+801024f0:	f3 c3                	repz ret 
+801024f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+{
+801024f8:	55                   	push   %ebp
+801024f9:	89 e5                	mov    %esp,%ebp
+801024fb:	83 ec 24             	sub    $0x24,%esp
+    acquire(&kmem.lock);
+801024fe:	68 60 26 11 80       	push   $0x80112660
+80102503:	e8 a8 21 00 00       	call   801046b0 <acquire>
+  r = kmem.freelist;
+80102508:	a1 98 26 11 80       	mov    0x80112698,%eax
+  if(r)
+8010250d:	83 c4 10             	add    $0x10,%esp
+80102510:	8b 15 94 26 11 80    	mov    0x80112694,%edx
+80102516:	85 c0                	test   %eax,%eax
+80102518:	74 08                	je     80102522 <kalloc+0x52>
+    kmem.freelist = r->next;
+8010251a:	8b 08                	mov    (%eax),%ecx
+8010251c:	89 0d 98 26 11 80    	mov    %ecx,0x80112698
+  if(kmem.use_lock)
+80102522:	85 d2                	test   %edx,%edx
+80102524:	74 16                	je     8010253c <kalloc+0x6c>
+    release(&kmem.lock);
+80102526:	83 ec 0c             	sub    $0xc,%esp
+80102529:	89 45 f4             	mov    %eax,-0xc(%ebp)
+8010252c:	68 60 26 11 80       	push   $0x80112660
+80102531:	e8 3a 22 00 00       	call   80104770 <release>
+  return (char*)r;
+80102536:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    release(&kmem.lock);
+80102539:	83 c4 10             	add    $0x10,%esp
+}
+8010253c:	c9                   	leave  
+8010253d:	c3                   	ret    
+8010253e:	66 90                	xchg   %ax,%ax
+
+80102540 <kmfree>:
+static Header base;
+static Header *freep;
+
+void
+kmfree(void *ap)
+{
+80102540:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+80102541:	a1 b4 a5 10 80       	mov    0x8010a5b4,%eax
+{
+80102546:	89 e5                	mov    %esp,%ebp
+80102548:	57                   	push   %edi
+80102549:	56                   	push   %esi
+8010254a:	53                   	push   %ebx
+8010254b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+8010254e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+80102551:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+80102558:	39 c8                	cmp    %ecx,%eax
+8010255a:	8b 10                	mov    (%eax),%edx
+8010255c:	73 32                	jae    80102590 <kmfree+0x50>
+8010255e:	39 d1                	cmp    %edx,%ecx
+80102560:	72 04                	jb     80102566 <kmfree+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+80102562:	39 d0                	cmp    %edx,%eax
+80102564:	72 32                	jb     80102598 <kmfree+0x58>
+      break;
+      
+  if(bp + bp->s.size == p->s.ptr){
+80102566:	8b 73 fc             	mov    -0x4(%ebx),%esi
+80102569:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+8010256c:	39 fa                	cmp    %edi,%edx
+8010256e:	74 30                	je     801025a0 <kmfree+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+80102570:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+80102573:	8b 50 04             	mov    0x4(%eax),%edx
+80102576:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+80102579:	39 f1                	cmp    %esi,%ecx
+8010257b:	74 3a                	je     801025b7 <kmfree+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+8010257d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+8010257f:	a3 b4 a5 10 80       	mov    %eax,0x8010a5b4
+}
+80102584:	5b                   	pop    %ebx
+80102585:	5e                   	pop    %esi
+80102586:	5f                   	pop    %edi
+80102587:	5d                   	pop    %ebp
+80102588:	c3                   	ret    
+80102589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+80102590:	39 d0                	cmp    %edx,%eax
+80102592:	72 04                	jb     80102598 <kmfree+0x58>
+80102594:	39 d1                	cmp    %edx,%ecx
+80102596:	72 ce                	jb     80102566 <kmfree+0x26>
+{
+80102598:	89 d0                	mov    %edx,%eax
+8010259a:	eb bc                	jmp    80102558 <kmfree+0x18>
+8010259c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+801025a0:	03 72 04             	add    0x4(%edx),%esi
+801025a3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+801025a6:	8b 10                	mov    (%eax),%edx
+801025a8:	8b 12                	mov    (%edx),%edx
+801025aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+801025ad:	8b 50 04             	mov    0x4(%eax),%edx
+801025b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+801025b3:	39 f1                	cmp    %esi,%ecx
+801025b5:	75 c6                	jne    8010257d <kmfree+0x3d>
+    p->s.size += bp->s.size;
+801025b7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+801025ba:	a3 b4 a5 10 80       	mov    %eax,0x8010a5b4
+    p->s.size += bp->s.size;
+801025bf:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+801025c2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+801025c5:	89 10                	mov    %edx,(%eax)
+}
+801025c7:	5b                   	pop    %ebx
+801025c8:	5e                   	pop    %esi
+801025c9:	5f                   	pop    %edi
+801025ca:	5d                   	pop    %ebp
+801025cb:	c3                   	ret    
+801025cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801025d0 <kmalloc>:
+  return freep;
+}
+
+void*
+kmalloc(uint nbytes)
+{
+801025d0:	55                   	push   %ebp
+801025d1:	89 e5                	mov    %esp,%ebp
+801025d3:	53                   	push   %ebx
+801025d4:	83 ec 04             	sub    $0x4,%esp
+801025d7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *p, *prevp;
+  uint nunits;
+
+  if(nbytes > 4096)
+801025da:	81 fb 00 10 00 00    	cmp    $0x1000,%ebx
+801025e0:	0f 87 b0 00 00 00    	ja     80102696 <kmalloc+0xc6>
+  {
+    panic("kmalloc: requested more than allowed in a single allocation");
+  }
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+801025e6:	8b 15 b4 a5 10 80    	mov    0x8010a5b4,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+801025ec:	83 c3 07             	add    $0x7,%ebx
+801025ef:	c1 eb 03             	shr    $0x3,%ebx
+801025f2:	83 c3 01             	add    $0x1,%ebx
+  if((prevp = freep) == 0){
+801025f5:	85 d2                	test   %edx,%edx
+801025f7:	74 6f                	je     80102668 <kmalloc+0x98>
+801025f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+80102600:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+80102602:	8b 48 04             	mov    0x4(%eax),%ecx
+80102605:	39 d9                	cmp    %ebx,%ecx
+80102607:	73 3f                	jae    80102648 <kmalloc+0x78>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+80102609:	39 05 b4 a5 10 80    	cmp    %eax,0x8010a5b4
+8010260f:	89 c2                	mov    %eax,%edx
+80102611:	75 ed                	jne    80102600 <kmalloc+0x30>
+  p = kalloc();
+80102613:	e8 b8 fe ff ff       	call   801024d0 <kalloc>
+  if(p == 0)
+80102618:	85 c0                	test   %eax,%eax
+8010261a:	74 20                	je     8010263c <kmalloc+0x6c>
+  hp->s.size = 4096 / sizeof(Header);
+8010261c:	c7 40 04 00 02 00 00 	movl   $0x200,0x4(%eax)
+  kmfree((void*)(hp + 1));
+80102623:	83 ec 0c             	sub    $0xc,%esp
+80102626:	83 c0 08             	add    $0x8,%eax
+80102629:	50                   	push   %eax
+8010262a:	e8 11 ff ff ff       	call   80102540 <kmfree>
+  return freep;
+8010262f:	8b 15 b4 a5 10 80    	mov    0x8010a5b4,%edx
+      if((p = morecore(nunits)) == 0)
+80102635:	83 c4 10             	add    $0x10,%esp
+80102638:	85 d2                	test   %edx,%edx
+8010263a:	75 c4                	jne    80102600 <kmalloc+0x30>
+        return 0;
+8010263c:	31 c0                	xor    %eax,%eax
+  }
+}
+8010263e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102641:	c9                   	leave  
+80102642:	c3                   	ret    
+80102643:	90                   	nop
+80102644:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+80102648:	39 cb                	cmp    %ecx,%ebx
+8010264a:	74 44                	je     80102690 <kmalloc+0xc0>
+        p->s.size -= nunits;
+8010264c:	29 d9                	sub    %ebx,%ecx
+8010264e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+80102651:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+80102654:	89 58 04             	mov    %ebx,0x4(%eax)
+      freep = prevp;
+80102657:	89 15 b4 a5 10 80    	mov    %edx,0x8010a5b4
+      return (void*)(p + 1);
+8010265d:	83 c0 08             	add    $0x8,%eax
+}
+80102660:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102663:	c9                   	leave  
+80102664:	c3                   	ret    
+80102665:	8d 76 00             	lea    0x0(%esi),%esi
+    base.s.ptr = freep = prevp = &base;
+80102668:	c7 05 b4 a5 10 80 b8 	movl   $0x8010a5b8,0x8010a5b4
+8010266f:	a5 10 80 
+80102672:	c7 05 b8 a5 10 80 b8 	movl   $0x8010a5b8,0x8010a5b8
+80102679:	a5 10 80 
+    base.s.size = 0;
+8010267c:	b8 b8 a5 10 80       	mov    $0x8010a5b8,%eax
+80102681:	c7 05 bc a5 10 80 00 	movl   $0x0,0x8010a5bc
+80102688:	00 00 00 
+8010268b:	e9 79 ff ff ff       	jmp    80102609 <kmalloc+0x39>
+        prevp->s.ptr = p->s.ptr;
+80102690:	8b 08                	mov    (%eax),%ecx
+80102692:	89 0a                	mov    %ecx,(%edx)
+80102694:	eb c1                	jmp    80102657 <kmalloc+0x87>
+    panic("kmalloc: requested more than allowed in a single allocation");
+80102696:	83 ec 0c             	sub    $0xc,%esp
+80102699:	68 14 76 10 80       	push   $0x80107614
+8010269e:	e8 ed dc ff ff       	call   80100390 <panic>
+801026a3:	66 90                	xchg   %ax,%ax
+801026a5:	66 90                	xchg   %ax,%ax
+801026a7:	66 90                	xchg   %ax,%ax
+801026a9:	66 90                	xchg   %ax,%ax
+801026ab:	66 90                	xchg   %ax,%ax
+801026ad:	66 90                	xchg   %ax,%ax
+801026af:	90                   	nop
+
+801026b0 <mmap>:
+#include "mmu.h"
+#include "proc.h"
+
+#define MMAPBASE (KERNBASE / 2)
+void *mmap(void *addr, int length, int prot, int flags, int fd, int offset)
+{
+801026b0:	55                   	push   %ebp
+801026b1:	89 e5                	mov    %esp,%ebp
+801026b3:	57                   	push   %edi
+801026b4:	56                   	push   %esi
+801026b5:	53                   	push   %ebx
+801026b6:	83 ec 0c             	sub    $0xc,%esp
+
+    if (addr < (void *)0 || addr == (void *)KERNBASE || addr > (void *)KERNBASE || length < 1)
+801026b9:	8b 55 08             	mov    0x8(%ebp),%edx
+801026bc:	85 d2                	test   %edx,%edx
+801026be:	0f 88 84 00 00 00    	js     80102748 <mmap+0x98>
+801026c4:	8b 45 0c             	mov    0xc(%ebp),%eax
+801026c7:	85 c0                	test   %eax,%eax
+801026c9:	7e 7d                	jle    80102748 <mmap+0x98>
+    {
+        return (void *)-1;
+    }
+    
+    struct proc *p = myproc();
+801026cb:	e8 20 14 00 00       	call   80103af0 <myproc>
+
+    // uint total_length = 0;
+
+    // new item in linked list
+    mmapped_region *r = (mmapped_region *)kmalloc(sizeof(mmapped_region));
+801026d0:	83 ec 0c             	sub    $0xc,%esp
+    struct proc *p = myproc();
+801026d3:	89 c6                	mov    %eax,%esi
+    mmapped_region *r = (mmapped_region *)kmalloc(sizeof(mmapped_region));
+801026d5:	6a 1c                	push   $0x1c
+801026d7:	e8 f4 fe ff ff       	call   801025d0 <kmalloc>
+
+    // fill up
+    r->start_addr = (void *)PGROUNDUP(MMAPBASE);
+801026dc:	c7 40 04 00 00 00 40 	movl   $0x40000000,0x4(%eax)
+    mmapped_region *r = (mmapped_region *)kmalloc(sizeof(mmapped_region));
+801026e3:	89 c3                	mov    %eax,%ebx
+    r->length = length;
+801026e5:	8b 45 0c             	mov    0xc(%ebp),%eax
+    r->region_type = flags;
+    r->offset = offset;
+    r->prot = prot;
+    r->next = 0;
+801026e8:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+
+    int total_length = length;
+    if (p->nregions == 0)
+801026ee:	83 c4 10             	add    $0x10,%esp
+    r->length = length;
+801026f1:	89 43 08             	mov    %eax,0x8(%ebx)
+    r->region_type = flags;
+801026f4:	8b 45 14             	mov    0x14(%ebp),%eax
+801026f7:	89 43 0c             	mov    %eax,0xc(%ebx)
+    r->offset = offset;
+801026fa:	8b 45 1c             	mov    0x1c(%ebp),%eax
+801026fd:	89 43 10             	mov    %eax,0x10(%ebx)
+    r->prot = prot;
+80102700:	8b 45 10             	mov    0x10(%ebp),%eax
+80102703:	89 43 18             	mov    %eax,0x18(%ebx)
+    if (p->nregions == 0)
+80102706:	83 7e 7c 00          	cmpl   $0x0,0x7c(%esi)
+8010270a:	74 4c                	je     80102758 <mmap+0xa8>
+    }
+    else
+    {
+        // can probably just use this instead of the if statement but be safe for now
+        int i;
+        mmapped_region *active = p->first_region;
+8010270c:	8b 96 80 00 00 00    	mov    0x80(%esi),%edx
+
+        for (i = 0; i < p->nregions; i++)
+80102712:	7e 2b                	jle    8010273f <mmap+0x8f>
+80102714:	bf 00 00 00 40       	mov    $0x40000000,%edi
+80102719:	31 c9                	xor    %ecx,%ecx
+8010271b:	90                   	nop
+8010271c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        {
+            active = active->next;
+80102720:	8b 12                	mov    (%edx),%edx
+        for (i = 0; i < p->nregions; i++)
+80102722:	83 c1 01             	add    $0x1,%ecx
+            total_length += PGROUNDUP(active->length);
+80102725:	8b 42 08             	mov    0x8(%edx),%eax
+80102728:	05 ff 0f 00 00       	add    $0xfff,%eax
+8010272d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80102732:	01 45 0c             	add    %eax,0xc(%ebp)
+            r->start_addr += PGROUNDUP(active->length);
+80102735:	01 c7                	add    %eax,%edi
+80102737:	89 7b 04             	mov    %edi,0x4(%ebx)
+        for (i = 0; i < p->nregions; i++)
+8010273a:	39 4e 7c             	cmp    %ecx,0x7c(%esi)
+8010273d:	7f e1                	jg     80102720 <mmap+0x70>
+        }
+        active->next = r;
+8010273f:	89 1a                	mov    %ebx,(%edx)
+80102741:	eb 1b                	jmp    8010275e <mmap+0xae>
+80102743:	90                   	nop
+80102744:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    
+    allocuvm(p->pgdir, start, start+total_length);
+    p->nregions++;
+
+    return r->start_addr; // fix this when I start freeing regions
+}
+80102748:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return (void *)-1;
+8010274b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80102750:	5b                   	pop    %ebx
+80102751:	5e                   	pop    %esi
+80102752:	5f                   	pop    %edi
+80102753:	5d                   	pop    %ebp
+80102754:	c3                   	ret    
+80102755:	8d 76 00             	lea    0x0(%esi),%esi
+        p->first_region = r;
+80102758:	89 9e 80 00 00 00    	mov    %ebx,0x80(%esi)
+    uint start = (uint)r->start_addr;
+8010275e:	8b 53 04             	mov    0x4(%ebx),%edx
+    allocuvm(p->pgdir, start, start+total_length);
+80102761:	8b 45 0c             	mov    0xc(%ebp),%eax
+80102764:	83 ec 04             	sub    $0x4,%esp
+80102767:	01 d0                	add    %edx,%eax
+80102769:	50                   	push   %eax
+8010276a:	52                   	push   %edx
+8010276b:	ff 76 04             	pushl  0x4(%esi)
+8010276e:	e8 ad 47 00 00       	call   80106f20 <allocuvm>
+    p->nregions++;
+80102773:	83 46 7c 01          	addl   $0x1,0x7c(%esi)
+    return r->start_addr; // fix this when I start freeing regions
+80102777:	83 c4 10             	add    $0x10,%esp
+8010277a:	8b 43 04             	mov    0x4(%ebx),%eax
+}
+8010277d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102780:	5b                   	pop    %ebx
+80102781:	5e                   	pop    %esi
+80102782:	5f                   	pop    %edi
+80102783:	5d                   	pop    %ebp
+80102784:	c3                   	ret    
+80102785:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102789:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102790 <munmap>:
+
+int munmap(void *addr, int length)
+{
+80102790:	55                   	push   %ebp
+80102791:	89 e5                	mov    %esp,%ebp
+80102793:	57                   	push   %edi
+80102794:	56                   	push   %esi
+80102795:	53                   	push   %ebx
+80102796:	83 ec 1c             	sub    $0x1c,%esp
+80102799:	8b 7d 08             	mov    0x8(%ebp),%edi
+8010279c:	8b 75 0c             	mov    0xc(%ebp),%esi
+    struct proc *p = myproc();
+8010279f:	e8 4c 13 00 00       	call   80103af0 <myproc>
+    if (p->nregions == 0)
+801027a4:	8b 48 7c             	mov    0x7c(%eax),%ecx
+801027a7:	83 f9 00             	cmp    $0x0,%ecx
+801027aa:	0f 84 80 00 00 00    	je     80102830 <munmap+0xa0>
+801027b0:	89 c2                	mov    %eax,%edx
+    {
+        return -1;
+    }
+
+    mmapped_region *active = p->first_region;
+801027b2:	8b 98 80 00 00 00    	mov    0x80(%eax),%ebx
+    mmapped_region *previous = 0;
+    int counter = 0;
+
+    while (counter < p->nregions)
+801027b8:	7e 76                	jle    80102830 <munmap+0xa0>
+    int counter = 0;
+801027ba:	31 c0                	xor    %eax,%eax
+801027bc:	eb 0f                	jmp    801027cd <munmap+0x3d>
+801027be:	66 90                	xchg   %ax,%ax
+
+                return 42;
+            }
+        }
+
+        if (active->next == 0)
+801027c0:	8b 1b                	mov    (%ebx),%ebx
+801027c2:	85 db                	test   %ebx,%ebx
+801027c4:	74 6a                	je     80102830 <munmap+0xa0>
+        {
+            return -1;
+        }
+        // previous = active;
+        active = active->next;
+        counter++;
+801027c6:	83 c0 01             	add    $0x1,%eax
+    while (counter < p->nregions)
+801027c9:	39 c1                	cmp    %eax,%ecx
+801027cb:	74 63                	je     80102830 <munmap+0xa0>
+        if ((active->start_addr) == addr)
+801027cd:	39 7b 04             	cmp    %edi,0x4(%ebx)
+801027d0:	75 ee                	jne    801027c0 <munmap+0x30>
+            if ((active->length) == length)
+801027d2:	39 73 08             	cmp    %esi,0x8(%ebx)
+801027d5:	75 e9                	jne    801027c0 <munmap+0x30>
+                deallocuvm(p->pgdir, PGROUNDUP((int)addr + length), PGROUNDUP((int)addr));
+801027d7:	8d 87 ff 0f 00 00    	lea    0xfff(%edi),%eax
+801027dd:	83 ec 04             	sub    $0x4,%esp
+801027e0:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+801027e3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801027e8:	50                   	push   %eax
+801027e9:	8d 84 37 ff 0f 00 00 	lea    0xfff(%edi,%esi,1),%eax
+801027f0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801027f5:	50                   	push   %eax
+801027f6:	ff 72 04             	pushl  0x4(%edx)
+801027f9:	e8 52 48 00 00       	call   80107050 <deallocuvm>
+                    p->first_region = active->next;
+801027fe:	8b 03                	mov    (%ebx),%eax
+80102800:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80102803:	89 82 80 00 00 00    	mov    %eax,0x80(%edx)
+                kmfree(active);
+80102809:	89 1c 24             	mov    %ebx,(%esp)
+8010280c:	e8 2f fd ff ff       	call   80102540 <kmfree>
+                p->nregions--;
+80102811:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+                return 42;
+80102814:	83 c4 10             	add    $0x10,%esp
+80102817:	b8 2a 00 00 00       	mov    $0x2a,%eax
+                p->nregions--;
+8010281c:	83 6a 7c 01          	subl   $0x1,0x7c(%edx)
+    }
+
+    return -1;
+80102820:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102823:	5b                   	pop    %ebx
+80102824:	5e                   	pop    %esi
+80102825:	5f                   	pop    %edi
+80102826:	5d                   	pop    %ebp
+80102827:	c3                   	ret    
+80102828:	90                   	nop
+80102829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102830:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return -1;
+80102833:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80102838:	5b                   	pop    %ebx
+80102839:	5e                   	pop    %esi
+8010283a:	5f                   	pop    %edi
+8010283b:	5d                   	pop    %ebp
+8010283c:	c3                   	ret    
+8010283d:	66 90                	xchg   %ax,%ax
+8010283f:	90                   	nop
+
+80102840 <kbdgetc>:
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102840:	ba 64 00 00 00       	mov    $0x64,%edx
+80102845:	ec                   	in     (%dx),%al
+    normalmap, shiftmap, ctlmap, ctlmap
+  };
+  uint st, data, c;
+
+  st = inb(KBSTATP);
+  if((st & KBS_DIB) == 0)
+80102846:	a8 01                	test   $0x1,%al
+80102848:	0f 84 c2 00 00 00    	je     80102910 <kbdgetc+0xd0>
+8010284e:	ba 60 00 00 00       	mov    $0x60,%edx
+80102853:	ec                   	in     (%dx),%al
+    return -1;
+  data = inb(KBDATAP);
+80102854:	0f b6 d0             	movzbl %al,%edx
+80102857:	8b 0d c0 a5 10 80    	mov    0x8010a5c0,%ecx
+
+  if(data == 0xE0){
+8010285d:	81 fa e0 00 00 00    	cmp    $0xe0,%edx
+80102863:	0f 84 7f 00 00 00    	je     801028e8 <kbdgetc+0xa8>
+{
+80102869:	55                   	push   %ebp
+8010286a:	89 e5                	mov    %esp,%ebp
+8010286c:	53                   	push   %ebx
+8010286d:	89 cb                	mov    %ecx,%ebx
+8010286f:	83 e3 40             	and    $0x40,%ebx
+    shift |= E0ESC;
+    return 0;
+  } else if(data & 0x80){
+80102872:	84 c0                	test   %al,%al
+80102874:	78 4a                	js     801028c0 <kbdgetc+0x80>
+    // Key released
+    data = (shift & E0ESC ? data : data & 0x7F);
+    shift &= ~(shiftcode[data] | E0ESC);
+    return 0;
+  } else if(shift & E0ESC){
+80102876:	85 db                	test   %ebx,%ebx
+80102878:	74 09                	je     80102883 <kbdgetc+0x43>
+    // Last character was an E0 escape; or with 0x80
+    data |= 0x80;
+8010287a:	83 c8 80             	or     $0xffffff80,%eax
+    shift &= ~E0ESC;
+8010287d:	83 e1 bf             	and    $0xffffffbf,%ecx
+    data |= 0x80;
+80102880:	0f b6 d0             	movzbl %al,%edx
+  }
+
+  shift |= shiftcode[data];
+80102883:	0f b6 82 80 77 10 80 	movzbl -0x7fef8880(%edx),%eax
+8010288a:	09 c1                	or     %eax,%ecx
+  shift ^= togglecode[data];
+8010288c:	0f b6 82 80 76 10 80 	movzbl -0x7fef8980(%edx),%eax
+80102893:	31 c1                	xor    %eax,%ecx
+  c = charcode[shift & (CTL | SHIFT)][data];
+80102895:	89 c8                	mov    %ecx,%eax
+  shift ^= togglecode[data];
+80102897:	89 0d c0 a5 10 80    	mov    %ecx,0x8010a5c0
+  c = charcode[shift & (CTL | SHIFT)][data];
+8010289d:	83 e0 03             	and    $0x3,%eax
+  if(shift & CAPSLOCK){
+801028a0:	83 e1 08             	and    $0x8,%ecx
+  c = charcode[shift & (CTL | SHIFT)][data];
+801028a3:	8b 04 85 60 76 10 80 	mov    -0x7fef89a0(,%eax,4),%eax
+801028aa:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
+  if(shift & CAPSLOCK){
+801028ae:	74 31                	je     801028e1 <kbdgetc+0xa1>
+    if('a' <= c && c <= 'z')
+801028b0:	8d 50 9f             	lea    -0x61(%eax),%edx
+801028b3:	83 fa 19             	cmp    $0x19,%edx
+801028b6:	77 40                	ja     801028f8 <kbdgetc+0xb8>
+      c += 'A' - 'a';
+801028b8:	83 e8 20             	sub    $0x20,%eax
+    else if('A' <= c && c <= 'Z')
+      c += 'a' - 'A';
+  }
+  return c;
+}
+801028bb:	5b                   	pop    %ebx
+801028bc:	5d                   	pop    %ebp
+801028bd:	c3                   	ret    
+801028be:	66 90                	xchg   %ax,%ax
+    data = (shift & E0ESC ? data : data & 0x7F);
+801028c0:	83 e0 7f             	and    $0x7f,%eax
+801028c3:	85 db                	test   %ebx,%ebx
+801028c5:	0f 44 d0             	cmove  %eax,%edx
+    shift &= ~(shiftcode[data] | E0ESC);
+801028c8:	0f b6 82 80 77 10 80 	movzbl -0x7fef8880(%edx),%eax
+801028cf:	83 c8 40             	or     $0x40,%eax
+801028d2:	0f b6 c0             	movzbl %al,%eax
+801028d5:	f7 d0                	not    %eax
+801028d7:	21 c1                	and    %eax,%ecx
+    return 0;
+801028d9:	31 c0                	xor    %eax,%eax
+    shift &= ~(shiftcode[data] | E0ESC);
+801028db:	89 0d c0 a5 10 80    	mov    %ecx,0x8010a5c0
+}
+801028e1:	5b                   	pop    %ebx
+801028e2:	5d                   	pop    %ebp
+801028e3:	c3                   	ret    
+801028e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    shift |= E0ESC;
+801028e8:	83 c9 40             	or     $0x40,%ecx
+    return 0;
+801028eb:	31 c0                	xor    %eax,%eax
+    shift |= E0ESC;
+801028ed:	89 0d c0 a5 10 80    	mov    %ecx,0x8010a5c0
+    return 0;
+801028f3:	c3                   	ret    
+801028f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    else if('A' <= c && c <= 'Z')
+801028f8:	8d 48 bf             	lea    -0x41(%eax),%ecx
+      c += 'a' - 'A';
+801028fb:	8d 50 20             	lea    0x20(%eax),%edx
+}
+801028fe:	5b                   	pop    %ebx
+      c += 'a' - 'A';
+801028ff:	83 f9 1a             	cmp    $0x1a,%ecx
+80102902:	0f 42 c2             	cmovb  %edx,%eax
+}
+80102905:	5d                   	pop    %ebp
+80102906:	c3                   	ret    
+80102907:	89 f6                	mov    %esi,%esi
+80102909:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    return -1;
+80102910:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80102915:	c3                   	ret    
+80102916:	8d 76 00             	lea    0x0(%esi),%esi
+80102919:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102920 <kbdintr>:
+
+void
+kbdintr(void)
+{
+80102920:	55                   	push   %ebp
+80102921:	89 e5                	mov    %esp,%ebp
+80102923:	83 ec 14             	sub    $0x14,%esp
+  consoleintr(kbdgetc);
+80102926:	68 40 28 10 80       	push   $0x80102840
+8010292b:	e8 e0 de ff ff       	call   80100810 <consoleintr>
+}
+80102930:	83 c4 10             	add    $0x10,%esp
+80102933:	c9                   	leave  
+80102934:	c3                   	ret    
+80102935:	66 90                	xchg   %ax,%ax
+80102937:	66 90                	xchg   %ax,%ax
+80102939:	66 90                	xchg   %ax,%ax
+8010293b:	66 90                	xchg   %ax,%ax
+8010293d:	66 90                	xchg   %ax,%ax
+8010293f:	90                   	nop
+
+80102940 <lapicinit>:
+}
+
+void
+lapicinit(void)
+{
+  if(!lapic)
+80102940:	a1 9c 26 11 80       	mov    0x8011269c,%eax
+{
+80102945:	55                   	push   %ebp
+80102946:	89 e5                	mov    %esp,%ebp
+  if(!lapic)
+80102948:	85 c0                	test   %eax,%eax
+8010294a:	0f 84 c8 00 00 00    	je     80102a18 <lapicinit+0xd8>
+  lapic[index] = value;
+80102950:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
+80102957:	01 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010295a:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+8010295d:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
+80102964:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102967:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+8010296a:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
+80102971:	00 02 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102974:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102977:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
+8010297e:	96 98 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102981:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102984:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
+8010298b:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010298e:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102991:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
+80102998:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010299b:	8b 50 20             	mov    0x20(%eax),%edx
+  lapicw(LINT0, MASKED);
+  lapicw(LINT1, MASKED);
+
+  // Disable performance counter overflow interrupts
+  // on machines that provide that interrupt entry.
+  if(((lapic[VER]>>16) & 0xFF) >= 4)
+8010299e:	8b 50 30             	mov    0x30(%eax),%edx
+801029a1:	c1 ea 10             	shr    $0x10,%edx
+801029a4:	80 fa 03             	cmp    $0x3,%dl
+801029a7:	77 77                	ja     80102a20 <lapicinit+0xe0>
+  lapic[index] = value;
+801029a9:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
+801029b0:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801029b3:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801029b6:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+801029bd:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801029c0:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801029c3:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+801029ca:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801029cd:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801029d0:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+801029d7:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801029da:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801029dd:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
+801029e4:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801029e7:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801029ea:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
+801029f1:	85 08 00 
+  lapic[ID];  // wait for write to finish, by reading
+801029f4:	8b 50 20             	mov    0x20(%eax),%edx
+801029f7:	89 f6                	mov    %esi,%esi
+801029f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  lapicw(EOI, 0);
+
+  // Send an Init Level De-Assert to synchronise arbitration ID's.
+  lapicw(ICRHI, 0);
+  lapicw(ICRLO, BCAST | INIT | LEVEL);
+  while(lapic[ICRLO] & DELIVS)
+80102a00:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
+80102a06:	80 e6 10             	and    $0x10,%dh
+80102a09:	75 f5                	jne    80102a00 <lapicinit+0xc0>
+  lapic[index] = value;
+80102a0b:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
+80102a12:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102a15:	8b 40 20             	mov    0x20(%eax),%eax
+    ;
+
+  // Enable interrupts on the APIC (but not on the processor).
+  lapicw(TPR, 0);
+}
+80102a18:	5d                   	pop    %ebp
+80102a19:	c3                   	ret    
+80102a1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  lapic[index] = value;
+80102a20:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
+80102a27:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102a2a:	8b 50 20             	mov    0x20(%eax),%edx
+80102a2d:	e9 77 ff ff ff       	jmp    801029a9 <lapicinit+0x69>
+80102a32:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102a39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102a40 <lapicid>:
+
+int
+lapicid(void)
+{
+  if (!lapic)
+80102a40:	8b 15 9c 26 11 80    	mov    0x8011269c,%edx
+{
+80102a46:	55                   	push   %ebp
+80102a47:	31 c0                	xor    %eax,%eax
+80102a49:	89 e5                	mov    %esp,%ebp
+  if (!lapic)
+80102a4b:	85 d2                	test   %edx,%edx
+80102a4d:	74 06                	je     80102a55 <lapicid+0x15>
+    return 0;
+  return lapic[ID] >> 24;
+80102a4f:	8b 42 20             	mov    0x20(%edx),%eax
+80102a52:	c1 e8 18             	shr    $0x18,%eax
+}
+80102a55:	5d                   	pop    %ebp
+80102a56:	c3                   	ret    
+80102a57:	89 f6                	mov    %esi,%esi
+80102a59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102a60 <lapiceoi>:
+
+// Acknowledge interrupt.
+void
+lapiceoi(void)
+{
+  if(lapic)
+80102a60:	a1 9c 26 11 80       	mov    0x8011269c,%eax
+{
+80102a65:	55                   	push   %ebp
+80102a66:	89 e5                	mov    %esp,%ebp
+  if(lapic)
+80102a68:	85 c0                	test   %eax,%eax
+80102a6a:	74 0d                	je     80102a79 <lapiceoi+0x19>
+  lapic[index] = value;
+80102a6c:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+80102a73:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102a76:	8b 40 20             	mov    0x20(%eax),%eax
+    lapicw(EOI, 0);
+}
+80102a79:	5d                   	pop    %ebp
+80102a7a:	c3                   	ret    
+80102a7b:	90                   	nop
+80102a7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102a80 <microdelay>:
+
+// Spin for a given number of microseconds.
+// On real hardware would want to tune this dynamically.
+void
+microdelay(int us)
+{
+80102a80:	55                   	push   %ebp
+80102a81:	89 e5                	mov    %esp,%ebp
+}
+80102a83:	5d                   	pop    %ebp
+80102a84:	c3                   	ret    
+80102a85:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102a89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102a90 <lapicstartap>:
+
+// Start additional processor running entry code at addr.
+// See Appendix B of MultiProcessor Specification.
+void
+lapicstartap(uchar apicid, uint addr)
+{
+80102a90:	55                   	push   %ebp
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102a91:	b8 0f 00 00 00       	mov    $0xf,%eax
+80102a96:	ba 70 00 00 00       	mov    $0x70,%edx
+80102a9b:	89 e5                	mov    %esp,%ebp
+80102a9d:	53                   	push   %ebx
+80102a9e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80102aa1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102aa4:	ee                   	out    %al,(%dx)
+80102aa5:	b8 0a 00 00 00       	mov    $0xa,%eax
+80102aaa:	ba 71 00 00 00       	mov    $0x71,%edx
+80102aaf:	ee                   	out    %al,(%dx)
+  // and the warm reset vector (DWORD based at 40:67) to point at
+  // the AP startup code prior to the [universal startup algorithm]."
+  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
+  outb(CMOS_PORT+1, 0x0A);
+  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
+  wrv[0] = 0;
+80102ab0:	31 c0                	xor    %eax,%eax
+  wrv[1] = addr >> 4;
+
+  // "Universal startup algorithm."
+  // Send INIT (level-triggered) interrupt to reset other CPU.
+  lapicw(ICRHI, apicid<<24);
+80102ab2:	c1 e3 18             	shl    $0x18,%ebx
+  wrv[0] = 0;
+80102ab5:	66 a3 67 04 00 80    	mov    %ax,0x80000467
+  wrv[1] = addr >> 4;
+80102abb:	89 c8                	mov    %ecx,%eax
+  // when it is in the halted state due to an INIT.  So the second
+  // should be ignored, but it is part of the official Intel algorithm.
+  // Bochs complains about the second one.  Too bad for Bochs.
+  for(i = 0; i < 2; i++){
+    lapicw(ICRHI, apicid<<24);
+    lapicw(ICRLO, STARTUP | (addr>>12));
+80102abd:	c1 e9 0c             	shr    $0xc,%ecx
+  wrv[1] = addr >> 4;
+80102ac0:	c1 e8 04             	shr    $0x4,%eax
+  lapicw(ICRHI, apicid<<24);
+80102ac3:	89 da                	mov    %ebx,%edx
+    lapicw(ICRLO, STARTUP | (addr>>12));
+80102ac5:	80 cd 06             	or     $0x6,%ch
+  wrv[1] = addr >> 4;
+80102ac8:	66 a3 69 04 00 80    	mov    %ax,0x80000469
+  lapic[index] = value;
+80102ace:	a1 9c 26 11 80       	mov    0x8011269c,%eax
+80102ad3:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+80102ad9:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+80102adc:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
+80102ae3:	c5 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102ae6:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+80102ae9:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
+80102af0:	85 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102af3:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+80102af6:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+80102afc:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+80102aff:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+80102b05:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+80102b08:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+80102b0e:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102b11:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+80102b17:	8b 40 20             	mov    0x20(%eax),%eax
+    microdelay(200);
+  }
+}
+80102b1a:	5b                   	pop    %ebx
+80102b1b:	5d                   	pop    %ebp
+80102b1c:	c3                   	ret    
+80102b1d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102b20 <cmostime>:
+}
+
+// qemu seems to use 24-hour GWT and the values are BCD encoded
+void
+cmostime(struct rtcdate *r)
+{
+80102b20:	55                   	push   %ebp
+80102b21:	b8 0b 00 00 00       	mov    $0xb,%eax
+80102b26:	ba 70 00 00 00       	mov    $0x70,%edx
+80102b2b:	89 e5                	mov    %esp,%ebp
+80102b2d:	57                   	push   %edi
+80102b2e:	56                   	push   %esi
+80102b2f:	53                   	push   %ebx
+80102b30:	83 ec 4c             	sub    $0x4c,%esp
+80102b33:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102b34:	ba 71 00 00 00       	mov    $0x71,%edx
+80102b39:	ec                   	in     (%dx),%al
+80102b3a:	83 e0 04             	and    $0x4,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102b3d:	bb 70 00 00 00       	mov    $0x70,%ebx
+80102b42:	88 45 b3             	mov    %al,-0x4d(%ebp)
+80102b45:	8d 76 00             	lea    0x0(%esi),%esi
+80102b48:	31 c0                	xor    %eax,%eax
+80102b4a:	89 da                	mov    %ebx,%edx
+80102b4c:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102b4d:	b9 71 00 00 00       	mov    $0x71,%ecx
+80102b52:	89 ca                	mov    %ecx,%edx
+80102b54:	ec                   	in     (%dx),%al
+80102b55:	88 45 b7             	mov    %al,-0x49(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102b58:	89 da                	mov    %ebx,%edx
+80102b5a:	b8 02 00 00 00       	mov    $0x2,%eax
+80102b5f:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102b60:	89 ca                	mov    %ecx,%edx
+80102b62:	ec                   	in     (%dx),%al
+80102b63:	88 45 b6             	mov    %al,-0x4a(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102b66:	89 da                	mov    %ebx,%edx
+80102b68:	b8 04 00 00 00       	mov    $0x4,%eax
+80102b6d:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102b6e:	89 ca                	mov    %ecx,%edx
+80102b70:	ec                   	in     (%dx),%al
+80102b71:	88 45 b5             	mov    %al,-0x4b(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102b74:	89 da                	mov    %ebx,%edx
+80102b76:	b8 07 00 00 00       	mov    $0x7,%eax
+80102b7b:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102b7c:	89 ca                	mov    %ecx,%edx
+80102b7e:	ec                   	in     (%dx),%al
+80102b7f:	88 45 b4             	mov    %al,-0x4c(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102b82:	89 da                	mov    %ebx,%edx
+80102b84:	b8 08 00 00 00       	mov    $0x8,%eax
+80102b89:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102b8a:	89 ca                	mov    %ecx,%edx
+80102b8c:	ec                   	in     (%dx),%al
+80102b8d:	89 c7                	mov    %eax,%edi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102b8f:	89 da                	mov    %ebx,%edx
+80102b91:	b8 09 00 00 00       	mov    $0x9,%eax
+80102b96:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102b97:	89 ca                	mov    %ecx,%edx
+80102b99:	ec                   	in     (%dx),%al
+80102b9a:	89 c6                	mov    %eax,%esi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102b9c:	89 da                	mov    %ebx,%edx
+80102b9e:	b8 0a 00 00 00       	mov    $0xa,%eax
+80102ba3:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102ba4:	89 ca                	mov    %ecx,%edx
+80102ba6:	ec                   	in     (%dx),%al
+  bcd = (sb & (1 << 2)) == 0;
+
+  // make sure CMOS doesn't modify time while we read it
+  for(;;) {
+    fill_rtcdate(&t1);
+    if(cmos_read(CMOS_STATA) & CMOS_UIP)
+80102ba7:	84 c0                	test   %al,%al
+80102ba9:	78 9d                	js     80102b48 <cmostime+0x28>
+  return inb(CMOS_RETURN);
+80102bab:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
+80102baf:	89 fa                	mov    %edi,%edx
+80102bb1:	0f b6 fa             	movzbl %dl,%edi
+80102bb4:	89 f2                	mov    %esi,%edx
+80102bb6:	0f b6 f2             	movzbl %dl,%esi
+80102bb9:	89 7d c8             	mov    %edi,-0x38(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102bbc:	89 da                	mov    %ebx,%edx
+80102bbe:	89 75 cc             	mov    %esi,-0x34(%ebp)
+80102bc1:	89 45 b8             	mov    %eax,-0x48(%ebp)
+80102bc4:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
+80102bc8:	89 45 bc             	mov    %eax,-0x44(%ebp)
+80102bcb:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
+80102bcf:	89 45 c0             	mov    %eax,-0x40(%ebp)
+80102bd2:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
+80102bd6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+80102bd9:	31 c0                	xor    %eax,%eax
+80102bdb:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102bdc:	89 ca                	mov    %ecx,%edx
+80102bde:	ec                   	in     (%dx),%al
+80102bdf:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102be2:	89 da                	mov    %ebx,%edx
+80102be4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+80102be7:	b8 02 00 00 00       	mov    $0x2,%eax
+80102bec:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102bed:	89 ca                	mov    %ecx,%edx
+80102bef:	ec                   	in     (%dx),%al
+80102bf0:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102bf3:	89 da                	mov    %ebx,%edx
+80102bf5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+80102bf8:	b8 04 00 00 00       	mov    $0x4,%eax
+80102bfd:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102bfe:	89 ca                	mov    %ecx,%edx
+80102c00:	ec                   	in     (%dx),%al
+80102c01:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102c04:	89 da                	mov    %ebx,%edx
+80102c06:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80102c09:	b8 07 00 00 00       	mov    $0x7,%eax
+80102c0e:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102c0f:	89 ca                	mov    %ecx,%edx
+80102c11:	ec                   	in     (%dx),%al
+80102c12:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102c15:	89 da                	mov    %ebx,%edx
+80102c17:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80102c1a:	b8 08 00 00 00       	mov    $0x8,%eax
+80102c1f:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102c20:	89 ca                	mov    %ecx,%edx
+80102c22:	ec                   	in     (%dx),%al
+80102c23:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102c26:	89 da                	mov    %ebx,%edx
+80102c28:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80102c2b:	b8 09 00 00 00       	mov    $0x9,%eax
+80102c30:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102c31:	89 ca                	mov    %ecx,%edx
+80102c33:	ec                   	in     (%dx),%al
+80102c34:	0f b6 c0             	movzbl %al,%eax
+        continue;
+    fill_rtcdate(&t2);
+    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
+80102c37:	83 ec 04             	sub    $0x4,%esp
+  return inb(CMOS_RETURN);
+80102c3a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
+80102c3d:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80102c40:	6a 18                	push   $0x18
+80102c42:	50                   	push   %eax
+80102c43:	8d 45 b8             	lea    -0x48(%ebp),%eax
+80102c46:	50                   	push   %eax
+80102c47:	e8 c4 1b 00 00       	call   80104810 <memcmp>
+80102c4c:	83 c4 10             	add    $0x10,%esp
+80102c4f:	85 c0                	test   %eax,%eax
+80102c51:	0f 85 f1 fe ff ff    	jne    80102b48 <cmostime+0x28>
+      break;
+  }
+
+  // convert
+  if(bcd) {
+80102c57:	80 7d b3 00          	cmpb   $0x0,-0x4d(%ebp)
+80102c5b:	75 78                	jne    80102cd5 <cmostime+0x1b5>
+#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
+    CONV(second);
+80102c5d:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80102c60:	89 c2                	mov    %eax,%edx
+80102c62:	83 e0 0f             	and    $0xf,%eax
+80102c65:	c1 ea 04             	shr    $0x4,%edx
+80102c68:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102c6b:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102c6e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+    CONV(minute);
+80102c71:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80102c74:	89 c2                	mov    %eax,%edx
+80102c76:	83 e0 0f             	and    $0xf,%eax
+80102c79:	c1 ea 04             	shr    $0x4,%edx
+80102c7c:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102c7f:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102c82:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    CONV(hour  );
+80102c85:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102c88:	89 c2                	mov    %eax,%edx
+80102c8a:	83 e0 0f             	and    $0xf,%eax
+80102c8d:	c1 ea 04             	shr    $0x4,%edx
+80102c90:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102c93:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102c96:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    CONV(day   );
+80102c99:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102c9c:	89 c2                	mov    %eax,%edx
+80102c9e:	83 e0 0f             	and    $0xf,%eax
+80102ca1:	c1 ea 04             	shr    $0x4,%edx
+80102ca4:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102ca7:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102caa:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    CONV(month );
+80102cad:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80102cb0:	89 c2                	mov    %eax,%edx
+80102cb2:	83 e0 0f             	and    $0xf,%eax
+80102cb5:	c1 ea 04             	shr    $0x4,%edx
+80102cb8:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102cbb:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102cbe:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    CONV(year  );
+80102cc1:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102cc4:	89 c2                	mov    %eax,%edx
+80102cc6:	83 e0 0f             	and    $0xf,%eax
+80102cc9:	c1 ea 04             	shr    $0x4,%edx
+80102ccc:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102ccf:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102cd2:	89 45 cc             	mov    %eax,-0x34(%ebp)
+#undef     CONV
+  }
+
+  *r = t1;
+80102cd5:	8b 75 08             	mov    0x8(%ebp),%esi
+80102cd8:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80102cdb:	89 06                	mov    %eax,(%esi)
+80102cdd:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80102ce0:	89 46 04             	mov    %eax,0x4(%esi)
+80102ce3:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102ce6:	89 46 08             	mov    %eax,0x8(%esi)
+80102ce9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102cec:	89 46 0c             	mov    %eax,0xc(%esi)
+80102cef:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80102cf2:	89 46 10             	mov    %eax,0x10(%esi)
+80102cf5:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102cf8:	89 46 14             	mov    %eax,0x14(%esi)
+  r->year += 2000;
+80102cfb:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
+}
+80102d02:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102d05:	5b                   	pop    %ebx
+80102d06:	5e                   	pop    %esi
+80102d07:	5f                   	pop    %edi
+80102d08:	5d                   	pop    %ebp
+80102d09:	c3                   	ret    
+80102d0a:	66 90                	xchg   %ax,%ax
+80102d0c:	66 90                	xchg   %ax,%ax
+80102d0e:	66 90                	xchg   %ax,%ax
+
+80102d10 <install_trans>:
+static void
+install_trans(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102d10:	8b 0d e8 26 11 80    	mov    0x801126e8,%ecx
+80102d16:	85 c9                	test   %ecx,%ecx
+80102d18:	0f 8e 8a 00 00 00    	jle    80102da8 <install_trans+0x98>
+{
+80102d1e:	55                   	push   %ebp
+80102d1f:	89 e5                	mov    %esp,%ebp
+80102d21:	57                   	push   %edi
+80102d22:	56                   	push   %esi
+80102d23:	53                   	push   %ebx
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102d24:	31 db                	xor    %ebx,%ebx
+{
+80102d26:	83 ec 0c             	sub    $0xc,%esp
+80102d29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
+80102d30:	a1 d4 26 11 80       	mov    0x801126d4,%eax
+80102d35:	83 ec 08             	sub    $0x8,%esp
+80102d38:	01 d8                	add    %ebx,%eax
+80102d3a:	83 c0 01             	add    $0x1,%eax
+80102d3d:	50                   	push   %eax
+80102d3e:	ff 35 e4 26 11 80    	pushl  0x801126e4
+80102d44:	e8 87 d3 ff ff       	call   801000d0 <bread>
+80102d49:	89 c7                	mov    %eax,%edi
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+80102d4b:	58                   	pop    %eax
+80102d4c:	5a                   	pop    %edx
+80102d4d:	ff 34 9d ec 26 11 80 	pushl  -0x7feed914(,%ebx,4)
+80102d54:	ff 35 e4 26 11 80    	pushl  0x801126e4
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102d5a:	83 c3 01             	add    $0x1,%ebx
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+80102d5d:	e8 6e d3 ff ff       	call   801000d0 <bread>
+80102d62:	89 c6                	mov    %eax,%esi
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+80102d64:	8d 47 5c             	lea    0x5c(%edi),%eax
+80102d67:	83 c4 0c             	add    $0xc,%esp
+80102d6a:	68 00 02 00 00       	push   $0x200
+80102d6f:	50                   	push   %eax
+80102d70:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102d73:	50                   	push   %eax
+80102d74:	e8 f7 1a 00 00       	call   80104870 <memmove>
+    bwrite(dbuf);  // write dst to disk
+80102d79:	89 34 24             	mov    %esi,(%esp)
+80102d7c:	e8 1f d4 ff ff       	call   801001a0 <bwrite>
+    brelse(lbuf);
+80102d81:	89 3c 24             	mov    %edi,(%esp)
+80102d84:	e8 57 d4 ff ff       	call   801001e0 <brelse>
+    brelse(dbuf);
+80102d89:	89 34 24             	mov    %esi,(%esp)
+80102d8c:	e8 4f d4 ff ff       	call   801001e0 <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102d91:	83 c4 10             	add    $0x10,%esp
+80102d94:	39 1d e8 26 11 80    	cmp    %ebx,0x801126e8
+80102d9a:	7f 94                	jg     80102d30 <install_trans+0x20>
+  }
+}
+80102d9c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102d9f:	5b                   	pop    %ebx
+80102da0:	5e                   	pop    %esi
+80102da1:	5f                   	pop    %edi
+80102da2:	5d                   	pop    %ebp
+80102da3:	c3                   	ret    
+80102da4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102da8:	f3 c3                	repz ret 
+80102daa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102db0 <write_head>:
+// Write in-memory log header to disk.
+// This is the true point at which the
+// current transaction commits.
+static void
+write_head(void)
+{
+80102db0:	55                   	push   %ebp
+80102db1:	89 e5                	mov    %esp,%ebp
+80102db3:	56                   	push   %esi
+80102db4:	53                   	push   %ebx
+  struct buf *buf = bread(log.dev, log.start);
+80102db5:	83 ec 08             	sub    $0x8,%esp
+80102db8:	ff 35 d4 26 11 80    	pushl  0x801126d4
+80102dbe:	ff 35 e4 26 11 80    	pushl  0x801126e4
+80102dc4:	e8 07 d3 ff ff       	call   801000d0 <bread>
+  struct logheader *hb = (struct logheader *) (buf->data);
+  int i;
+  hb->n = log.lh.n;
+80102dc9:	8b 1d e8 26 11 80    	mov    0x801126e8,%ebx
+  for (i = 0; i < log.lh.n; i++) {
+80102dcf:	83 c4 10             	add    $0x10,%esp
+  struct buf *buf = bread(log.dev, log.start);
+80102dd2:	89 c6                	mov    %eax,%esi
+  for (i = 0; i < log.lh.n; i++) {
+80102dd4:	85 db                	test   %ebx,%ebx
+  hb->n = log.lh.n;
+80102dd6:	89 58 5c             	mov    %ebx,0x5c(%eax)
+  for (i = 0; i < log.lh.n; i++) {
+80102dd9:	7e 16                	jle    80102df1 <write_head+0x41>
+80102ddb:	c1 e3 02             	shl    $0x2,%ebx
+80102dde:	31 d2                	xor    %edx,%edx
+    hb->block[i] = log.lh.block[i];
+80102de0:	8b 8a ec 26 11 80    	mov    -0x7feed914(%edx),%ecx
+80102de6:	89 4c 16 60          	mov    %ecx,0x60(%esi,%edx,1)
+80102dea:	83 c2 04             	add    $0x4,%edx
+  for (i = 0; i < log.lh.n; i++) {
+80102ded:	39 da                	cmp    %ebx,%edx
+80102def:	75 ef                	jne    80102de0 <write_head+0x30>
+  }
+  bwrite(buf);
+80102df1:	83 ec 0c             	sub    $0xc,%esp
+80102df4:	56                   	push   %esi
+80102df5:	e8 a6 d3 ff ff       	call   801001a0 <bwrite>
+  brelse(buf);
+80102dfa:	89 34 24             	mov    %esi,(%esp)
+80102dfd:	e8 de d3 ff ff       	call   801001e0 <brelse>
+}
+80102e02:	83 c4 10             	add    $0x10,%esp
+80102e05:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102e08:	5b                   	pop    %ebx
+80102e09:	5e                   	pop    %esi
+80102e0a:	5d                   	pop    %ebp
+80102e0b:	c3                   	ret    
+80102e0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102e10 <initlog>:
+{
+80102e10:	55                   	push   %ebp
+80102e11:	89 e5                	mov    %esp,%ebp
+80102e13:	53                   	push   %ebx
+80102e14:	83 ec 2c             	sub    $0x2c,%esp
+80102e17:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  initlock(&log.lock, "log");
+80102e1a:	68 80 78 10 80       	push   $0x80107880
+80102e1f:	68 a0 26 11 80       	push   $0x801126a0
+80102e24:	e8 47 17 00 00       	call   80104570 <initlock>
+  readsb(dev, &sb);
+80102e29:	58                   	pop    %eax
+80102e2a:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80102e2d:	5a                   	pop    %edx
+80102e2e:	50                   	push   %eax
+80102e2f:	53                   	push   %ebx
+80102e30:	e8 9b e5 ff ff       	call   801013d0 <readsb>
+  log.size = sb.nlog;
+80102e35:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  log.start = sb.logstart;
+80102e38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  struct buf *buf = bread(log.dev, log.start);
+80102e3b:	59                   	pop    %ecx
+  log.dev = dev;
+80102e3c:	89 1d e4 26 11 80    	mov    %ebx,0x801126e4
+  log.size = sb.nlog;
+80102e42:	89 15 d8 26 11 80    	mov    %edx,0x801126d8
+  log.start = sb.logstart;
+80102e48:	a3 d4 26 11 80       	mov    %eax,0x801126d4
+  struct buf *buf = bread(log.dev, log.start);
+80102e4d:	5a                   	pop    %edx
+80102e4e:	50                   	push   %eax
+80102e4f:	53                   	push   %ebx
+80102e50:	e8 7b d2 ff ff       	call   801000d0 <bread>
+  log.lh.n = lh->n;
+80102e55:	8b 58 5c             	mov    0x5c(%eax),%ebx
+  for (i = 0; i < log.lh.n; i++) {
+80102e58:	83 c4 10             	add    $0x10,%esp
+80102e5b:	85 db                	test   %ebx,%ebx
+  log.lh.n = lh->n;
+80102e5d:	89 1d e8 26 11 80    	mov    %ebx,0x801126e8
+  for (i = 0; i < log.lh.n; i++) {
+80102e63:	7e 1c                	jle    80102e81 <initlog+0x71>
+80102e65:	c1 e3 02             	shl    $0x2,%ebx
+80102e68:	31 d2                	xor    %edx,%edx
+80102e6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    log.lh.block[i] = lh->block[i];
+80102e70:	8b 4c 10 60          	mov    0x60(%eax,%edx,1),%ecx
+80102e74:	83 c2 04             	add    $0x4,%edx
+80102e77:	89 8a e8 26 11 80    	mov    %ecx,-0x7feed918(%edx)
+  for (i = 0; i < log.lh.n; i++) {
+80102e7d:	39 d3                	cmp    %edx,%ebx
+80102e7f:	75 ef                	jne    80102e70 <initlog+0x60>
+  brelse(buf);
+80102e81:	83 ec 0c             	sub    $0xc,%esp
+80102e84:	50                   	push   %eax
+80102e85:	e8 56 d3 ff ff       	call   801001e0 <brelse>
+
+static void
+recover_from_log(void)
+{
+  read_head();
+  install_trans(); // if committed, copy from log to disk
+80102e8a:	e8 81 fe ff ff       	call   80102d10 <install_trans>
+  log.lh.n = 0;
+80102e8f:	c7 05 e8 26 11 80 00 	movl   $0x0,0x801126e8
+80102e96:	00 00 00 
+  write_head(); // clear the log
+80102e99:	e8 12 ff ff ff       	call   80102db0 <write_head>
+}
+80102e9e:	83 c4 10             	add    $0x10,%esp
+80102ea1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102ea4:	c9                   	leave  
+80102ea5:	c3                   	ret    
+80102ea6:	8d 76 00             	lea    0x0(%esi),%esi
+80102ea9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102eb0 <begin_op>:
+}
+
+// called at the start of each FS system call.
+void
+begin_op(void)
+{
+80102eb0:	55                   	push   %ebp
+80102eb1:	89 e5                	mov    %esp,%ebp
+80102eb3:	83 ec 14             	sub    $0x14,%esp
+  acquire(&log.lock);
+80102eb6:	68 a0 26 11 80       	push   $0x801126a0
+80102ebb:	e8 f0 17 00 00       	call   801046b0 <acquire>
+80102ec0:	83 c4 10             	add    $0x10,%esp
+80102ec3:	eb 18                	jmp    80102edd <begin_op+0x2d>
+80102ec5:	8d 76 00             	lea    0x0(%esi),%esi
+  while(1){
+    if(log.committing){
+      sleep(&log, &log.lock);
+80102ec8:	83 ec 08             	sub    $0x8,%esp
+80102ecb:	68 a0 26 11 80       	push   $0x801126a0
+80102ed0:	68 a0 26 11 80       	push   $0x801126a0
+80102ed5:	e8 f6 11 00 00       	call   801040d0 <sleep>
+80102eda:	83 c4 10             	add    $0x10,%esp
+    if(log.committing){
+80102edd:	a1 e0 26 11 80       	mov    0x801126e0,%eax
+80102ee2:	85 c0                	test   %eax,%eax
+80102ee4:	75 e2                	jne    80102ec8 <begin_op+0x18>
+    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
+80102ee6:	a1 dc 26 11 80       	mov    0x801126dc,%eax
+80102eeb:	8b 15 e8 26 11 80    	mov    0x801126e8,%edx
+80102ef1:	83 c0 01             	add    $0x1,%eax
+80102ef4:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
+80102ef7:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
+80102efa:	83 fa 1e             	cmp    $0x1e,%edx
+80102efd:	7f c9                	jg     80102ec8 <begin_op+0x18>
+      // this op might exhaust log space; wait for commit.
+      sleep(&log, &log.lock);
+    } else {
+      log.outstanding += 1;
+      release(&log.lock);
+80102eff:	83 ec 0c             	sub    $0xc,%esp
+      log.outstanding += 1;
+80102f02:	a3 dc 26 11 80       	mov    %eax,0x801126dc
+      release(&log.lock);
+80102f07:	68 a0 26 11 80       	push   $0x801126a0
+80102f0c:	e8 5f 18 00 00       	call   80104770 <release>
+      break;
+    }
+  }
+}
+80102f11:	83 c4 10             	add    $0x10,%esp
+80102f14:	c9                   	leave  
+80102f15:	c3                   	ret    
+80102f16:	8d 76 00             	lea    0x0(%esi),%esi
+80102f19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102f20 <end_op>:
+
+// called at the end of each FS system call.
+// commits if this was the last outstanding operation.
+void
+end_op(void)
+{
+80102f20:	55                   	push   %ebp
+80102f21:	89 e5                	mov    %esp,%ebp
+80102f23:	57                   	push   %edi
+80102f24:	56                   	push   %esi
+80102f25:	53                   	push   %ebx
+80102f26:	83 ec 18             	sub    $0x18,%esp
+  int do_commit = 0;
+
+  acquire(&log.lock);
+80102f29:	68 a0 26 11 80       	push   $0x801126a0
+80102f2e:	e8 7d 17 00 00       	call   801046b0 <acquire>
+  log.outstanding -= 1;
+80102f33:	a1 dc 26 11 80       	mov    0x801126dc,%eax
+  if(log.committing)
+80102f38:	8b 35 e0 26 11 80    	mov    0x801126e0,%esi
+80102f3e:	83 c4 10             	add    $0x10,%esp
+  log.outstanding -= 1;
+80102f41:	8d 58 ff             	lea    -0x1(%eax),%ebx
+  if(log.committing)
+80102f44:	85 f6                	test   %esi,%esi
+  log.outstanding -= 1;
+80102f46:	89 1d dc 26 11 80    	mov    %ebx,0x801126dc
+  if(log.committing)
+80102f4c:	0f 85 1a 01 00 00    	jne    8010306c <end_op+0x14c>
+    panic("log.committing");
+  if(log.outstanding == 0){
+80102f52:	85 db                	test   %ebx,%ebx
+80102f54:	0f 85 ee 00 00 00    	jne    80103048 <end_op+0x128>
+    // begin_op() may be waiting for log space,
+    // and decrementing log.outstanding has decreased
+    // the amount of reserved space.
+    wakeup(&log);
+  }
+  release(&log.lock);
+80102f5a:	83 ec 0c             	sub    $0xc,%esp
+    log.committing = 1;
+80102f5d:	c7 05 e0 26 11 80 01 	movl   $0x1,0x801126e0
+80102f64:	00 00 00 
+  release(&log.lock);
+80102f67:	68 a0 26 11 80       	push   $0x801126a0
+80102f6c:	e8 ff 17 00 00       	call   80104770 <release>
+}
+
+static void
+commit()
+{
+  if (log.lh.n > 0) {
+80102f71:	8b 0d e8 26 11 80    	mov    0x801126e8,%ecx
+80102f77:	83 c4 10             	add    $0x10,%esp
+80102f7a:	85 c9                	test   %ecx,%ecx
+80102f7c:	0f 8e 85 00 00 00    	jle    80103007 <end_op+0xe7>
+    struct buf *to = bread(log.dev, log.start+tail+1); // log block
+80102f82:	a1 d4 26 11 80       	mov    0x801126d4,%eax
+80102f87:	83 ec 08             	sub    $0x8,%esp
+80102f8a:	01 d8                	add    %ebx,%eax
+80102f8c:	83 c0 01             	add    $0x1,%eax
+80102f8f:	50                   	push   %eax
+80102f90:	ff 35 e4 26 11 80    	pushl  0x801126e4
+80102f96:	e8 35 d1 ff ff       	call   801000d0 <bread>
+80102f9b:	89 c6                	mov    %eax,%esi
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+80102f9d:	58                   	pop    %eax
+80102f9e:	5a                   	pop    %edx
+80102f9f:	ff 34 9d ec 26 11 80 	pushl  -0x7feed914(,%ebx,4)
+80102fa6:	ff 35 e4 26 11 80    	pushl  0x801126e4
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102fac:	83 c3 01             	add    $0x1,%ebx
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+80102faf:	e8 1c d1 ff ff       	call   801000d0 <bread>
+80102fb4:	89 c7                	mov    %eax,%edi
+    memmove(to->data, from->data, BSIZE);
+80102fb6:	8d 40 5c             	lea    0x5c(%eax),%eax
+80102fb9:	83 c4 0c             	add    $0xc,%esp
+80102fbc:	68 00 02 00 00       	push   $0x200
+80102fc1:	50                   	push   %eax
+80102fc2:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102fc5:	50                   	push   %eax
+80102fc6:	e8 a5 18 00 00       	call   80104870 <memmove>
+    bwrite(to);  // write the log
+80102fcb:	89 34 24             	mov    %esi,(%esp)
+80102fce:	e8 cd d1 ff ff       	call   801001a0 <bwrite>
+    brelse(from);
+80102fd3:	89 3c 24             	mov    %edi,(%esp)
+80102fd6:	e8 05 d2 ff ff       	call   801001e0 <brelse>
+    brelse(to);
+80102fdb:	89 34 24             	mov    %esi,(%esp)
+80102fde:	e8 fd d1 ff ff       	call   801001e0 <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102fe3:	83 c4 10             	add    $0x10,%esp
+80102fe6:	3b 1d e8 26 11 80    	cmp    0x801126e8,%ebx
+80102fec:	7c 94                	jl     80102f82 <end_op+0x62>
+    write_log();     // Write modified blocks from cache to log
+    write_head();    // Write header to disk -- the real commit
+80102fee:	e8 bd fd ff ff       	call   80102db0 <write_head>
+    install_trans(); // Now install writes to home locations
+80102ff3:	e8 18 fd ff ff       	call   80102d10 <install_trans>
+    log.lh.n = 0;
+80102ff8:	c7 05 e8 26 11 80 00 	movl   $0x0,0x801126e8
+80102fff:	00 00 00 
+    write_head();    // Erase the transaction from the log
+80103002:	e8 a9 fd ff ff       	call   80102db0 <write_head>
+    acquire(&log.lock);
+80103007:	83 ec 0c             	sub    $0xc,%esp
+8010300a:	68 a0 26 11 80       	push   $0x801126a0
+8010300f:	e8 9c 16 00 00       	call   801046b0 <acquire>
+    wakeup(&log);
+80103014:	c7 04 24 a0 26 11 80 	movl   $0x801126a0,(%esp)
+    log.committing = 0;
+8010301b:	c7 05 e0 26 11 80 00 	movl   $0x0,0x801126e0
+80103022:	00 00 00 
+    wakeup(&log);
+80103025:	e8 66 12 00 00       	call   80104290 <wakeup>
+    release(&log.lock);
+8010302a:	c7 04 24 a0 26 11 80 	movl   $0x801126a0,(%esp)
+80103031:	e8 3a 17 00 00       	call   80104770 <release>
+80103036:	83 c4 10             	add    $0x10,%esp
+}
+80103039:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010303c:	5b                   	pop    %ebx
+8010303d:	5e                   	pop    %esi
+8010303e:	5f                   	pop    %edi
+8010303f:	5d                   	pop    %ebp
+80103040:	c3                   	ret    
+80103041:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    wakeup(&log);
+80103048:	83 ec 0c             	sub    $0xc,%esp
+8010304b:	68 a0 26 11 80       	push   $0x801126a0
+80103050:	e8 3b 12 00 00       	call   80104290 <wakeup>
+  release(&log.lock);
+80103055:	c7 04 24 a0 26 11 80 	movl   $0x801126a0,(%esp)
+8010305c:	e8 0f 17 00 00       	call   80104770 <release>
+80103061:	83 c4 10             	add    $0x10,%esp
+}
+80103064:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103067:	5b                   	pop    %ebx
+80103068:	5e                   	pop    %esi
+80103069:	5f                   	pop    %edi
+8010306a:	5d                   	pop    %ebp
+8010306b:	c3                   	ret    
+    panic("log.committing");
+8010306c:	83 ec 0c             	sub    $0xc,%esp
+8010306f:	68 84 78 10 80       	push   $0x80107884
+80103074:	e8 17 d3 ff ff       	call   80100390 <panic>
+80103079:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103080 <log_write>:
+//   modify bp->data[]
+//   log_write(bp)
+//   brelse(bp)
+void
+log_write(struct buf *b)
+{
+80103080:	55                   	push   %ebp
+80103081:	89 e5                	mov    %esp,%ebp
+80103083:	53                   	push   %ebx
+80103084:	83 ec 04             	sub    $0x4,%esp
+  int i;
+
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+80103087:	8b 15 e8 26 11 80    	mov    0x801126e8,%edx
+{
+8010308d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+80103090:	83 fa 1d             	cmp    $0x1d,%edx
+80103093:	0f 8f 9d 00 00 00    	jg     80103136 <log_write+0xb6>
+80103099:	a1 d8 26 11 80       	mov    0x801126d8,%eax
+8010309e:	83 e8 01             	sub    $0x1,%eax
+801030a1:	39 c2                	cmp    %eax,%edx
+801030a3:	0f 8d 8d 00 00 00    	jge    80103136 <log_write+0xb6>
+    panic("too big a transaction");
+  if (log.outstanding < 1)
+801030a9:	a1 dc 26 11 80       	mov    0x801126dc,%eax
+801030ae:	85 c0                	test   %eax,%eax
+801030b0:	0f 8e 8d 00 00 00    	jle    80103143 <log_write+0xc3>
+    panic("log_write outside of trans");
+
+  acquire(&log.lock);
+801030b6:	83 ec 0c             	sub    $0xc,%esp
+801030b9:	68 a0 26 11 80       	push   $0x801126a0
+801030be:	e8 ed 15 00 00       	call   801046b0 <acquire>
+  for (i = 0; i < log.lh.n; i++) {
+801030c3:	8b 0d e8 26 11 80    	mov    0x801126e8,%ecx
+801030c9:	83 c4 10             	add    $0x10,%esp
+801030cc:	83 f9 00             	cmp    $0x0,%ecx
+801030cf:	7e 57                	jle    80103128 <log_write+0xa8>
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+801030d1:	8b 53 08             	mov    0x8(%ebx),%edx
+  for (i = 0; i < log.lh.n; i++) {
+801030d4:	31 c0                	xor    %eax,%eax
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+801030d6:	3b 15 ec 26 11 80    	cmp    0x801126ec,%edx
+801030dc:	75 0b                	jne    801030e9 <log_write+0x69>
+801030de:	eb 38                	jmp    80103118 <log_write+0x98>
+801030e0:	39 14 85 ec 26 11 80 	cmp    %edx,-0x7feed914(,%eax,4)
+801030e7:	74 2f                	je     80103118 <log_write+0x98>
+  for (i = 0; i < log.lh.n; i++) {
+801030e9:	83 c0 01             	add    $0x1,%eax
+801030ec:	39 c1                	cmp    %eax,%ecx
+801030ee:	75 f0                	jne    801030e0 <log_write+0x60>
+      break;
+  }
+  log.lh.block[i] = b->blockno;
+801030f0:	89 14 85 ec 26 11 80 	mov    %edx,-0x7feed914(,%eax,4)
+  if (i == log.lh.n)
+    log.lh.n++;
+801030f7:	83 c0 01             	add    $0x1,%eax
+801030fa:	a3 e8 26 11 80       	mov    %eax,0x801126e8
+  b->flags |= B_DIRTY; // prevent eviction
+801030ff:	83 0b 04             	orl    $0x4,(%ebx)
+  release(&log.lock);
+80103102:	c7 45 08 a0 26 11 80 	movl   $0x801126a0,0x8(%ebp)
+}
+80103109:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010310c:	c9                   	leave  
+  release(&log.lock);
+8010310d:	e9 5e 16 00 00       	jmp    80104770 <release>
+80103112:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  log.lh.block[i] = b->blockno;
+80103118:	89 14 85 ec 26 11 80 	mov    %edx,-0x7feed914(,%eax,4)
+8010311f:	eb de                	jmp    801030ff <log_write+0x7f>
+80103121:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103128:	8b 43 08             	mov    0x8(%ebx),%eax
+8010312b:	a3 ec 26 11 80       	mov    %eax,0x801126ec
+  if (i == log.lh.n)
+80103130:	75 cd                	jne    801030ff <log_write+0x7f>
+80103132:	31 c0                	xor    %eax,%eax
+80103134:	eb c1                	jmp    801030f7 <log_write+0x77>
+    panic("too big a transaction");
+80103136:	83 ec 0c             	sub    $0xc,%esp
+80103139:	68 93 78 10 80       	push   $0x80107893
+8010313e:	e8 4d d2 ff ff       	call   80100390 <panic>
+    panic("log_write outside of trans");
+80103143:	83 ec 0c             	sub    $0xc,%esp
+80103146:	68 a9 78 10 80       	push   $0x801078a9
+8010314b:	e8 40 d2 ff ff       	call   80100390 <panic>
+
+80103150 <mpmain>:
+}
+
+// Common CPU setup code.
+static void
+mpmain(void)
+{
+80103150:	55                   	push   %ebp
+80103151:	89 e5                	mov    %esp,%ebp
+80103153:	53                   	push   %ebx
+80103154:	83 ec 04             	sub    $0x4,%esp
+  cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
+80103157:	e8 74 09 00 00       	call   80103ad0 <cpuid>
+8010315c:	89 c3                	mov    %eax,%ebx
+8010315e:	e8 6d 09 00 00       	call   80103ad0 <cpuid>
+80103163:	83 ec 04             	sub    $0x4,%esp
+80103166:	53                   	push   %ebx
+80103167:	50                   	push   %eax
+80103168:	68 c4 78 10 80       	push   $0x801078c4
+8010316d:	e8 ee d4 ff ff       	call   80100660 <cprintf>
+  idtinit();       // load idt register
+80103172:	e8 49 2a 00 00       	call   80105bc0 <idtinit>
+  xchg(&(mycpu()->started), 1); // tell startothers() we're up
+80103177:	e8 d4 08 00 00       	call   80103a50 <mycpu>
+8010317c:	89 c2                	mov    %eax,%edx
+xchg(volatile uint *addr, uint newval)
+{
+  uint result;
+
+  // The + in "+m" denotes a read-modify-write operand.
+  asm volatile("lock; xchgl %0, %1" :
+8010317e:	b8 01 00 00 00       	mov    $0x1,%eax
+80103183:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
+  scheduler();     // start running processes
+8010318a:	e8 61 0c 00 00       	call   80103df0 <scheduler>
+8010318f:	90                   	nop
+
+80103190 <mpenter>:
+{
+80103190:	55                   	push   %ebp
+80103191:	89 e5                	mov    %esp,%ebp
+80103193:	83 ec 08             	sub    $0x8,%esp
+  switchkvm();
+80103196:	e8 15 3b 00 00       	call   80106cb0 <switchkvm>
+  seginit();
+8010319b:	e8 80 3a 00 00       	call   80106c20 <seginit>
+  lapicinit();
+801031a0:	e8 9b f7 ff ff       	call   80102940 <lapicinit>
+  mpmain();
+801031a5:	e8 a6 ff ff ff       	call   80103150 <mpmain>
+801031aa:	66 90                	xchg   %ax,%ax
+801031ac:	66 90                	xchg   %ax,%ax
+801031ae:	66 90                	xchg   %ax,%ax
+
+801031b0 <main>:
+{
+801031b0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+801031b4:	83 e4 f0             	and    $0xfffffff0,%esp
+801031b7:	ff 71 fc             	pushl  -0x4(%ecx)
+801031ba:	55                   	push   %ebp
+801031bb:	89 e5                	mov    %esp,%ebp
+801031bd:	53                   	push   %ebx
+801031be:	51                   	push   %ecx
+  kinit1(end, P2V(4*1024*1024)); // phys page allocator
+801031bf:	83 ec 08             	sub    $0x8,%esp
+801031c2:	68 00 00 40 80       	push   $0x80400000
+801031c7:	68 c8 56 11 80       	push   $0x801156c8
+801031cc:	e8 2f f2 ff ff       	call   80102400 <kinit1>
+  kvmalloc();      // kernel page table
+801031d1:	e8 aa 3f 00 00       	call   80107180 <kvmalloc>
+  mpinit();        // detect other processors
+801031d6:	e8 75 01 00 00       	call   80103350 <mpinit>
+  lapicinit();     // interrupt controller
+801031db:	e8 60 f7 ff ff       	call   80102940 <lapicinit>
+  seginit();       // segment descriptors
+801031e0:	e8 3b 3a 00 00       	call   80106c20 <seginit>
+  picinit();       // disable pic
+801031e5:	e8 46 03 00 00       	call   80103530 <picinit>
+  ioapicinit();    // another interrupt controller
+801031ea:	e8 41 f0 ff ff       	call   80102230 <ioapicinit>
+  consoleinit();   // console hardware
+801031ef:	e8 cc d7 ff ff       	call   801009c0 <consoleinit>
+  uartinit();      // serial port
+801031f4:	e8 f7 2c 00 00       	call   80105ef0 <uartinit>
+  pinit();         // process table
+801031f9:	e8 32 08 00 00       	call   80103a30 <pinit>
+  tvinit();        // trap vectors
+801031fe:	e8 3d 29 00 00       	call   80105b40 <tvinit>
+  binit();         // buffer cache
+80103203:	e8 38 ce ff ff       	call   80100040 <binit>
+  fileinit();      // file table
+80103208:	e8 53 db ff ff       	call   80100d60 <fileinit>
+  ideinit();       // disk 
+8010320d:	e8 fe ed ff ff       	call   80102010 <ideinit>
+
+  // Write entry code to unused memory at 0x7000.
+  // The linker has placed the image of entryother.S in
+  // _binary_entryother_start.
+  code = P2V(0x7000);
+  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
+80103212:	83 c4 0c             	add    $0xc,%esp
+80103215:	68 8a 00 00 00       	push   $0x8a
+8010321a:	68 8c a4 10 80       	push   $0x8010a48c
+8010321f:	68 00 70 00 80       	push   $0x80007000
+80103224:	e8 47 16 00 00       	call   80104870 <memmove>
+
+  for(c = cpus; c < cpus+ncpu; c++){
+80103229:	69 05 20 2d 11 80 b0 	imul   $0xb0,0x80112d20,%eax
+80103230:	00 00 00 
+80103233:	83 c4 10             	add    $0x10,%esp
+80103236:	05 a0 27 11 80       	add    $0x801127a0,%eax
+8010323b:	3d a0 27 11 80       	cmp    $0x801127a0,%eax
+80103240:	76 71                	jbe    801032b3 <main+0x103>
+80103242:	bb a0 27 11 80       	mov    $0x801127a0,%ebx
+80103247:	89 f6                	mov    %esi,%esi
+80103249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    if(c == mycpu())  // We've started already.
+80103250:	e8 fb 07 00 00       	call   80103a50 <mycpu>
+80103255:	39 d8                	cmp    %ebx,%eax
+80103257:	74 41                	je     8010329a <main+0xea>
+      continue;
+
+    // Tell entryother.S what stack to use, where to enter, and what
+    // pgdir to use. We cannot use kpgdir yet, because the AP processor
+    // is running in low  memory, so we use entrypgdir for the APs too.
+    stack = kalloc();
+80103259:	e8 72 f2 ff ff       	call   801024d0 <kalloc>
+    *(void**)(code-4) = stack + KSTACKSIZE;
+8010325e:	05 00 10 00 00       	add    $0x1000,%eax
+    *(void(**)(void))(code-8) = mpenter;
+80103263:	c7 05 f8 6f 00 80 90 	movl   $0x80103190,0x80006ff8
+8010326a:	31 10 80 
+    *(int**)(code-12) = (void *) V2P(entrypgdir);
+8010326d:	c7 05 f4 6f 00 80 00 	movl   $0x109000,0x80006ff4
+80103274:	90 10 00 
+    *(void**)(code-4) = stack + KSTACKSIZE;
+80103277:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
+
+    lapicstartap(c->apicid, V2P(code));
+8010327c:	0f b6 03             	movzbl (%ebx),%eax
+8010327f:	83 ec 08             	sub    $0x8,%esp
+80103282:	68 00 70 00 00       	push   $0x7000
+80103287:	50                   	push   %eax
+80103288:	e8 03 f8 ff ff       	call   80102a90 <lapicstartap>
+8010328d:	83 c4 10             	add    $0x10,%esp
+
+    // wait for cpu to finish mpmain()
+    while(c->started == 0)
+80103290:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
+80103296:	85 c0                	test   %eax,%eax
+80103298:	74 f6                	je     80103290 <main+0xe0>
+  for(c = cpus; c < cpus+ncpu; c++){
+8010329a:	69 05 20 2d 11 80 b0 	imul   $0xb0,0x80112d20,%eax
+801032a1:	00 00 00 
+801032a4:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
+801032aa:	05 a0 27 11 80       	add    $0x801127a0,%eax
+801032af:	39 c3                	cmp    %eax,%ebx
+801032b1:	72 9d                	jb     80103250 <main+0xa0>
+  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
+801032b3:	83 ec 08             	sub    $0x8,%esp
+801032b6:	68 00 00 00 8e       	push   $0x8e000000
+801032bb:	68 00 00 40 80       	push   $0x80400000
+801032c0:	e8 ab f1 ff ff       	call   80102470 <kinit2>
+  userinit();      // first user process
+801032c5:	e8 56 08 00 00       	call   80103b20 <userinit>
+  mpmain();        // finish this processor's setup
+801032ca:	e8 81 fe ff ff       	call   80103150 <mpmain>
+801032cf:	90                   	nop
+
+801032d0 <mpsearch1>:
+}
+
+// Look for an MP structure in the len bytes at addr.
+static struct mp*
+mpsearch1(uint a, int len)
+{
+801032d0:	55                   	push   %ebp
+801032d1:	89 e5                	mov    %esp,%ebp
+801032d3:	57                   	push   %edi
+801032d4:	56                   	push   %esi
+  uchar *e, *p, *addr;
+
+  addr = P2V(a);
+801032d5:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
+{
+801032db:	53                   	push   %ebx
+  e = addr+len;
+801032dc:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
+{
+801032df:	83 ec 0c             	sub    $0xc,%esp
+  for(p = addr; p < e; p += sizeof(struct mp))
+801032e2:	39 de                	cmp    %ebx,%esi
+801032e4:	72 10                	jb     801032f6 <mpsearch1+0x26>
+801032e6:	eb 50                	jmp    80103338 <mpsearch1+0x68>
+801032e8:	90                   	nop
+801032e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801032f0:	39 fb                	cmp    %edi,%ebx
+801032f2:	89 fe                	mov    %edi,%esi
+801032f4:	76 42                	jbe    80103338 <mpsearch1+0x68>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+801032f6:	83 ec 04             	sub    $0x4,%esp
+801032f9:	8d 7e 10             	lea    0x10(%esi),%edi
+801032fc:	6a 04                	push   $0x4
+801032fe:	68 d8 78 10 80       	push   $0x801078d8
+80103303:	56                   	push   %esi
+80103304:	e8 07 15 00 00       	call   80104810 <memcmp>
+80103309:	83 c4 10             	add    $0x10,%esp
+8010330c:	85 c0                	test   %eax,%eax
+8010330e:	75 e0                	jne    801032f0 <mpsearch1+0x20>
+80103310:	89 f1                	mov    %esi,%ecx
+80103312:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    sum += addr[i];
+80103318:	0f b6 11             	movzbl (%ecx),%edx
+8010331b:	83 c1 01             	add    $0x1,%ecx
+8010331e:	01 d0                	add    %edx,%eax
+  for(i=0; i<len; i++)
+80103320:	39 f9                	cmp    %edi,%ecx
+80103322:	75 f4                	jne    80103318 <mpsearch1+0x48>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+80103324:	84 c0                	test   %al,%al
+80103326:	75 c8                	jne    801032f0 <mpsearch1+0x20>
+      return (struct mp*)p;
+  return 0;
+}
+80103328:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010332b:	89 f0                	mov    %esi,%eax
+8010332d:	5b                   	pop    %ebx
+8010332e:	5e                   	pop    %esi
+8010332f:	5f                   	pop    %edi
+80103330:	5d                   	pop    %ebp
+80103331:	c3                   	ret    
+80103332:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103338:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+8010333b:	31 f6                	xor    %esi,%esi
+}
+8010333d:	89 f0                	mov    %esi,%eax
+8010333f:	5b                   	pop    %ebx
+80103340:	5e                   	pop    %esi
+80103341:	5f                   	pop    %edi
+80103342:	5d                   	pop    %ebp
+80103343:	c3                   	ret    
+80103344:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010334a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80103350 <mpinit>:
+  return conf;
+}
+
+void
+mpinit(void)
+{
+80103350:	55                   	push   %ebp
+80103351:	89 e5                	mov    %esp,%ebp
+80103353:	57                   	push   %edi
+80103354:	56                   	push   %esi
+80103355:	53                   	push   %ebx
+80103356:	83 ec 1c             	sub    $0x1c,%esp
+  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
+80103359:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
+80103360:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
+80103367:	c1 e0 08             	shl    $0x8,%eax
+8010336a:	09 d0                	or     %edx,%eax
+8010336c:	c1 e0 04             	shl    $0x4,%eax
+8010336f:	85 c0                	test   %eax,%eax
+80103371:	75 1b                	jne    8010338e <mpinit+0x3e>
+    p = ((bda[0x14]<<8)|bda[0x13])*1024;
+80103373:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
+8010337a:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
+80103381:	c1 e0 08             	shl    $0x8,%eax
+80103384:	09 d0                	or     %edx,%eax
+80103386:	c1 e0 0a             	shl    $0xa,%eax
+    if((mp = mpsearch1(p-1024, 1024)))
+80103389:	2d 00 04 00 00       	sub    $0x400,%eax
+    if((mp = mpsearch1(p, 1024)))
+8010338e:	ba 00 04 00 00       	mov    $0x400,%edx
+80103393:	e8 38 ff ff ff       	call   801032d0 <mpsearch1>
+80103398:	85 c0                	test   %eax,%eax
+8010339a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010339d:	0f 84 3d 01 00 00    	je     801034e0 <mpinit+0x190>
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+801033a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801033a6:	8b 58 04             	mov    0x4(%eax),%ebx
+801033a9:	85 db                	test   %ebx,%ebx
+801033ab:	0f 84 4f 01 00 00    	je     80103500 <mpinit+0x1b0>
+  conf = (struct mpconf*) P2V((uint) mp->physaddr);
+801033b1:	8d b3 00 00 00 80    	lea    -0x80000000(%ebx),%esi
+  if(memcmp(conf, "PCMP", 4) != 0)
+801033b7:	83 ec 04             	sub    $0x4,%esp
+801033ba:	6a 04                	push   $0x4
+801033bc:	68 f5 78 10 80       	push   $0x801078f5
+801033c1:	56                   	push   %esi
+801033c2:	e8 49 14 00 00       	call   80104810 <memcmp>
+801033c7:	83 c4 10             	add    $0x10,%esp
+801033ca:	85 c0                	test   %eax,%eax
+801033cc:	0f 85 2e 01 00 00    	jne    80103500 <mpinit+0x1b0>
+  if(conf->version != 1 && conf->version != 4)
+801033d2:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
+801033d9:	3c 01                	cmp    $0x1,%al
+801033db:	0f 95 c2             	setne  %dl
+801033de:	3c 04                	cmp    $0x4,%al
+801033e0:	0f 95 c0             	setne  %al
+801033e3:	20 c2                	and    %al,%dl
+801033e5:	0f 85 15 01 00 00    	jne    80103500 <mpinit+0x1b0>
+  if(sum((uchar*)conf, conf->length) != 0)
+801033eb:	0f b7 bb 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edi
+  for(i=0; i<len; i++)
+801033f2:	66 85 ff             	test   %di,%di
+801033f5:	74 1a                	je     80103411 <mpinit+0xc1>
+801033f7:	89 f0                	mov    %esi,%eax
+801033f9:	01 f7                	add    %esi,%edi
+  sum = 0;
+801033fb:	31 d2                	xor    %edx,%edx
+801033fd:	8d 76 00             	lea    0x0(%esi),%esi
+    sum += addr[i];
+80103400:	0f b6 08             	movzbl (%eax),%ecx
+80103403:	83 c0 01             	add    $0x1,%eax
+80103406:	01 ca                	add    %ecx,%edx
+  for(i=0; i<len; i++)
+80103408:	39 c7                	cmp    %eax,%edi
+8010340a:	75 f4                	jne    80103400 <mpinit+0xb0>
+8010340c:	84 d2                	test   %dl,%dl
+8010340e:	0f 95 c2             	setne  %dl
+  struct mp *mp;
+  struct mpconf *conf;
+  struct mpproc *proc;
+  struct mpioapic *ioapic;
+
+  if((conf = mpconfig(&mp)) == 0)
+80103411:	85 f6                	test   %esi,%esi
+80103413:	0f 84 e7 00 00 00    	je     80103500 <mpinit+0x1b0>
+80103419:	84 d2                	test   %dl,%dl
+8010341b:	0f 85 df 00 00 00    	jne    80103500 <mpinit+0x1b0>
+    panic("Expect to run on an SMP");
+  ismp = 1;
+  lapic = (uint*)conf->lapicaddr;
+80103421:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
+80103427:	a3 9c 26 11 80       	mov    %eax,0x8011269c
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+8010342c:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
+80103433:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
+  ismp = 1;
+80103439:	bb 01 00 00 00       	mov    $0x1,%ebx
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+8010343e:	01 d6                	add    %edx,%esi
+80103440:	39 c6                	cmp    %eax,%esi
+80103442:	76 23                	jbe    80103467 <mpinit+0x117>
+    switch(*p){
+80103444:	0f b6 10             	movzbl (%eax),%edx
+80103447:	80 fa 04             	cmp    $0x4,%dl
+8010344a:	0f 87 ca 00 00 00    	ja     8010351a <mpinit+0x1ca>
+80103450:	ff 24 95 1c 79 10 80 	jmp    *-0x7fef86e4(,%edx,4)
+80103457:	89 f6                	mov    %esi,%esi
+80103459:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      p += sizeof(struct mpioapic);
+      continue;
+    case MPBUS:
+    case MPIOINTR:
+    case MPLINTR:
+      p += 8;
+80103460:	83 c0 08             	add    $0x8,%eax
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+80103463:	39 c6                	cmp    %eax,%esi
+80103465:	77 dd                	ja     80103444 <mpinit+0xf4>
+    default:
+      ismp = 0;
+      break;
+    }
+  }
+  if(!ismp)
+80103467:	85 db                	test   %ebx,%ebx
+80103469:	0f 84 9e 00 00 00    	je     8010350d <mpinit+0x1bd>
+    panic("Didn't find a suitable machine");
+
+  if(mp->imcrp){
+8010346f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103472:	80 78 0c 00          	cmpb   $0x0,0xc(%eax)
+80103476:	74 15                	je     8010348d <mpinit+0x13d>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103478:	b8 70 00 00 00       	mov    $0x70,%eax
+8010347d:	ba 22 00 00 00       	mov    $0x22,%edx
+80103482:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103483:	ba 23 00 00 00       	mov    $0x23,%edx
+80103488:	ec                   	in     (%dx),%al
+    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
+    // But it would on real hardware.
+    outb(0x22, 0x70);   // Select IMCR
+    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
+80103489:	83 c8 01             	or     $0x1,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010348c:	ee                   	out    %al,(%dx)
+  }
+}
+8010348d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103490:	5b                   	pop    %ebx
+80103491:	5e                   	pop    %esi
+80103492:	5f                   	pop    %edi
+80103493:	5d                   	pop    %ebp
+80103494:	c3                   	ret    
+80103495:	8d 76 00             	lea    0x0(%esi),%esi
+      if(ncpu < NCPU) {
+80103498:	8b 0d 20 2d 11 80    	mov    0x80112d20,%ecx
+8010349e:	83 f9 07             	cmp    $0x7,%ecx
+801034a1:	7f 19                	jg     801034bc <mpinit+0x16c>
+        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
+801034a3:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+801034a7:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
+        ncpu++;
+801034ad:	83 c1 01             	add    $0x1,%ecx
+801034b0:	89 0d 20 2d 11 80    	mov    %ecx,0x80112d20
+        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
+801034b6:	88 97 a0 27 11 80    	mov    %dl,-0x7feed860(%edi)
+      p += sizeof(struct mpproc);
+801034bc:	83 c0 14             	add    $0x14,%eax
+      continue;
+801034bf:	e9 7c ff ff ff       	jmp    80103440 <mpinit+0xf0>
+801034c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      ioapicid = ioapic->apicno;
+801034c8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+      p += sizeof(struct mpioapic);
+801034cc:	83 c0 08             	add    $0x8,%eax
+      ioapicid = ioapic->apicno;
+801034cf:	88 15 80 27 11 80    	mov    %dl,0x80112780
+      continue;
+801034d5:	e9 66 ff ff ff       	jmp    80103440 <mpinit+0xf0>
+801034da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  return mpsearch1(0xF0000, 0x10000);
+801034e0:	ba 00 00 01 00       	mov    $0x10000,%edx
+801034e5:	b8 00 00 0f 00       	mov    $0xf0000,%eax
+801034ea:	e8 e1 fd ff ff       	call   801032d0 <mpsearch1>
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+801034ef:	85 c0                	test   %eax,%eax
+  return mpsearch1(0xF0000, 0x10000);
+801034f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+801034f4:	0f 85 a9 fe ff ff    	jne    801033a3 <mpinit+0x53>
+801034fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    panic("Expect to run on an SMP");
+80103500:	83 ec 0c             	sub    $0xc,%esp
+80103503:	68 dd 78 10 80       	push   $0x801078dd
+80103508:	e8 83 ce ff ff       	call   80100390 <panic>
+    panic("Didn't find a suitable machine");
+8010350d:	83 ec 0c             	sub    $0xc,%esp
+80103510:	68 fc 78 10 80       	push   $0x801078fc
+80103515:	e8 76 ce ff ff       	call   80100390 <panic>
+      ismp = 0;
+8010351a:	31 db                	xor    %ebx,%ebx
+8010351c:	e9 26 ff ff ff       	jmp    80103447 <mpinit+0xf7>
+80103521:	66 90                	xchg   %ax,%ax
+80103523:	66 90                	xchg   %ax,%ax
+80103525:	66 90                	xchg   %ax,%ax
+80103527:	66 90                	xchg   %ax,%ax
+80103529:	66 90                	xchg   %ax,%ax
+8010352b:	66 90                	xchg   %ax,%ax
+8010352d:	66 90                	xchg   %ax,%ax
+8010352f:	90                   	nop
+
+80103530 <picinit>:
+#define IO_PIC2         0xA0    // Slave (IRQs 8-15)
+
+// Don't use the 8259A interrupt controllers.  Xv6 assumes SMP hardware.
+void
+picinit(void)
+{
+80103530:	55                   	push   %ebp
+80103531:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103536:	ba 21 00 00 00       	mov    $0x21,%edx
+8010353b:	89 e5                	mov    %esp,%ebp
+8010353d:	ee                   	out    %al,(%dx)
+8010353e:	ba a1 00 00 00       	mov    $0xa1,%edx
+80103543:	ee                   	out    %al,(%dx)
+  // mask all interrupts
+  outb(IO_PIC1+1, 0xFF);
+  outb(IO_PIC2+1, 0xFF);
+}
+80103544:	5d                   	pop    %ebp
+80103545:	c3                   	ret    
+80103546:	66 90                	xchg   %ax,%ax
+80103548:	66 90                	xchg   %ax,%ax
+8010354a:	66 90                	xchg   %ax,%ax
+8010354c:	66 90                	xchg   %ax,%ax
+8010354e:	66 90                	xchg   %ax,%ax
+
+80103550 <pipealloc>:
+  int writeopen;  // write fd is still open
+};
+
+int
+pipealloc(struct file **f0, struct file **f1)
+{
+80103550:	55                   	push   %ebp
+80103551:	89 e5                	mov    %esp,%ebp
+80103553:	57                   	push   %edi
+80103554:	56                   	push   %esi
+80103555:	53                   	push   %ebx
+80103556:	83 ec 0c             	sub    $0xc,%esp
+80103559:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010355c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  struct pipe *p;
+
+  p = 0;
+  *f0 = *f1 = 0;
+8010355f:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80103565:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
+8010356b:	e8 10 d8 ff ff       	call   80100d80 <filealloc>
+80103570:	85 c0                	test   %eax,%eax
+80103572:	89 03                	mov    %eax,(%ebx)
+80103574:	74 22                	je     80103598 <pipealloc+0x48>
+80103576:	e8 05 d8 ff ff       	call   80100d80 <filealloc>
+8010357b:	85 c0                	test   %eax,%eax
+8010357d:	89 06                	mov    %eax,(%esi)
+8010357f:	74 3f                	je     801035c0 <pipealloc+0x70>
+    goto bad;
+  if((p = (struct pipe*)kalloc()) == 0)
+80103581:	e8 4a ef ff ff       	call   801024d0 <kalloc>
+80103586:	85 c0                	test   %eax,%eax
+80103588:	89 c7                	mov    %eax,%edi
+8010358a:	75 54                	jne    801035e0 <pipealloc+0x90>
+
+//PAGEBREAK: 20
+ bad:
+  if(p)
+    kfree((char*)p);
+  if(*f0)
+8010358c:	8b 03                	mov    (%ebx),%eax
+8010358e:	85 c0                	test   %eax,%eax
+80103590:	75 34                	jne    801035c6 <pipealloc+0x76>
+80103592:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    fileclose(*f0);
+  if(*f1)
+80103598:	8b 06                	mov    (%esi),%eax
+8010359a:	85 c0                	test   %eax,%eax
+8010359c:	74 0c                	je     801035aa <pipealloc+0x5a>
+    fileclose(*f1);
+8010359e:	83 ec 0c             	sub    $0xc,%esp
+801035a1:	50                   	push   %eax
+801035a2:	e8 99 d8 ff ff       	call   80100e40 <fileclose>
+801035a7:	83 c4 10             	add    $0x10,%esp
+  return -1;
+}
+801035aa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return -1;
+801035ad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801035b2:	5b                   	pop    %ebx
+801035b3:	5e                   	pop    %esi
+801035b4:	5f                   	pop    %edi
+801035b5:	5d                   	pop    %ebp
+801035b6:	c3                   	ret    
+801035b7:	89 f6                	mov    %esi,%esi
+801035b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  if(*f0)
+801035c0:	8b 03                	mov    (%ebx),%eax
+801035c2:	85 c0                	test   %eax,%eax
+801035c4:	74 e4                	je     801035aa <pipealloc+0x5a>
+    fileclose(*f0);
+801035c6:	83 ec 0c             	sub    $0xc,%esp
+801035c9:	50                   	push   %eax
+801035ca:	e8 71 d8 ff ff       	call   80100e40 <fileclose>
+  if(*f1)
+801035cf:	8b 06                	mov    (%esi),%eax
+    fileclose(*f0);
+801035d1:	83 c4 10             	add    $0x10,%esp
+  if(*f1)
+801035d4:	85 c0                	test   %eax,%eax
+801035d6:	75 c6                	jne    8010359e <pipealloc+0x4e>
+801035d8:	eb d0                	jmp    801035aa <pipealloc+0x5a>
+801035da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  initlock(&p->lock, "pipe");
+801035e0:	83 ec 08             	sub    $0x8,%esp
+  p->readopen = 1;
+801035e3:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
+801035ea:	00 00 00 
+  p->writeopen = 1;
+801035ed:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
+801035f4:	00 00 00 
+  p->nwrite = 0;
+801035f7:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
+801035fe:	00 00 00 
+  p->nread = 0;
+80103601:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
+80103608:	00 00 00 
+  initlock(&p->lock, "pipe");
+8010360b:	68 30 79 10 80       	push   $0x80107930
+80103610:	50                   	push   %eax
+80103611:	e8 5a 0f 00 00       	call   80104570 <initlock>
+  (*f0)->type = FD_PIPE;
+80103616:	8b 03                	mov    (%ebx),%eax
+  return 0;
+80103618:	83 c4 10             	add    $0x10,%esp
+  (*f0)->type = FD_PIPE;
+8010361b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f0)->readable = 1;
+80103621:	8b 03                	mov    (%ebx),%eax
+80103623:	c6 40 08 01          	movb   $0x1,0x8(%eax)
+  (*f0)->writable = 0;
+80103627:	8b 03                	mov    (%ebx),%eax
+80103629:	c6 40 09 00          	movb   $0x0,0x9(%eax)
+  (*f0)->pipe = p;
+8010362d:	8b 03                	mov    (%ebx),%eax
+8010362f:	89 78 0c             	mov    %edi,0xc(%eax)
+  (*f1)->type = FD_PIPE;
+80103632:	8b 06                	mov    (%esi),%eax
+80103634:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f1)->readable = 0;
+8010363a:	8b 06                	mov    (%esi),%eax
+8010363c:	c6 40 08 00          	movb   $0x0,0x8(%eax)
+  (*f1)->writable = 1;
+80103640:	8b 06                	mov    (%esi),%eax
+80103642:	c6 40 09 01          	movb   $0x1,0x9(%eax)
+  (*f1)->pipe = p;
+80103646:	8b 06                	mov    (%esi),%eax
+80103648:	89 78 0c             	mov    %edi,0xc(%eax)
+}
+8010364b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+8010364e:	31 c0                	xor    %eax,%eax
+}
+80103650:	5b                   	pop    %ebx
+80103651:	5e                   	pop    %esi
+80103652:	5f                   	pop    %edi
+80103653:	5d                   	pop    %ebp
+80103654:	c3                   	ret    
+80103655:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103659:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103660 <pipeclose>:
+
+void
+pipeclose(struct pipe *p, int writable)
+{
+80103660:	55                   	push   %ebp
+80103661:	89 e5                	mov    %esp,%ebp
+80103663:	56                   	push   %esi
+80103664:	53                   	push   %ebx
+80103665:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103668:	8b 75 0c             	mov    0xc(%ebp),%esi
+  acquire(&p->lock);
+8010366b:	83 ec 0c             	sub    $0xc,%esp
+8010366e:	53                   	push   %ebx
+8010366f:	e8 3c 10 00 00       	call   801046b0 <acquire>
+  if(writable){
+80103674:	83 c4 10             	add    $0x10,%esp
+80103677:	85 f6                	test   %esi,%esi
+80103679:	74 45                	je     801036c0 <pipeclose+0x60>
+    p->writeopen = 0;
+    wakeup(&p->nread);
+8010367b:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+80103681:	83 ec 0c             	sub    $0xc,%esp
+    p->writeopen = 0;
+80103684:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
+8010368b:	00 00 00 
+    wakeup(&p->nread);
+8010368e:	50                   	push   %eax
+8010368f:	e8 fc 0b 00 00       	call   80104290 <wakeup>
+80103694:	83 c4 10             	add    $0x10,%esp
+  } else {
+    p->readopen = 0;
+    wakeup(&p->nwrite);
+  }
+  if(p->readopen == 0 && p->writeopen == 0){
+80103697:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
+8010369d:	85 d2                	test   %edx,%edx
+8010369f:	75 0a                	jne    801036ab <pipeclose+0x4b>
+801036a1:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
+801036a7:	85 c0                	test   %eax,%eax
+801036a9:	74 35                	je     801036e0 <pipeclose+0x80>
+    release(&p->lock);
+    kfree((char*)p);
+  } else
+    release(&p->lock);
+801036ab:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+801036ae:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801036b1:	5b                   	pop    %ebx
+801036b2:	5e                   	pop    %esi
+801036b3:	5d                   	pop    %ebp
+    release(&p->lock);
+801036b4:	e9 b7 10 00 00       	jmp    80104770 <release>
+801036b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    wakeup(&p->nwrite);
+801036c0:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
+801036c6:	83 ec 0c             	sub    $0xc,%esp
+    p->readopen = 0;
+801036c9:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
+801036d0:	00 00 00 
+    wakeup(&p->nwrite);
+801036d3:	50                   	push   %eax
+801036d4:	e8 b7 0b 00 00       	call   80104290 <wakeup>
+801036d9:	83 c4 10             	add    $0x10,%esp
+801036dc:	eb b9                	jmp    80103697 <pipeclose+0x37>
+801036de:	66 90                	xchg   %ax,%ax
+    release(&p->lock);
+801036e0:	83 ec 0c             	sub    $0xc,%esp
+801036e3:	53                   	push   %ebx
+801036e4:	e8 87 10 00 00       	call   80104770 <release>
+    kfree((char*)p);
+801036e9:	89 5d 08             	mov    %ebx,0x8(%ebp)
+801036ec:	83 c4 10             	add    $0x10,%esp
+}
+801036ef:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801036f2:	5b                   	pop    %ebx
+801036f3:	5e                   	pop    %esi
+801036f4:	5d                   	pop    %ebp
+    kfree((char*)p);
+801036f5:	e9 26 ec ff ff       	jmp    80102320 <kfree>
+801036fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103700 <pipewrite>:
+
+//PAGEBREAK: 40
+int
+pipewrite(struct pipe *p, char *addr, int n)
+{
+80103700:	55                   	push   %ebp
+80103701:	89 e5                	mov    %esp,%ebp
+80103703:	57                   	push   %edi
+80103704:	56                   	push   %esi
+80103705:	53                   	push   %ebx
+80103706:	83 ec 28             	sub    $0x28,%esp
+80103709:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int i;
+
+  acquire(&p->lock);
+8010370c:	53                   	push   %ebx
+8010370d:	e8 9e 0f 00 00       	call   801046b0 <acquire>
+  for(i = 0; i < n; i++){
+80103712:	8b 45 10             	mov    0x10(%ebp),%eax
+80103715:	83 c4 10             	add    $0x10,%esp
+80103718:	85 c0                	test   %eax,%eax
+8010371a:	0f 8e c9 00 00 00    	jle    801037e9 <pipewrite+0xe9>
+80103720:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80103723:	8b 83 38 02 00 00    	mov    0x238(%ebx),%eax
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+      if(p->readopen == 0 || myproc()->killed){
+        release(&p->lock);
+        return -1;
+      }
+      wakeup(&p->nread);
+80103729:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
+8010372f:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80103732:	03 4d 10             	add    0x10(%ebp),%ecx
+80103735:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80103738:	8b 8b 34 02 00 00    	mov    0x234(%ebx),%ecx
+8010373e:	8d 91 00 02 00 00    	lea    0x200(%ecx),%edx
+80103744:	39 d0                	cmp    %edx,%eax
+80103746:	75 71                	jne    801037b9 <pipewrite+0xb9>
+      if(p->readopen == 0 || myproc()->killed){
+80103748:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
+8010374e:	85 c0                	test   %eax,%eax
+80103750:	74 4e                	je     801037a0 <pipewrite+0xa0>
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+80103752:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
+80103758:	eb 3a                	jmp    80103794 <pipewrite+0x94>
+8010375a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      wakeup(&p->nread);
+80103760:	83 ec 0c             	sub    $0xc,%esp
+80103763:	57                   	push   %edi
+80103764:	e8 27 0b 00 00       	call   80104290 <wakeup>
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+80103769:	5a                   	pop    %edx
+8010376a:	59                   	pop    %ecx
+8010376b:	53                   	push   %ebx
+8010376c:	56                   	push   %esi
+8010376d:	e8 5e 09 00 00       	call   801040d0 <sleep>
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80103772:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+80103778:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
+8010377e:	83 c4 10             	add    $0x10,%esp
+80103781:	05 00 02 00 00       	add    $0x200,%eax
+80103786:	39 c2                	cmp    %eax,%edx
+80103788:	75 36                	jne    801037c0 <pipewrite+0xc0>
+      if(p->readopen == 0 || myproc()->killed){
+8010378a:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
+80103790:	85 c0                	test   %eax,%eax
+80103792:	74 0c                	je     801037a0 <pipewrite+0xa0>
+80103794:	e8 57 03 00 00       	call   80103af0 <myproc>
+80103799:	8b 40 24             	mov    0x24(%eax),%eax
+8010379c:	85 c0                	test   %eax,%eax
+8010379e:	74 c0                	je     80103760 <pipewrite+0x60>
+        release(&p->lock);
+801037a0:	83 ec 0c             	sub    $0xc,%esp
+801037a3:	53                   	push   %ebx
+801037a4:	e8 c7 0f 00 00       	call   80104770 <release>
+        return -1;
+801037a9:	83 c4 10             	add    $0x10,%esp
+801037ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+  }
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+  release(&p->lock);
+  return n;
+}
+801037b1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801037b4:	5b                   	pop    %ebx
+801037b5:	5e                   	pop    %esi
+801037b6:	5f                   	pop    %edi
+801037b7:	5d                   	pop    %ebp
+801037b8:	c3                   	ret    
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+801037b9:	89 c2                	mov    %eax,%edx
+801037bb:	90                   	nop
+801037bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+801037c0:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+801037c3:	8d 42 01             	lea    0x1(%edx),%eax
+801037c6:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
+801037cc:	89 83 38 02 00 00    	mov    %eax,0x238(%ebx)
+801037d2:	83 c6 01             	add    $0x1,%esi
+801037d5:	0f b6 4e ff          	movzbl -0x1(%esi),%ecx
+  for(i = 0; i < n; i++){
+801037d9:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+801037dc:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+801037df:	88 4c 13 34          	mov    %cl,0x34(%ebx,%edx,1)
+  for(i = 0; i < n; i++){
+801037e3:	0f 85 4f ff ff ff    	jne    80103738 <pipewrite+0x38>
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+801037e9:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+801037ef:	83 ec 0c             	sub    $0xc,%esp
+801037f2:	50                   	push   %eax
+801037f3:	e8 98 0a 00 00       	call   80104290 <wakeup>
+  release(&p->lock);
+801037f8:	89 1c 24             	mov    %ebx,(%esp)
+801037fb:	e8 70 0f 00 00       	call   80104770 <release>
+  return n;
+80103800:	83 c4 10             	add    $0x10,%esp
+80103803:	8b 45 10             	mov    0x10(%ebp),%eax
+80103806:	eb a9                	jmp    801037b1 <pipewrite+0xb1>
+80103808:	90                   	nop
+80103809:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103810 <piperead>:
+
+int
+piperead(struct pipe *p, char *addr, int n)
+{
+80103810:	55                   	push   %ebp
+80103811:	89 e5                	mov    %esp,%ebp
+80103813:	57                   	push   %edi
+80103814:	56                   	push   %esi
+80103815:	53                   	push   %ebx
+80103816:	83 ec 18             	sub    $0x18,%esp
+80103819:	8b 75 08             	mov    0x8(%ebp),%esi
+8010381c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  int i;
+
+  acquire(&p->lock);
+8010381f:	56                   	push   %esi
+80103820:	e8 8b 0e 00 00       	call   801046b0 <acquire>
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+80103825:	83 c4 10             	add    $0x10,%esp
+80103828:	8b 8e 34 02 00 00    	mov    0x234(%esi),%ecx
+8010382e:	3b 8e 38 02 00 00    	cmp    0x238(%esi),%ecx
+80103834:	75 6a                	jne    801038a0 <piperead+0x90>
+80103836:	8b 9e 40 02 00 00    	mov    0x240(%esi),%ebx
+8010383c:	85 db                	test   %ebx,%ebx
+8010383e:	0f 84 c4 00 00 00    	je     80103908 <piperead+0xf8>
+    if(myproc()->killed){
+      release(&p->lock);
+      return -1;
+    }
+    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
+80103844:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
+8010384a:	eb 2d                	jmp    80103879 <piperead+0x69>
+8010384c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103850:	83 ec 08             	sub    $0x8,%esp
+80103853:	56                   	push   %esi
+80103854:	53                   	push   %ebx
+80103855:	e8 76 08 00 00       	call   801040d0 <sleep>
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+8010385a:	83 c4 10             	add    $0x10,%esp
+8010385d:	8b 8e 34 02 00 00    	mov    0x234(%esi),%ecx
+80103863:	3b 8e 38 02 00 00    	cmp    0x238(%esi),%ecx
+80103869:	75 35                	jne    801038a0 <piperead+0x90>
+8010386b:	8b 96 40 02 00 00    	mov    0x240(%esi),%edx
+80103871:	85 d2                	test   %edx,%edx
+80103873:	0f 84 8f 00 00 00    	je     80103908 <piperead+0xf8>
+    if(myproc()->killed){
+80103879:	e8 72 02 00 00       	call   80103af0 <myproc>
+8010387e:	8b 48 24             	mov    0x24(%eax),%ecx
+80103881:	85 c9                	test   %ecx,%ecx
+80103883:	74 cb                	je     80103850 <piperead+0x40>
+      release(&p->lock);
+80103885:	83 ec 0c             	sub    $0xc,%esp
+      return -1;
+80103888:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+      release(&p->lock);
+8010388d:	56                   	push   %esi
+8010388e:	e8 dd 0e 00 00       	call   80104770 <release>
+      return -1;
+80103893:	83 c4 10             	add    $0x10,%esp
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+  }
+  wakeup(&p->nwrite);  //DOC: piperead-wakeup
+  release(&p->lock);
+  return i;
+}
+80103896:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103899:	89 d8                	mov    %ebx,%eax
+8010389b:	5b                   	pop    %ebx
+8010389c:	5e                   	pop    %esi
+8010389d:	5f                   	pop    %edi
+8010389e:	5d                   	pop    %ebp
+8010389f:	c3                   	ret    
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+801038a0:	8b 45 10             	mov    0x10(%ebp),%eax
+801038a3:	85 c0                	test   %eax,%eax
+801038a5:	7e 61                	jle    80103908 <piperead+0xf8>
+    if(p->nread == p->nwrite)
+801038a7:	31 db                	xor    %ebx,%ebx
+801038a9:	eb 13                	jmp    801038be <piperead+0xae>
+801038ab:	90                   	nop
+801038ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801038b0:	8b 8e 34 02 00 00    	mov    0x234(%esi),%ecx
+801038b6:	3b 8e 38 02 00 00    	cmp    0x238(%esi),%ecx
+801038bc:	74 1f                	je     801038dd <piperead+0xcd>
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+801038be:	8d 41 01             	lea    0x1(%ecx),%eax
+801038c1:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
+801038c7:	89 86 34 02 00 00    	mov    %eax,0x234(%esi)
+801038cd:	0f b6 44 0e 34       	movzbl 0x34(%esi,%ecx,1),%eax
+801038d2:	88 04 1f             	mov    %al,(%edi,%ebx,1)
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+801038d5:	83 c3 01             	add    $0x1,%ebx
+801038d8:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+801038db:	75 d3                	jne    801038b0 <piperead+0xa0>
+  wakeup(&p->nwrite);  //DOC: piperead-wakeup
+801038dd:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
+801038e3:	83 ec 0c             	sub    $0xc,%esp
+801038e6:	50                   	push   %eax
+801038e7:	e8 a4 09 00 00       	call   80104290 <wakeup>
+  release(&p->lock);
+801038ec:	89 34 24             	mov    %esi,(%esp)
+801038ef:	e8 7c 0e 00 00       	call   80104770 <release>
+  return i;
+801038f4:	83 c4 10             	add    $0x10,%esp
+}
+801038f7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801038fa:	89 d8                	mov    %ebx,%eax
+801038fc:	5b                   	pop    %ebx
+801038fd:	5e                   	pop    %esi
+801038fe:	5f                   	pop    %edi
+801038ff:	5d                   	pop    %ebp
+80103900:	c3                   	ret    
+80103901:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103908:	31 db                	xor    %ebx,%ebx
+8010390a:	eb d1                	jmp    801038dd <piperead+0xcd>
+8010390c:	66 90                	xchg   %ax,%ax
+8010390e:	66 90                	xchg   %ax,%ax
+
+80103910 <allocproc>:
+//  If found, change state to EMBRYO and initialize
+//  state required to run in the kernel.
+//  Otherwise return 0.
+static struct proc *
+allocproc(void)
+{
+80103910:	55                   	push   %ebp
+80103911:	89 e5                	mov    %esp,%ebp
+80103913:	53                   	push   %ebx
+  struct proc *p;
+  char *sp;
+
+  acquire(&ptable.lock);
+
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103914:	bb 74 2d 11 80       	mov    $0x80112d74,%ebx
+{
+80103919:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);
+8010391c:	68 40 2d 11 80       	push   $0x80112d40
+80103921:	e8 8a 0d 00 00       	call   801046b0 <acquire>
+80103926:	83 c4 10             	add    $0x10,%esp
+80103929:	eb 13                	jmp    8010393e <allocproc+0x2e>
+8010392b:	90                   	nop
+8010392c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103930:	81 c3 84 00 00 00    	add    $0x84,%ebx
+80103936:	81 fb 74 4e 11 80    	cmp    $0x80114e74,%ebx
+8010393c:	73 7a                	jae    801039b8 <allocproc+0xa8>
+    if (p->state == UNUSED)
+8010393e:	8b 43 0c             	mov    0xc(%ebx),%eax
+80103941:	85 c0                	test   %eax,%eax
+80103943:	75 eb                	jne    80103930 <allocproc+0x20>
+  release(&ptable.lock);
+  return 0;
+
+found:
+  p->state = EMBRYO;
+  p->pid = nextpid++;
+80103945:	a1 04 a0 10 80       	mov    0x8010a004,%eax
+
+  release(&ptable.lock);
+8010394a:	83 ec 0c             	sub    $0xc,%esp
+  p->state = EMBRYO;
+8010394d:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+  p->pid = nextpid++;
+80103954:	8d 50 01             	lea    0x1(%eax),%edx
+80103957:	89 43 10             	mov    %eax,0x10(%ebx)
+  release(&ptable.lock);
+8010395a:	68 40 2d 11 80       	push   $0x80112d40
+  p->pid = nextpid++;
+8010395f:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
+  release(&ptable.lock);
+80103965:	e8 06 0e 00 00       	call   80104770 <release>
+
+  // Allocate kernel stack.
+  if ((p->kstack = kalloc()) == 0)
+8010396a:	e8 61 eb ff ff       	call   801024d0 <kalloc>
+8010396f:	83 c4 10             	add    $0x10,%esp
+80103972:	85 c0                	test   %eax,%eax
+80103974:	89 43 08             	mov    %eax,0x8(%ebx)
+80103977:	74 58                	je     801039d1 <allocproc+0xc1>
+    return 0;
+  }
+  sp = p->kstack + KSTACKSIZE;
+
+  // Leave room for trap frame.
+  sp -= sizeof *p->tf;
+80103979:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+  sp -= 4;
+  *(uint *)sp = (uint)trapret;
+
+  sp -= sizeof *p->context;
+  p->context = (struct context *)sp;
+  memset(p->context, 0, sizeof *p->context);
+8010397f:	83 ec 04             	sub    $0x4,%esp
+  sp -= sizeof *p->context;
+80103982:	05 9c 0f 00 00       	add    $0xf9c,%eax
+  sp -= sizeof *p->tf;
+80103987:	89 53 18             	mov    %edx,0x18(%ebx)
+  *(uint *)sp = (uint)trapret;
+8010398a:	c7 40 14 2f 5b 10 80 	movl   $0x80105b2f,0x14(%eax)
+  p->context = (struct context *)sp;
+80103991:	89 43 1c             	mov    %eax,0x1c(%ebx)
+  memset(p->context, 0, sizeof *p->context);
+80103994:	6a 14                	push   $0x14
+80103996:	6a 00                	push   $0x0
+80103998:	50                   	push   %eax
+80103999:	e8 22 0e 00 00       	call   801047c0 <memset>
+  p->context->eip = (uint)forkret;
+8010399e:	8b 43 1c             	mov    0x1c(%ebx),%eax
+
+  return p;
+801039a1:	83 c4 10             	add    $0x10,%esp
+  p->context->eip = (uint)forkret;
+801039a4:	c7 40 10 e0 39 10 80 	movl   $0x801039e0,0x10(%eax)
+}
+801039ab:	89 d8                	mov    %ebx,%eax
+801039ad:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801039b0:	c9                   	leave  
+801039b1:	c3                   	ret    
+801039b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  release(&ptable.lock);
+801039b8:	83 ec 0c             	sub    $0xc,%esp
+  return 0;
+801039bb:	31 db                	xor    %ebx,%ebx
+  release(&ptable.lock);
+801039bd:	68 40 2d 11 80       	push   $0x80112d40
+801039c2:	e8 a9 0d 00 00       	call   80104770 <release>
+}
+801039c7:	89 d8                	mov    %ebx,%eax
+  return 0;
+801039c9:	83 c4 10             	add    $0x10,%esp
+}
+801039cc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801039cf:	c9                   	leave  
+801039d0:	c3                   	ret    
+    p->state = UNUSED;
+801039d1:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+    return 0;
+801039d8:	31 db                	xor    %ebx,%ebx
+801039da:	eb cf                	jmp    801039ab <allocproc+0x9b>
+801039dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801039e0 <forkret>:
+}
+
+// A fork child's very first scheduling by scheduler()
+// will swtch here.  "Return" to user space.
+void forkret(void)
+{
+801039e0:	55                   	push   %ebp
+801039e1:	89 e5                	mov    %esp,%ebp
+801039e3:	83 ec 14             	sub    $0x14,%esp
+  static int first = 1;
+  // Still holding ptable.lock from scheduler.
+  release(&ptable.lock);
+801039e6:	68 40 2d 11 80       	push   $0x80112d40
+801039eb:	e8 80 0d 00 00       	call   80104770 <release>
+
+  if (first)
+801039f0:	a1 00 a0 10 80       	mov    0x8010a000,%eax
+801039f5:	83 c4 10             	add    $0x10,%esp
+801039f8:	85 c0                	test   %eax,%eax
+801039fa:	75 04                	jne    80103a00 <forkret+0x20>
+    iinit(ROOTDEV);
+    initlog(ROOTDEV);
+  }
+
+  // Return to "caller", actually trapret (see allocproc).
+}
+801039fc:	c9                   	leave  
+801039fd:	c3                   	ret    
+801039fe:	66 90                	xchg   %ax,%ax
+    iinit(ROOTDEV);
+80103a00:	83 ec 0c             	sub    $0xc,%esp
+    first = 0;
+80103a03:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
+80103a0a:	00 00 00 
+    iinit(ROOTDEV);
+80103a0d:	6a 01                	push   $0x1
+80103a0f:	e8 7c da ff ff       	call   80101490 <iinit>
+    initlog(ROOTDEV);
+80103a14:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+80103a1b:	e8 f0 f3 ff ff       	call   80102e10 <initlog>
+80103a20:	83 c4 10             	add    $0x10,%esp
+}
+80103a23:	c9                   	leave  
+80103a24:	c3                   	ret    
+80103a25:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103a29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103a30 <pinit>:
+{
+80103a30:	55                   	push   %ebp
+80103a31:	89 e5                	mov    %esp,%ebp
+80103a33:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ptable.lock, "ptable");
+80103a36:	68 35 79 10 80       	push   $0x80107935
+80103a3b:	68 40 2d 11 80       	push   $0x80112d40
+80103a40:	e8 2b 0b 00 00       	call   80104570 <initlock>
+}
+80103a45:	83 c4 10             	add    $0x10,%esp
+80103a48:	c9                   	leave  
+80103a49:	c3                   	ret    
+80103a4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103a50 <mycpu>:
+{
+80103a50:	55                   	push   %ebp
+80103a51:	89 e5                	mov    %esp,%ebp
+80103a53:	56                   	push   %esi
+80103a54:	53                   	push   %ebx
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80103a55:	9c                   	pushf  
+80103a56:	58                   	pop    %eax
+  if (readeflags() & FL_IF)
+80103a57:	f6 c4 02             	test   $0x2,%ah
+80103a5a:	75 5e                	jne    80103aba <mycpu+0x6a>
+  apicid = lapicid();
+80103a5c:	e8 df ef ff ff       	call   80102a40 <lapicid>
+  for (i = 0; i < ncpu; ++i)
+80103a61:	8b 35 20 2d 11 80    	mov    0x80112d20,%esi
+80103a67:	85 f6                	test   %esi,%esi
+80103a69:	7e 42                	jle    80103aad <mycpu+0x5d>
+    if (cpus[i].apicid == apicid)
+80103a6b:	0f b6 15 a0 27 11 80 	movzbl 0x801127a0,%edx
+80103a72:	39 d0                	cmp    %edx,%eax
+80103a74:	74 30                	je     80103aa6 <mycpu+0x56>
+80103a76:	b9 50 28 11 80       	mov    $0x80112850,%ecx
+  for (i = 0; i < ncpu; ++i)
+80103a7b:	31 d2                	xor    %edx,%edx
+80103a7d:	8d 76 00             	lea    0x0(%esi),%esi
+80103a80:	83 c2 01             	add    $0x1,%edx
+80103a83:	39 f2                	cmp    %esi,%edx
+80103a85:	74 26                	je     80103aad <mycpu+0x5d>
+    if (cpus[i].apicid == apicid)
+80103a87:	0f b6 19             	movzbl (%ecx),%ebx
+80103a8a:	81 c1 b0 00 00 00    	add    $0xb0,%ecx
+80103a90:	39 c3                	cmp    %eax,%ebx
+80103a92:	75 ec                	jne    80103a80 <mycpu+0x30>
+80103a94:	69 c2 b0 00 00 00    	imul   $0xb0,%edx,%eax
+80103a9a:	05 a0 27 11 80       	add    $0x801127a0,%eax
+}
+80103a9f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103aa2:	5b                   	pop    %ebx
+80103aa3:	5e                   	pop    %esi
+80103aa4:	5d                   	pop    %ebp
+80103aa5:	c3                   	ret    
+    if (cpus[i].apicid == apicid)
+80103aa6:	b8 a0 27 11 80       	mov    $0x801127a0,%eax
+      return &cpus[i];
+80103aab:	eb f2                	jmp    80103a9f <mycpu+0x4f>
+  panic("unknown apicid\n");
+80103aad:	83 ec 0c             	sub    $0xc,%esp
+80103ab0:	68 3c 79 10 80       	push   $0x8010793c
+80103ab5:	e8 d6 c8 ff ff       	call   80100390 <panic>
+    panic("mycpu called with interrupts enabled\n");
+80103aba:	83 ec 0c             	sub    $0xc,%esp
+80103abd:	68 18 7a 10 80       	push   $0x80107a18
+80103ac2:	e8 c9 c8 ff ff       	call   80100390 <panic>
+80103ac7:	89 f6                	mov    %esi,%esi
+80103ac9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103ad0 <cpuid>:
+{
+80103ad0:	55                   	push   %ebp
+80103ad1:	89 e5                	mov    %esp,%ebp
+80103ad3:	83 ec 08             	sub    $0x8,%esp
+  return mycpu() - cpus;
+80103ad6:	e8 75 ff ff ff       	call   80103a50 <mycpu>
+80103adb:	2d a0 27 11 80       	sub    $0x801127a0,%eax
+}
+80103ae0:	c9                   	leave  
+  return mycpu() - cpus;
+80103ae1:	c1 f8 04             	sar    $0x4,%eax
+80103ae4:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+}
+80103aea:	c3                   	ret    
+80103aeb:	90                   	nop
+80103aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103af0 <myproc>:
+{
+80103af0:	55                   	push   %ebp
+80103af1:	89 e5                	mov    %esp,%ebp
+80103af3:	53                   	push   %ebx
+80103af4:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+80103af7:	e8 e4 0a 00 00       	call   801045e0 <pushcli>
+  c = mycpu();
+80103afc:	e8 4f ff ff ff       	call   80103a50 <mycpu>
+  p = c->proc;
+80103b01:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103b07:	e8 14 0b 00 00       	call   80104620 <popcli>
+}
+80103b0c:	83 c4 04             	add    $0x4,%esp
+80103b0f:	89 d8                	mov    %ebx,%eax
+80103b11:	5b                   	pop    %ebx
+80103b12:	5d                   	pop    %ebp
+80103b13:	c3                   	ret    
+80103b14:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103b1a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80103b20 <userinit>:
+{
+80103b20:	55                   	push   %ebp
+80103b21:	89 e5                	mov    %esp,%ebp
+80103b23:	53                   	push   %ebx
+80103b24:	83 ec 04             	sub    $0x4,%esp
+  p = allocproc();
+80103b27:	e8 e4 fd ff ff       	call   80103910 <allocproc>
+80103b2c:	89 c3                	mov    %eax,%ebx
+  initproc = p;
+80103b2e:	a3 c4 a5 10 80       	mov    %eax,0x8010a5c4
+  if ((p->pgdir = setupkvm()) == 0)
+80103b33:	e8 c8 35 00 00       	call   80107100 <setupkvm>
+80103b38:	85 c0                	test   %eax,%eax
+80103b3a:	89 43 04             	mov    %eax,0x4(%ebx)
+80103b3d:	0f 84 bd 00 00 00    	je     80103c00 <userinit+0xe0>
+  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
+80103b43:	83 ec 04             	sub    $0x4,%esp
+80103b46:	68 2c 00 00 00       	push   $0x2c
+80103b4b:	68 60 a4 10 80       	push   $0x8010a460
+80103b50:	50                   	push   %eax
+80103b51:	e8 8a 32 00 00       	call   80106de0 <inituvm>
+  memset(p->tf, 0, sizeof(*p->tf));
+80103b56:	83 c4 0c             	add    $0xc,%esp
+  p->sz = PGSIZE;
+80103b59:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+  memset(p->tf, 0, sizeof(*p->tf));
+80103b5f:	6a 4c                	push   $0x4c
+80103b61:	6a 00                	push   $0x0
+80103b63:	ff 73 18             	pushl  0x18(%ebx)
+80103b66:	e8 55 0c 00 00       	call   801047c0 <memset>
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+80103b6b:	8b 43 18             	mov    0x18(%ebx),%eax
+80103b6e:	ba 1b 00 00 00       	mov    $0x1b,%edx
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+80103b73:	b9 23 00 00 00       	mov    $0x23,%ecx
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+80103b78:	83 c4 0c             	add    $0xc,%esp
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+80103b7b:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+80103b7f:	8b 43 18             	mov    0x18(%ebx),%eax
+80103b82:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+  p->tf->es = p->tf->ds;
+80103b86:	8b 43 18             	mov    0x18(%ebx),%eax
+80103b89:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103b8d:	66 89 50 28          	mov    %dx,0x28(%eax)
+  p->tf->ss = p->tf->ds;
+80103b91:	8b 43 18             	mov    0x18(%ebx),%eax
+80103b94:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103b98:	66 89 50 48          	mov    %dx,0x48(%eax)
+  p->tf->eflags = FL_IF;
+80103b9c:	8b 43 18             	mov    0x18(%ebx),%eax
+80103b9f:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+  p->tf->esp = PGSIZE;
+80103ba6:	8b 43 18             	mov    0x18(%ebx),%eax
+80103ba9:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+  p->tf->eip = 0; // beginning of initcode.S
+80103bb0:	8b 43 18             	mov    0x18(%ebx),%eax
+80103bb3:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+80103bba:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80103bbd:	6a 10                	push   $0x10
+80103bbf:	68 65 79 10 80       	push   $0x80107965
+80103bc4:	50                   	push   %eax
+80103bc5:	e8 d6 0d 00 00       	call   801049a0 <safestrcpy>
+  p->cwd = namei("/");
+80103bca:	c7 04 24 6e 79 10 80 	movl   $0x8010796e,(%esp)
+80103bd1:	e8 1a e3 ff ff       	call   80101ef0 <namei>
+80103bd6:	89 43 68             	mov    %eax,0x68(%ebx)
+  acquire(&ptable.lock);
+80103bd9:	c7 04 24 40 2d 11 80 	movl   $0x80112d40,(%esp)
+80103be0:	e8 cb 0a 00 00       	call   801046b0 <acquire>
+  p->state = RUNNABLE;
+80103be5:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  release(&ptable.lock);
+80103bec:	c7 04 24 40 2d 11 80 	movl   $0x80112d40,(%esp)
+80103bf3:	e8 78 0b 00 00       	call   80104770 <release>
+}
+80103bf8:	83 c4 10             	add    $0x10,%esp
+80103bfb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103bfe:	c9                   	leave  
+80103bff:	c3                   	ret    
+    panic("userinit: out of memory?");
+80103c00:	83 ec 0c             	sub    $0xc,%esp
+80103c03:	68 4c 79 10 80       	push   $0x8010794c
+80103c08:	e8 83 c7 ff ff       	call   80100390 <panic>
+80103c0d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103c10 <growproc>:
+{
+80103c10:	55                   	push   %ebp
+80103c11:	89 e5                	mov    %esp,%ebp
+80103c13:	56                   	push   %esi
+80103c14:	53                   	push   %ebx
+80103c15:	8b 75 08             	mov    0x8(%ebp),%esi
+  pushcli();
+80103c18:	e8 c3 09 00 00       	call   801045e0 <pushcli>
+  c = mycpu();
+80103c1d:	e8 2e fe ff ff       	call   80103a50 <mycpu>
+  p = c->proc;
+80103c22:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103c28:	e8 f3 09 00 00       	call   80104620 <popcli>
+  if (n > 0)
+80103c2d:	83 fe 00             	cmp    $0x0,%esi
+  sz = curproc->sz;
+80103c30:	8b 03                	mov    (%ebx),%eax
+  if (n > 0)
+80103c32:	7f 1c                	jg     80103c50 <growproc+0x40>
+  else if (n < 0)
+80103c34:	75 3a                	jne    80103c70 <growproc+0x60>
+  switchuvm(curproc);
+80103c36:	83 ec 0c             	sub    $0xc,%esp
+  curproc->sz = sz;
+80103c39:	89 03                	mov    %eax,(%ebx)
+  switchuvm(curproc);
+80103c3b:	53                   	push   %ebx
+80103c3c:	e8 8f 30 00 00       	call   80106cd0 <switchuvm>
+  return 0;
+80103c41:	83 c4 10             	add    $0x10,%esp
+80103c44:	31 c0                	xor    %eax,%eax
+}
+80103c46:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103c49:	5b                   	pop    %ebx
+80103c4a:	5e                   	pop    %esi
+80103c4b:	5d                   	pop    %ebp
+80103c4c:	c3                   	ret    
+80103c4d:	8d 76 00             	lea    0x0(%esi),%esi
+    if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+80103c50:	83 ec 04             	sub    $0x4,%esp
+80103c53:	01 c6                	add    %eax,%esi
+80103c55:	56                   	push   %esi
+80103c56:	50                   	push   %eax
+80103c57:	ff 73 04             	pushl  0x4(%ebx)
+80103c5a:	e8 c1 32 00 00       	call   80106f20 <allocuvm>
+80103c5f:	83 c4 10             	add    $0x10,%esp
+80103c62:	85 c0                	test   %eax,%eax
+80103c64:	75 d0                	jne    80103c36 <growproc+0x26>
+      return -1;
+80103c66:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103c6b:	eb d9                	jmp    80103c46 <growproc+0x36>
+80103c6d:	8d 76 00             	lea    0x0(%esi),%esi
+    if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+80103c70:	83 ec 04             	sub    $0x4,%esp
+80103c73:	01 c6                	add    %eax,%esi
+80103c75:	56                   	push   %esi
+80103c76:	50                   	push   %eax
+80103c77:	ff 73 04             	pushl  0x4(%ebx)
+80103c7a:	e8 d1 33 00 00       	call   80107050 <deallocuvm>
+80103c7f:	83 c4 10             	add    $0x10,%esp
+80103c82:	85 c0                	test   %eax,%eax
+80103c84:	75 b0                	jne    80103c36 <growproc+0x26>
+80103c86:	eb de                	jmp    80103c66 <growproc+0x56>
+80103c88:	90                   	nop
+80103c89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103c90 <fork>:
+{
+80103c90:	55                   	push   %ebp
+80103c91:	89 e5                	mov    %esp,%ebp
+80103c93:	57                   	push   %edi
+80103c94:	56                   	push   %esi
+80103c95:	53                   	push   %ebx
+80103c96:	83 ec 1c             	sub    $0x1c,%esp
+  pushcli();
+80103c99:	e8 42 09 00 00       	call   801045e0 <pushcli>
+  c = mycpu();
+80103c9e:	e8 ad fd ff ff       	call   80103a50 <mycpu>
+  p = c->proc;
+80103ca3:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103ca9:	e8 72 09 00 00       	call   80104620 <popcli>
+  if ((np = allocproc()) == 0)
+80103cae:	e8 5d fc ff ff       	call   80103910 <allocproc>
+80103cb3:	85 c0                	test   %eax,%eax
+80103cb5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103cb8:	0f 84 f7 00 00 00    	je     80103db5 <fork+0x125>
+  if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0)
+80103cbe:	83 ec 08             	sub    $0x8,%esp
+80103cc1:	ff 33                	pushl  (%ebx)
+80103cc3:	ff 73 04             	pushl  0x4(%ebx)
+80103cc6:	89 c7                	mov    %eax,%edi
+80103cc8:	e8 03 35 00 00       	call   801071d0 <copyuvm>
+80103ccd:	83 c4 10             	add    $0x10,%esp
+80103cd0:	85 c0                	test   %eax,%eax
+80103cd2:	89 47 04             	mov    %eax,0x4(%edi)
+80103cd5:	0f 84 e1 00 00 00    	je     80103dbc <fork+0x12c>
+  np->sz = curproc->sz;
+80103cdb:	8b 03                	mov    (%ebx),%eax
+80103cdd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  *np->tf = *curproc->tf;
+80103ce0:	b9 13 00 00 00       	mov    $0x13,%ecx
+  np->sz = curproc->sz;
+80103ce5:	89 02                	mov    %eax,(%edx)
+  np->parent = curproc;
+80103ce7:	89 5a 14             	mov    %ebx,0x14(%edx)
+  *np->tf = *curproc->tf;
+80103cea:	8b 7a 18             	mov    0x18(%edx),%edi
+80103ced:	8b 73 18             	mov    0x18(%ebx),%esi
+80103cf0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  np->nregions = curproc->nregions;
+80103cf2:	8b 43 7c             	mov    0x7c(%ebx),%eax
+80103cf5:	89 42 7c             	mov    %eax,0x7c(%edx)
+  np->first_region = curproc->first_region;
+80103cf8:	8b b3 80 00 00 00    	mov    0x80(%ebx),%esi
+80103cfe:	89 b2 80 00 00 00    	mov    %esi,0x80(%edx)
+  for (i = 0; i < curproc->nregions; i++)
+80103d04:	8b 53 7c             	mov    0x7c(%ebx),%edx
+  mmapped_region *oldactive = curproc->first_region;
+80103d07:	8b 83 80 00 00 00    	mov    0x80(%ebx),%eax
+  for (i = 0; i < curproc->nregions; i++)
+80103d0d:	85 d2                	test   %edx,%edx
+80103d0f:	7e 17                	jle    80103d28 <fork+0x98>
+80103d11:	31 d2                	xor    %edx,%edx
+80103d13:	90                   	nop
+80103d14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    newactive->next = oldactive->next;
+80103d18:	8b 08                	mov    (%eax),%ecx
+  for (i = 0; i < curproc->nregions; i++)
+80103d1a:	83 c2 01             	add    $0x1,%edx
+    newactive->next = oldactive->next;
+80103d1d:	89 0e                	mov    %ecx,(%esi)
+  for (i = 0; i < curproc->nregions; i++)
+80103d1f:	39 53 7c             	cmp    %edx,0x7c(%ebx)
+    newactive = newactive->next;
+80103d22:	89 ce                	mov    %ecx,%esi
+    oldactive = oldactive->next;
+80103d24:	8b 00                	mov    (%eax),%eax
+  for (i = 0; i < curproc->nregions; i++)
+80103d26:	7f f0                	jg     80103d18 <fork+0x88>
+  np->tf->eax = 0;
+80103d28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+  for (i = 0; i < NOFILE; i++)
+80103d2b:	31 f6                	xor    %esi,%esi
+  np->tf->eax = 0;
+80103d2d:	8b 40 18             	mov    0x18(%eax),%eax
+80103d30:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+80103d37:	89 f6                	mov    %esi,%esi
+80103d39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    if (curproc->ofile[i])
+80103d40:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+80103d44:	85 c0                	test   %eax,%eax
+80103d46:	74 13                	je     80103d5b <fork+0xcb>
+      np->ofile[i] = filedup(curproc->ofile[i]);
+80103d48:	83 ec 0c             	sub    $0xc,%esp
+80103d4b:	50                   	push   %eax
+80103d4c:	e8 9f d0 ff ff       	call   80100df0 <filedup>
+80103d51:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80103d54:	83 c4 10             	add    $0x10,%esp
+80103d57:	89 44 b7 28          	mov    %eax,0x28(%edi,%esi,4)
+  for (i = 0; i < NOFILE; i++)
+80103d5b:	83 c6 01             	add    $0x1,%esi
+80103d5e:	83 fe 10             	cmp    $0x10,%esi
+80103d61:	75 dd                	jne    80103d40 <fork+0xb0>
+  np->cwd = idup(curproc->cwd);
+80103d63:	83 ec 0c             	sub    $0xc,%esp
+80103d66:	ff 73 68             	pushl  0x68(%ebx)
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+80103d69:	83 c3 6c             	add    $0x6c,%ebx
+  np->cwd = idup(curproc->cwd);
+80103d6c:	e8 ef d8 ff ff       	call   80101660 <idup>
+80103d71:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+80103d74:	83 c4 0c             	add    $0xc,%esp
+  np->cwd = idup(curproc->cwd);
+80103d77:	89 47 68             	mov    %eax,0x68(%edi)
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+80103d7a:	8d 47 6c             	lea    0x6c(%edi),%eax
+80103d7d:	6a 10                	push   $0x10
+80103d7f:	53                   	push   %ebx
+80103d80:	50                   	push   %eax
+80103d81:	e8 1a 0c 00 00       	call   801049a0 <safestrcpy>
+  pid = np->pid;
+80103d86:	8b 5f 10             	mov    0x10(%edi),%ebx
+  acquire(&ptable.lock);
+80103d89:	c7 04 24 40 2d 11 80 	movl   $0x80112d40,(%esp)
+80103d90:	e8 1b 09 00 00       	call   801046b0 <acquire>
+  np->state = RUNNABLE;
+80103d95:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+  release(&ptable.lock);
+80103d9c:	c7 04 24 40 2d 11 80 	movl   $0x80112d40,(%esp)
+80103da3:	e8 c8 09 00 00       	call   80104770 <release>
+  return pid;
+80103da8:	83 c4 10             	add    $0x10,%esp
+}
+80103dab:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103dae:	89 d8                	mov    %ebx,%eax
+80103db0:	5b                   	pop    %ebx
+80103db1:	5e                   	pop    %esi
+80103db2:	5f                   	pop    %edi
+80103db3:	5d                   	pop    %ebp
+80103db4:	c3                   	ret    
+    return -1;
+80103db5:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103dba:	eb ef                	jmp    80103dab <fork+0x11b>
+    kfree(np->kstack);
+80103dbc:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80103dbf:	83 ec 0c             	sub    $0xc,%esp
+80103dc2:	ff 73 08             	pushl  0x8(%ebx)
+80103dc5:	e8 56 e5 ff ff       	call   80102320 <kfree>
+    np->kstack = 0;
+80103dca:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+    np->state = UNUSED;
+80103dd1:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+    return -1;
+80103dd8:	83 c4 10             	add    $0x10,%esp
+80103ddb:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103de0:	eb c9                	jmp    80103dab <fork+0x11b>
+80103de2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103de9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103df0 <scheduler>:
+{
+80103df0:	55                   	push   %ebp
+80103df1:	89 e5                	mov    %esp,%ebp
+80103df3:	57                   	push   %edi
+80103df4:	56                   	push   %esi
+80103df5:	53                   	push   %ebx
+80103df6:	83 ec 0c             	sub    $0xc,%esp
+  struct cpu *c = mycpu();
+80103df9:	e8 52 fc ff ff       	call   80103a50 <mycpu>
+80103dfe:	8d 78 04             	lea    0x4(%eax),%edi
+80103e01:	89 c6                	mov    %eax,%esi
+  c->proc = 0;
+80103e03:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+80103e0a:	00 00 00 
+80103e0d:	8d 76 00             	lea    0x0(%esi),%esi
+  asm volatile("sti");
+80103e10:	fb                   	sti    
+    acquire(&ptable.lock);
+80103e11:	83 ec 0c             	sub    $0xc,%esp
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103e14:	bb 74 2d 11 80       	mov    $0x80112d74,%ebx
+    acquire(&ptable.lock);
+80103e19:	68 40 2d 11 80       	push   $0x80112d40
+80103e1e:	e8 8d 08 00 00       	call   801046b0 <acquire>
+80103e23:	83 c4 10             	add    $0x10,%esp
+80103e26:	8d 76 00             	lea    0x0(%esi),%esi
+80103e29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      if (p->state != RUNNABLE)
+80103e30:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
+80103e34:	75 33                	jne    80103e69 <scheduler+0x79>
+      switchuvm(p);
+80103e36:	83 ec 0c             	sub    $0xc,%esp
+      c->proc = p;
+80103e39:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
+      switchuvm(p);
+80103e3f:	53                   	push   %ebx
+80103e40:	e8 8b 2e 00 00       	call   80106cd0 <switchuvm>
+      swtch(&(c->scheduler), p->context);
+80103e45:	58                   	pop    %eax
+80103e46:	5a                   	pop    %edx
+80103e47:	ff 73 1c             	pushl  0x1c(%ebx)
+80103e4a:	57                   	push   %edi
+      p->state = RUNNING;
+80103e4b:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
+      swtch(&(c->scheduler), p->context);
+80103e52:	e8 a4 0b 00 00       	call   801049fb <swtch>
+      switchkvm();
+80103e57:	e8 54 2e 00 00       	call   80106cb0 <switchkvm>
+      c->proc = 0;
+80103e5c:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
+80103e63:	00 00 00 
+80103e66:	83 c4 10             	add    $0x10,%esp
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103e69:	81 c3 84 00 00 00    	add    $0x84,%ebx
+80103e6f:	81 fb 74 4e 11 80    	cmp    $0x80114e74,%ebx
+80103e75:	72 b9                	jb     80103e30 <scheduler+0x40>
+    release(&ptable.lock);
+80103e77:	83 ec 0c             	sub    $0xc,%esp
+80103e7a:	68 40 2d 11 80       	push   $0x80112d40
+80103e7f:	e8 ec 08 00 00       	call   80104770 <release>
+    sti();
+80103e84:	83 c4 10             	add    $0x10,%esp
+80103e87:	eb 87                	jmp    80103e10 <scheduler+0x20>
+80103e89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103e90 <sched>:
+{
+80103e90:	55                   	push   %ebp
+80103e91:	89 e5                	mov    %esp,%ebp
+80103e93:	56                   	push   %esi
+80103e94:	53                   	push   %ebx
+  pushcli();
+80103e95:	e8 46 07 00 00       	call   801045e0 <pushcli>
+  c = mycpu();
+80103e9a:	e8 b1 fb ff ff       	call   80103a50 <mycpu>
+  p = c->proc;
+80103e9f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103ea5:	e8 76 07 00 00       	call   80104620 <popcli>
+  if (!holding(&ptable.lock))
+80103eaa:	83 ec 0c             	sub    $0xc,%esp
+80103ead:	68 40 2d 11 80       	push   $0x80112d40
+80103eb2:	e8 c9 07 00 00       	call   80104680 <holding>
+80103eb7:	83 c4 10             	add    $0x10,%esp
+80103eba:	85 c0                	test   %eax,%eax
+80103ebc:	74 4f                	je     80103f0d <sched+0x7d>
+  if (mycpu()->ncli != 1)
+80103ebe:	e8 8d fb ff ff       	call   80103a50 <mycpu>
+80103ec3:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+80103eca:	75 68                	jne    80103f34 <sched+0xa4>
+  if (p->state == RUNNING)
+80103ecc:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80103ed0:	74 55                	je     80103f27 <sched+0x97>
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80103ed2:	9c                   	pushf  
+80103ed3:	58                   	pop    %eax
+  if (readeflags() & FL_IF)
+80103ed4:	f6 c4 02             	test   $0x2,%ah
+80103ed7:	75 41                	jne    80103f1a <sched+0x8a>
+  intena = mycpu()->intena;
+80103ed9:	e8 72 fb ff ff       	call   80103a50 <mycpu>
+  swtch(&p->context, mycpu()->scheduler);
+80103ede:	83 c3 1c             	add    $0x1c,%ebx
+  intena = mycpu()->intena;
+80103ee1:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+  swtch(&p->context, mycpu()->scheduler);
+80103ee7:	e8 64 fb ff ff       	call   80103a50 <mycpu>
+80103eec:	83 ec 08             	sub    $0x8,%esp
+80103eef:	ff 70 04             	pushl  0x4(%eax)
+80103ef2:	53                   	push   %ebx
+80103ef3:	e8 03 0b 00 00       	call   801049fb <swtch>
+  mycpu()->intena = intena;
+80103ef8:	e8 53 fb ff ff       	call   80103a50 <mycpu>
+}
+80103efd:	83 c4 10             	add    $0x10,%esp
+  mycpu()->intena = intena;
+80103f00:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+}
+80103f06:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103f09:	5b                   	pop    %ebx
+80103f0a:	5e                   	pop    %esi
+80103f0b:	5d                   	pop    %ebp
+80103f0c:	c3                   	ret    
+    panic("sched ptable.lock");
+80103f0d:	83 ec 0c             	sub    $0xc,%esp
+80103f10:	68 70 79 10 80       	push   $0x80107970
+80103f15:	e8 76 c4 ff ff       	call   80100390 <panic>
+    panic("sched interruptible");
+80103f1a:	83 ec 0c             	sub    $0xc,%esp
+80103f1d:	68 9c 79 10 80       	push   $0x8010799c
+80103f22:	e8 69 c4 ff ff       	call   80100390 <panic>
+    panic("sched running");
+80103f27:	83 ec 0c             	sub    $0xc,%esp
+80103f2a:	68 8e 79 10 80       	push   $0x8010798e
+80103f2f:	e8 5c c4 ff ff       	call   80100390 <panic>
+    panic("sched locks");
+80103f34:	83 ec 0c             	sub    $0xc,%esp
+80103f37:	68 82 79 10 80       	push   $0x80107982
+80103f3c:	e8 4f c4 ff ff       	call   80100390 <panic>
+80103f41:	eb 0d                	jmp    80103f50 <exit>
+80103f43:	90                   	nop
+80103f44:	90                   	nop
+80103f45:	90                   	nop
+80103f46:	90                   	nop
+80103f47:	90                   	nop
+80103f48:	90                   	nop
+80103f49:	90                   	nop
+80103f4a:	90                   	nop
+80103f4b:	90                   	nop
+80103f4c:	90                   	nop
+80103f4d:	90                   	nop
+80103f4e:	90                   	nop
+80103f4f:	90                   	nop
+
+80103f50 <exit>:
+{
+80103f50:	55                   	push   %ebp
+80103f51:	89 e5                	mov    %esp,%ebp
+80103f53:	57                   	push   %edi
+80103f54:	56                   	push   %esi
+80103f55:	53                   	push   %ebx
+80103f56:	83 ec 0c             	sub    $0xc,%esp
+  pushcli();
+80103f59:	e8 82 06 00 00       	call   801045e0 <pushcli>
+  c = mycpu();
+80103f5e:	e8 ed fa ff ff       	call   80103a50 <mycpu>
+  p = c->proc;
+80103f63:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80103f69:	e8 b2 06 00 00       	call   80104620 <popcli>
+  if (curproc == initproc)
+80103f6e:	39 35 c4 a5 10 80    	cmp    %esi,0x8010a5c4
+80103f74:	8d 5e 28             	lea    0x28(%esi),%ebx
+80103f77:	8d 7e 68             	lea    0x68(%esi),%edi
+80103f7a:	0f 84 f1 00 00 00    	je     80104071 <exit+0x121>
+    if (curproc->ofile[fd])
+80103f80:	8b 03                	mov    (%ebx),%eax
+80103f82:	85 c0                	test   %eax,%eax
+80103f84:	74 12                	je     80103f98 <exit+0x48>
+      fileclose(curproc->ofile[fd]);
+80103f86:	83 ec 0c             	sub    $0xc,%esp
+80103f89:	50                   	push   %eax
+80103f8a:	e8 b1 ce ff ff       	call   80100e40 <fileclose>
+      curproc->ofile[fd] = 0;
+80103f8f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80103f95:	83 c4 10             	add    $0x10,%esp
+80103f98:	83 c3 04             	add    $0x4,%ebx
+  for (fd = 0; fd < NOFILE; fd++)
+80103f9b:	39 fb                	cmp    %edi,%ebx
+80103f9d:	75 e1                	jne    80103f80 <exit+0x30>
+  begin_op();
+80103f9f:	e8 0c ef ff ff       	call   80102eb0 <begin_op>
+  iput(curproc->cwd);
+80103fa4:	83 ec 0c             	sub    $0xc,%esp
+80103fa7:	ff 76 68             	pushl  0x68(%esi)
+80103faa:	e8 11 d8 ff ff       	call   801017c0 <iput>
+  end_op();
+80103faf:	e8 6c ef ff ff       	call   80102f20 <end_op>
+  curproc->cwd = 0;
+80103fb4:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
+  acquire(&ptable.lock);
+80103fbb:	c7 04 24 40 2d 11 80 	movl   $0x80112d40,(%esp)
+80103fc2:	e8 e9 06 00 00       	call   801046b0 <acquire>
+  wakeup1(curproc->parent);
+80103fc7:	8b 56 14             	mov    0x14(%esi),%edx
+80103fca:	83 c4 10             	add    $0x10,%esp
+static void
+wakeup1(void *chan)
+{
+  struct proc *p;
+
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103fcd:	b8 74 2d 11 80       	mov    $0x80112d74,%eax
+80103fd2:	eb 10                	jmp    80103fe4 <exit+0x94>
+80103fd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103fd8:	05 84 00 00 00       	add    $0x84,%eax
+80103fdd:	3d 74 4e 11 80       	cmp    $0x80114e74,%eax
+80103fe2:	73 1e                	jae    80104002 <exit+0xb2>
+    if (p->state == SLEEPING && p->chan == chan)
+80103fe4:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103fe8:	75 ee                	jne    80103fd8 <exit+0x88>
+80103fea:	3b 50 20             	cmp    0x20(%eax),%edx
+80103fed:	75 e9                	jne    80103fd8 <exit+0x88>
+      p->state = RUNNABLE;
+80103fef:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103ff6:	05 84 00 00 00       	add    $0x84,%eax
+80103ffb:	3d 74 4e 11 80       	cmp    $0x80114e74,%eax
+80104000:	72 e2                	jb     80103fe4 <exit+0x94>
+      p->parent = initproc;
+80104002:	8b 0d c4 a5 10 80    	mov    0x8010a5c4,%ecx
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104008:	ba 74 2d 11 80       	mov    $0x80112d74,%edx
+8010400d:	eb 0f                	jmp    8010401e <exit+0xce>
+8010400f:	90                   	nop
+80104010:	81 c2 84 00 00 00    	add    $0x84,%edx
+80104016:	81 fa 74 4e 11 80    	cmp    $0x80114e74,%edx
+8010401c:	73 3a                	jae    80104058 <exit+0x108>
+    if (p->parent == curproc)
+8010401e:	39 72 14             	cmp    %esi,0x14(%edx)
+80104021:	75 ed                	jne    80104010 <exit+0xc0>
+      if (p->state == ZOMBIE)
+80104023:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+      p->parent = initproc;
+80104027:	89 4a 14             	mov    %ecx,0x14(%edx)
+      if (p->state == ZOMBIE)
+8010402a:	75 e4                	jne    80104010 <exit+0xc0>
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+8010402c:	b8 74 2d 11 80       	mov    $0x80112d74,%eax
+80104031:	eb 11                	jmp    80104044 <exit+0xf4>
+80104033:	90                   	nop
+80104034:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104038:	05 84 00 00 00       	add    $0x84,%eax
+8010403d:	3d 74 4e 11 80       	cmp    $0x80114e74,%eax
+80104042:	73 cc                	jae    80104010 <exit+0xc0>
+    if (p->state == SLEEPING && p->chan == chan)
+80104044:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104048:	75 ee                	jne    80104038 <exit+0xe8>
+8010404a:	3b 48 20             	cmp    0x20(%eax),%ecx
+8010404d:	75 e9                	jne    80104038 <exit+0xe8>
+      p->state = RUNNABLE;
+8010404f:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80104056:	eb e0                	jmp    80104038 <exit+0xe8>
+  curproc->state = ZOMBIE;
+80104058:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
+  sched();
+8010405f:	e8 2c fe ff ff       	call   80103e90 <sched>
+  panic("zombie exit");
+80104064:	83 ec 0c             	sub    $0xc,%esp
+80104067:	68 bd 79 10 80       	push   $0x801079bd
+8010406c:	e8 1f c3 ff ff       	call   80100390 <panic>
+    panic("init exiting");
+80104071:	83 ec 0c             	sub    $0xc,%esp
+80104074:	68 b0 79 10 80       	push   $0x801079b0
+80104079:	e8 12 c3 ff ff       	call   80100390 <panic>
+8010407e:	66 90                	xchg   %ax,%ax
+
+80104080 <yield>:
+{
+80104080:	55                   	push   %ebp
+80104081:	89 e5                	mov    %esp,%ebp
+80104083:	53                   	push   %ebx
+80104084:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock); // DOC: yieldlock
+80104087:	68 40 2d 11 80       	push   $0x80112d40
+8010408c:	e8 1f 06 00 00       	call   801046b0 <acquire>
+  pushcli();
+80104091:	e8 4a 05 00 00       	call   801045e0 <pushcli>
+  c = mycpu();
+80104096:	e8 b5 f9 ff ff       	call   80103a50 <mycpu>
+  p = c->proc;
+8010409b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801040a1:	e8 7a 05 00 00       	call   80104620 <popcli>
+  myproc()->state = RUNNABLE;
+801040a6:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  sched();
+801040ad:	e8 de fd ff ff       	call   80103e90 <sched>
+  release(&ptable.lock);
+801040b2:	c7 04 24 40 2d 11 80 	movl   $0x80112d40,(%esp)
+801040b9:	e8 b2 06 00 00       	call   80104770 <release>
+}
+801040be:	83 c4 10             	add    $0x10,%esp
+801040c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801040c4:	c9                   	leave  
+801040c5:	c3                   	ret    
+801040c6:	8d 76 00             	lea    0x0(%esi),%esi
+801040c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801040d0 <sleep>:
+{
+801040d0:	55                   	push   %ebp
+801040d1:	89 e5                	mov    %esp,%ebp
+801040d3:	57                   	push   %edi
+801040d4:	56                   	push   %esi
+801040d5:	53                   	push   %ebx
+801040d6:	83 ec 0c             	sub    $0xc,%esp
+801040d9:	8b 7d 08             	mov    0x8(%ebp),%edi
+801040dc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  pushcli();
+801040df:	e8 fc 04 00 00       	call   801045e0 <pushcli>
+  c = mycpu();
+801040e4:	e8 67 f9 ff ff       	call   80103a50 <mycpu>
+  p = c->proc;
+801040e9:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801040ef:	e8 2c 05 00 00       	call   80104620 <popcli>
+  if (p == 0)
+801040f4:	85 db                	test   %ebx,%ebx
+801040f6:	0f 84 87 00 00 00    	je     80104183 <sleep+0xb3>
+  if (lk == 0)
+801040fc:	85 f6                	test   %esi,%esi
+801040fe:	74 76                	je     80104176 <sleep+0xa6>
+  if (lk != &ptable.lock)
+80104100:	81 fe 40 2d 11 80    	cmp    $0x80112d40,%esi
+80104106:	74 50                	je     80104158 <sleep+0x88>
+    acquire(&ptable.lock); // DOC: sleeplock1
+80104108:	83 ec 0c             	sub    $0xc,%esp
+8010410b:	68 40 2d 11 80       	push   $0x80112d40
+80104110:	e8 9b 05 00 00       	call   801046b0 <acquire>
+    release(lk);
+80104115:	89 34 24             	mov    %esi,(%esp)
+80104118:	e8 53 06 00 00       	call   80104770 <release>
+  p->chan = chan;
+8010411d:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+80104120:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+  sched();
+80104127:	e8 64 fd ff ff       	call   80103e90 <sched>
+  p->chan = 0;
+8010412c:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+    release(&ptable.lock);
+80104133:	c7 04 24 40 2d 11 80 	movl   $0x80112d40,(%esp)
+8010413a:	e8 31 06 00 00       	call   80104770 <release>
+    acquire(lk);
+8010413f:	89 75 08             	mov    %esi,0x8(%ebp)
+80104142:	83 c4 10             	add    $0x10,%esp
+}
+80104145:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104148:	5b                   	pop    %ebx
+80104149:	5e                   	pop    %esi
+8010414a:	5f                   	pop    %edi
+8010414b:	5d                   	pop    %ebp
+    acquire(lk);
+8010414c:	e9 5f 05 00 00       	jmp    801046b0 <acquire>
+80104151:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  p->chan = chan;
+80104158:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+8010415b:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+  sched();
+80104162:	e8 29 fd ff ff       	call   80103e90 <sched>
+  p->chan = 0;
+80104167:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+}
+8010416e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104171:	5b                   	pop    %ebx
+80104172:	5e                   	pop    %esi
+80104173:	5f                   	pop    %edi
+80104174:	5d                   	pop    %ebp
+80104175:	c3                   	ret    
+    panic("sleep without lk");
+80104176:	83 ec 0c             	sub    $0xc,%esp
+80104179:	68 cf 79 10 80       	push   $0x801079cf
+8010417e:	e8 0d c2 ff ff       	call   80100390 <panic>
+    panic("sleep");
+80104183:	83 ec 0c             	sub    $0xc,%esp
+80104186:	68 c9 79 10 80       	push   $0x801079c9
+8010418b:	e8 00 c2 ff ff       	call   80100390 <panic>
+
+80104190 <wait>:
+{
+80104190:	55                   	push   %ebp
+80104191:	89 e5                	mov    %esp,%ebp
+80104193:	56                   	push   %esi
+80104194:	53                   	push   %ebx
+  pushcli();
+80104195:	e8 46 04 00 00       	call   801045e0 <pushcli>
+  c = mycpu();
+8010419a:	e8 b1 f8 ff ff       	call   80103a50 <mycpu>
+  p = c->proc;
+8010419f:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+801041a5:	e8 76 04 00 00       	call   80104620 <popcli>
+  acquire(&ptable.lock);
+801041aa:	83 ec 0c             	sub    $0xc,%esp
+801041ad:	68 40 2d 11 80       	push   $0x80112d40
+801041b2:	e8 f9 04 00 00       	call   801046b0 <acquire>
+801041b7:	83 c4 10             	add    $0x10,%esp
+    havekids = 0;
+801041ba:	31 c0                	xor    %eax,%eax
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801041bc:	bb 74 2d 11 80       	mov    $0x80112d74,%ebx
+801041c1:	eb 13                	jmp    801041d6 <wait+0x46>
+801041c3:	90                   	nop
+801041c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801041c8:	81 c3 84 00 00 00    	add    $0x84,%ebx
+801041ce:	81 fb 74 4e 11 80    	cmp    $0x80114e74,%ebx
+801041d4:	73 1e                	jae    801041f4 <wait+0x64>
+      if (p->parent != curproc)
+801041d6:	39 73 14             	cmp    %esi,0x14(%ebx)
+801041d9:	75 ed                	jne    801041c8 <wait+0x38>
+      if (p->state == ZOMBIE)
+801041db:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+801041df:	74 37                	je     80104218 <wait+0x88>
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801041e1:	81 c3 84 00 00 00    	add    $0x84,%ebx
+      havekids = 1;
+801041e7:	b8 01 00 00 00       	mov    $0x1,%eax
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801041ec:	81 fb 74 4e 11 80    	cmp    $0x80114e74,%ebx
+801041f2:	72 e2                	jb     801041d6 <wait+0x46>
+    if (!havekids || curproc->killed)
+801041f4:	85 c0                	test   %eax,%eax
+801041f6:	74 76                	je     8010426e <wait+0xde>
+801041f8:	8b 46 24             	mov    0x24(%esi),%eax
+801041fb:	85 c0                	test   %eax,%eax
+801041fd:	75 6f                	jne    8010426e <wait+0xde>
+    sleep(curproc, &ptable.lock); // DOC: wait-sleep
+801041ff:	83 ec 08             	sub    $0x8,%esp
+80104202:	68 40 2d 11 80       	push   $0x80112d40
+80104207:	56                   	push   %esi
+80104208:	e8 c3 fe ff ff       	call   801040d0 <sleep>
+    havekids = 0;
+8010420d:	83 c4 10             	add    $0x10,%esp
+80104210:	eb a8                	jmp    801041ba <wait+0x2a>
+80104212:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        kfree(p->kstack);
+80104218:	83 ec 0c             	sub    $0xc,%esp
+8010421b:	ff 73 08             	pushl  0x8(%ebx)
+        pid = p->pid;
+8010421e:	8b 73 10             	mov    0x10(%ebx),%esi
+        kfree(p->kstack);
+80104221:	e8 fa e0 ff ff       	call   80102320 <kfree>
+        freevm(p->pgdir);
+80104226:	5a                   	pop    %edx
+80104227:	ff 73 04             	pushl  0x4(%ebx)
+        p->kstack = 0;
+8010422a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+        freevm(p->pgdir);
+80104231:	e8 4a 2e 00 00       	call   80107080 <freevm>
+        release(&ptable.lock);
+80104236:	c7 04 24 40 2d 11 80 	movl   $0x80112d40,(%esp)
+        p->pid = 0;
+8010423d:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+        p->parent = 0;
+80104244:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+        p->name[0] = 0;
+8010424b:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+        p->killed = 0;
+8010424f:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+        p->state = UNUSED;
+80104256:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+        release(&ptable.lock);
+8010425d:	e8 0e 05 00 00       	call   80104770 <release>
+        return pid;
+80104262:	83 c4 10             	add    $0x10,%esp
+}
+80104265:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104268:	89 f0                	mov    %esi,%eax
+8010426a:	5b                   	pop    %ebx
+8010426b:	5e                   	pop    %esi
+8010426c:	5d                   	pop    %ebp
+8010426d:	c3                   	ret    
+      release(&ptable.lock);
+8010426e:	83 ec 0c             	sub    $0xc,%esp
+      return -1;
+80104271:	be ff ff ff ff       	mov    $0xffffffff,%esi
+      release(&ptable.lock);
+80104276:	68 40 2d 11 80       	push   $0x80112d40
+8010427b:	e8 f0 04 00 00       	call   80104770 <release>
+      return -1;
+80104280:	83 c4 10             	add    $0x10,%esp
+80104283:	eb e0                	jmp    80104265 <wait+0xd5>
+80104285:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104289:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104290 <wakeup>:
+}
+
+// Wake up all processes sleeping on chan.
+void wakeup(void *chan)
+{
+80104290:	55                   	push   %ebp
+80104291:	89 e5                	mov    %esp,%ebp
+80104293:	53                   	push   %ebx
+80104294:	83 ec 10             	sub    $0x10,%esp
+80104297:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&ptable.lock);
+8010429a:	68 40 2d 11 80       	push   $0x80112d40
+8010429f:	e8 0c 04 00 00       	call   801046b0 <acquire>
+801042a4:	83 c4 10             	add    $0x10,%esp
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801042a7:	b8 74 2d 11 80       	mov    $0x80112d74,%eax
+801042ac:	eb 0e                	jmp    801042bc <wakeup+0x2c>
+801042ae:	66 90                	xchg   %ax,%ax
+801042b0:	05 84 00 00 00       	add    $0x84,%eax
+801042b5:	3d 74 4e 11 80       	cmp    $0x80114e74,%eax
+801042ba:	73 1e                	jae    801042da <wakeup+0x4a>
+    if (p->state == SLEEPING && p->chan == chan)
+801042bc:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+801042c0:	75 ee                	jne    801042b0 <wakeup+0x20>
+801042c2:	3b 58 20             	cmp    0x20(%eax),%ebx
+801042c5:	75 e9                	jne    801042b0 <wakeup+0x20>
+      p->state = RUNNABLE;
+801042c7:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801042ce:	05 84 00 00 00       	add    $0x84,%eax
+801042d3:	3d 74 4e 11 80       	cmp    $0x80114e74,%eax
+801042d8:	72 e2                	jb     801042bc <wakeup+0x2c>
+  wakeup1(chan);
+  release(&ptable.lock);
+801042da:	c7 45 08 40 2d 11 80 	movl   $0x80112d40,0x8(%ebp)
+}
+801042e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801042e4:	c9                   	leave  
+  release(&ptable.lock);
+801042e5:	e9 86 04 00 00       	jmp    80104770 <release>
+801042ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801042f0 <kill>:
+
+// Kill the process with the given pid.
+// Process won't exit until it returns
+// to user space (see trap in trap.c).
+int kill(int pid)
+{
+801042f0:	55                   	push   %ebp
+801042f1:	89 e5                	mov    %esp,%ebp
+801042f3:	53                   	push   %ebx
+801042f4:	83 ec 10             	sub    $0x10,%esp
+801042f7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *p;
+
+  acquire(&ptable.lock);
+801042fa:	68 40 2d 11 80       	push   $0x80112d40
+801042ff:	e8 ac 03 00 00       	call   801046b0 <acquire>
+80104304:	83 c4 10             	add    $0x10,%esp
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104307:	b8 74 2d 11 80       	mov    $0x80112d74,%eax
+8010430c:	eb 0e                	jmp    8010431c <kill+0x2c>
+8010430e:	66 90                	xchg   %ax,%ax
+80104310:	05 84 00 00 00       	add    $0x84,%eax
+80104315:	3d 74 4e 11 80       	cmp    $0x80114e74,%eax
+8010431a:	73 34                	jae    80104350 <kill+0x60>
+  {
+    if (p->pid == pid)
+8010431c:	39 58 10             	cmp    %ebx,0x10(%eax)
+8010431f:	75 ef                	jne    80104310 <kill+0x20>
+    {
+      p->killed = 1;
+      // Wake process from sleep if necessary.
+      if (p->state == SLEEPING)
+80104321:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+      p->killed = 1;
+80104325:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+      if (p->state == SLEEPING)
+8010432c:	75 07                	jne    80104335 <kill+0x45>
+        p->state = RUNNABLE;
+8010432e:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+      release(&ptable.lock);
+80104335:	83 ec 0c             	sub    $0xc,%esp
+80104338:	68 40 2d 11 80       	push   $0x80112d40
+8010433d:	e8 2e 04 00 00       	call   80104770 <release>
+      return 0;
+80104342:	83 c4 10             	add    $0x10,%esp
+80104345:	31 c0                	xor    %eax,%eax
+    }
+  }
+  release(&ptable.lock);
+  return -1;
+}
+80104347:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010434a:	c9                   	leave  
+8010434b:	c3                   	ret    
+8010434c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  release(&ptable.lock);
+80104350:	83 ec 0c             	sub    $0xc,%esp
+80104353:	68 40 2d 11 80       	push   $0x80112d40
+80104358:	e8 13 04 00 00       	call   80104770 <release>
+  return -1;
+8010435d:	83 c4 10             	add    $0x10,%esp
+80104360:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104365:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104368:	c9                   	leave  
+80104369:	c3                   	ret    
+8010436a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104370 <procdump>:
+// PAGEBREAK: 36
+//  Print a process listing to console.  For debugging.
+//  Runs when user types ^P on console.
+//  No lock to avoid wedging a stuck machine further.
+void procdump(void)
+{
+80104370:	55                   	push   %ebp
+80104371:	89 e5                	mov    %esp,%ebp
+80104373:	57                   	push   %edi
+80104374:	56                   	push   %esi
+80104375:	53                   	push   %ebx
+80104376:	8d 75 e8             	lea    -0x18(%ebp),%esi
+  int i;
+  struct proc *p;
+  char *state;
+  uint pc[10];
+
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104379:	bb 74 2d 11 80       	mov    $0x80112d74,%ebx
+{
+8010437e:	83 ec 3c             	sub    $0x3c,%esp
+80104381:	eb 27                	jmp    801043aa <procdump+0x3a>
+80104383:	90                   	nop
+80104384:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    {
+      getcallerpcs((uint *)p->context->ebp + 2, pc);
+      for (i = 0; i < 10 && pc[i] != 0; i++)
+        cprintf(" %p", pc[i]);
+    }
+    cprintf("\n");
+80104388:	83 ec 0c             	sub    $0xc,%esp
+8010438b:	68 67 7d 10 80       	push   $0x80107d67
+80104390:	e8 cb c2 ff ff       	call   80100660 <cprintf>
+80104395:	83 c4 10             	add    $0x10,%esp
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104398:	81 c3 84 00 00 00    	add    $0x84,%ebx
+8010439e:	81 fb 74 4e 11 80    	cmp    $0x80114e74,%ebx
+801043a4:	0f 83 86 00 00 00    	jae    80104430 <procdump+0xc0>
+    if (p->state == UNUSED)
+801043aa:	8b 43 0c             	mov    0xc(%ebx),%eax
+801043ad:	85 c0                	test   %eax,%eax
+801043af:	74 e7                	je     80104398 <procdump+0x28>
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
+801043b1:	83 f8 05             	cmp    $0x5,%eax
+      state = "???";
+801043b4:	ba e0 79 10 80       	mov    $0x801079e0,%edx
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
+801043b9:	77 11                	ja     801043cc <procdump+0x5c>
+801043bb:	8b 14 85 40 7a 10 80 	mov    -0x7fef85c0(,%eax,4),%edx
+      state = "???";
+801043c2:	b8 e0 79 10 80       	mov    $0x801079e0,%eax
+801043c7:	85 d2                	test   %edx,%edx
+801043c9:	0f 44 d0             	cmove  %eax,%edx
+    cprintf("%d %s %s", p->pid, state, p->name);
+801043cc:	8d 43 6c             	lea    0x6c(%ebx),%eax
+801043cf:	50                   	push   %eax
+801043d0:	52                   	push   %edx
+801043d1:	ff 73 10             	pushl  0x10(%ebx)
+801043d4:	68 e4 79 10 80       	push   $0x801079e4
+801043d9:	e8 82 c2 ff ff       	call   80100660 <cprintf>
+    if (p->state == SLEEPING)
+801043de:	83 c4 10             	add    $0x10,%esp
+801043e1:	83 7b 0c 02          	cmpl   $0x2,0xc(%ebx)
+801043e5:	75 a1                	jne    80104388 <procdump+0x18>
+      getcallerpcs((uint *)p->context->ebp + 2, pc);
+801043e7:	8d 45 c0             	lea    -0x40(%ebp),%eax
+801043ea:	83 ec 08             	sub    $0x8,%esp
+801043ed:	8d 7d c0             	lea    -0x40(%ebp),%edi
+801043f0:	50                   	push   %eax
+801043f1:	8b 43 1c             	mov    0x1c(%ebx),%eax
+801043f4:	8b 40 0c             	mov    0xc(%eax),%eax
+801043f7:	83 c0 08             	add    $0x8,%eax
+801043fa:	50                   	push   %eax
+801043fb:	e8 90 01 00 00       	call   80104590 <getcallerpcs>
+80104400:	83 c4 10             	add    $0x10,%esp
+80104403:	90                   	nop
+80104404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      for (i = 0; i < 10 && pc[i] != 0; i++)
+80104408:	8b 17                	mov    (%edi),%edx
+8010440a:	85 d2                	test   %edx,%edx
+8010440c:	0f 84 76 ff ff ff    	je     80104388 <procdump+0x18>
+        cprintf(" %p", pc[i]);
+80104412:	83 ec 08             	sub    $0x8,%esp
+80104415:	83 c7 04             	add    $0x4,%edi
+80104418:	52                   	push   %edx
+80104419:	68 e1 73 10 80       	push   $0x801073e1
+8010441e:	e8 3d c2 ff ff       	call   80100660 <cprintf>
+      for (i = 0; i < 10 && pc[i] != 0; i++)
+80104423:	83 c4 10             	add    $0x10,%esp
+80104426:	39 fe                	cmp    %edi,%esi
+80104428:	75 de                	jne    80104408 <procdump+0x98>
+8010442a:	e9 59 ff ff ff       	jmp    80104388 <procdump+0x18>
+8010442f:	90                   	nop
+  }
+}
+80104430:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104433:	5b                   	pop    %ebx
+80104434:	5e                   	pop    %esi
+80104435:	5f                   	pop    %edi
+80104436:	5d                   	pop    %ebp
+80104437:	c3                   	ret    
+80104438:	66 90                	xchg   %ax,%ax
+8010443a:	66 90                	xchg   %ax,%ax
+8010443c:	66 90                	xchg   %ax,%ax
+8010443e:	66 90                	xchg   %ax,%ax
+
+80104440 <initsleeplock>:
+#include "spinlock.h"
+#include "sleeplock.h"
+
+void
+initsleeplock(struct sleeplock *lk, char *name)
+{
+80104440:	55                   	push   %ebp
+80104441:	89 e5                	mov    %esp,%ebp
+80104443:	53                   	push   %ebx
+80104444:	83 ec 0c             	sub    $0xc,%esp
+80104447:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  initlock(&lk->lk, "sleep lock");
+8010444a:	68 58 7a 10 80       	push   $0x80107a58
+8010444f:	8d 43 04             	lea    0x4(%ebx),%eax
+80104452:	50                   	push   %eax
+80104453:	e8 18 01 00 00       	call   80104570 <initlock>
+  lk->name = name;
+80104458:	8b 45 0c             	mov    0xc(%ebp),%eax
+  lk->locked = 0;
+8010445b:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  lk->pid = 0;
+}
+80104461:	83 c4 10             	add    $0x10,%esp
+  lk->pid = 0;
+80104464:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+  lk->name = name;
+8010446b:	89 43 38             	mov    %eax,0x38(%ebx)
+}
+8010446e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104471:	c9                   	leave  
+80104472:	c3                   	ret    
+80104473:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104479:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104480 <acquiresleep>:
+
+void
+acquiresleep(struct sleeplock *lk)
+{
+80104480:	55                   	push   %ebp
+80104481:	89 e5                	mov    %esp,%ebp
+80104483:	56                   	push   %esi
+80104484:	53                   	push   %ebx
+80104485:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&lk->lk);
+80104488:	83 ec 0c             	sub    $0xc,%esp
+8010448b:	8d 73 04             	lea    0x4(%ebx),%esi
+8010448e:	56                   	push   %esi
+8010448f:	e8 1c 02 00 00       	call   801046b0 <acquire>
+  while (lk->locked) {
+80104494:	8b 13                	mov    (%ebx),%edx
+80104496:	83 c4 10             	add    $0x10,%esp
+80104499:	85 d2                	test   %edx,%edx
+8010449b:	74 16                	je     801044b3 <acquiresleep+0x33>
+8010449d:	8d 76 00             	lea    0x0(%esi),%esi
+    sleep(lk, &lk->lk);
+801044a0:	83 ec 08             	sub    $0x8,%esp
+801044a3:	56                   	push   %esi
+801044a4:	53                   	push   %ebx
+801044a5:	e8 26 fc ff ff       	call   801040d0 <sleep>
+  while (lk->locked) {
+801044aa:	8b 03                	mov    (%ebx),%eax
+801044ac:	83 c4 10             	add    $0x10,%esp
+801044af:	85 c0                	test   %eax,%eax
+801044b1:	75 ed                	jne    801044a0 <acquiresleep+0x20>
+  }
+  lk->locked = 1;
+801044b3:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  lk->pid = myproc()->pid;
+801044b9:	e8 32 f6 ff ff       	call   80103af0 <myproc>
+801044be:	8b 40 10             	mov    0x10(%eax),%eax
+801044c1:	89 43 3c             	mov    %eax,0x3c(%ebx)
+  release(&lk->lk);
+801044c4:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+801044c7:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801044ca:	5b                   	pop    %ebx
+801044cb:	5e                   	pop    %esi
+801044cc:	5d                   	pop    %ebp
+  release(&lk->lk);
+801044cd:	e9 9e 02 00 00       	jmp    80104770 <release>
+801044d2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801044d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801044e0 <releasesleep>:
+
+void
+releasesleep(struct sleeplock *lk)
+{
+801044e0:	55                   	push   %ebp
+801044e1:	89 e5                	mov    %esp,%ebp
+801044e3:	56                   	push   %esi
+801044e4:	53                   	push   %ebx
+801044e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&lk->lk);
+801044e8:	83 ec 0c             	sub    $0xc,%esp
+801044eb:	8d 73 04             	lea    0x4(%ebx),%esi
+801044ee:	56                   	push   %esi
+801044ef:	e8 bc 01 00 00       	call   801046b0 <acquire>
+  lk->locked = 0;
+801044f4:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  lk->pid = 0;
+801044fa:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+  wakeup(lk);
+80104501:	89 1c 24             	mov    %ebx,(%esp)
+80104504:	e8 87 fd ff ff       	call   80104290 <wakeup>
+  release(&lk->lk);
+80104509:	89 75 08             	mov    %esi,0x8(%ebp)
+8010450c:	83 c4 10             	add    $0x10,%esp
+}
+8010450f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104512:	5b                   	pop    %ebx
+80104513:	5e                   	pop    %esi
+80104514:	5d                   	pop    %ebp
+  release(&lk->lk);
+80104515:	e9 56 02 00 00       	jmp    80104770 <release>
+8010451a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104520 <holdingsleep>:
+
+int
+holdingsleep(struct sleeplock *lk)
+{
+80104520:	55                   	push   %ebp
+80104521:	89 e5                	mov    %esp,%ebp
+80104523:	57                   	push   %edi
+80104524:	56                   	push   %esi
+80104525:	53                   	push   %ebx
+80104526:	31 ff                	xor    %edi,%edi
+80104528:	83 ec 18             	sub    $0x18,%esp
+8010452b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int r;
+  
+  acquire(&lk->lk);
+8010452e:	8d 73 04             	lea    0x4(%ebx),%esi
+80104531:	56                   	push   %esi
+80104532:	e8 79 01 00 00       	call   801046b0 <acquire>
+  r = lk->locked && (lk->pid == myproc()->pid);
+80104537:	8b 03                	mov    (%ebx),%eax
+80104539:	83 c4 10             	add    $0x10,%esp
+8010453c:	85 c0                	test   %eax,%eax
+8010453e:	74 13                	je     80104553 <holdingsleep+0x33>
+80104540:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+80104543:	e8 a8 f5 ff ff       	call   80103af0 <myproc>
+80104548:	39 58 10             	cmp    %ebx,0x10(%eax)
+8010454b:	0f 94 c0             	sete   %al
+8010454e:	0f b6 c0             	movzbl %al,%eax
+80104551:	89 c7                	mov    %eax,%edi
+  release(&lk->lk);
+80104553:	83 ec 0c             	sub    $0xc,%esp
+80104556:	56                   	push   %esi
+80104557:	e8 14 02 00 00       	call   80104770 <release>
+  return r;
+}
+8010455c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010455f:	89 f8                	mov    %edi,%eax
+80104561:	5b                   	pop    %ebx
+80104562:	5e                   	pop    %esi
+80104563:	5f                   	pop    %edi
+80104564:	5d                   	pop    %ebp
+80104565:	c3                   	ret    
+80104566:	66 90                	xchg   %ax,%ax
+80104568:	66 90                	xchg   %ax,%ax
+8010456a:	66 90                	xchg   %ax,%ax
+8010456c:	66 90                	xchg   %ax,%ax
+8010456e:	66 90                	xchg   %ax,%ax
+
+80104570 <initlock>:
+#include "proc.h"
+#include "spinlock.h"
+
+void
+initlock(struct spinlock *lk, char *name)
+{
+80104570:	55                   	push   %ebp
+80104571:	89 e5                	mov    %esp,%ebp
+80104573:	8b 45 08             	mov    0x8(%ebp),%eax
+  lk->name = name;
+80104576:	8b 55 0c             	mov    0xc(%ebp),%edx
+  lk->locked = 0;
+80104579:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  lk->name = name;
+8010457f:	89 50 04             	mov    %edx,0x4(%eax)
+  lk->cpu = 0;
+80104582:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+}
+80104589:	5d                   	pop    %ebp
+8010458a:	c3                   	ret    
+8010458b:	90                   	nop
+8010458c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104590 <getcallerpcs>:
+}
+
+// Record the current call stack in pcs[] by following the %ebp chain.
+void
+getcallerpcs(void *v, uint pcs[])
+{
+80104590:	55                   	push   %ebp
+  uint *ebp;
+  int i;
+
+  ebp = (uint*)v - 2;
+  for(i = 0; i < 10; i++){
+80104591:	31 d2                	xor    %edx,%edx
+{
+80104593:	89 e5                	mov    %esp,%ebp
+80104595:	53                   	push   %ebx
+  ebp = (uint*)v - 2;
+80104596:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+80104599:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  ebp = (uint*)v - 2;
+8010459c:	83 e8 08             	sub    $0x8,%eax
+8010459f:	90                   	nop
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+801045a0:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+801045a6:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+801045ac:	77 1a                	ja     801045c8 <getcallerpcs+0x38>
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+801045ae:	8b 58 04             	mov    0x4(%eax),%ebx
+801045b1:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+  for(i = 0; i < 10; i++){
+801045b4:	83 c2 01             	add    $0x1,%edx
+    ebp = (uint*)ebp[0]; // saved %ebp
+801045b7:	8b 00                	mov    (%eax),%eax
+  for(i = 0; i < 10; i++){
+801045b9:	83 fa 0a             	cmp    $0xa,%edx
+801045bc:	75 e2                	jne    801045a0 <getcallerpcs+0x10>
+  }
+  for(; i < 10; i++)
+    pcs[i] = 0;
+}
+801045be:	5b                   	pop    %ebx
+801045bf:	5d                   	pop    %ebp
+801045c0:	c3                   	ret    
+801045c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801045c8:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+801045cb:	83 c1 28             	add    $0x28,%ecx
+801045ce:	66 90                	xchg   %ax,%ax
+    pcs[i] = 0;
+801045d0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+801045d6:	83 c0 04             	add    $0x4,%eax
+  for(; i < 10; i++)
+801045d9:	39 c1                	cmp    %eax,%ecx
+801045db:	75 f3                	jne    801045d0 <getcallerpcs+0x40>
+}
+801045dd:	5b                   	pop    %ebx
+801045de:	5d                   	pop    %ebp
+801045df:	c3                   	ret    
+
+801045e0 <pushcli>:
+// it takes two popcli to undo two pushcli.  Also, if interrupts
+// are off, then pushcli, popcli leaves them off.
+
+void
+pushcli(void)
+{
+801045e0:	55                   	push   %ebp
+801045e1:	89 e5                	mov    %esp,%ebp
+801045e3:	53                   	push   %ebx
+801045e4:	83 ec 04             	sub    $0x4,%esp
+801045e7:	9c                   	pushf  
+801045e8:	5b                   	pop    %ebx
+  asm volatile("cli");
+801045e9:	fa                   	cli    
+  int eflags;
+
+  eflags = readeflags();
+  cli();
+  if(mycpu()->ncli == 0)
+801045ea:	e8 61 f4 ff ff       	call   80103a50 <mycpu>
+801045ef:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+801045f5:	85 c0                	test   %eax,%eax
+801045f7:	75 11                	jne    8010460a <pushcli+0x2a>
+    mycpu()->intena = eflags & FL_IF;
+801045f9:	81 e3 00 02 00 00    	and    $0x200,%ebx
+801045ff:	e8 4c f4 ff ff       	call   80103a50 <mycpu>
+80104604:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+  mycpu()->ncli += 1;
+8010460a:	e8 41 f4 ff ff       	call   80103a50 <mycpu>
+8010460f:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+}
+80104616:	83 c4 04             	add    $0x4,%esp
+80104619:	5b                   	pop    %ebx
+8010461a:	5d                   	pop    %ebp
+8010461b:	c3                   	ret    
+8010461c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104620 <popcli>:
+
+void
+popcli(void)
+{
+80104620:	55                   	push   %ebp
+80104621:	89 e5                	mov    %esp,%ebp
+80104623:	83 ec 08             	sub    $0x8,%esp
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80104626:	9c                   	pushf  
+80104627:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+80104628:	f6 c4 02             	test   $0x2,%ah
+8010462b:	75 35                	jne    80104662 <popcli+0x42>
+    panic("popcli - interruptible");
+  if(--mycpu()->ncli < 0)
+8010462d:	e8 1e f4 ff ff       	call   80103a50 <mycpu>
+80104632:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+80104639:	78 34                	js     8010466f <popcli+0x4f>
+    panic("popcli");
+  if(mycpu()->ncli == 0 && mycpu()->intena)
+8010463b:	e8 10 f4 ff ff       	call   80103a50 <mycpu>
+80104640:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+80104646:	85 d2                	test   %edx,%edx
+80104648:	74 06                	je     80104650 <popcli+0x30>
+    sti();
+}
+8010464a:	c9                   	leave  
+8010464b:	c3                   	ret    
+8010464c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(mycpu()->ncli == 0 && mycpu()->intena)
+80104650:	e8 fb f3 ff ff       	call   80103a50 <mycpu>
+80104655:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+8010465b:	85 c0                	test   %eax,%eax
+8010465d:	74 eb                	je     8010464a <popcli+0x2a>
+  asm volatile("sti");
+8010465f:	fb                   	sti    
+}
+80104660:	c9                   	leave  
+80104661:	c3                   	ret    
+    panic("popcli - interruptible");
+80104662:	83 ec 0c             	sub    $0xc,%esp
+80104665:	68 63 7a 10 80       	push   $0x80107a63
+8010466a:	e8 21 bd ff ff       	call   80100390 <panic>
+    panic("popcli");
+8010466f:	83 ec 0c             	sub    $0xc,%esp
+80104672:	68 7a 7a 10 80       	push   $0x80107a7a
+80104677:	e8 14 bd ff ff       	call   80100390 <panic>
+8010467c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104680 <holding>:
+{
+80104680:	55                   	push   %ebp
+80104681:	89 e5                	mov    %esp,%ebp
+80104683:	56                   	push   %esi
+80104684:	53                   	push   %ebx
+80104685:	8b 75 08             	mov    0x8(%ebp),%esi
+80104688:	31 db                	xor    %ebx,%ebx
+  pushcli();
+8010468a:	e8 51 ff ff ff       	call   801045e0 <pushcli>
+  r = lock->locked && lock->cpu == mycpu();
+8010468f:	8b 06                	mov    (%esi),%eax
+80104691:	85 c0                	test   %eax,%eax
+80104693:	74 10                	je     801046a5 <holding+0x25>
+80104695:	8b 5e 08             	mov    0x8(%esi),%ebx
+80104698:	e8 b3 f3 ff ff       	call   80103a50 <mycpu>
+8010469d:	39 c3                	cmp    %eax,%ebx
+8010469f:	0f 94 c3             	sete   %bl
+801046a2:	0f b6 db             	movzbl %bl,%ebx
+  popcli();
+801046a5:	e8 76 ff ff ff       	call   80104620 <popcli>
+}
+801046aa:	89 d8                	mov    %ebx,%eax
+801046ac:	5b                   	pop    %ebx
+801046ad:	5e                   	pop    %esi
+801046ae:	5d                   	pop    %ebp
+801046af:	c3                   	ret    
+
+801046b0 <acquire>:
+{
+801046b0:	55                   	push   %ebp
+801046b1:	89 e5                	mov    %esp,%ebp
+801046b3:	56                   	push   %esi
+801046b4:	53                   	push   %ebx
+  pushcli(); // disable interrupts to avoid deadlock.
+801046b5:	e8 26 ff ff ff       	call   801045e0 <pushcli>
+  if(holding(lk))
+801046ba:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801046bd:	83 ec 0c             	sub    $0xc,%esp
+801046c0:	53                   	push   %ebx
+801046c1:	e8 ba ff ff ff       	call   80104680 <holding>
+801046c6:	83 c4 10             	add    $0x10,%esp
+801046c9:	85 c0                	test   %eax,%eax
+801046cb:	0f 85 83 00 00 00    	jne    80104754 <acquire+0xa4>
+801046d1:	89 c6                	mov    %eax,%esi
+  asm volatile("lock; xchgl %0, %1" :
+801046d3:	ba 01 00 00 00       	mov    $0x1,%edx
+801046d8:	eb 09                	jmp    801046e3 <acquire+0x33>
+801046da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801046e0:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801046e3:	89 d0                	mov    %edx,%eax
+801046e5:	f0 87 03             	lock xchg %eax,(%ebx)
+  while(xchg(&lk->locked, 1) != 0)
+801046e8:	85 c0                	test   %eax,%eax
+801046ea:	75 f4                	jne    801046e0 <acquire+0x30>
+  __sync_synchronize();
+801046ec:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+  lk->cpu = mycpu();
+801046f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801046f4:	e8 57 f3 ff ff       	call   80103a50 <mycpu>
+  getcallerpcs(&lk, lk->pcs);
+801046f9:	8d 53 0c             	lea    0xc(%ebx),%edx
+  lk->cpu = mycpu();
+801046fc:	89 43 08             	mov    %eax,0x8(%ebx)
+  ebp = (uint*)v - 2;
+801046ff:	89 e8                	mov    %ebp,%eax
+80104701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+80104708:	8d 88 00 00 00 80    	lea    -0x80000000(%eax),%ecx
+8010470e:	81 f9 fe ff ff 7f    	cmp    $0x7ffffffe,%ecx
+80104714:	77 1a                	ja     80104730 <acquire+0x80>
+    pcs[i] = ebp[1];     // saved %eip
+80104716:	8b 48 04             	mov    0x4(%eax),%ecx
+80104719:	89 0c b2             	mov    %ecx,(%edx,%esi,4)
+  for(i = 0; i < 10; i++){
+8010471c:	83 c6 01             	add    $0x1,%esi
+    ebp = (uint*)ebp[0]; // saved %ebp
+8010471f:	8b 00                	mov    (%eax),%eax
+  for(i = 0; i < 10; i++){
+80104721:	83 fe 0a             	cmp    $0xa,%esi
+80104724:	75 e2                	jne    80104708 <acquire+0x58>
+}
+80104726:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104729:	5b                   	pop    %ebx
+8010472a:	5e                   	pop    %esi
+8010472b:	5d                   	pop    %ebp
+8010472c:	c3                   	ret    
+8010472d:	8d 76 00             	lea    0x0(%esi),%esi
+80104730:	8d 04 b2             	lea    (%edx,%esi,4),%eax
+80104733:	83 c2 28             	add    $0x28,%edx
+80104736:	8d 76 00             	lea    0x0(%esi),%esi
+80104739:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    pcs[i] = 0;
+80104740:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104746:	83 c0 04             	add    $0x4,%eax
+  for(; i < 10; i++)
+80104749:	39 d0                	cmp    %edx,%eax
+8010474b:	75 f3                	jne    80104740 <acquire+0x90>
+}
+8010474d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104750:	5b                   	pop    %ebx
+80104751:	5e                   	pop    %esi
+80104752:	5d                   	pop    %ebp
+80104753:	c3                   	ret    
+    panic("acquire");
+80104754:	83 ec 0c             	sub    $0xc,%esp
+80104757:	68 81 7a 10 80       	push   $0x80107a81
+8010475c:	e8 2f bc ff ff       	call   80100390 <panic>
+80104761:	eb 0d                	jmp    80104770 <release>
+80104763:	90                   	nop
+80104764:	90                   	nop
+80104765:	90                   	nop
+80104766:	90                   	nop
+80104767:	90                   	nop
+80104768:	90                   	nop
+80104769:	90                   	nop
+8010476a:	90                   	nop
+8010476b:	90                   	nop
+8010476c:	90                   	nop
+8010476d:	90                   	nop
+8010476e:	90                   	nop
+8010476f:	90                   	nop
+
+80104770 <release>:
+{
+80104770:	55                   	push   %ebp
+80104771:	89 e5                	mov    %esp,%ebp
+80104773:	53                   	push   %ebx
+80104774:	83 ec 10             	sub    $0x10,%esp
+80104777:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holding(lk))
+8010477a:	53                   	push   %ebx
+8010477b:	e8 00 ff ff ff       	call   80104680 <holding>
+80104780:	83 c4 10             	add    $0x10,%esp
+80104783:	85 c0                	test   %eax,%eax
+80104785:	74 22                	je     801047a9 <release+0x39>
+  lk->pcs[0] = 0;
+80104787:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+  lk->cpu = 0;
+8010478e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+  __sync_synchronize();
+80104795:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+  asm volatile("movl $0, %0" : "+m" (lk->locked) : );
+8010479a:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+}
+801047a0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801047a3:	c9                   	leave  
+  popcli();
+801047a4:	e9 77 fe ff ff       	jmp    80104620 <popcli>
+    panic("release");
+801047a9:	83 ec 0c             	sub    $0xc,%esp
+801047ac:	68 89 7a 10 80       	push   $0x80107a89
+801047b1:	e8 da bb ff ff       	call   80100390 <panic>
+801047b6:	66 90                	xchg   %ax,%ax
+801047b8:	66 90                	xchg   %ax,%ax
+801047ba:	66 90                	xchg   %ax,%ax
+801047bc:	66 90                	xchg   %ax,%ax
+801047be:	66 90                	xchg   %ax,%ax
+
+801047c0 <memset>:
+#include "types.h"
+#include "x86.h"
+
+void*
+memset(void *dst, int c, uint n)
+{
+801047c0:	55                   	push   %ebp
+801047c1:	89 e5                	mov    %esp,%ebp
+801047c3:	57                   	push   %edi
+801047c4:	53                   	push   %ebx
+801047c5:	8b 55 08             	mov    0x8(%ebp),%edx
+801047c8:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  if ((int)dst%4 == 0 && n%4 == 0){
+801047cb:	f6 c2 03             	test   $0x3,%dl
+801047ce:	75 05                	jne    801047d5 <memset+0x15>
+801047d0:	f6 c1 03             	test   $0x3,%cl
+801047d3:	74 13                	je     801047e8 <memset+0x28>
+  asm volatile("cld; rep stosb" :
+801047d5:	89 d7                	mov    %edx,%edi
+801047d7:	8b 45 0c             	mov    0xc(%ebp),%eax
+801047da:	fc                   	cld    
+801047db:	f3 aa                	rep stos %al,%es:(%edi)
+    c &= 0xFF;
+    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
+  } else
+    stosb(dst, c, n);
+  return dst;
+}
+801047dd:	5b                   	pop    %ebx
+801047de:	89 d0                	mov    %edx,%eax
+801047e0:	5f                   	pop    %edi
+801047e1:	5d                   	pop    %ebp
+801047e2:	c3                   	ret    
+801047e3:	90                   	nop
+801047e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c &= 0xFF;
+801047e8:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
+    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
+801047ec:	c1 e9 02             	shr    $0x2,%ecx
+801047ef:	89 f8                	mov    %edi,%eax
+801047f1:	89 fb                	mov    %edi,%ebx
+801047f3:	c1 e0 18             	shl    $0x18,%eax
+801047f6:	c1 e3 10             	shl    $0x10,%ebx
+801047f9:	09 d8                	or     %ebx,%eax
+801047fb:	09 f8                	or     %edi,%eax
+801047fd:	c1 e7 08             	shl    $0x8,%edi
+80104800:	09 f8                	or     %edi,%eax
+  asm volatile("cld; rep stosl" :
+80104802:	89 d7                	mov    %edx,%edi
+80104804:	fc                   	cld    
+80104805:	f3 ab                	rep stos %eax,%es:(%edi)
+}
+80104807:	5b                   	pop    %ebx
+80104808:	89 d0                	mov    %edx,%eax
+8010480a:	5f                   	pop    %edi
+8010480b:	5d                   	pop    %ebp
+8010480c:	c3                   	ret    
+8010480d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104810 <memcmp>:
+
+int
+memcmp(const void *v1, const void *v2, uint n)
+{
+80104810:	55                   	push   %ebp
+80104811:	89 e5                	mov    %esp,%ebp
+80104813:	57                   	push   %edi
+80104814:	56                   	push   %esi
+80104815:	53                   	push   %ebx
+80104816:	8b 5d 10             	mov    0x10(%ebp),%ebx
+80104819:	8b 75 08             	mov    0x8(%ebp),%esi
+8010481c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  const uchar *s1, *s2;
+
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0){
+8010481f:	85 db                	test   %ebx,%ebx
+80104821:	74 29                	je     8010484c <memcmp+0x3c>
+    if(*s1 != *s2)
+80104823:	0f b6 16             	movzbl (%esi),%edx
+80104826:	0f b6 0f             	movzbl (%edi),%ecx
+80104829:	38 d1                	cmp    %dl,%cl
+8010482b:	75 2b                	jne    80104858 <memcmp+0x48>
+8010482d:	b8 01 00 00 00       	mov    $0x1,%eax
+80104832:	eb 14                	jmp    80104848 <memcmp+0x38>
+80104834:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104838:	0f b6 14 06          	movzbl (%esi,%eax,1),%edx
+8010483c:	83 c0 01             	add    $0x1,%eax
+8010483f:	0f b6 4c 07 ff       	movzbl -0x1(%edi,%eax,1),%ecx
+80104844:	38 ca                	cmp    %cl,%dl
+80104846:	75 10                	jne    80104858 <memcmp+0x48>
+  while(n-- > 0){
+80104848:	39 d8                	cmp    %ebx,%eax
+8010484a:	75 ec                	jne    80104838 <memcmp+0x28>
+      return *s1 - *s2;
+    s1++, s2++;
+  }
+
+  return 0;
+}
+8010484c:	5b                   	pop    %ebx
+  return 0;
+8010484d:	31 c0                	xor    %eax,%eax
+}
+8010484f:	5e                   	pop    %esi
+80104850:	5f                   	pop    %edi
+80104851:	5d                   	pop    %ebp
+80104852:	c3                   	ret    
+80104853:	90                   	nop
+80104854:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      return *s1 - *s2;
+80104858:	0f b6 c2             	movzbl %dl,%eax
+}
+8010485b:	5b                   	pop    %ebx
+      return *s1 - *s2;
+8010485c:	29 c8                	sub    %ecx,%eax
+}
+8010485e:	5e                   	pop    %esi
+8010485f:	5f                   	pop    %edi
+80104860:	5d                   	pop    %ebp
+80104861:	c3                   	ret    
+80104862:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104869:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104870 <memmove>:
+
+void*
+memmove(void *dst, const void *src, uint n)
+{
+80104870:	55                   	push   %ebp
+80104871:	89 e5                	mov    %esp,%ebp
+80104873:	56                   	push   %esi
+80104874:	53                   	push   %ebx
+80104875:	8b 45 08             	mov    0x8(%ebp),%eax
+80104878:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+8010487b:	8b 75 10             	mov    0x10(%ebp),%esi
+  const char *s;
+  char *d;
+
+  s = src;
+  d = dst;
+  if(s < d && s + n > d){
+8010487e:	39 c3                	cmp    %eax,%ebx
+80104880:	73 26                	jae    801048a8 <memmove+0x38>
+80104882:	8d 0c 33             	lea    (%ebx,%esi,1),%ecx
+80104885:	39 c8                	cmp    %ecx,%eax
+80104887:	73 1f                	jae    801048a8 <memmove+0x38>
+    s += n;
+    d += n;
+    while(n-- > 0)
+80104889:	85 f6                	test   %esi,%esi
+8010488b:	8d 56 ff             	lea    -0x1(%esi),%edx
+8010488e:	74 0f                	je     8010489f <memmove+0x2f>
+      *--d = *--s;
+80104890:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+80104894:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+    while(n-- > 0)
+80104897:	83 ea 01             	sub    $0x1,%edx
+8010489a:	83 fa ff             	cmp    $0xffffffff,%edx
+8010489d:	75 f1                	jne    80104890 <memmove+0x20>
+  } else
+    while(n-- > 0)
+      *d++ = *s++;
+
+  return dst;
+}
+8010489f:	5b                   	pop    %ebx
+801048a0:	5e                   	pop    %esi
+801048a1:	5d                   	pop    %ebp
+801048a2:	c3                   	ret    
+801048a3:	90                   	nop
+801048a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    while(n-- > 0)
+801048a8:	31 d2                	xor    %edx,%edx
+801048aa:	85 f6                	test   %esi,%esi
+801048ac:	74 f1                	je     8010489f <memmove+0x2f>
+801048ae:	66 90                	xchg   %ax,%ax
+      *d++ = *s++;
+801048b0:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+801048b4:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+801048b7:	83 c2 01             	add    $0x1,%edx
+    while(n-- > 0)
+801048ba:	39 d6                	cmp    %edx,%esi
+801048bc:	75 f2                	jne    801048b0 <memmove+0x40>
+}
+801048be:	5b                   	pop    %ebx
+801048bf:	5e                   	pop    %esi
+801048c0:	5d                   	pop    %ebp
+801048c1:	c3                   	ret    
+801048c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801048c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801048d0 <memcpy>:
+
+// memcpy exists to placate GCC.  Use memmove.
+void*
+memcpy(void *dst, const void *src, uint n)
+{
+801048d0:	55                   	push   %ebp
+801048d1:	89 e5                	mov    %esp,%ebp
+  return memmove(dst, src, n);
+}
+801048d3:	5d                   	pop    %ebp
+  return memmove(dst, src, n);
+801048d4:	eb 9a                	jmp    80104870 <memmove>
+801048d6:	8d 76 00             	lea    0x0(%esi),%esi
+801048d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801048e0 <strncmp>:
+
+int
+strncmp(const char *p, const char *q, uint n)
+{
+801048e0:	55                   	push   %ebp
+801048e1:	89 e5                	mov    %esp,%ebp
+801048e3:	57                   	push   %edi
+801048e4:	56                   	push   %esi
+801048e5:	8b 7d 10             	mov    0x10(%ebp),%edi
+801048e8:	53                   	push   %ebx
+801048e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
+801048ec:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(n > 0 && *p && *p == *q)
+801048ef:	85 ff                	test   %edi,%edi
+801048f1:	74 2f                	je     80104922 <strncmp+0x42>
+801048f3:	0f b6 01             	movzbl (%ecx),%eax
+801048f6:	0f b6 1e             	movzbl (%esi),%ebx
+801048f9:	84 c0                	test   %al,%al
+801048fb:	74 37                	je     80104934 <strncmp+0x54>
+801048fd:	38 c3                	cmp    %al,%bl
+801048ff:	75 33                	jne    80104934 <strncmp+0x54>
+80104901:	01 f7                	add    %esi,%edi
+80104903:	eb 13                	jmp    80104918 <strncmp+0x38>
+80104905:	8d 76 00             	lea    0x0(%esi),%esi
+80104908:	0f b6 01             	movzbl (%ecx),%eax
+8010490b:	84 c0                	test   %al,%al
+8010490d:	74 21                	je     80104930 <strncmp+0x50>
+8010490f:	0f b6 1a             	movzbl (%edx),%ebx
+80104912:	89 d6                	mov    %edx,%esi
+80104914:	38 d8                	cmp    %bl,%al
+80104916:	75 1c                	jne    80104934 <strncmp+0x54>
+    n--, p++, q++;
+80104918:	8d 56 01             	lea    0x1(%esi),%edx
+8010491b:	83 c1 01             	add    $0x1,%ecx
+  while(n > 0 && *p && *p == *q)
+8010491e:	39 fa                	cmp    %edi,%edx
+80104920:	75 e6                	jne    80104908 <strncmp+0x28>
+  if(n == 0)
+    return 0;
+  return (uchar)*p - (uchar)*q;
+}
+80104922:	5b                   	pop    %ebx
+    return 0;
+80104923:	31 c0                	xor    %eax,%eax
+}
+80104925:	5e                   	pop    %esi
+80104926:	5f                   	pop    %edi
+80104927:	5d                   	pop    %ebp
+80104928:	c3                   	ret    
+80104929:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104930:	0f b6 5e 01          	movzbl 0x1(%esi),%ebx
+  return (uchar)*p - (uchar)*q;
+80104934:	29 d8                	sub    %ebx,%eax
+}
+80104936:	5b                   	pop    %ebx
+80104937:	5e                   	pop    %esi
+80104938:	5f                   	pop    %edi
+80104939:	5d                   	pop    %ebp
+8010493a:	c3                   	ret    
+8010493b:	90                   	nop
+8010493c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104940 <strncpy>:
+
+char*
+strncpy(char *s, const char *t, int n)
+{
+80104940:	55                   	push   %ebp
+80104941:	89 e5                	mov    %esp,%ebp
+80104943:	56                   	push   %esi
+80104944:	53                   	push   %ebx
+80104945:	8b 45 08             	mov    0x8(%ebp),%eax
+80104948:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+8010494b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while(n-- > 0 && (*s++ = *t++) != 0)
+8010494e:	89 c2                	mov    %eax,%edx
+80104950:	eb 19                	jmp    8010496b <strncpy+0x2b>
+80104952:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104958:	83 c3 01             	add    $0x1,%ebx
+8010495b:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
+8010495f:	83 c2 01             	add    $0x1,%edx
+80104962:	84 c9                	test   %cl,%cl
+80104964:	88 4a ff             	mov    %cl,-0x1(%edx)
+80104967:	74 09                	je     80104972 <strncpy+0x32>
+80104969:	89 f1                	mov    %esi,%ecx
+8010496b:	85 c9                	test   %ecx,%ecx
+8010496d:	8d 71 ff             	lea    -0x1(%ecx),%esi
+80104970:	7f e6                	jg     80104958 <strncpy+0x18>
+    ;
+  while(n-- > 0)
+80104972:	31 c9                	xor    %ecx,%ecx
+80104974:	85 f6                	test   %esi,%esi
+80104976:	7e 17                	jle    8010498f <strncpy+0x4f>
+80104978:	90                   	nop
+80104979:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    *s++ = 0;
+80104980:	c6 04 0a 00          	movb   $0x0,(%edx,%ecx,1)
+80104984:	89 f3                	mov    %esi,%ebx
+80104986:	83 c1 01             	add    $0x1,%ecx
+80104989:	29 cb                	sub    %ecx,%ebx
+  while(n-- > 0)
+8010498b:	85 db                	test   %ebx,%ebx
+8010498d:	7f f1                	jg     80104980 <strncpy+0x40>
+  return os;
+}
+8010498f:	5b                   	pop    %ebx
+80104990:	5e                   	pop    %esi
+80104991:	5d                   	pop    %ebp
+80104992:	c3                   	ret    
+80104993:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104999:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801049a0 <safestrcpy>:
+
+// Like strncpy but guaranteed to NUL-terminate.
+char*
+safestrcpy(char *s, const char *t, int n)
+{
+801049a0:	55                   	push   %ebp
+801049a1:	89 e5                	mov    %esp,%ebp
+801049a3:	56                   	push   %esi
+801049a4:	53                   	push   %ebx
+801049a5:	8b 4d 10             	mov    0x10(%ebp),%ecx
+801049a8:	8b 45 08             	mov    0x8(%ebp),%eax
+801049ab:	8b 55 0c             	mov    0xc(%ebp),%edx
+  char *os;
+
+  os = s;
+  if(n <= 0)
+801049ae:	85 c9                	test   %ecx,%ecx
+801049b0:	7e 26                	jle    801049d8 <safestrcpy+0x38>
+801049b2:	8d 74 0a ff          	lea    -0x1(%edx,%ecx,1),%esi
+801049b6:	89 c1                	mov    %eax,%ecx
+801049b8:	eb 17                	jmp    801049d1 <safestrcpy+0x31>
+801049ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return os;
+  while(--n > 0 && (*s++ = *t++) != 0)
+801049c0:	83 c2 01             	add    $0x1,%edx
+801049c3:	0f b6 5a ff          	movzbl -0x1(%edx),%ebx
+801049c7:	83 c1 01             	add    $0x1,%ecx
+801049ca:	84 db                	test   %bl,%bl
+801049cc:	88 59 ff             	mov    %bl,-0x1(%ecx)
+801049cf:	74 04                	je     801049d5 <safestrcpy+0x35>
+801049d1:	39 f2                	cmp    %esi,%edx
+801049d3:	75 eb                	jne    801049c0 <safestrcpy+0x20>
+    ;
+  *s = 0;
+801049d5:	c6 01 00             	movb   $0x0,(%ecx)
+  return os;
+}
+801049d8:	5b                   	pop    %ebx
+801049d9:	5e                   	pop    %esi
+801049da:	5d                   	pop    %ebp
+801049db:	c3                   	ret    
+801049dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801049e0 <strlen>:
+
+int
+strlen(const char *s)
+{
+801049e0:	55                   	push   %ebp
+  int n;
+
+  for(n = 0; s[n]; n++)
+801049e1:	31 c0                	xor    %eax,%eax
+{
+801049e3:	89 e5                	mov    %esp,%ebp
+801049e5:	8b 55 08             	mov    0x8(%ebp),%edx
+  for(n = 0; s[n]; n++)
+801049e8:	80 3a 00             	cmpb   $0x0,(%edx)
+801049eb:	74 0c                	je     801049f9 <strlen+0x19>
+801049ed:	8d 76 00             	lea    0x0(%esi),%esi
+801049f0:	83 c0 01             	add    $0x1,%eax
+801049f3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+801049f7:	75 f7                	jne    801049f0 <strlen+0x10>
+    ;
+  return n;
+}
+801049f9:	5d                   	pop    %ebp
+801049fa:	c3                   	ret    
+
+801049fb <swtch>:
+# a struct context, and save its address in *old.
+# Switch stacks to new and pop previously-saved registers.
+
+.globl swtch
+swtch:
+  movl 4(%esp), %eax
+801049fb:	8b 44 24 04          	mov    0x4(%esp),%eax
+  movl 8(%esp), %edx
+801049ff:	8b 54 24 08          	mov    0x8(%esp),%edx
+
+  # Save old callee-saved registers
+  pushl %ebp
+80104a03:	55                   	push   %ebp
+  pushl %ebx
+80104a04:	53                   	push   %ebx
+  pushl %esi
+80104a05:	56                   	push   %esi
+  pushl %edi
+80104a06:	57                   	push   %edi
+
+  # Switch stacks
+  movl %esp, (%eax)
+80104a07:	89 20                	mov    %esp,(%eax)
+  movl %edx, %esp
+80104a09:	89 d4                	mov    %edx,%esp
+
+  # Load new callee-saved registers
+  popl %edi
+80104a0b:	5f                   	pop    %edi
+  popl %esi
+80104a0c:	5e                   	pop    %esi
+  popl %ebx
+80104a0d:	5b                   	pop    %ebx
+  popl %ebp
+80104a0e:	5d                   	pop    %ebp
+  ret
+80104a0f:	c3                   	ret    
+
+80104a10 <fetchint>:
+// to a saved program counter, and then the first argument.
+
+// Fetch the int at addr from the current process.
+int
+fetchint(uint addr, int *ip)
+{
+80104a10:	55                   	push   %ebp
+80104a11:	89 e5                	mov    %esp,%ebp
+80104a13:	53                   	push   %ebx
+80104a14:	83 ec 04             	sub    $0x4,%esp
+80104a17:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *curproc = myproc();
+80104a1a:	e8 d1 f0 ff ff       	call   80103af0 <myproc>
+
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+80104a1f:	8b 00                	mov    (%eax),%eax
+80104a21:	39 d8                	cmp    %ebx,%eax
+80104a23:	76 1b                	jbe    80104a40 <fetchint+0x30>
+80104a25:	8d 53 04             	lea    0x4(%ebx),%edx
+80104a28:	39 d0                	cmp    %edx,%eax
+80104a2a:	72 14                	jb     80104a40 <fetchint+0x30>
+    return -1;
+  *ip = *(int*)(addr);
+80104a2c:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104a2f:	8b 13                	mov    (%ebx),%edx
+80104a31:	89 10                	mov    %edx,(%eax)
+  return 0;
+80104a33:	31 c0                	xor    %eax,%eax
+}
+80104a35:	83 c4 04             	add    $0x4,%esp
+80104a38:	5b                   	pop    %ebx
+80104a39:	5d                   	pop    %ebp
+80104a3a:	c3                   	ret    
+80104a3b:	90                   	nop
+80104a3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80104a40:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104a45:	eb ee                	jmp    80104a35 <fetchint+0x25>
+80104a47:	89 f6                	mov    %esi,%esi
+80104a49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104a50 <fetchstr>:
+// Fetch the nul-terminated string at addr from the current process.
+// Doesn't actually copy the string - just sets *pp to point at it.
+// Returns length of string, not including nul.
+int
+fetchstr(uint addr, char **pp)
+{
+80104a50:	55                   	push   %ebp
+80104a51:	89 e5                	mov    %esp,%ebp
+80104a53:	53                   	push   %ebx
+80104a54:	83 ec 04             	sub    $0x4,%esp
+80104a57:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  char *s, *ep;
+  struct proc *curproc = myproc();
+80104a5a:	e8 91 f0 ff ff       	call   80103af0 <myproc>
+
+  if(addr >= curproc->sz)
+80104a5f:	39 18                	cmp    %ebx,(%eax)
+80104a61:	76 29                	jbe    80104a8c <fetchstr+0x3c>
+    return -1;
+  *pp = (char*)addr;
+80104a63:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80104a66:	89 da                	mov    %ebx,%edx
+80104a68:	89 19                	mov    %ebx,(%ecx)
+  ep = (char*)curproc->sz;
+80104a6a:	8b 00                	mov    (%eax),%eax
+  for(s = *pp; s < ep; s++){
+80104a6c:	39 c3                	cmp    %eax,%ebx
+80104a6e:	73 1c                	jae    80104a8c <fetchstr+0x3c>
+    if(*s == 0)
+80104a70:	80 3b 00             	cmpb   $0x0,(%ebx)
+80104a73:	75 10                	jne    80104a85 <fetchstr+0x35>
+80104a75:	eb 39                	jmp    80104ab0 <fetchstr+0x60>
+80104a77:	89 f6                	mov    %esi,%esi
+80104a79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104a80:	80 3a 00             	cmpb   $0x0,(%edx)
+80104a83:	74 1b                	je     80104aa0 <fetchstr+0x50>
+  for(s = *pp; s < ep; s++){
+80104a85:	83 c2 01             	add    $0x1,%edx
+80104a88:	39 d0                	cmp    %edx,%eax
+80104a8a:	77 f4                	ja     80104a80 <fetchstr+0x30>
+    return -1;
+80104a8c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+      return s - *pp;
+  }
+  return -1;
+}
+80104a91:	83 c4 04             	add    $0x4,%esp
+80104a94:	5b                   	pop    %ebx
+80104a95:	5d                   	pop    %ebp
+80104a96:	c3                   	ret    
+80104a97:	89 f6                	mov    %esi,%esi
+80104a99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104aa0:	83 c4 04             	add    $0x4,%esp
+80104aa3:	89 d0                	mov    %edx,%eax
+80104aa5:	29 d8                	sub    %ebx,%eax
+80104aa7:	5b                   	pop    %ebx
+80104aa8:	5d                   	pop    %ebp
+80104aa9:	c3                   	ret    
+80104aaa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(*s == 0)
+80104ab0:	31 c0                	xor    %eax,%eax
+      return s - *pp;
+80104ab2:	eb dd                	jmp    80104a91 <fetchstr+0x41>
+80104ab4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104aba:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80104ac0 <argint>:
+
+// Fetch the nth 32-bit system call argument.
+int
+argint(int n, int *ip)
+{
+80104ac0:	55                   	push   %ebp
+80104ac1:	89 e5                	mov    %esp,%ebp
+80104ac3:	56                   	push   %esi
+80104ac4:	53                   	push   %ebx
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80104ac5:	e8 26 f0 ff ff       	call   80103af0 <myproc>
+80104aca:	8b 40 18             	mov    0x18(%eax),%eax
+80104acd:	8b 55 08             	mov    0x8(%ebp),%edx
+80104ad0:	8b 40 44             	mov    0x44(%eax),%eax
+80104ad3:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+  struct proc *curproc = myproc();
+80104ad6:	e8 15 f0 ff ff       	call   80103af0 <myproc>
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+80104adb:	8b 00                	mov    (%eax),%eax
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80104add:	8d 73 04             	lea    0x4(%ebx),%esi
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+80104ae0:	39 c6                	cmp    %eax,%esi
+80104ae2:	73 1c                	jae    80104b00 <argint+0x40>
+80104ae4:	8d 53 08             	lea    0x8(%ebx),%edx
+80104ae7:	39 d0                	cmp    %edx,%eax
+80104ae9:	72 15                	jb     80104b00 <argint+0x40>
+  *ip = *(int*)(addr);
+80104aeb:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104aee:	8b 53 04             	mov    0x4(%ebx),%edx
+80104af1:	89 10                	mov    %edx,(%eax)
+  return 0;
+80104af3:	31 c0                	xor    %eax,%eax
+}
+80104af5:	5b                   	pop    %ebx
+80104af6:	5e                   	pop    %esi
+80104af7:	5d                   	pop    %ebp
+80104af8:	c3                   	ret    
+80104af9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80104b00:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80104b05:	eb ee                	jmp    80104af5 <argint+0x35>
+80104b07:	89 f6                	mov    %esi,%esi
+80104b09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104b10 <argptr>:
+// Fetch the nth word-sized system call argument as a pointer
+// to a block of memory of size bytes.  Check that the pointer
+// lies within the process address space.
+int
+argptr(int n, char **pp, int size)
+{
+80104b10:	55                   	push   %ebp
+80104b11:	89 e5                	mov    %esp,%ebp
+80104b13:	56                   	push   %esi
+80104b14:	53                   	push   %ebx
+80104b15:	83 ec 10             	sub    $0x10,%esp
+80104b18:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  int i;
+  struct proc *curproc = myproc();
+80104b1b:	e8 d0 ef ff ff       	call   80103af0 <myproc>
+80104b20:	89 c6                	mov    %eax,%esi
+ 
+  if(argint(n, &i) < 0)
+80104b22:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104b25:	83 ec 08             	sub    $0x8,%esp
+80104b28:	50                   	push   %eax
+80104b29:	ff 75 08             	pushl  0x8(%ebp)
+80104b2c:	e8 8f ff ff ff       	call   80104ac0 <argint>
+    return -1;
+  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
+80104b31:	83 c4 10             	add    $0x10,%esp
+80104b34:	85 c0                	test   %eax,%eax
+80104b36:	78 28                	js     80104b60 <argptr+0x50>
+80104b38:	85 db                	test   %ebx,%ebx
+80104b3a:	78 24                	js     80104b60 <argptr+0x50>
+80104b3c:	8b 16                	mov    (%esi),%edx
+80104b3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104b41:	39 c2                	cmp    %eax,%edx
+80104b43:	76 1b                	jbe    80104b60 <argptr+0x50>
+80104b45:	01 c3                	add    %eax,%ebx
+80104b47:	39 da                	cmp    %ebx,%edx
+80104b49:	72 15                	jb     80104b60 <argptr+0x50>
+    return -1;
+  *pp = (char*)i;
+80104b4b:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104b4e:	89 02                	mov    %eax,(%edx)
+  return 0;
+80104b50:	31 c0                	xor    %eax,%eax
+}
+80104b52:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104b55:	5b                   	pop    %ebx
+80104b56:	5e                   	pop    %esi
+80104b57:	5d                   	pop    %ebp
+80104b58:	c3                   	ret    
+80104b59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80104b60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104b65:	eb eb                	jmp    80104b52 <argptr+0x42>
+80104b67:	89 f6                	mov    %esi,%esi
+80104b69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104b70 <argstr>:
+// Check that the pointer is valid and the string is nul-terminated.
+// (There is no shared writable memory, so the string can't change
+// between this check and being used by the kernel.)
+int
+argstr(int n, char **pp)
+{
+80104b70:	55                   	push   %ebp
+80104b71:	89 e5                	mov    %esp,%ebp
+80104b73:	83 ec 20             	sub    $0x20,%esp
+  int addr;
+  if(argint(n, &addr) < 0)
+80104b76:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104b79:	50                   	push   %eax
+80104b7a:	ff 75 08             	pushl  0x8(%ebp)
+80104b7d:	e8 3e ff ff ff       	call   80104ac0 <argint>
+80104b82:	83 c4 10             	add    $0x10,%esp
+80104b85:	85 c0                	test   %eax,%eax
+80104b87:	78 17                	js     80104ba0 <argstr+0x30>
+    return -1;
+  return fetchstr(addr, pp);
+80104b89:	83 ec 08             	sub    $0x8,%esp
+80104b8c:	ff 75 0c             	pushl  0xc(%ebp)
+80104b8f:	ff 75 f4             	pushl  -0xc(%ebp)
+80104b92:	e8 b9 fe ff ff       	call   80104a50 <fetchstr>
+80104b97:	83 c4 10             	add    $0x10,%esp
+}
+80104b9a:	c9                   	leave  
+80104b9b:	c3                   	ret    
+80104b9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80104ba0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104ba5:	c9                   	leave  
+80104ba6:	c3                   	ret    
+80104ba7:	89 f6                	mov    %esi,%esi
+80104ba9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104bb0 <syscall>:
+
+};
+
+void
+syscall(void)
+{
+80104bb0:	55                   	push   %ebp
+80104bb1:	89 e5                	mov    %esp,%ebp
+80104bb3:	53                   	push   %ebx
+80104bb4:	83 ec 04             	sub    $0x4,%esp
+  int num;
+  struct proc *curproc = myproc();
+80104bb7:	e8 34 ef ff ff       	call   80103af0 <myproc>
+80104bbc:	89 c3                	mov    %eax,%ebx
+
+  num = curproc->tf->eax;
+80104bbe:	8b 40 18             	mov    0x18(%eax),%eax
+80104bc1:	8b 40 1c             	mov    0x1c(%eax),%eax
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+80104bc4:	8d 50 ff             	lea    -0x1(%eax),%edx
+80104bc7:	83 fa 18             	cmp    $0x18,%edx
+80104bca:	77 1c                	ja     80104be8 <syscall+0x38>
+80104bcc:	8b 14 85 c0 7a 10 80 	mov    -0x7fef8540(,%eax,4),%edx
+80104bd3:	85 d2                	test   %edx,%edx
+80104bd5:	74 11                	je     80104be8 <syscall+0x38>
+    curproc->tf->eax = syscalls[num]();
+80104bd7:	ff d2                	call   *%edx
+80104bd9:	8b 53 18             	mov    0x18(%ebx),%edx
+80104bdc:	89 42 1c             	mov    %eax,0x1c(%edx)
+  } else {
+    cprintf("%d %s: unknown sys call %d\n",
+            curproc->pid, curproc->name, num);
+    curproc->tf->eax = -1;
+  }
+}
+80104bdf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104be2:	c9                   	leave  
+80104be3:	c3                   	ret    
+80104be4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    cprintf("%d %s: unknown sys call %d\n",
+80104be8:	50                   	push   %eax
+            curproc->pid, curproc->name, num);
+80104be9:	8d 43 6c             	lea    0x6c(%ebx),%eax
+    cprintf("%d %s: unknown sys call %d\n",
+80104bec:	50                   	push   %eax
+80104bed:	ff 73 10             	pushl  0x10(%ebx)
+80104bf0:	68 91 7a 10 80       	push   $0x80107a91
+80104bf5:	e8 66 ba ff ff       	call   80100660 <cprintf>
+    curproc->tf->eax = -1;
+80104bfa:	8b 43 18             	mov    0x18(%ebx),%eax
+80104bfd:	83 c4 10             	add    $0x10,%esp
+80104c00:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+80104c07:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104c0a:	c9                   	leave  
+80104c0b:	c3                   	ret    
+80104c0c:	66 90                	xchg   %ax,%ax
+80104c0e:	66 90                	xchg   %ax,%ax
+
+80104c10 <create>:
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+80104c10:	55                   	push   %ebp
+80104c11:	89 e5                	mov    %esp,%ebp
+80104c13:	57                   	push   %edi
+80104c14:	56                   	push   %esi
+80104c15:	53                   	push   %ebx
+  uint off;
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+80104c16:	8d 75 da             	lea    -0x26(%ebp),%esi
+{
+80104c19:	83 ec 44             	sub    $0x44,%esp
+80104c1c:	89 4d c0             	mov    %ecx,-0x40(%ebp)
+80104c1f:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  if((dp = nameiparent(path, name)) == 0)
+80104c22:	56                   	push   %esi
+80104c23:	50                   	push   %eax
+{
+80104c24:	89 55 c4             	mov    %edx,-0x3c(%ebp)
+80104c27:	89 4d bc             	mov    %ecx,-0x44(%ebp)
+  if((dp = nameiparent(path, name)) == 0)
+80104c2a:	e8 e1 d2 ff ff       	call   80101f10 <nameiparent>
+80104c2f:	83 c4 10             	add    $0x10,%esp
+80104c32:	85 c0                	test   %eax,%eax
+80104c34:	0f 84 46 01 00 00    	je     80104d80 <create+0x170>
+    return 0;
+  ilock(dp);
+80104c3a:	83 ec 0c             	sub    $0xc,%esp
+80104c3d:	89 c3                	mov    %eax,%ebx
+80104c3f:	50                   	push   %eax
+80104c40:	e8 4b ca ff ff       	call   80101690 <ilock>
+
+  if((ip = dirlookup(dp, name, &off)) != 0){
+80104c45:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+80104c48:	83 c4 0c             	add    $0xc,%esp
+80104c4b:	50                   	push   %eax
+80104c4c:	56                   	push   %esi
+80104c4d:	53                   	push   %ebx
+80104c4e:	e8 6d cf ff ff       	call   80101bc0 <dirlookup>
+80104c53:	83 c4 10             	add    $0x10,%esp
+80104c56:	85 c0                	test   %eax,%eax
+80104c58:	89 c7                	mov    %eax,%edi
+80104c5a:	74 34                	je     80104c90 <create+0x80>
+    iunlockput(dp);
+80104c5c:	83 ec 0c             	sub    $0xc,%esp
+80104c5f:	53                   	push   %ebx
+80104c60:	e8 bb cc ff ff       	call   80101920 <iunlockput>
+    ilock(ip);
+80104c65:	89 3c 24             	mov    %edi,(%esp)
+80104c68:	e8 23 ca ff ff       	call   80101690 <ilock>
+    if(type == T_FILE && ip->type == T_FILE)
+80104c6d:	83 c4 10             	add    $0x10,%esp
+80104c70:	66 83 7d c4 02       	cmpw   $0x2,-0x3c(%ebp)
+80104c75:	0f 85 95 00 00 00    	jne    80104d10 <create+0x100>
+80104c7b:	66 83 7f 50 02       	cmpw   $0x2,0x50(%edi)
+80104c80:	0f 85 8a 00 00 00    	jne    80104d10 <create+0x100>
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+80104c86:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104c89:	89 f8                	mov    %edi,%eax
+80104c8b:	5b                   	pop    %ebx
+80104c8c:	5e                   	pop    %esi
+80104c8d:	5f                   	pop    %edi
+80104c8e:	5d                   	pop    %ebp
+80104c8f:	c3                   	ret    
+  if((ip = ialloc(dp->dev, type)) == 0)
+80104c90:	0f bf 45 c4          	movswl -0x3c(%ebp),%eax
+80104c94:	83 ec 08             	sub    $0x8,%esp
+80104c97:	50                   	push   %eax
+80104c98:	ff 33                	pushl  (%ebx)
+80104c9a:	e8 81 c8 ff ff       	call   80101520 <ialloc>
+80104c9f:	83 c4 10             	add    $0x10,%esp
+80104ca2:	85 c0                	test   %eax,%eax
+80104ca4:	89 c7                	mov    %eax,%edi
+80104ca6:	0f 84 e8 00 00 00    	je     80104d94 <create+0x184>
+  ilock(ip);
+80104cac:	83 ec 0c             	sub    $0xc,%esp
+80104caf:	50                   	push   %eax
+80104cb0:	e8 db c9 ff ff       	call   80101690 <ilock>
+  ip->major = major;
+80104cb5:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
+80104cb9:	66 89 47 52          	mov    %ax,0x52(%edi)
+  ip->minor = minor;
+80104cbd:	0f b7 45 bc          	movzwl -0x44(%ebp),%eax
+80104cc1:	66 89 47 54          	mov    %ax,0x54(%edi)
+  ip->nlink = 1;
+80104cc5:	b8 01 00 00 00       	mov    $0x1,%eax
+80104cca:	66 89 47 56          	mov    %ax,0x56(%edi)
+  iupdate(ip);
+80104cce:	89 3c 24             	mov    %edi,(%esp)
+80104cd1:	e8 0a c9 ff ff       	call   801015e0 <iupdate>
+  if(type == T_DIR){  // Create . and .. entries.
+80104cd6:	83 c4 10             	add    $0x10,%esp
+80104cd9:	66 83 7d c4 01       	cmpw   $0x1,-0x3c(%ebp)
+80104cde:	74 50                	je     80104d30 <create+0x120>
+  if(dirlink(dp, name, ip->inum) < 0)
+80104ce0:	83 ec 04             	sub    $0x4,%esp
+80104ce3:	ff 77 04             	pushl  0x4(%edi)
+80104ce6:	56                   	push   %esi
+80104ce7:	53                   	push   %ebx
+80104ce8:	e8 43 d1 ff ff       	call   80101e30 <dirlink>
+80104ced:	83 c4 10             	add    $0x10,%esp
+80104cf0:	85 c0                	test   %eax,%eax
+80104cf2:	0f 88 8f 00 00 00    	js     80104d87 <create+0x177>
+  iunlockput(dp);
+80104cf8:	83 ec 0c             	sub    $0xc,%esp
+80104cfb:	53                   	push   %ebx
+80104cfc:	e8 1f cc ff ff       	call   80101920 <iunlockput>
+  return ip;
+80104d01:	83 c4 10             	add    $0x10,%esp
+}
+80104d04:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104d07:	89 f8                	mov    %edi,%eax
+80104d09:	5b                   	pop    %ebx
+80104d0a:	5e                   	pop    %esi
+80104d0b:	5f                   	pop    %edi
+80104d0c:	5d                   	pop    %ebp
+80104d0d:	c3                   	ret    
+80104d0e:	66 90                	xchg   %ax,%ax
+    iunlockput(ip);
+80104d10:	83 ec 0c             	sub    $0xc,%esp
+80104d13:	57                   	push   %edi
+    return 0;
+80104d14:	31 ff                	xor    %edi,%edi
+    iunlockput(ip);
+80104d16:	e8 05 cc ff ff       	call   80101920 <iunlockput>
+    return 0;
+80104d1b:	83 c4 10             	add    $0x10,%esp
+}
+80104d1e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104d21:	89 f8                	mov    %edi,%eax
+80104d23:	5b                   	pop    %ebx
+80104d24:	5e                   	pop    %esi
+80104d25:	5f                   	pop    %edi
+80104d26:	5d                   	pop    %ebp
+80104d27:	c3                   	ret    
+80104d28:	90                   	nop
+80104d29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    dp->nlink++;  // for ".."
+80104d30:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+    iupdate(dp);
+80104d35:	83 ec 0c             	sub    $0xc,%esp
+80104d38:	53                   	push   %ebx
+80104d39:	e8 a2 c8 ff ff       	call   801015e0 <iupdate>
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+80104d3e:	83 c4 0c             	add    $0xc,%esp
+80104d41:	ff 77 04             	pushl  0x4(%edi)
+80104d44:	68 44 7b 10 80       	push   $0x80107b44
+80104d49:	57                   	push   %edi
+80104d4a:	e8 e1 d0 ff ff       	call   80101e30 <dirlink>
+80104d4f:	83 c4 10             	add    $0x10,%esp
+80104d52:	85 c0                	test   %eax,%eax
+80104d54:	78 1c                	js     80104d72 <create+0x162>
+80104d56:	83 ec 04             	sub    $0x4,%esp
+80104d59:	ff 73 04             	pushl  0x4(%ebx)
+80104d5c:	68 43 7b 10 80       	push   $0x80107b43
+80104d61:	57                   	push   %edi
+80104d62:	e8 c9 d0 ff ff       	call   80101e30 <dirlink>
+80104d67:	83 c4 10             	add    $0x10,%esp
+80104d6a:	85 c0                	test   %eax,%eax
+80104d6c:	0f 89 6e ff ff ff    	jns    80104ce0 <create+0xd0>
+      panic("create dots");
+80104d72:	83 ec 0c             	sub    $0xc,%esp
+80104d75:	68 37 7b 10 80       	push   $0x80107b37
+80104d7a:	e8 11 b6 ff ff       	call   80100390 <panic>
+80104d7f:	90                   	nop
+    return 0;
+80104d80:	31 ff                	xor    %edi,%edi
+80104d82:	e9 ff fe ff ff       	jmp    80104c86 <create+0x76>
+    panic("create: dirlink");
+80104d87:	83 ec 0c             	sub    $0xc,%esp
+80104d8a:	68 46 7b 10 80       	push   $0x80107b46
+80104d8f:	e8 fc b5 ff ff       	call   80100390 <panic>
+    panic("create: ialloc");
+80104d94:	83 ec 0c             	sub    $0xc,%esp
+80104d97:	68 28 7b 10 80       	push   $0x80107b28
+80104d9c:	e8 ef b5 ff ff       	call   80100390 <panic>
+80104da1:	eb 0d                	jmp    80104db0 <argfd.constprop.0>
+80104da3:	90                   	nop
+80104da4:	90                   	nop
+80104da5:	90                   	nop
+80104da6:	90                   	nop
+80104da7:	90                   	nop
+80104da8:	90                   	nop
+80104da9:	90                   	nop
+80104daa:	90                   	nop
+80104dab:	90                   	nop
+80104dac:	90                   	nop
+80104dad:	90                   	nop
+80104dae:	90                   	nop
+80104daf:	90                   	nop
+
+80104db0 <argfd.constprop.0>:
+argfd(int n, int *pfd, struct file **pf)
+80104db0:	55                   	push   %ebp
+80104db1:	89 e5                	mov    %esp,%ebp
+80104db3:	56                   	push   %esi
+80104db4:	53                   	push   %ebx
+80104db5:	89 c3                	mov    %eax,%ebx
+  if(argint(n, &fd) < 0)
+80104db7:	8d 45 f4             	lea    -0xc(%ebp),%eax
+argfd(int n, int *pfd, struct file **pf)
+80104dba:	89 d6                	mov    %edx,%esi
+80104dbc:	83 ec 18             	sub    $0x18,%esp
+  if(argint(n, &fd) < 0)
+80104dbf:	50                   	push   %eax
+80104dc0:	6a 00                	push   $0x0
+80104dc2:	e8 f9 fc ff ff       	call   80104ac0 <argint>
+80104dc7:	83 c4 10             	add    $0x10,%esp
+80104dca:	85 c0                	test   %eax,%eax
+80104dcc:	78 2a                	js     80104df8 <argfd.constprop.0+0x48>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80104dce:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80104dd2:	77 24                	ja     80104df8 <argfd.constprop.0+0x48>
+80104dd4:	e8 17 ed ff ff       	call   80103af0 <myproc>
+80104dd9:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104ddc:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
+80104de0:	85 c0                	test   %eax,%eax
+80104de2:	74 14                	je     80104df8 <argfd.constprop.0+0x48>
+  if(pfd)
+80104de4:	85 db                	test   %ebx,%ebx
+80104de6:	74 02                	je     80104dea <argfd.constprop.0+0x3a>
+    *pfd = fd;
+80104de8:	89 13                	mov    %edx,(%ebx)
+    *pf = f;
+80104dea:	89 06                	mov    %eax,(%esi)
+  return 0;
+80104dec:	31 c0                	xor    %eax,%eax
+}
+80104dee:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104df1:	5b                   	pop    %ebx
+80104df2:	5e                   	pop    %esi
+80104df3:	5d                   	pop    %ebp
+80104df4:	c3                   	ret    
+80104df5:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80104df8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104dfd:	eb ef                	jmp    80104dee <argfd.constprop.0+0x3e>
+80104dff:	90                   	nop
+
+80104e00 <sys_dup>:
+{
+80104e00:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0)
+80104e01:	31 c0                	xor    %eax,%eax
+{
+80104e03:	89 e5                	mov    %esp,%ebp
+80104e05:	56                   	push   %esi
+80104e06:	53                   	push   %ebx
+  if(argfd(0, 0, &f) < 0)
+80104e07:	8d 55 f4             	lea    -0xc(%ebp),%edx
+{
+80104e0a:	83 ec 10             	sub    $0x10,%esp
+  if(argfd(0, 0, &f) < 0)
+80104e0d:	e8 9e ff ff ff       	call   80104db0 <argfd.constprop.0>
+80104e12:	85 c0                	test   %eax,%eax
+80104e14:	78 42                	js     80104e58 <sys_dup+0x58>
+  if((fd=fdalloc(f)) < 0)
+80104e16:	8b 75 f4             	mov    -0xc(%ebp),%esi
+  for(fd = 0; fd < NOFILE; fd++){
+80104e19:	31 db                	xor    %ebx,%ebx
+  struct proc *curproc = myproc();
+80104e1b:	e8 d0 ec ff ff       	call   80103af0 <myproc>
+80104e20:	eb 0e                	jmp    80104e30 <sys_dup+0x30>
+80104e22:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(fd = 0; fd < NOFILE; fd++){
+80104e28:	83 c3 01             	add    $0x1,%ebx
+80104e2b:	83 fb 10             	cmp    $0x10,%ebx
+80104e2e:	74 28                	je     80104e58 <sys_dup+0x58>
+    if(curproc->ofile[fd] == 0){
+80104e30:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80104e34:	85 d2                	test   %edx,%edx
+80104e36:	75 f0                	jne    80104e28 <sys_dup+0x28>
+      curproc->ofile[fd] = f;
+80104e38:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+  filedup(f);
+80104e3c:	83 ec 0c             	sub    $0xc,%esp
+80104e3f:	ff 75 f4             	pushl  -0xc(%ebp)
+80104e42:	e8 a9 bf ff ff       	call   80100df0 <filedup>
+  return fd;
+80104e47:	83 c4 10             	add    $0x10,%esp
+}
+80104e4a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104e4d:	89 d8                	mov    %ebx,%eax
+80104e4f:	5b                   	pop    %ebx
+80104e50:	5e                   	pop    %esi
+80104e51:	5d                   	pop    %ebp
+80104e52:	c3                   	ret    
+80104e53:	90                   	nop
+80104e54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104e58:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+80104e5b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+}
+80104e60:	89 d8                	mov    %ebx,%eax
+80104e62:	5b                   	pop    %ebx
+80104e63:	5e                   	pop    %esi
+80104e64:	5d                   	pop    %ebp
+80104e65:	c3                   	ret    
+80104e66:	8d 76 00             	lea    0x0(%esi),%esi
+80104e69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104e70 <sys_read>:
+{
+80104e70:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104e71:	31 c0                	xor    %eax,%eax
+{
+80104e73:	89 e5                	mov    %esp,%ebp
+80104e75:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104e78:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80104e7b:	e8 30 ff ff ff       	call   80104db0 <argfd.constprop.0>
+80104e80:	85 c0                	test   %eax,%eax
+80104e82:	78 4c                	js     80104ed0 <sys_read+0x60>
+80104e84:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104e87:	83 ec 08             	sub    $0x8,%esp
+80104e8a:	50                   	push   %eax
+80104e8b:	6a 02                	push   $0x2
+80104e8d:	e8 2e fc ff ff       	call   80104ac0 <argint>
+80104e92:	83 c4 10             	add    $0x10,%esp
+80104e95:	85 c0                	test   %eax,%eax
+80104e97:	78 37                	js     80104ed0 <sys_read+0x60>
+80104e99:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104e9c:	83 ec 04             	sub    $0x4,%esp
+80104e9f:	ff 75 f0             	pushl  -0x10(%ebp)
+80104ea2:	50                   	push   %eax
+80104ea3:	6a 01                	push   $0x1
+80104ea5:	e8 66 fc ff ff       	call   80104b10 <argptr>
+80104eaa:	83 c4 10             	add    $0x10,%esp
+80104ead:	85 c0                	test   %eax,%eax
+80104eaf:	78 1f                	js     80104ed0 <sys_read+0x60>
+  return fileread(f, p, n);
+80104eb1:	83 ec 04             	sub    $0x4,%esp
+80104eb4:	ff 75 f0             	pushl  -0x10(%ebp)
+80104eb7:	ff 75 f4             	pushl  -0xc(%ebp)
+80104eba:	ff 75 ec             	pushl  -0x14(%ebp)
+80104ebd:	e8 9e c0 ff ff       	call   80100f60 <fileread>
+80104ec2:	83 c4 10             	add    $0x10,%esp
+}
+80104ec5:	c9                   	leave  
+80104ec6:	c3                   	ret    
+80104ec7:	89 f6                	mov    %esi,%esi
+80104ec9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    return -1;
+80104ed0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104ed5:	c9                   	leave  
+80104ed6:	c3                   	ret    
+80104ed7:	89 f6                	mov    %esi,%esi
+80104ed9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104ee0 <sys_write>:
+{
+80104ee0:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104ee1:	31 c0                	xor    %eax,%eax
+{
+80104ee3:	89 e5                	mov    %esp,%ebp
+80104ee5:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104ee8:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80104eeb:	e8 c0 fe ff ff       	call   80104db0 <argfd.constprop.0>
+80104ef0:	85 c0                	test   %eax,%eax
+80104ef2:	78 4c                	js     80104f40 <sys_write+0x60>
+80104ef4:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104ef7:	83 ec 08             	sub    $0x8,%esp
+80104efa:	50                   	push   %eax
+80104efb:	6a 02                	push   $0x2
+80104efd:	e8 be fb ff ff       	call   80104ac0 <argint>
+80104f02:	83 c4 10             	add    $0x10,%esp
+80104f05:	85 c0                	test   %eax,%eax
+80104f07:	78 37                	js     80104f40 <sys_write+0x60>
+80104f09:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104f0c:	83 ec 04             	sub    $0x4,%esp
+80104f0f:	ff 75 f0             	pushl  -0x10(%ebp)
+80104f12:	50                   	push   %eax
+80104f13:	6a 01                	push   $0x1
+80104f15:	e8 f6 fb ff ff       	call   80104b10 <argptr>
+80104f1a:	83 c4 10             	add    $0x10,%esp
+80104f1d:	85 c0                	test   %eax,%eax
+80104f1f:	78 1f                	js     80104f40 <sys_write+0x60>
+  return filewrite(f, p, n);
+80104f21:	83 ec 04             	sub    $0x4,%esp
+80104f24:	ff 75 f0             	pushl  -0x10(%ebp)
+80104f27:	ff 75 f4             	pushl  -0xc(%ebp)
+80104f2a:	ff 75 ec             	pushl  -0x14(%ebp)
+80104f2d:	e8 be c0 ff ff       	call   80100ff0 <filewrite>
+80104f32:	83 c4 10             	add    $0x10,%esp
+}
+80104f35:	c9                   	leave  
+80104f36:	c3                   	ret    
+80104f37:	89 f6                	mov    %esi,%esi
+80104f39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    return -1;
+80104f40:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104f45:	c9                   	leave  
+80104f46:	c3                   	ret    
+80104f47:	89 f6                	mov    %esi,%esi
+80104f49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104f50 <sys_close>:
+{
+80104f50:	55                   	push   %ebp
+80104f51:	89 e5                	mov    %esp,%ebp
+80104f53:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, &fd, &f) < 0)
+80104f56:	8d 55 f4             	lea    -0xc(%ebp),%edx
+80104f59:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104f5c:	e8 4f fe ff ff       	call   80104db0 <argfd.constprop.0>
+80104f61:	85 c0                	test   %eax,%eax
+80104f63:	78 2b                	js     80104f90 <sys_close+0x40>
+  myproc()->ofile[fd] = 0;
+80104f65:	e8 86 eb ff ff       	call   80103af0 <myproc>
+80104f6a:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  fileclose(f);
+80104f6d:	83 ec 0c             	sub    $0xc,%esp
+  myproc()->ofile[fd] = 0;
+80104f70:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
+80104f77:	00 
+  fileclose(f);
+80104f78:	ff 75 f4             	pushl  -0xc(%ebp)
+80104f7b:	e8 c0 be ff ff       	call   80100e40 <fileclose>
+  return 0;
+80104f80:	83 c4 10             	add    $0x10,%esp
+80104f83:	31 c0                	xor    %eax,%eax
+}
+80104f85:	c9                   	leave  
+80104f86:	c3                   	ret    
+80104f87:	89 f6                	mov    %esi,%esi
+80104f89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    return -1;
+80104f90:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104f95:	c9                   	leave  
+80104f96:	c3                   	ret    
+80104f97:	89 f6                	mov    %esi,%esi
+80104f99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104fa0 <sys_fstat>:
+{
+80104fa0:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+80104fa1:	31 c0                	xor    %eax,%eax
+{
+80104fa3:	89 e5                	mov    %esp,%ebp
+80104fa5:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+80104fa8:	8d 55 f0             	lea    -0x10(%ebp),%edx
+80104fab:	e8 00 fe ff ff       	call   80104db0 <argfd.constprop.0>
+80104fb0:	85 c0                	test   %eax,%eax
+80104fb2:	78 2c                	js     80104fe0 <sys_fstat+0x40>
+80104fb4:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104fb7:	83 ec 04             	sub    $0x4,%esp
+80104fba:	6a 14                	push   $0x14
+80104fbc:	50                   	push   %eax
+80104fbd:	6a 01                	push   $0x1
+80104fbf:	e8 4c fb ff ff       	call   80104b10 <argptr>
+80104fc4:	83 c4 10             	add    $0x10,%esp
+80104fc7:	85 c0                	test   %eax,%eax
+80104fc9:	78 15                	js     80104fe0 <sys_fstat+0x40>
+  return filestat(f, st);
+80104fcb:	83 ec 08             	sub    $0x8,%esp
+80104fce:	ff 75 f4             	pushl  -0xc(%ebp)
+80104fd1:	ff 75 f0             	pushl  -0x10(%ebp)
+80104fd4:	e8 37 bf ff ff       	call   80100f10 <filestat>
+80104fd9:	83 c4 10             	add    $0x10,%esp
+}
+80104fdc:	c9                   	leave  
+80104fdd:	c3                   	ret    
+80104fde:	66 90                	xchg   %ax,%ax
+    return -1;
+80104fe0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104fe5:	c9                   	leave  
+80104fe6:	c3                   	ret    
+80104fe7:	89 f6                	mov    %esi,%esi
+80104fe9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104ff0 <sys_link>:
+{
+80104ff0:	55                   	push   %ebp
+80104ff1:	89 e5                	mov    %esp,%ebp
+80104ff3:	57                   	push   %edi
+80104ff4:	56                   	push   %esi
+80104ff5:	53                   	push   %ebx
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+80104ff6:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+{
+80104ff9:	83 ec 34             	sub    $0x34,%esp
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+80104ffc:	50                   	push   %eax
+80104ffd:	6a 00                	push   $0x0
+80104fff:	e8 6c fb ff ff       	call   80104b70 <argstr>
+80105004:	83 c4 10             	add    $0x10,%esp
+80105007:	85 c0                	test   %eax,%eax
+80105009:	0f 88 fb 00 00 00    	js     8010510a <sys_link+0x11a>
+8010500f:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80105012:	83 ec 08             	sub    $0x8,%esp
+80105015:	50                   	push   %eax
+80105016:	6a 01                	push   $0x1
+80105018:	e8 53 fb ff ff       	call   80104b70 <argstr>
+8010501d:	83 c4 10             	add    $0x10,%esp
+80105020:	85 c0                	test   %eax,%eax
+80105022:	0f 88 e2 00 00 00    	js     8010510a <sys_link+0x11a>
+  begin_op();
+80105028:	e8 83 de ff ff       	call   80102eb0 <begin_op>
+  if((ip = namei(old)) == 0){
+8010502d:	83 ec 0c             	sub    $0xc,%esp
+80105030:	ff 75 d4             	pushl  -0x2c(%ebp)
+80105033:	e8 b8 ce ff ff       	call   80101ef0 <namei>
+80105038:	83 c4 10             	add    $0x10,%esp
+8010503b:	85 c0                	test   %eax,%eax
+8010503d:	89 c3                	mov    %eax,%ebx
+8010503f:	0f 84 ea 00 00 00    	je     8010512f <sys_link+0x13f>
+  ilock(ip);
+80105045:	83 ec 0c             	sub    $0xc,%esp
+80105048:	50                   	push   %eax
+80105049:	e8 42 c6 ff ff       	call   80101690 <ilock>
+  if(ip->type == T_DIR){
+8010504e:	83 c4 10             	add    $0x10,%esp
+80105051:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105056:	0f 84 bb 00 00 00    	je     80105117 <sys_link+0x127>
+  ip->nlink++;
+8010505c:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+  iupdate(ip);
+80105061:	83 ec 0c             	sub    $0xc,%esp
+  if((dp = nameiparent(new, name)) == 0)
+80105064:	8d 7d da             	lea    -0x26(%ebp),%edi
+  iupdate(ip);
+80105067:	53                   	push   %ebx
+80105068:	e8 73 c5 ff ff       	call   801015e0 <iupdate>
+  iunlock(ip);
+8010506d:	89 1c 24             	mov    %ebx,(%esp)
+80105070:	e8 fb c6 ff ff       	call   80101770 <iunlock>
+  if((dp = nameiparent(new, name)) == 0)
+80105075:	58                   	pop    %eax
+80105076:	5a                   	pop    %edx
+80105077:	57                   	push   %edi
+80105078:	ff 75 d0             	pushl  -0x30(%ebp)
+8010507b:	e8 90 ce ff ff       	call   80101f10 <nameiparent>
+80105080:	83 c4 10             	add    $0x10,%esp
+80105083:	85 c0                	test   %eax,%eax
+80105085:	89 c6                	mov    %eax,%esi
+80105087:	74 5b                	je     801050e4 <sys_link+0xf4>
+  ilock(dp);
+80105089:	83 ec 0c             	sub    $0xc,%esp
+8010508c:	50                   	push   %eax
+8010508d:	e8 fe c5 ff ff       	call   80101690 <ilock>
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+80105092:	83 c4 10             	add    $0x10,%esp
+80105095:	8b 03                	mov    (%ebx),%eax
+80105097:	39 06                	cmp    %eax,(%esi)
+80105099:	75 3d                	jne    801050d8 <sys_link+0xe8>
+8010509b:	83 ec 04             	sub    $0x4,%esp
+8010509e:	ff 73 04             	pushl  0x4(%ebx)
+801050a1:	57                   	push   %edi
+801050a2:	56                   	push   %esi
+801050a3:	e8 88 cd ff ff       	call   80101e30 <dirlink>
+801050a8:	83 c4 10             	add    $0x10,%esp
+801050ab:	85 c0                	test   %eax,%eax
+801050ad:	78 29                	js     801050d8 <sys_link+0xe8>
+  iunlockput(dp);
+801050af:	83 ec 0c             	sub    $0xc,%esp
+801050b2:	56                   	push   %esi
+801050b3:	e8 68 c8 ff ff       	call   80101920 <iunlockput>
+  iput(ip);
+801050b8:	89 1c 24             	mov    %ebx,(%esp)
+801050bb:	e8 00 c7 ff ff       	call   801017c0 <iput>
+  end_op();
+801050c0:	e8 5b de ff ff       	call   80102f20 <end_op>
+  return 0;
+801050c5:	83 c4 10             	add    $0x10,%esp
+801050c8:	31 c0                	xor    %eax,%eax
+}
+801050ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801050cd:	5b                   	pop    %ebx
+801050ce:	5e                   	pop    %esi
+801050cf:	5f                   	pop    %edi
+801050d0:	5d                   	pop    %ebp
+801050d1:	c3                   	ret    
+801050d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    iunlockput(dp);
+801050d8:	83 ec 0c             	sub    $0xc,%esp
+801050db:	56                   	push   %esi
+801050dc:	e8 3f c8 ff ff       	call   80101920 <iunlockput>
+    goto bad;
+801050e1:	83 c4 10             	add    $0x10,%esp
+  ilock(ip);
+801050e4:	83 ec 0c             	sub    $0xc,%esp
+801050e7:	53                   	push   %ebx
+801050e8:	e8 a3 c5 ff ff       	call   80101690 <ilock>
+  ip->nlink--;
+801050ed:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+  iupdate(ip);
+801050f2:	89 1c 24             	mov    %ebx,(%esp)
+801050f5:	e8 e6 c4 ff ff       	call   801015e0 <iupdate>
+  iunlockput(ip);
+801050fa:	89 1c 24             	mov    %ebx,(%esp)
+801050fd:	e8 1e c8 ff ff       	call   80101920 <iunlockput>
+  end_op();
+80105102:	e8 19 de ff ff       	call   80102f20 <end_op>
+  return -1;
+80105107:	83 c4 10             	add    $0x10,%esp
+}
+8010510a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return -1;
+8010510d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105112:	5b                   	pop    %ebx
+80105113:	5e                   	pop    %esi
+80105114:	5f                   	pop    %edi
+80105115:	5d                   	pop    %ebp
+80105116:	c3                   	ret    
+    iunlockput(ip);
+80105117:	83 ec 0c             	sub    $0xc,%esp
+8010511a:	53                   	push   %ebx
+8010511b:	e8 00 c8 ff ff       	call   80101920 <iunlockput>
+    end_op();
+80105120:	e8 fb dd ff ff       	call   80102f20 <end_op>
+    return -1;
+80105125:	83 c4 10             	add    $0x10,%esp
+80105128:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010512d:	eb 9b                	jmp    801050ca <sys_link+0xda>
+    end_op();
+8010512f:	e8 ec dd ff ff       	call   80102f20 <end_op>
+    return -1;
+80105134:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105139:	eb 8f                	jmp    801050ca <sys_link+0xda>
+8010513b:	90                   	nop
+8010513c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105140 <sys_unlink>:
+{
+80105140:	55                   	push   %ebp
+80105141:	89 e5                	mov    %esp,%ebp
+80105143:	57                   	push   %edi
+80105144:	56                   	push   %esi
+80105145:	53                   	push   %ebx
+  if(argstr(0, &path) < 0)
+80105146:	8d 45 c0             	lea    -0x40(%ebp),%eax
+{
+80105149:	83 ec 44             	sub    $0x44,%esp
+  if(argstr(0, &path) < 0)
+8010514c:	50                   	push   %eax
+8010514d:	6a 00                	push   $0x0
+8010514f:	e8 1c fa ff ff       	call   80104b70 <argstr>
+80105154:	83 c4 10             	add    $0x10,%esp
+80105157:	85 c0                	test   %eax,%eax
+80105159:	0f 88 77 01 00 00    	js     801052d6 <sys_unlink+0x196>
+  if((dp = nameiparent(path, name)) == 0){
+8010515f:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+  begin_op();
+80105162:	e8 49 dd ff ff       	call   80102eb0 <begin_op>
+  if((dp = nameiparent(path, name)) == 0){
+80105167:	83 ec 08             	sub    $0x8,%esp
+8010516a:	53                   	push   %ebx
+8010516b:	ff 75 c0             	pushl  -0x40(%ebp)
+8010516e:	e8 9d cd ff ff       	call   80101f10 <nameiparent>
+80105173:	83 c4 10             	add    $0x10,%esp
+80105176:	85 c0                	test   %eax,%eax
+80105178:	89 c6                	mov    %eax,%esi
+8010517a:	0f 84 60 01 00 00    	je     801052e0 <sys_unlink+0x1a0>
+  ilock(dp);
+80105180:	83 ec 0c             	sub    $0xc,%esp
+80105183:	50                   	push   %eax
+80105184:	e8 07 c5 ff ff       	call   80101690 <ilock>
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+80105189:	58                   	pop    %eax
+8010518a:	5a                   	pop    %edx
+8010518b:	68 44 7b 10 80       	push   $0x80107b44
+80105190:	53                   	push   %ebx
+80105191:	e8 0a ca ff ff       	call   80101ba0 <namecmp>
+80105196:	83 c4 10             	add    $0x10,%esp
+80105199:	85 c0                	test   %eax,%eax
+8010519b:	0f 84 03 01 00 00    	je     801052a4 <sys_unlink+0x164>
+801051a1:	83 ec 08             	sub    $0x8,%esp
+801051a4:	68 43 7b 10 80       	push   $0x80107b43
+801051a9:	53                   	push   %ebx
+801051aa:	e8 f1 c9 ff ff       	call   80101ba0 <namecmp>
+801051af:	83 c4 10             	add    $0x10,%esp
+801051b2:	85 c0                	test   %eax,%eax
+801051b4:	0f 84 ea 00 00 00    	je     801052a4 <sys_unlink+0x164>
+  if((ip = dirlookup(dp, name, &off)) == 0)
+801051ba:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+801051bd:	83 ec 04             	sub    $0x4,%esp
+801051c0:	50                   	push   %eax
+801051c1:	53                   	push   %ebx
+801051c2:	56                   	push   %esi
+801051c3:	e8 f8 c9 ff ff       	call   80101bc0 <dirlookup>
+801051c8:	83 c4 10             	add    $0x10,%esp
+801051cb:	85 c0                	test   %eax,%eax
+801051cd:	89 c3                	mov    %eax,%ebx
+801051cf:	0f 84 cf 00 00 00    	je     801052a4 <sys_unlink+0x164>
+  ilock(ip);
+801051d5:	83 ec 0c             	sub    $0xc,%esp
+801051d8:	50                   	push   %eax
+801051d9:	e8 b2 c4 ff ff       	call   80101690 <ilock>
+  if(ip->nlink < 1)
+801051de:	83 c4 10             	add    $0x10,%esp
+801051e1:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+801051e6:	0f 8e 10 01 00 00    	jle    801052fc <sys_unlink+0x1bc>
+  if(ip->type == T_DIR && !isdirempty(ip)){
+801051ec:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801051f1:	74 6d                	je     80105260 <sys_unlink+0x120>
+  memset(&de, 0, sizeof(de));
+801051f3:	8d 45 d8             	lea    -0x28(%ebp),%eax
+801051f6:	83 ec 04             	sub    $0x4,%esp
+801051f9:	6a 10                	push   $0x10
+801051fb:	6a 00                	push   $0x0
+801051fd:	50                   	push   %eax
+801051fe:	e8 bd f5 ff ff       	call   801047c0 <memset>
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80105203:	8d 45 d8             	lea    -0x28(%ebp),%eax
+80105206:	6a 10                	push   $0x10
+80105208:	ff 75 c4             	pushl  -0x3c(%ebp)
+8010520b:	50                   	push   %eax
+8010520c:	56                   	push   %esi
+8010520d:	e8 5e c8 ff ff       	call   80101a70 <writei>
+80105212:	83 c4 20             	add    $0x20,%esp
+80105215:	83 f8 10             	cmp    $0x10,%eax
+80105218:	0f 85 eb 00 00 00    	jne    80105309 <sys_unlink+0x1c9>
+  if(ip->type == T_DIR){
+8010521e:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105223:	0f 84 97 00 00 00    	je     801052c0 <sys_unlink+0x180>
+  iunlockput(dp);
+80105229:	83 ec 0c             	sub    $0xc,%esp
+8010522c:	56                   	push   %esi
+8010522d:	e8 ee c6 ff ff       	call   80101920 <iunlockput>
+  ip->nlink--;
+80105232:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+  iupdate(ip);
+80105237:	89 1c 24             	mov    %ebx,(%esp)
+8010523a:	e8 a1 c3 ff ff       	call   801015e0 <iupdate>
+  iunlockput(ip);
+8010523f:	89 1c 24             	mov    %ebx,(%esp)
+80105242:	e8 d9 c6 ff ff       	call   80101920 <iunlockput>
+  end_op();
+80105247:	e8 d4 dc ff ff       	call   80102f20 <end_op>
+  return 0;
+8010524c:	83 c4 10             	add    $0x10,%esp
+8010524f:	31 c0                	xor    %eax,%eax
+}
+80105251:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105254:	5b                   	pop    %ebx
+80105255:	5e                   	pop    %esi
+80105256:	5f                   	pop    %edi
+80105257:	5d                   	pop    %ebp
+80105258:	c3                   	ret    
+80105259:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+80105260:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80105264:	76 8d                	jbe    801051f3 <sys_unlink+0xb3>
+80105266:	bf 20 00 00 00       	mov    $0x20,%edi
+8010526b:	eb 0f                	jmp    8010527c <sys_unlink+0x13c>
+8010526d:	8d 76 00             	lea    0x0(%esi),%esi
+80105270:	83 c7 10             	add    $0x10,%edi
+80105273:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80105276:	0f 83 77 ff ff ff    	jae    801051f3 <sys_unlink+0xb3>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+8010527c:	8d 45 d8             	lea    -0x28(%ebp),%eax
+8010527f:	6a 10                	push   $0x10
+80105281:	57                   	push   %edi
+80105282:	50                   	push   %eax
+80105283:	53                   	push   %ebx
+80105284:	e8 e7 c6 ff ff       	call   80101970 <readi>
+80105289:	83 c4 10             	add    $0x10,%esp
+8010528c:	83 f8 10             	cmp    $0x10,%eax
+8010528f:	75 5e                	jne    801052ef <sys_unlink+0x1af>
+    if(de.inum != 0)
+80105291:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80105296:	74 d8                	je     80105270 <sys_unlink+0x130>
+    iunlockput(ip);
+80105298:	83 ec 0c             	sub    $0xc,%esp
+8010529b:	53                   	push   %ebx
+8010529c:	e8 7f c6 ff ff       	call   80101920 <iunlockput>
+    goto bad;
+801052a1:	83 c4 10             	add    $0x10,%esp
+  iunlockput(dp);
+801052a4:	83 ec 0c             	sub    $0xc,%esp
+801052a7:	56                   	push   %esi
+801052a8:	e8 73 c6 ff ff       	call   80101920 <iunlockput>
+  end_op();
+801052ad:	e8 6e dc ff ff       	call   80102f20 <end_op>
+  return -1;
+801052b2:	83 c4 10             	add    $0x10,%esp
+801052b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801052ba:	eb 95                	jmp    80105251 <sys_unlink+0x111>
+801052bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    dp->nlink--;
+801052c0:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
+    iupdate(dp);
+801052c5:	83 ec 0c             	sub    $0xc,%esp
+801052c8:	56                   	push   %esi
+801052c9:	e8 12 c3 ff ff       	call   801015e0 <iupdate>
+801052ce:	83 c4 10             	add    $0x10,%esp
+801052d1:	e9 53 ff ff ff       	jmp    80105229 <sys_unlink+0xe9>
+    return -1;
+801052d6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801052db:	e9 71 ff ff ff       	jmp    80105251 <sys_unlink+0x111>
+    end_op();
+801052e0:	e8 3b dc ff ff       	call   80102f20 <end_op>
+    return -1;
+801052e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801052ea:	e9 62 ff ff ff       	jmp    80105251 <sys_unlink+0x111>
+      panic("isdirempty: readi");
+801052ef:	83 ec 0c             	sub    $0xc,%esp
+801052f2:	68 68 7b 10 80       	push   $0x80107b68
+801052f7:	e8 94 b0 ff ff       	call   80100390 <panic>
+    panic("unlink: nlink < 1");
+801052fc:	83 ec 0c             	sub    $0xc,%esp
+801052ff:	68 56 7b 10 80       	push   $0x80107b56
+80105304:	e8 87 b0 ff ff       	call   80100390 <panic>
+    panic("unlink: writei");
+80105309:	83 ec 0c             	sub    $0xc,%esp
+8010530c:	68 7a 7b 10 80       	push   $0x80107b7a
+80105311:	e8 7a b0 ff ff       	call   80100390 <panic>
+80105316:	8d 76 00             	lea    0x0(%esi),%esi
+80105319:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105320 <sys_open>:
+
+int
+sys_open(void)
+{
+80105320:	55                   	push   %ebp
+80105321:	89 e5                	mov    %esp,%ebp
+80105323:	57                   	push   %edi
+80105324:	56                   	push   %esi
+80105325:	53                   	push   %ebx
+  char *path;
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+80105326:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+80105329:	83 ec 24             	sub    $0x24,%esp
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+8010532c:	50                   	push   %eax
+8010532d:	6a 00                	push   $0x0
+8010532f:	e8 3c f8 ff ff       	call   80104b70 <argstr>
+80105334:	83 c4 10             	add    $0x10,%esp
+80105337:	85 c0                	test   %eax,%eax
+80105339:	0f 88 1d 01 00 00    	js     8010545c <sys_open+0x13c>
+8010533f:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105342:	83 ec 08             	sub    $0x8,%esp
+80105345:	50                   	push   %eax
+80105346:	6a 01                	push   $0x1
+80105348:	e8 73 f7 ff ff       	call   80104ac0 <argint>
+8010534d:	83 c4 10             	add    $0x10,%esp
+80105350:	85 c0                	test   %eax,%eax
+80105352:	0f 88 04 01 00 00    	js     8010545c <sys_open+0x13c>
+    return -1;
+
+  begin_op();
+80105358:	e8 53 db ff ff       	call   80102eb0 <begin_op>
+
+  if(omode & O_CREATE){
+8010535d:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+80105361:	0f 85 a9 00 00 00    	jne    80105410 <sys_open+0xf0>
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+80105367:	83 ec 0c             	sub    $0xc,%esp
+8010536a:	ff 75 e0             	pushl  -0x20(%ebp)
+8010536d:	e8 7e cb ff ff       	call   80101ef0 <namei>
+80105372:	83 c4 10             	add    $0x10,%esp
+80105375:	85 c0                	test   %eax,%eax
+80105377:	89 c6                	mov    %eax,%esi
+80105379:	0f 84 b2 00 00 00    	je     80105431 <sys_open+0x111>
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+8010537f:	83 ec 0c             	sub    $0xc,%esp
+80105382:	50                   	push   %eax
+80105383:	e8 08 c3 ff ff       	call   80101690 <ilock>
+    if(ip->type == T_DIR && omode != O_RDONLY){
+80105388:	83 c4 10             	add    $0x10,%esp
+8010538b:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80105390:	0f 84 aa 00 00 00    	je     80105440 <sys_open+0x120>
+      end_op();
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+80105396:	e8 e5 b9 ff ff       	call   80100d80 <filealloc>
+8010539b:	85 c0                	test   %eax,%eax
+8010539d:	89 c7                	mov    %eax,%edi
+8010539f:	0f 84 a6 00 00 00    	je     8010544b <sys_open+0x12b>
+  struct proc *curproc = myproc();
+801053a5:	e8 46 e7 ff ff       	call   80103af0 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+801053aa:	31 db                	xor    %ebx,%ebx
+801053ac:	eb 0e                	jmp    801053bc <sys_open+0x9c>
+801053ae:	66 90                	xchg   %ax,%ax
+801053b0:	83 c3 01             	add    $0x1,%ebx
+801053b3:	83 fb 10             	cmp    $0x10,%ebx
+801053b6:	0f 84 ac 00 00 00    	je     80105468 <sys_open+0x148>
+    if(curproc->ofile[fd] == 0){
+801053bc:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+801053c0:	85 d2                	test   %edx,%edx
+801053c2:	75 ec                	jne    801053b0 <sys_open+0x90>
+      fileclose(f);
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+801053c4:	83 ec 0c             	sub    $0xc,%esp
+      curproc->ofile[fd] = f;
+801053c7:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+  iunlock(ip);
+801053cb:	56                   	push   %esi
+801053cc:	e8 9f c3 ff ff       	call   80101770 <iunlock>
+  end_op();
+801053d1:	e8 4a db ff ff       	call   80102f20 <end_op>
+
+  f->type = FD_INODE;
+801053d6:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+801053dc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+801053df:	83 c4 10             	add    $0x10,%esp
+  f->ip = ip;
+801053e2:	89 77 10             	mov    %esi,0x10(%edi)
+  f->off = 0;
+801053e5:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+  f->readable = !(omode & O_WRONLY);
+801053ec:	89 d0                	mov    %edx,%eax
+801053ee:	f7 d0                	not    %eax
+801053f0:	83 e0 01             	and    $0x1,%eax
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+801053f3:	83 e2 03             	and    $0x3,%edx
+  f->readable = !(omode & O_WRONLY);
+801053f6:	88 47 08             	mov    %al,0x8(%edi)
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+801053f9:	0f 95 47 09          	setne  0x9(%edi)
+  return fd;
+}
+801053fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105400:	89 d8                	mov    %ebx,%eax
+80105402:	5b                   	pop    %ebx
+80105403:	5e                   	pop    %esi
+80105404:	5f                   	pop    %edi
+80105405:	5d                   	pop    %ebp
+80105406:	c3                   	ret    
+80105407:	89 f6                	mov    %esi,%esi
+80105409:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    ip = create(path, T_FILE, 0, 0);
+80105410:	83 ec 0c             	sub    $0xc,%esp
+80105413:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80105416:	31 c9                	xor    %ecx,%ecx
+80105418:	6a 00                	push   $0x0
+8010541a:	ba 02 00 00 00       	mov    $0x2,%edx
+8010541f:	e8 ec f7 ff ff       	call   80104c10 <create>
+    if(ip == 0){
+80105424:	83 c4 10             	add    $0x10,%esp
+80105427:	85 c0                	test   %eax,%eax
+    ip = create(path, T_FILE, 0, 0);
+80105429:	89 c6                	mov    %eax,%esi
+    if(ip == 0){
+8010542b:	0f 85 65 ff ff ff    	jne    80105396 <sys_open+0x76>
+      end_op();
+80105431:	e8 ea da ff ff       	call   80102f20 <end_op>
+      return -1;
+80105436:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+8010543b:	eb c0                	jmp    801053fd <sys_open+0xdd>
+8010543d:	8d 76 00             	lea    0x0(%esi),%esi
+    if(ip->type == T_DIR && omode != O_RDONLY){
+80105440:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80105443:	85 c9                	test   %ecx,%ecx
+80105445:	0f 84 4b ff ff ff    	je     80105396 <sys_open+0x76>
+    iunlockput(ip);
+8010544b:	83 ec 0c             	sub    $0xc,%esp
+8010544e:	56                   	push   %esi
+8010544f:	e8 cc c4 ff ff       	call   80101920 <iunlockput>
+    end_op();
+80105454:	e8 c7 da ff ff       	call   80102f20 <end_op>
+    return -1;
+80105459:	83 c4 10             	add    $0x10,%esp
+8010545c:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105461:	eb 9a                	jmp    801053fd <sys_open+0xdd>
+80105463:	90                   	nop
+80105464:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      fileclose(f);
+80105468:	83 ec 0c             	sub    $0xc,%esp
+8010546b:	57                   	push   %edi
+8010546c:	e8 cf b9 ff ff       	call   80100e40 <fileclose>
+80105471:	83 c4 10             	add    $0x10,%esp
+80105474:	eb d5                	jmp    8010544b <sys_open+0x12b>
+80105476:	8d 76 00             	lea    0x0(%esi),%esi
+80105479:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105480 <sys_mkdir>:
+
+int
+sys_mkdir(void)
+{
+80105480:	55                   	push   %ebp
+80105481:	89 e5                	mov    %esp,%ebp
+80105483:	83 ec 18             	sub    $0x18,%esp
+  char *path;
+  struct inode *ip;
+
+  begin_op();
+80105486:	e8 25 da ff ff       	call   80102eb0 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+8010548b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010548e:	83 ec 08             	sub    $0x8,%esp
+80105491:	50                   	push   %eax
+80105492:	6a 00                	push   $0x0
+80105494:	e8 d7 f6 ff ff       	call   80104b70 <argstr>
+80105499:	83 c4 10             	add    $0x10,%esp
+8010549c:	85 c0                	test   %eax,%eax
+8010549e:	78 30                	js     801054d0 <sys_mkdir+0x50>
+801054a0:	83 ec 0c             	sub    $0xc,%esp
+801054a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801054a6:	31 c9                	xor    %ecx,%ecx
+801054a8:	6a 00                	push   $0x0
+801054aa:	ba 01 00 00 00       	mov    $0x1,%edx
+801054af:	e8 5c f7 ff ff       	call   80104c10 <create>
+801054b4:	83 c4 10             	add    $0x10,%esp
+801054b7:	85 c0                	test   %eax,%eax
+801054b9:	74 15                	je     801054d0 <sys_mkdir+0x50>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+801054bb:	83 ec 0c             	sub    $0xc,%esp
+801054be:	50                   	push   %eax
+801054bf:	e8 5c c4 ff ff       	call   80101920 <iunlockput>
+  end_op();
+801054c4:	e8 57 da ff ff       	call   80102f20 <end_op>
+  return 0;
+801054c9:	83 c4 10             	add    $0x10,%esp
+801054cc:	31 c0                	xor    %eax,%eax
+}
+801054ce:	c9                   	leave  
+801054cf:	c3                   	ret    
+    end_op();
+801054d0:	e8 4b da ff ff       	call   80102f20 <end_op>
+    return -1;
+801054d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801054da:	c9                   	leave  
+801054db:	c3                   	ret    
+801054dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801054e0 <sys_mknod>:
+
+int
+sys_mknod(void)
+{
+801054e0:	55                   	push   %ebp
+801054e1:	89 e5                	mov    %esp,%ebp
+801054e3:	83 ec 18             	sub    $0x18,%esp
+  struct inode *ip;
+  char *path;
+  int major, minor;
+
+  begin_op();
+801054e6:	e8 c5 d9 ff ff       	call   80102eb0 <begin_op>
+  if((argstr(0, &path)) < 0 ||
+801054eb:	8d 45 ec             	lea    -0x14(%ebp),%eax
+801054ee:	83 ec 08             	sub    $0x8,%esp
+801054f1:	50                   	push   %eax
+801054f2:	6a 00                	push   $0x0
+801054f4:	e8 77 f6 ff ff       	call   80104b70 <argstr>
+801054f9:	83 c4 10             	add    $0x10,%esp
+801054fc:	85 c0                	test   %eax,%eax
+801054fe:	78 60                	js     80105560 <sys_mknod+0x80>
+     argint(1, &major) < 0 ||
+80105500:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105503:	83 ec 08             	sub    $0x8,%esp
+80105506:	50                   	push   %eax
+80105507:	6a 01                	push   $0x1
+80105509:	e8 b2 f5 ff ff       	call   80104ac0 <argint>
+  if((argstr(0, &path)) < 0 ||
+8010550e:	83 c4 10             	add    $0x10,%esp
+80105511:	85 c0                	test   %eax,%eax
+80105513:	78 4b                	js     80105560 <sys_mknod+0x80>
+     argint(2, &minor) < 0 ||
+80105515:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105518:	83 ec 08             	sub    $0x8,%esp
+8010551b:	50                   	push   %eax
+8010551c:	6a 02                	push   $0x2
+8010551e:	e8 9d f5 ff ff       	call   80104ac0 <argint>
+     argint(1, &major) < 0 ||
+80105523:	83 c4 10             	add    $0x10,%esp
+80105526:	85 c0                	test   %eax,%eax
+80105528:	78 36                	js     80105560 <sys_mknod+0x80>
+     (ip = create(path, T_DEV, major, minor)) == 0){
+8010552a:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+     argint(2, &minor) < 0 ||
+8010552e:	83 ec 0c             	sub    $0xc,%esp
+     (ip = create(path, T_DEV, major, minor)) == 0){
+80105531:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+     argint(2, &minor) < 0 ||
+80105535:	ba 03 00 00 00       	mov    $0x3,%edx
+8010553a:	50                   	push   %eax
+8010553b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+8010553e:	e8 cd f6 ff ff       	call   80104c10 <create>
+80105543:	83 c4 10             	add    $0x10,%esp
+80105546:	85 c0                	test   %eax,%eax
+80105548:	74 16                	je     80105560 <sys_mknod+0x80>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+8010554a:	83 ec 0c             	sub    $0xc,%esp
+8010554d:	50                   	push   %eax
+8010554e:	e8 cd c3 ff ff       	call   80101920 <iunlockput>
+  end_op();
+80105553:	e8 c8 d9 ff ff       	call   80102f20 <end_op>
+  return 0;
+80105558:	83 c4 10             	add    $0x10,%esp
+8010555b:	31 c0                	xor    %eax,%eax
+}
+8010555d:	c9                   	leave  
+8010555e:	c3                   	ret    
+8010555f:	90                   	nop
+    end_op();
+80105560:	e8 bb d9 ff ff       	call   80102f20 <end_op>
+    return -1;
+80105565:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010556a:	c9                   	leave  
+8010556b:	c3                   	ret    
+8010556c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105570 <sys_chdir>:
+
+int
+sys_chdir(void)
+{
+80105570:	55                   	push   %ebp
+80105571:	89 e5                	mov    %esp,%ebp
+80105573:	56                   	push   %esi
+80105574:	53                   	push   %ebx
+80105575:	83 ec 10             	sub    $0x10,%esp
+  char *path;
+  struct inode *ip;
+  struct proc *curproc = myproc();
+80105578:	e8 73 e5 ff ff       	call   80103af0 <myproc>
+8010557d:	89 c6                	mov    %eax,%esi
+  
+  begin_op();
+8010557f:	e8 2c d9 ff ff       	call   80102eb0 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
+80105584:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105587:	83 ec 08             	sub    $0x8,%esp
+8010558a:	50                   	push   %eax
+8010558b:	6a 00                	push   $0x0
+8010558d:	e8 de f5 ff ff       	call   80104b70 <argstr>
+80105592:	83 c4 10             	add    $0x10,%esp
+80105595:	85 c0                	test   %eax,%eax
+80105597:	78 77                	js     80105610 <sys_chdir+0xa0>
+80105599:	83 ec 0c             	sub    $0xc,%esp
+8010559c:	ff 75 f4             	pushl  -0xc(%ebp)
+8010559f:	e8 4c c9 ff ff       	call   80101ef0 <namei>
+801055a4:	83 c4 10             	add    $0x10,%esp
+801055a7:	85 c0                	test   %eax,%eax
+801055a9:	89 c3                	mov    %eax,%ebx
+801055ab:	74 63                	je     80105610 <sys_chdir+0xa0>
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+801055ad:	83 ec 0c             	sub    $0xc,%esp
+801055b0:	50                   	push   %eax
+801055b1:	e8 da c0 ff ff       	call   80101690 <ilock>
+  if(ip->type != T_DIR){
+801055b6:	83 c4 10             	add    $0x10,%esp
+801055b9:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801055be:	75 30                	jne    801055f0 <sys_chdir+0x80>
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+801055c0:	83 ec 0c             	sub    $0xc,%esp
+801055c3:	53                   	push   %ebx
+801055c4:	e8 a7 c1 ff ff       	call   80101770 <iunlock>
+  iput(curproc->cwd);
+801055c9:	58                   	pop    %eax
+801055ca:	ff 76 68             	pushl  0x68(%esi)
+801055cd:	e8 ee c1 ff ff       	call   801017c0 <iput>
+  end_op();
+801055d2:	e8 49 d9 ff ff       	call   80102f20 <end_op>
+  curproc->cwd = ip;
+801055d7:	89 5e 68             	mov    %ebx,0x68(%esi)
+  return 0;
+801055da:	83 c4 10             	add    $0x10,%esp
+801055dd:	31 c0                	xor    %eax,%eax
+}
+801055df:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801055e2:	5b                   	pop    %ebx
+801055e3:	5e                   	pop    %esi
+801055e4:	5d                   	pop    %ebp
+801055e5:	c3                   	ret    
+801055e6:	8d 76 00             	lea    0x0(%esi),%esi
+801055e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    iunlockput(ip);
+801055f0:	83 ec 0c             	sub    $0xc,%esp
+801055f3:	53                   	push   %ebx
+801055f4:	e8 27 c3 ff ff       	call   80101920 <iunlockput>
+    end_op();
+801055f9:	e8 22 d9 ff ff       	call   80102f20 <end_op>
+    return -1;
+801055fe:	83 c4 10             	add    $0x10,%esp
+80105601:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105606:	eb d7                	jmp    801055df <sys_chdir+0x6f>
+80105608:	90                   	nop
+80105609:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    end_op();
+80105610:	e8 0b d9 ff ff       	call   80102f20 <end_op>
+    return -1;
+80105615:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010561a:	eb c3                	jmp    801055df <sys_chdir+0x6f>
+8010561c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105620 <sys_exec>:
+
+int
+sys_exec(void)
+{
+80105620:	55                   	push   %ebp
+80105621:	89 e5                	mov    %esp,%ebp
+80105623:	57                   	push   %edi
+80105624:	56                   	push   %esi
+80105625:	53                   	push   %ebx
+  char *path, *argv[MAXARG];
+  int i;
+  uint uargv, uarg;
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+80105626:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+{
+8010562c:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+80105632:	50                   	push   %eax
+80105633:	6a 00                	push   $0x0
+80105635:	e8 36 f5 ff ff       	call   80104b70 <argstr>
+8010563a:	83 c4 10             	add    $0x10,%esp
+8010563d:	85 c0                	test   %eax,%eax
+8010563f:	0f 88 87 00 00 00    	js     801056cc <sys_exec+0xac>
+80105645:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+8010564b:	83 ec 08             	sub    $0x8,%esp
+8010564e:	50                   	push   %eax
+8010564f:	6a 01                	push   $0x1
+80105651:	e8 6a f4 ff ff       	call   80104ac0 <argint>
+80105656:	83 c4 10             	add    $0x10,%esp
+80105659:	85 c0                	test   %eax,%eax
+8010565b:	78 6f                	js     801056cc <sys_exec+0xac>
+    return -1;
+  }
+  memset(argv, 0, sizeof(argv));
+8010565d:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80105663:	83 ec 04             	sub    $0x4,%esp
+  for(i=0;; i++){
+80105666:	31 db                	xor    %ebx,%ebx
+  memset(argv, 0, sizeof(argv));
+80105668:	68 80 00 00 00       	push   $0x80
+8010566d:	6a 00                	push   $0x0
+8010566f:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
+80105675:	50                   	push   %eax
+80105676:	e8 45 f1 ff ff       	call   801047c0 <memset>
+8010567b:	83 c4 10             	add    $0x10,%esp
+8010567e:	eb 2c                	jmp    801056ac <sys_exec+0x8c>
+    if(i >= NELEM(argv))
+      return -1;
+    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+      return -1;
+    if(uarg == 0){
+80105680:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+80105686:	85 c0                	test   %eax,%eax
+80105688:	74 56                	je     801056e0 <sys_exec+0xc0>
+      argv[i] = 0;
+      break;
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+8010568a:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
+80105690:	83 ec 08             	sub    $0x8,%esp
+80105693:	8d 14 31             	lea    (%ecx,%esi,1),%edx
+80105696:	52                   	push   %edx
+80105697:	50                   	push   %eax
+80105698:	e8 b3 f3 ff ff       	call   80104a50 <fetchstr>
+8010569d:	83 c4 10             	add    $0x10,%esp
+801056a0:	85 c0                	test   %eax,%eax
+801056a2:	78 28                	js     801056cc <sys_exec+0xac>
+  for(i=0;; i++){
+801056a4:	83 c3 01             	add    $0x1,%ebx
+    if(i >= NELEM(argv))
+801056a7:	83 fb 20             	cmp    $0x20,%ebx
+801056aa:	74 20                	je     801056cc <sys_exec+0xac>
+    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+801056ac:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+801056b2:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
+801056b9:	83 ec 08             	sub    $0x8,%esp
+801056bc:	57                   	push   %edi
+801056bd:	01 f0                	add    %esi,%eax
+801056bf:	50                   	push   %eax
+801056c0:	e8 4b f3 ff ff       	call   80104a10 <fetchint>
+801056c5:	83 c4 10             	add    $0x10,%esp
+801056c8:	85 c0                	test   %eax,%eax
+801056ca:	79 b4                	jns    80105680 <sys_exec+0x60>
+      return -1;
+  }
+  return exec(path, argv);
+}
+801056cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return -1;
+801056cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801056d4:	5b                   	pop    %ebx
+801056d5:	5e                   	pop    %esi
+801056d6:	5f                   	pop    %edi
+801056d7:	5d                   	pop    %ebp
+801056d8:	c3                   	ret    
+801056d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return exec(path, argv);
+801056e0:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+801056e6:	83 ec 08             	sub    $0x8,%esp
+      argv[i] = 0;
+801056e9:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+801056f0:	00 00 00 00 
+  return exec(path, argv);
+801056f4:	50                   	push   %eax
+801056f5:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
+801056fb:	e8 10 b3 ff ff       	call   80100a10 <exec>
+80105700:	83 c4 10             	add    $0x10,%esp
+}
+80105703:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105706:	5b                   	pop    %ebx
+80105707:	5e                   	pop    %esi
+80105708:	5f                   	pop    %edi
+80105709:	5d                   	pop    %ebp
+8010570a:	c3                   	ret    
+8010570b:	90                   	nop
+8010570c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105710 <sys_pipe>:
+
+int
+sys_pipe(void)
+{
+80105710:	55                   	push   %ebp
+80105711:	89 e5                	mov    %esp,%ebp
+80105713:	57                   	push   %edi
+80105714:	56                   	push   %esi
+80105715:	53                   	push   %ebx
+  int *fd;
+  struct file *rf, *wf;
+  int fd0, fd1;
+
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+80105716:	8d 45 dc             	lea    -0x24(%ebp),%eax
+{
+80105719:	83 ec 20             	sub    $0x20,%esp
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+8010571c:	6a 08                	push   $0x8
+8010571e:	50                   	push   %eax
+8010571f:	6a 00                	push   $0x0
+80105721:	e8 ea f3 ff ff       	call   80104b10 <argptr>
+80105726:	83 c4 10             	add    $0x10,%esp
+80105729:	85 c0                	test   %eax,%eax
+8010572b:	0f 88 ae 00 00 00    	js     801057df <sys_pipe+0xcf>
+    return -1;
+  if(pipealloc(&rf, &wf) < 0)
+80105731:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105734:	83 ec 08             	sub    $0x8,%esp
+80105737:	50                   	push   %eax
+80105738:	8d 45 e0             	lea    -0x20(%ebp),%eax
+8010573b:	50                   	push   %eax
+8010573c:	e8 0f de ff ff       	call   80103550 <pipealloc>
+80105741:	83 c4 10             	add    $0x10,%esp
+80105744:	85 c0                	test   %eax,%eax
+80105746:	0f 88 93 00 00 00    	js     801057df <sys_pipe+0xcf>
+    return -1;
+  fd0 = -1;
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+8010574c:	8b 7d e0             	mov    -0x20(%ebp),%edi
+  for(fd = 0; fd < NOFILE; fd++){
+8010574f:	31 db                	xor    %ebx,%ebx
+  struct proc *curproc = myproc();
+80105751:	e8 9a e3 ff ff       	call   80103af0 <myproc>
+80105756:	eb 10                	jmp    80105768 <sys_pipe+0x58>
+80105758:	90                   	nop
+80105759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(fd = 0; fd < NOFILE; fd++){
+80105760:	83 c3 01             	add    $0x1,%ebx
+80105763:	83 fb 10             	cmp    $0x10,%ebx
+80105766:	74 60                	je     801057c8 <sys_pipe+0xb8>
+    if(curproc->ofile[fd] == 0){
+80105768:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+8010576c:	85 f6                	test   %esi,%esi
+8010576e:	75 f0                	jne    80105760 <sys_pipe+0x50>
+      curproc->ofile[fd] = f;
+80105770:	8d 73 08             	lea    0x8(%ebx),%esi
+80105773:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+80105777:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+  struct proc *curproc = myproc();
+8010577a:	e8 71 e3 ff ff       	call   80103af0 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+8010577f:	31 d2                	xor    %edx,%edx
+80105781:	eb 0d                	jmp    80105790 <sys_pipe+0x80>
+80105783:	90                   	nop
+80105784:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105788:	83 c2 01             	add    $0x1,%edx
+8010578b:	83 fa 10             	cmp    $0x10,%edx
+8010578e:	74 28                	je     801057b8 <sys_pipe+0xa8>
+    if(curproc->ofile[fd] == 0){
+80105790:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+80105794:	85 c9                	test   %ecx,%ecx
+80105796:	75 f0                	jne    80105788 <sys_pipe+0x78>
+      curproc->ofile[fd] = f;
+80105798:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+      myproc()->ofile[fd0] = 0;
+    fileclose(rf);
+    fileclose(wf);
+    return -1;
+  }
+  fd[0] = fd0;
+8010579c:	8b 45 dc             	mov    -0x24(%ebp),%eax
+8010579f:	89 18                	mov    %ebx,(%eax)
+  fd[1] = fd1;
+801057a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801057a4:	89 50 04             	mov    %edx,0x4(%eax)
+  return 0;
+801057a7:	31 c0                	xor    %eax,%eax
+}
+801057a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801057ac:	5b                   	pop    %ebx
+801057ad:	5e                   	pop    %esi
+801057ae:	5f                   	pop    %edi
+801057af:	5d                   	pop    %ebp
+801057b0:	c3                   	ret    
+801057b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      myproc()->ofile[fd0] = 0;
+801057b8:	e8 33 e3 ff ff       	call   80103af0 <myproc>
+801057bd:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+801057c4:	00 
+801057c5:	8d 76 00             	lea    0x0(%esi),%esi
+    fileclose(rf);
+801057c8:	83 ec 0c             	sub    $0xc,%esp
+801057cb:	ff 75 e0             	pushl  -0x20(%ebp)
+801057ce:	e8 6d b6 ff ff       	call   80100e40 <fileclose>
+    fileclose(wf);
+801057d3:	58                   	pop    %eax
+801057d4:	ff 75 e4             	pushl  -0x1c(%ebp)
+801057d7:	e8 64 b6 ff ff       	call   80100e40 <fileclose>
+    return -1;
+801057dc:	83 c4 10             	add    $0x10,%esp
+801057df:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801057e4:	eb c3                	jmp    801057a9 <sys_pipe+0x99>
+801057e6:	66 90                	xchg   %ax,%ax
+801057e8:	66 90                	xchg   %ax,%ax
+801057ea:	66 90                	xchg   %ax,%ax
+801057ec:	66 90                	xchg   %ax,%ax
+801057ee:	66 90                	xchg   %ax,%ax
+
+801057f0 <sys_fork>:
+#include "mmu.h"
+#include "proc.h"
+
+int
+sys_fork(void)
+{
+801057f0:	55                   	push   %ebp
+801057f1:	89 e5                	mov    %esp,%ebp
+  return fork();
+}
+801057f3:	5d                   	pop    %ebp
+  return fork();
+801057f4:	e9 97 e4 ff ff       	jmp    80103c90 <fork>
+801057f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105800 <sys_exit>:
+
+int
+sys_exit(void)
+{
+80105800:	55                   	push   %ebp
+80105801:	89 e5                	mov    %esp,%ebp
+80105803:	83 ec 08             	sub    $0x8,%esp
+  exit();
+80105806:	e8 45 e7 ff ff       	call   80103f50 <exit>
+  return 0;  // not reached
+}
+8010580b:	31 c0                	xor    %eax,%eax
+8010580d:	c9                   	leave  
+8010580e:	c3                   	ret    
+8010580f:	90                   	nop
+
+80105810 <sys_wait>:
+
+int
+sys_wait(void)
+{
+80105810:	55                   	push   %ebp
+80105811:	89 e5                	mov    %esp,%ebp
+  return wait();
+}
+80105813:	5d                   	pop    %ebp
+  return wait();
+80105814:	e9 77 e9 ff ff       	jmp    80104190 <wait>
+80105819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105820 <sys_kill>:
+
+int
+sys_kill(void)
+{
+80105820:	55                   	push   %ebp
+80105821:	89 e5                	mov    %esp,%ebp
+80105823:	83 ec 20             	sub    $0x20,%esp
+  int pid;
+
+  if(argint(0, &pid) < 0)
+80105826:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105829:	50                   	push   %eax
+8010582a:	6a 00                	push   $0x0
+8010582c:	e8 8f f2 ff ff       	call   80104ac0 <argint>
+80105831:	83 c4 10             	add    $0x10,%esp
+80105834:	85 c0                	test   %eax,%eax
+80105836:	78 18                	js     80105850 <sys_kill+0x30>
+    return -1;
+  return kill(pid);
+80105838:	83 ec 0c             	sub    $0xc,%esp
+8010583b:	ff 75 f4             	pushl  -0xc(%ebp)
+8010583e:	e8 ad ea ff ff       	call   801042f0 <kill>
+80105843:	83 c4 10             	add    $0x10,%esp
+}
+80105846:	c9                   	leave  
+80105847:	c3                   	ret    
+80105848:	90                   	nop
+80105849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80105850:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105855:	c9                   	leave  
+80105856:	c3                   	ret    
+80105857:	89 f6                	mov    %esi,%esi
+80105859:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105860 <sys_getpid>:
+
+int
+sys_getpid(void)
+{
+80105860:	55                   	push   %ebp
+80105861:	89 e5                	mov    %esp,%ebp
+80105863:	83 ec 08             	sub    $0x8,%esp
+  return myproc()->pid;
+80105866:	e8 85 e2 ff ff       	call   80103af0 <myproc>
+8010586b:	8b 40 10             	mov    0x10(%eax),%eax
+}
+8010586e:	c9                   	leave  
+8010586f:	c3                   	ret    
+
+80105870 <sys_sbrk>:
+
+int
+sys_sbrk(void)
+{
+80105870:	55                   	push   %ebp
+80105871:	89 e5                	mov    %esp,%ebp
+80105873:	53                   	push   %ebx
+  int addr;
+  int n;
+
+  if(argint(0, &n) < 0)
+80105874:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+80105877:	83 ec 1c             	sub    $0x1c,%esp
+  if(argint(0, &n) < 0)
+8010587a:	50                   	push   %eax
+8010587b:	6a 00                	push   $0x0
+8010587d:	e8 3e f2 ff ff       	call   80104ac0 <argint>
+80105882:	83 c4 10             	add    $0x10,%esp
+80105885:	85 c0                	test   %eax,%eax
+80105887:	78 27                	js     801058b0 <sys_sbrk+0x40>
+    return -1;
+  addr = myproc()->sz;
+80105889:	e8 62 e2 ff ff       	call   80103af0 <myproc>
+  if(growproc(n) < 0)
+8010588e:	83 ec 0c             	sub    $0xc,%esp
+  addr = myproc()->sz;
+80105891:	8b 18                	mov    (%eax),%ebx
+  if(growproc(n) < 0)
+80105893:	ff 75 f4             	pushl  -0xc(%ebp)
+80105896:	e8 75 e3 ff ff       	call   80103c10 <growproc>
+8010589b:	83 c4 10             	add    $0x10,%esp
+8010589e:	85 c0                	test   %eax,%eax
+801058a0:	78 0e                	js     801058b0 <sys_sbrk+0x40>
+    return -1;
+  return addr;
+}
+801058a2:	89 d8                	mov    %ebx,%eax
+801058a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801058a7:	c9                   	leave  
+801058a8:	c3                   	ret    
+801058a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+801058b0:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801058b5:	eb eb                	jmp    801058a2 <sys_sbrk+0x32>
+801058b7:	89 f6                	mov    %esi,%esi
+801058b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801058c0 <sys_sleep>:
+
+int
+sys_sleep(void)
+{
+801058c0:	55                   	push   %ebp
+801058c1:	89 e5                	mov    %esp,%ebp
+801058c3:	53                   	push   %ebx
+  int n;
+  uint ticks0;
+
+  if(argint(0, &n) < 0)
+801058c4:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+801058c7:	83 ec 1c             	sub    $0x1c,%esp
+  if(argint(0, &n) < 0)
+801058ca:	50                   	push   %eax
+801058cb:	6a 00                	push   $0x0
+801058cd:	e8 ee f1 ff ff       	call   80104ac0 <argint>
+801058d2:	83 c4 10             	add    $0x10,%esp
+801058d5:	85 c0                	test   %eax,%eax
+801058d7:	0f 88 8a 00 00 00    	js     80105967 <sys_sleep+0xa7>
+    return -1;
+  acquire(&tickslock);
+801058dd:	83 ec 0c             	sub    $0xc,%esp
+801058e0:	68 80 4e 11 80       	push   $0x80114e80
+801058e5:	e8 c6 ed ff ff       	call   801046b0 <acquire>
+  ticks0 = ticks;
+  while(ticks - ticks0 < n){
+801058ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801058ed:	83 c4 10             	add    $0x10,%esp
+  ticks0 = ticks;
+801058f0:	8b 1d c0 56 11 80    	mov    0x801156c0,%ebx
+  while(ticks - ticks0 < n){
+801058f6:	85 d2                	test   %edx,%edx
+801058f8:	75 27                	jne    80105921 <sys_sleep+0x61>
+801058fa:	eb 54                	jmp    80105950 <sys_sleep+0x90>
+801058fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(myproc()->killed){
+      release(&tickslock);
+      return -1;
+    }
+    sleep(&ticks, &tickslock);
+80105900:	83 ec 08             	sub    $0x8,%esp
+80105903:	68 80 4e 11 80       	push   $0x80114e80
+80105908:	68 c0 56 11 80       	push   $0x801156c0
+8010590d:	e8 be e7 ff ff       	call   801040d0 <sleep>
+  while(ticks - ticks0 < n){
+80105912:	a1 c0 56 11 80       	mov    0x801156c0,%eax
+80105917:	83 c4 10             	add    $0x10,%esp
+8010591a:	29 d8                	sub    %ebx,%eax
+8010591c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+8010591f:	73 2f                	jae    80105950 <sys_sleep+0x90>
+    if(myproc()->killed){
+80105921:	e8 ca e1 ff ff       	call   80103af0 <myproc>
+80105926:	8b 40 24             	mov    0x24(%eax),%eax
+80105929:	85 c0                	test   %eax,%eax
+8010592b:	74 d3                	je     80105900 <sys_sleep+0x40>
+      release(&tickslock);
+8010592d:	83 ec 0c             	sub    $0xc,%esp
+80105930:	68 80 4e 11 80       	push   $0x80114e80
+80105935:	e8 36 ee ff ff       	call   80104770 <release>
+      return -1;
+8010593a:	83 c4 10             	add    $0x10,%esp
+8010593d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  }
+  release(&tickslock);
+  return 0;
+}
+80105942:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105945:	c9                   	leave  
+80105946:	c3                   	ret    
+80105947:	89 f6                	mov    %esi,%esi
+80105949:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  release(&tickslock);
+80105950:	83 ec 0c             	sub    $0xc,%esp
+80105953:	68 80 4e 11 80       	push   $0x80114e80
+80105958:	e8 13 ee ff ff       	call   80104770 <release>
+  return 0;
+8010595d:	83 c4 10             	add    $0x10,%esp
+80105960:	31 c0                	xor    %eax,%eax
+}
+80105962:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105965:	c9                   	leave  
+80105966:	c3                   	ret    
+    return -1;
+80105967:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010596c:	eb f4                	jmp    80105962 <sys_sleep+0xa2>
+8010596e:	66 90                	xchg   %ax,%ax
+
+80105970 <sys_uptime>:
+
+// return how many clock tick interrupts have occurred
+// since start.
+int
+sys_uptime(void)
+{
+80105970:	55                   	push   %ebp
+80105971:	89 e5                	mov    %esp,%ebp
+80105973:	53                   	push   %ebx
+80105974:	83 ec 10             	sub    $0x10,%esp
+  uint xticks;
+
+  acquire(&tickslock);
+80105977:	68 80 4e 11 80       	push   $0x80114e80
+8010597c:	e8 2f ed ff ff       	call   801046b0 <acquire>
+  xticks = ticks;
+80105981:	8b 1d c0 56 11 80    	mov    0x801156c0,%ebx
+  release(&tickslock);
+80105987:	c7 04 24 80 4e 11 80 	movl   $0x80114e80,(%esp)
+8010598e:	e8 dd ed ff ff       	call   80104770 <release>
+  return xticks;
+}
+80105993:	89 d8                	mov    %ebx,%eax
+80105995:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105998:	c9                   	leave  
+80105999:	c3                   	ret    
+8010599a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801059a0 <sys_kmalloc>:
+
+int
+sys_kmalloc(void)
+{
+801059a0:	55                   	push   %ebp
+801059a1:	89 e5                	mov    %esp,%ebp
+801059a3:	83 ec 20             	sub    $0x20,%esp
+  int nbytes;
+
+  if(argint(0, &nbytes) < 0)
+801059a6:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801059a9:	50                   	push   %eax
+801059aa:	6a 00                	push   $0x0
+801059ac:	e8 0f f1 ff ff       	call   80104ac0 <argint>
+801059b1:	83 c4 10             	add    $0x10,%esp
+801059b4:	85 c0                	test   %eax,%eax
+801059b6:	78 18                	js     801059d0 <sys_kmalloc+0x30>
+    return -1;
+
+  return (int)kmalloc((uint)nbytes);
+801059b8:	83 ec 0c             	sub    $0xc,%esp
+801059bb:	ff 75 f4             	pushl  -0xc(%ebp)
+801059be:	e8 0d cc ff ff       	call   801025d0 <kmalloc>
+801059c3:	83 c4 10             	add    $0x10,%esp
+}
+801059c6:	c9                   	leave  
+801059c7:	c3                   	ret    
+801059c8:	90                   	nop
+801059c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+801059d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801059d5:	c9                   	leave  
+801059d6:	c3                   	ret    
+801059d7:	89 f6                	mov    %esi,%esi
+801059d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801059e0 <sys_kmfree>:
+
+int
+sys_kmfree(void)
+{
+801059e0:	55                   	push   %ebp
+801059e1:	89 e5                	mov    %esp,%ebp
+801059e3:	83 ec 20             	sub    $0x20,%esp
+  int addr;
+
+  if(argint(0, &addr) < 0)
+801059e6:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801059e9:	50                   	push   %eax
+801059ea:	6a 00                	push   $0x0
+801059ec:	e8 cf f0 ff ff       	call   80104ac0 <argint>
+801059f1:	83 c4 10             	add    $0x10,%esp
+801059f4:	85 c0                	test   %eax,%eax
+801059f6:	78 18                	js     80105a10 <sys_kmfree+0x30>
+    return -1;
+
+  kmfree((void*)addr);
+801059f8:	83 ec 0c             	sub    $0xc,%esp
+801059fb:	ff 75 f4             	pushl  -0xc(%ebp)
+801059fe:	e8 3d cb ff ff       	call   80102540 <kmfree>
+
+  return 0;
+80105a03:	83 c4 10             	add    $0x10,%esp
+80105a06:	31 c0                	xor    %eax,%eax
+}
+80105a08:	c9                   	leave  
+80105a09:	c3                   	ret    
+80105a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+80105a10:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105a15:	c9                   	leave  
+80105a16:	c3                   	ret    
+80105a17:	89 f6                	mov    %esi,%esi
+80105a19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105a20 <sys_mmap>:
+
+int
+sys_mmap(void)
+{
+80105a20:	55                   	push   %ebp
+80105a21:	89 e5                	mov    %esp,%ebp
+80105a23:	83 ec 30             	sub    $0x30,%esp
+  int prot;
+  int flags;
+  int fd;
+  int offset;
+
+  if(argint(0, &addr) < 0)
+80105a26:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105a29:	50                   	push   %eax
+80105a2a:	6a 00                	push   $0x0
+80105a2c:	e8 8f f0 ff ff       	call   80104ac0 <argint>
+80105a31:	83 c4 10             	add    $0x10,%esp
+80105a34:	85 c0                	test   %eax,%eax
+80105a36:	0f 88 8c 00 00 00    	js     80105ac8 <sys_mmap+0xa8>
+  {
+    return -1;
+  }
+  if(argint(1, &length) < 0)
+80105a3c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105a3f:	83 ec 08             	sub    $0x8,%esp
+80105a42:	50                   	push   %eax
+80105a43:	6a 01                	push   $0x1
+80105a45:	e8 76 f0 ff ff       	call   80104ac0 <argint>
+80105a4a:	83 c4 10             	add    $0x10,%esp
+80105a4d:	85 c0                	test   %eax,%eax
+80105a4f:	78 77                	js     80105ac8 <sys_mmap+0xa8>
+  {
+    return -1;
+  }
+  if(argint(2, &prot) < 0)
+80105a51:	8d 45 e8             	lea    -0x18(%ebp),%eax
+80105a54:	83 ec 08             	sub    $0x8,%esp
+80105a57:	50                   	push   %eax
+80105a58:	6a 02                	push   $0x2
+80105a5a:	e8 61 f0 ff ff       	call   80104ac0 <argint>
+80105a5f:	83 c4 10             	add    $0x10,%esp
+80105a62:	85 c0                	test   %eax,%eax
+80105a64:	78 62                	js     80105ac8 <sys_mmap+0xa8>
+  {
+    return -1;
+  }
+  if(argint(3, &flags) < 0)
+80105a66:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80105a69:	83 ec 08             	sub    $0x8,%esp
+80105a6c:	50                   	push   %eax
+80105a6d:	6a 03                	push   $0x3
+80105a6f:	e8 4c f0 ff ff       	call   80104ac0 <argint>
+80105a74:	83 c4 10             	add    $0x10,%esp
+80105a77:	85 c0                	test   %eax,%eax
+80105a79:	78 4d                	js     80105ac8 <sys_mmap+0xa8>
+  {
+    return -1;
+  }
+  if(argint(4, &fd) < 0)
+80105a7b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105a7e:	83 ec 08             	sub    $0x8,%esp
+80105a81:	50                   	push   %eax
+80105a82:	6a 04                	push   $0x4
+80105a84:	e8 37 f0 ff ff       	call   80104ac0 <argint>
+80105a89:	83 c4 10             	add    $0x10,%esp
+80105a8c:	85 c0                	test   %eax,%eax
+80105a8e:	78 38                	js     80105ac8 <sys_mmap+0xa8>
+  {
+    return -1;
+  }
+  if(argint(5, &offset) < 0)
+80105a90:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105a93:	83 ec 08             	sub    $0x8,%esp
+80105a96:	50                   	push   %eax
+80105a97:	6a 05                	push   $0x5
+80105a99:	e8 22 f0 ff ff       	call   80104ac0 <argint>
+80105a9e:	83 c4 10             	add    $0x10,%esp
+80105aa1:	85 c0                	test   %eax,%eax
+80105aa3:	78 23                	js     80105ac8 <sys_mmap+0xa8>
+  {
+    return -1;
+  }
+
+  return (int)mmap((void*)addr, (uint)length, (uint)prot,
+80105aa5:	83 ec 08             	sub    $0x8,%esp
+80105aa8:	ff 75 f4             	pushl  -0xc(%ebp)
+80105aab:	ff 75 f0             	pushl  -0x10(%ebp)
+80105aae:	ff 75 ec             	pushl  -0x14(%ebp)
+80105ab1:	ff 75 e8             	pushl  -0x18(%ebp)
+80105ab4:	ff 75 e4             	pushl  -0x1c(%ebp)
+80105ab7:	ff 75 e0             	pushl  -0x20(%ebp)
+80105aba:	e8 f1 cb ff ff       	call   801026b0 <mmap>
+80105abf:	83 c4 20             	add    $0x20,%esp
+                    (uint)flags, (uint)fd, (uint)offset);
+}
+80105ac2:	c9                   	leave  
+80105ac3:	c3                   	ret    
+80105ac4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80105ac8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105acd:	c9                   	leave  
+80105ace:	c3                   	ret    
+80105acf:	90                   	nop
+
+80105ad0 <sys_munmap>:
+
+int
+sys_munmap(void)
+{
+80105ad0:	55                   	push   %ebp
+80105ad1:	89 e5                	mov    %esp,%ebp
+80105ad3:	83 ec 20             	sub    $0x20,%esp
+  int addr;
+  int length;
+
+  if(argint(0, &addr) < 0)
+80105ad6:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105ad9:	50                   	push   %eax
+80105ada:	6a 00                	push   $0x0
+80105adc:	e8 df ef ff ff       	call   80104ac0 <argint>
+80105ae1:	83 c4 10             	add    $0x10,%esp
+80105ae4:	85 c0                	test   %eax,%eax
+80105ae6:	78 28                	js     80105b10 <sys_munmap+0x40>
+  {
+    return -1;
+  }
+  if(argint(1, &length) < 0)
+80105ae8:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105aeb:	83 ec 08             	sub    $0x8,%esp
+80105aee:	50                   	push   %eax
+80105aef:	6a 01                	push   $0x1
+80105af1:	e8 ca ef ff ff       	call   80104ac0 <argint>
+80105af6:	83 c4 10             	add    $0x10,%esp
+80105af9:	85 c0                	test   %eax,%eax
+80105afb:	78 13                	js     80105b10 <sys_munmap+0x40>
+  {
+    return -1;
+  }
+
+  return munmap((void*)addr, (uint)length);
+80105afd:	83 ec 08             	sub    $0x8,%esp
+80105b00:	ff 75 f4             	pushl  -0xc(%ebp)
+80105b03:	ff 75 f0             	pushl  -0x10(%ebp)
+80105b06:	e8 85 cc ff ff       	call   80102790 <munmap>
+80105b0b:	83 c4 10             	add    $0x10,%esp
+80105b0e:	c9                   	leave  
+80105b0f:	c3                   	ret    
+    return -1;
+80105b10:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b15:	c9                   	leave  
+80105b16:	c3                   	ret    
+
+80105b17 <alltraps>:
+
+  # vectors.S sends all traps here.
+.globl alltraps
+alltraps:
+  # Build trap frame.
+  pushl %ds
+80105b17:	1e                   	push   %ds
+  pushl %es
+80105b18:	06                   	push   %es
+  pushl %fs
+80105b19:	0f a0                	push   %fs
+  pushl %gs
+80105b1b:	0f a8                	push   %gs
+  pushal
+80105b1d:	60                   	pusha  
+  
+  # Set up data segments.
+  movw $(SEG_KDATA<<3), %ax
+80105b1e:	66 b8 10 00          	mov    $0x10,%ax
+  movw %ax, %ds
+80105b22:	8e d8                	mov    %eax,%ds
+  movw %ax, %es
+80105b24:	8e c0                	mov    %eax,%es
+
+  # Call trap(tf), where tf=%esp
+  pushl %esp
+80105b26:	54                   	push   %esp
+  call trap
+80105b27:	e8 c4 00 00 00       	call   80105bf0 <trap>
+  addl $4, %esp
+80105b2c:	83 c4 04             	add    $0x4,%esp
+
+80105b2f <trapret>:
+
+  # Return falls through to trapret...
+.globl trapret
+trapret:
+  popal
+80105b2f:	61                   	popa   
+  popl %gs
+80105b30:	0f a9                	pop    %gs
+  popl %fs
+80105b32:	0f a1                	pop    %fs
+  popl %es
+80105b34:	07                   	pop    %es
+  popl %ds
+80105b35:	1f                   	pop    %ds
+  addl $0x8, %esp  # trapno and errcode
+80105b36:	83 c4 08             	add    $0x8,%esp
+  iret
+80105b39:	cf                   	iret   
+80105b3a:	66 90                	xchg   %ax,%ax
+80105b3c:	66 90                	xchg   %ax,%ax
+80105b3e:	66 90                	xchg   %ax,%ax
+
+80105b40 <tvinit>:
+struct spinlock tickslock;
+uint ticks;
+
+void
+tvinit(void)
+{
+80105b40:	55                   	push   %ebp
+  int i;
+
+  for(i = 0; i < 256; i++)
+80105b41:	31 c0                	xor    %eax,%eax
+{
+80105b43:	89 e5                	mov    %esp,%ebp
+80105b45:	83 ec 08             	sub    $0x8,%esp
+80105b48:	90                   	nop
+80105b49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
+80105b50:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
+80105b57:	c7 04 c5 c2 4e 11 80 	movl   $0x8e000008,-0x7feeb13e(,%eax,8)
+80105b5e:	08 00 00 8e 
+80105b62:	66 89 14 c5 c0 4e 11 	mov    %dx,-0x7feeb140(,%eax,8)
+80105b69:	80 
+80105b6a:	c1 ea 10             	shr    $0x10,%edx
+80105b6d:	66 89 14 c5 c6 4e 11 	mov    %dx,-0x7feeb13a(,%eax,8)
+80105b74:	80 
+  for(i = 0; i < 256; i++)
+80105b75:	83 c0 01             	add    $0x1,%eax
+80105b78:	3d 00 01 00 00       	cmp    $0x100,%eax
+80105b7d:	75 d1                	jne    80105b50 <tvinit+0x10>
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+80105b7f:	a1 08 a1 10 80       	mov    0x8010a108,%eax
+
+  initlock(&tickslock, "time");
+80105b84:	83 ec 08             	sub    $0x8,%esp
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+80105b87:	c7 05 c2 50 11 80 08 	movl   $0xef000008,0x801150c2
+80105b8e:	00 00 ef 
+  initlock(&tickslock, "time");
+80105b91:	68 89 7b 10 80       	push   $0x80107b89
+80105b96:	68 80 4e 11 80       	push   $0x80114e80
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+80105b9b:	66 a3 c0 50 11 80    	mov    %ax,0x801150c0
+80105ba1:	c1 e8 10             	shr    $0x10,%eax
+80105ba4:	66 a3 c6 50 11 80    	mov    %ax,0x801150c6
+  initlock(&tickslock, "time");
+80105baa:	e8 c1 e9 ff ff       	call   80104570 <initlock>
+}
+80105baf:	83 c4 10             	add    $0x10,%esp
+80105bb2:	c9                   	leave  
+80105bb3:	c3                   	ret    
+80105bb4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105bba:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80105bc0 <idtinit>:
+
+void
+idtinit(void)
+{
+80105bc0:	55                   	push   %ebp
+  pd[0] = size-1;
+80105bc1:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+80105bc6:	89 e5                	mov    %esp,%ebp
+80105bc8:	83 ec 10             	sub    $0x10,%esp
+80105bcb:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+  pd[1] = (uint)p;
+80105bcf:	b8 c0 4e 11 80       	mov    $0x80114ec0,%eax
+80105bd4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+  pd[2] = (uint)p >> 16;
+80105bd8:	c1 e8 10             	shr    $0x10,%eax
+80105bdb:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+  asm volatile("lidt (%0)" : : "r" (pd));
+80105bdf:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80105be2:	0f 01 18             	lidtl  (%eax)
+  lidt(idt, sizeof(idt));
+}
+80105be5:	c9                   	leave  
+80105be6:	c3                   	ret    
+80105be7:	89 f6                	mov    %esi,%esi
+80105be9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105bf0 <trap>:
+
+//PAGEBREAK: 41
+void
+trap(struct trapframe *tf)
+{
+80105bf0:	55                   	push   %ebp
+80105bf1:	89 e5                	mov    %esp,%ebp
+80105bf3:	57                   	push   %edi
+80105bf4:	56                   	push   %esi
+80105bf5:	53                   	push   %ebx
+80105bf6:	83 ec 1c             	sub    $0x1c,%esp
+80105bf9:	8b 7d 08             	mov    0x8(%ebp),%edi
+  if(tf->trapno == T_SYSCALL){
+80105bfc:	8b 47 30             	mov    0x30(%edi),%eax
+80105bff:	83 f8 40             	cmp    $0x40,%eax
+80105c02:	0f 84 f0 00 00 00    	je     80105cf8 <trap+0x108>
+    if(myproc()->killed)
+      exit();
+    return;
+  }
+
+  switch(tf->trapno){
+80105c08:	83 e8 20             	sub    $0x20,%eax
+80105c0b:	83 f8 1f             	cmp    $0x1f,%eax
+80105c0e:	77 10                	ja     80105c20 <trap+0x30>
+80105c10:	ff 24 85 30 7c 10 80 	jmp    *-0x7fef83d0(,%eax,4)
+80105c17:	89 f6                	mov    %esi,%esi
+80105c19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    lapiceoi();
+    break;
+
+  //PAGEBREAK: 13
+  default:
+    if(myproc() == 0 || (tf->cs&3) == 0){
+80105c20:	e8 cb de ff ff       	call   80103af0 <myproc>
+80105c25:	85 c0                	test   %eax,%eax
+80105c27:	8b 5f 38             	mov    0x38(%edi),%ebx
+80105c2a:	0f 84 14 02 00 00    	je     80105e44 <trap+0x254>
+80105c30:	f6 47 3c 03          	testb  $0x3,0x3c(%edi)
+80105c34:	0f 84 0a 02 00 00    	je     80105e44 <trap+0x254>
+
+static inline uint
+rcr2(void)
+{
+  uint val;
+  asm volatile("movl %%cr2,%0" : "=r" (val));
+80105c3a:	0f 20 d1             	mov    %cr2,%ecx
+80105c3d:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+              tf->trapno, cpuid(), tf->eip, rcr2());
+      panic("trap");
+    }
+    // In user space, assume process misbehaved.
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80105c40:	e8 8b de ff ff       	call   80103ad0 <cpuid>
+80105c45:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80105c48:	8b 47 34             	mov    0x34(%edi),%eax
+80105c4b:	8b 77 30             	mov    0x30(%edi),%esi
+80105c4e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            "eip 0x%x addr 0x%x--kill proc\n",
+            myproc()->pid, myproc()->name, tf->trapno,
+80105c51:	e8 9a de ff ff       	call   80103af0 <myproc>
+80105c56:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80105c59:	e8 92 de ff ff       	call   80103af0 <myproc>
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80105c5e:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+80105c61:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80105c64:	51                   	push   %ecx
+80105c65:	53                   	push   %ebx
+80105c66:	52                   	push   %edx
+            myproc()->pid, myproc()->name, tf->trapno,
+80105c67:	8b 55 e0             	mov    -0x20(%ebp),%edx
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80105c6a:	ff 75 e4             	pushl  -0x1c(%ebp)
+80105c6d:	56                   	push   %esi
+            myproc()->pid, myproc()->name, tf->trapno,
+80105c6e:	83 c2 6c             	add    $0x6c,%edx
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80105c71:	52                   	push   %edx
+80105c72:	ff 70 10             	pushl  0x10(%eax)
+80105c75:	68 ec 7b 10 80       	push   $0x80107bec
+80105c7a:	e8 e1 a9 ff ff       	call   80100660 <cprintf>
+            tf->err, cpuid(), tf->eip, rcr2());
+    myproc()->killed = 1;
+80105c7f:	83 c4 20             	add    $0x20,%esp
+80105c82:	e8 69 de ff ff       	call   80103af0 <myproc>
+80105c87:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+  }
+
+  // Force process exit if it has been killed and is in user space.
+  // (If it is still executing in the kernel, let it keep running
+  // until it gets to the regular system call return.)
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105c8e:	e8 5d de ff ff       	call   80103af0 <myproc>
+80105c93:	85 c0                	test   %eax,%eax
+80105c95:	74 1d                	je     80105cb4 <trap+0xc4>
+80105c97:	e8 54 de ff ff       	call   80103af0 <myproc>
+80105c9c:	8b 50 24             	mov    0x24(%eax),%edx
+80105c9f:	85 d2                	test   %edx,%edx
+80105ca1:	74 11                	je     80105cb4 <trap+0xc4>
+80105ca3:	0f b7 47 3c          	movzwl 0x3c(%edi),%eax
+80105ca7:	83 e0 03             	and    $0x3,%eax
+80105caa:	66 83 f8 03          	cmp    $0x3,%ax
+80105cae:	0f 84 4c 01 00 00    	je     80105e00 <trap+0x210>
+    exit();
+
+  // Force process to give up CPU on clock tick.
+  // If interrupts were on while locks held, would need to check nlock.
+  if(myproc() && myproc()->state == RUNNING &&
+80105cb4:	e8 37 de ff ff       	call   80103af0 <myproc>
+80105cb9:	85 c0                	test   %eax,%eax
+80105cbb:	74 0b                	je     80105cc8 <trap+0xd8>
+80105cbd:	e8 2e de ff ff       	call   80103af0 <myproc>
+80105cc2:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+80105cc6:	74 68                	je     80105d30 <trap+0x140>
+     tf->trapno == T_IRQ0+IRQ_TIMER)
+    yield();
+
+  // Check if the process has been killed since we yielded
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105cc8:	e8 23 de ff ff       	call   80103af0 <myproc>
+80105ccd:	85 c0                	test   %eax,%eax
+80105ccf:	74 19                	je     80105cea <trap+0xfa>
+80105cd1:	e8 1a de ff ff       	call   80103af0 <myproc>
+80105cd6:	8b 40 24             	mov    0x24(%eax),%eax
+80105cd9:	85 c0                	test   %eax,%eax
+80105cdb:	74 0d                	je     80105cea <trap+0xfa>
+80105cdd:	0f b7 47 3c          	movzwl 0x3c(%edi),%eax
+80105ce1:	83 e0 03             	and    $0x3,%eax
+80105ce4:	66 83 f8 03          	cmp    $0x3,%ax
+80105ce8:	74 37                	je     80105d21 <trap+0x131>
+    exit();
+}
+80105cea:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105ced:	5b                   	pop    %ebx
+80105cee:	5e                   	pop    %esi
+80105cef:	5f                   	pop    %edi
+80105cf0:	5d                   	pop    %ebp
+80105cf1:	c3                   	ret    
+80105cf2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(myproc()->killed)
+80105cf8:	e8 f3 dd ff ff       	call   80103af0 <myproc>
+80105cfd:	8b 58 24             	mov    0x24(%eax),%ebx
+80105d00:	85 db                	test   %ebx,%ebx
+80105d02:	0f 85 e8 00 00 00    	jne    80105df0 <trap+0x200>
+    myproc()->tf = tf;
+80105d08:	e8 e3 dd ff ff       	call   80103af0 <myproc>
+80105d0d:	89 78 18             	mov    %edi,0x18(%eax)
+    syscall();
+80105d10:	e8 9b ee ff ff       	call   80104bb0 <syscall>
+    if(myproc()->killed)
+80105d15:	e8 d6 dd ff ff       	call   80103af0 <myproc>
+80105d1a:	8b 48 24             	mov    0x24(%eax),%ecx
+80105d1d:	85 c9                	test   %ecx,%ecx
+80105d1f:	74 c9                	je     80105cea <trap+0xfa>
+}
+80105d21:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105d24:	5b                   	pop    %ebx
+80105d25:	5e                   	pop    %esi
+80105d26:	5f                   	pop    %edi
+80105d27:	5d                   	pop    %ebp
+      exit();
+80105d28:	e9 23 e2 ff ff       	jmp    80103f50 <exit>
+80105d2d:	8d 76 00             	lea    0x0(%esi),%esi
+  if(myproc() && myproc()->state == RUNNING &&
+80105d30:	83 7f 30 20          	cmpl   $0x20,0x30(%edi)
+80105d34:	75 92                	jne    80105cc8 <trap+0xd8>
+    yield();
+80105d36:	e8 45 e3 ff ff       	call   80104080 <yield>
+80105d3b:	eb 8b                	jmp    80105cc8 <trap+0xd8>
+80105d3d:	8d 76 00             	lea    0x0(%esi),%esi
+    if(cpuid() == 0){
+80105d40:	e8 8b dd ff ff       	call   80103ad0 <cpuid>
+80105d45:	85 c0                	test   %eax,%eax
+80105d47:	0f 84 c3 00 00 00    	je     80105e10 <trap+0x220>
+    lapiceoi();
+80105d4d:	e8 0e cd ff ff       	call   80102a60 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105d52:	e8 99 dd ff ff       	call   80103af0 <myproc>
+80105d57:	85 c0                	test   %eax,%eax
+80105d59:	0f 85 38 ff ff ff    	jne    80105c97 <trap+0xa7>
+80105d5f:	e9 50 ff ff ff       	jmp    80105cb4 <trap+0xc4>
+80105d64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    kbdintr();
+80105d68:	e8 b3 cb ff ff       	call   80102920 <kbdintr>
+    lapiceoi();
+80105d6d:	e8 ee cc ff ff       	call   80102a60 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105d72:	e8 79 dd ff ff       	call   80103af0 <myproc>
+80105d77:	85 c0                	test   %eax,%eax
+80105d79:	0f 85 18 ff ff ff    	jne    80105c97 <trap+0xa7>
+80105d7f:	e9 30 ff ff ff       	jmp    80105cb4 <trap+0xc4>
+80105d84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    uartintr();
+80105d88:	e8 53 02 00 00       	call   80105fe0 <uartintr>
+    lapiceoi();
+80105d8d:	e8 ce cc ff ff       	call   80102a60 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105d92:	e8 59 dd ff ff       	call   80103af0 <myproc>
+80105d97:	85 c0                	test   %eax,%eax
+80105d99:	0f 85 f8 fe ff ff    	jne    80105c97 <trap+0xa7>
+80105d9f:	e9 10 ff ff ff       	jmp    80105cb4 <trap+0xc4>
+80105da4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    cprintf("cpu%d: spurious interrupt at %x:%x\n",
+80105da8:	0f b7 5f 3c          	movzwl 0x3c(%edi),%ebx
+80105dac:	8b 77 38             	mov    0x38(%edi),%esi
+80105daf:	e8 1c dd ff ff       	call   80103ad0 <cpuid>
+80105db4:	56                   	push   %esi
+80105db5:	53                   	push   %ebx
+80105db6:	50                   	push   %eax
+80105db7:	68 94 7b 10 80       	push   $0x80107b94
+80105dbc:	e8 9f a8 ff ff       	call   80100660 <cprintf>
+    lapiceoi();
+80105dc1:	e8 9a cc ff ff       	call   80102a60 <lapiceoi>
+    break;
+80105dc6:	83 c4 10             	add    $0x10,%esp
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105dc9:	e8 22 dd ff ff       	call   80103af0 <myproc>
+80105dce:	85 c0                	test   %eax,%eax
+80105dd0:	0f 85 c1 fe ff ff    	jne    80105c97 <trap+0xa7>
+80105dd6:	e9 d9 fe ff ff       	jmp    80105cb4 <trap+0xc4>
+80105ddb:	90                   	nop
+80105ddc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    ideintr();
+80105de0:	e8 ab c2 ff ff       	call   80102090 <ideintr>
+80105de5:	e9 63 ff ff ff       	jmp    80105d4d <trap+0x15d>
+80105dea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      exit();
+80105df0:	e8 5b e1 ff ff       	call   80103f50 <exit>
+80105df5:	e9 0e ff ff ff       	jmp    80105d08 <trap+0x118>
+80105dfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    exit();
+80105e00:	e8 4b e1 ff ff       	call   80103f50 <exit>
+80105e05:	e9 aa fe ff ff       	jmp    80105cb4 <trap+0xc4>
+80105e0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      acquire(&tickslock);
+80105e10:	83 ec 0c             	sub    $0xc,%esp
+80105e13:	68 80 4e 11 80       	push   $0x80114e80
+80105e18:	e8 93 e8 ff ff       	call   801046b0 <acquire>
+      wakeup(&ticks);
+80105e1d:	c7 04 24 c0 56 11 80 	movl   $0x801156c0,(%esp)
+      ticks++;
+80105e24:	83 05 c0 56 11 80 01 	addl   $0x1,0x801156c0
+      wakeup(&ticks);
+80105e2b:	e8 60 e4 ff ff       	call   80104290 <wakeup>
+      release(&tickslock);
+80105e30:	c7 04 24 80 4e 11 80 	movl   $0x80114e80,(%esp)
+80105e37:	e8 34 e9 ff ff       	call   80104770 <release>
+80105e3c:	83 c4 10             	add    $0x10,%esp
+80105e3f:	e9 09 ff ff ff       	jmp    80105d4d <trap+0x15d>
+80105e44:	0f 20 d6             	mov    %cr2,%esi
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+80105e47:	e8 84 dc ff ff       	call   80103ad0 <cpuid>
+80105e4c:	83 ec 0c             	sub    $0xc,%esp
+80105e4f:	56                   	push   %esi
+80105e50:	53                   	push   %ebx
+80105e51:	50                   	push   %eax
+80105e52:	ff 77 30             	pushl  0x30(%edi)
+80105e55:	68 b8 7b 10 80       	push   $0x80107bb8
+80105e5a:	e8 01 a8 ff ff       	call   80100660 <cprintf>
+      panic("trap");
+80105e5f:	83 c4 14             	add    $0x14,%esp
+80105e62:	68 8e 7b 10 80       	push   $0x80107b8e
+80105e67:	e8 24 a5 ff ff       	call   80100390 <panic>
+80105e6c:	66 90                	xchg   %ax,%ax
+80105e6e:	66 90                	xchg   %ax,%ax
+
+80105e70 <uartgetc>:
+}
+
+static int
+uartgetc(void)
+{
+  if(!uart)
+80105e70:	a1 c8 a5 10 80       	mov    0x8010a5c8,%eax
+{
+80105e75:	55                   	push   %ebp
+80105e76:	89 e5                	mov    %esp,%ebp
+  if(!uart)
+80105e78:	85 c0                	test   %eax,%eax
+80105e7a:	74 1c                	je     80105e98 <uartgetc+0x28>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80105e7c:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105e81:	ec                   	in     (%dx),%al
+    return -1;
+  if(!(inb(COM1+5) & 0x01))
+80105e82:	a8 01                	test   $0x1,%al
+80105e84:	74 12                	je     80105e98 <uartgetc+0x28>
+80105e86:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105e8b:	ec                   	in     (%dx),%al
+    return -1;
+  return inb(COM1+0);
+80105e8c:	0f b6 c0             	movzbl %al,%eax
+}
+80105e8f:	5d                   	pop    %ebp
+80105e90:	c3                   	ret    
+80105e91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80105e98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105e9d:	5d                   	pop    %ebp
+80105e9e:	c3                   	ret    
+80105e9f:	90                   	nop
+
+80105ea0 <uartputc.part.0>:
+uartputc(int c)
+80105ea0:	55                   	push   %ebp
+80105ea1:	89 e5                	mov    %esp,%ebp
+80105ea3:	57                   	push   %edi
+80105ea4:	56                   	push   %esi
+80105ea5:	53                   	push   %ebx
+80105ea6:	89 c7                	mov    %eax,%edi
+80105ea8:	bb 80 00 00 00       	mov    $0x80,%ebx
+80105ead:	be fd 03 00 00       	mov    $0x3fd,%esi
+80105eb2:	83 ec 0c             	sub    $0xc,%esp
+80105eb5:	eb 1b                	jmp    80105ed2 <uartputc.part.0+0x32>
+80105eb7:	89 f6                	mov    %esi,%esi
+80105eb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    microdelay(10);
+80105ec0:	83 ec 0c             	sub    $0xc,%esp
+80105ec3:	6a 0a                	push   $0xa
+80105ec5:	e8 b6 cb ff ff       	call   80102a80 <microdelay>
+  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+80105eca:	83 c4 10             	add    $0x10,%esp
+80105ecd:	83 eb 01             	sub    $0x1,%ebx
+80105ed0:	74 07                	je     80105ed9 <uartputc.part.0+0x39>
+80105ed2:	89 f2                	mov    %esi,%edx
+80105ed4:	ec                   	in     (%dx),%al
+80105ed5:	a8 20                	test   $0x20,%al
+80105ed7:	74 e7                	je     80105ec0 <uartputc.part.0+0x20>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80105ed9:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105ede:	89 f8                	mov    %edi,%eax
+80105ee0:	ee                   	out    %al,(%dx)
+}
+80105ee1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105ee4:	5b                   	pop    %ebx
+80105ee5:	5e                   	pop    %esi
+80105ee6:	5f                   	pop    %edi
+80105ee7:	5d                   	pop    %ebp
+80105ee8:	c3                   	ret    
+80105ee9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105ef0 <uartinit>:
+{
+80105ef0:	55                   	push   %ebp
+80105ef1:	31 c9                	xor    %ecx,%ecx
+80105ef3:	89 c8                	mov    %ecx,%eax
+80105ef5:	89 e5                	mov    %esp,%ebp
+80105ef7:	57                   	push   %edi
+80105ef8:	56                   	push   %esi
+80105ef9:	53                   	push   %ebx
+80105efa:	bb fa 03 00 00       	mov    $0x3fa,%ebx
+80105eff:	89 da                	mov    %ebx,%edx
+80105f01:	83 ec 0c             	sub    $0xc,%esp
+80105f04:	ee                   	out    %al,(%dx)
+80105f05:	bf fb 03 00 00       	mov    $0x3fb,%edi
+80105f0a:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+80105f0f:	89 fa                	mov    %edi,%edx
+80105f11:	ee                   	out    %al,(%dx)
+80105f12:	b8 0c 00 00 00       	mov    $0xc,%eax
+80105f17:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105f1c:	ee                   	out    %al,(%dx)
+80105f1d:	be f9 03 00 00       	mov    $0x3f9,%esi
+80105f22:	89 c8                	mov    %ecx,%eax
+80105f24:	89 f2                	mov    %esi,%edx
+80105f26:	ee                   	out    %al,(%dx)
+80105f27:	b8 03 00 00 00       	mov    $0x3,%eax
+80105f2c:	89 fa                	mov    %edi,%edx
+80105f2e:	ee                   	out    %al,(%dx)
+80105f2f:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80105f34:	89 c8                	mov    %ecx,%eax
+80105f36:	ee                   	out    %al,(%dx)
+80105f37:	b8 01 00 00 00       	mov    $0x1,%eax
+80105f3c:	89 f2                	mov    %esi,%edx
+80105f3e:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80105f3f:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105f44:	ec                   	in     (%dx),%al
+  if(inb(COM1+5) == 0xFF)
+80105f45:	3c ff                	cmp    $0xff,%al
+80105f47:	74 5a                	je     80105fa3 <uartinit+0xb3>
+  uart = 1;
+80105f49:	c7 05 c8 a5 10 80 01 	movl   $0x1,0x8010a5c8
+80105f50:	00 00 00 
+80105f53:	89 da                	mov    %ebx,%edx
+80105f55:	ec                   	in     (%dx),%al
+80105f56:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105f5b:	ec                   	in     (%dx),%al
+  ioapicenable(IRQ_COM1, 0);
+80105f5c:	83 ec 08             	sub    $0x8,%esp
+  for(p="xv6...\n"; *p; p++)
+80105f5f:	bb b0 7c 10 80       	mov    $0x80107cb0,%ebx
+  ioapicenable(IRQ_COM1, 0);
+80105f64:	6a 00                	push   $0x0
+80105f66:	6a 04                	push   $0x4
+80105f68:	e8 73 c3 ff ff       	call   801022e0 <ioapicenable>
+80105f6d:	83 c4 10             	add    $0x10,%esp
+  for(p="xv6...\n"; *p; p++)
+80105f70:	b8 78 00 00 00       	mov    $0x78,%eax
+80105f75:	eb 13                	jmp    80105f8a <uartinit+0x9a>
+80105f77:	89 f6                	mov    %esi,%esi
+80105f79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105f80:	83 c3 01             	add    $0x1,%ebx
+80105f83:	0f be 03             	movsbl (%ebx),%eax
+80105f86:	84 c0                	test   %al,%al
+80105f88:	74 19                	je     80105fa3 <uartinit+0xb3>
+  if(!uart)
+80105f8a:	8b 15 c8 a5 10 80    	mov    0x8010a5c8,%edx
+80105f90:	85 d2                	test   %edx,%edx
+80105f92:	74 ec                	je     80105f80 <uartinit+0x90>
+  for(p="xv6...\n"; *p; p++)
+80105f94:	83 c3 01             	add    $0x1,%ebx
+80105f97:	e8 04 ff ff ff       	call   80105ea0 <uartputc.part.0>
+80105f9c:	0f be 03             	movsbl (%ebx),%eax
+80105f9f:	84 c0                	test   %al,%al
+80105fa1:	75 e7                	jne    80105f8a <uartinit+0x9a>
+}
+80105fa3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105fa6:	5b                   	pop    %ebx
+80105fa7:	5e                   	pop    %esi
+80105fa8:	5f                   	pop    %edi
+80105fa9:	5d                   	pop    %ebp
+80105faa:	c3                   	ret    
+80105fab:	90                   	nop
+80105fac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105fb0 <uartputc>:
+  if(!uart)
+80105fb0:	8b 15 c8 a5 10 80    	mov    0x8010a5c8,%edx
+{
+80105fb6:	55                   	push   %ebp
+80105fb7:	89 e5                	mov    %esp,%ebp
+  if(!uart)
+80105fb9:	85 d2                	test   %edx,%edx
+{
+80105fbb:	8b 45 08             	mov    0x8(%ebp),%eax
+  if(!uart)
+80105fbe:	74 10                	je     80105fd0 <uartputc+0x20>
+}
+80105fc0:	5d                   	pop    %ebp
+80105fc1:	e9 da fe ff ff       	jmp    80105ea0 <uartputc.part.0>
+80105fc6:	8d 76 00             	lea    0x0(%esi),%esi
+80105fc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105fd0:	5d                   	pop    %ebp
+80105fd1:	c3                   	ret    
+80105fd2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105fd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105fe0 <uartintr>:
+
+void
+uartintr(void)
+{
+80105fe0:	55                   	push   %ebp
+80105fe1:	89 e5                	mov    %esp,%ebp
+80105fe3:	83 ec 14             	sub    $0x14,%esp
+  consoleintr(uartgetc);
+80105fe6:	68 70 5e 10 80       	push   $0x80105e70
+80105feb:	e8 20 a8 ff ff       	call   80100810 <consoleintr>
+}
+80105ff0:	83 c4 10             	add    $0x10,%esp
+80105ff3:	c9                   	leave  
+80105ff4:	c3                   	ret    
+
+80105ff5 <vector0>:
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+80105ff5:	6a 00                	push   $0x0
+  pushl $0
+80105ff7:	6a 00                	push   $0x0
+  jmp alltraps
+80105ff9:	e9 19 fb ff ff       	jmp    80105b17 <alltraps>
+
+80105ffe <vector1>:
+.globl vector1
+vector1:
+  pushl $0
+80105ffe:	6a 00                	push   $0x0
+  pushl $1
+80106000:	6a 01                	push   $0x1
+  jmp alltraps
+80106002:	e9 10 fb ff ff       	jmp    80105b17 <alltraps>
+
+80106007 <vector2>:
+.globl vector2
+vector2:
+  pushl $0
+80106007:	6a 00                	push   $0x0
+  pushl $2
+80106009:	6a 02                	push   $0x2
+  jmp alltraps
+8010600b:	e9 07 fb ff ff       	jmp    80105b17 <alltraps>
+
+80106010 <vector3>:
+.globl vector3
+vector3:
+  pushl $0
+80106010:	6a 00                	push   $0x0
+  pushl $3
+80106012:	6a 03                	push   $0x3
+  jmp alltraps
+80106014:	e9 fe fa ff ff       	jmp    80105b17 <alltraps>
+
+80106019 <vector4>:
+.globl vector4
+vector4:
+  pushl $0
+80106019:	6a 00                	push   $0x0
+  pushl $4
+8010601b:	6a 04                	push   $0x4
+  jmp alltraps
+8010601d:	e9 f5 fa ff ff       	jmp    80105b17 <alltraps>
+
+80106022 <vector5>:
+.globl vector5
+vector5:
+  pushl $0
+80106022:	6a 00                	push   $0x0
+  pushl $5
+80106024:	6a 05                	push   $0x5
+  jmp alltraps
+80106026:	e9 ec fa ff ff       	jmp    80105b17 <alltraps>
+
+8010602b <vector6>:
+.globl vector6
+vector6:
+  pushl $0
+8010602b:	6a 00                	push   $0x0
+  pushl $6
+8010602d:	6a 06                	push   $0x6
+  jmp alltraps
+8010602f:	e9 e3 fa ff ff       	jmp    80105b17 <alltraps>
+
+80106034 <vector7>:
+.globl vector7
+vector7:
+  pushl $0
+80106034:	6a 00                	push   $0x0
+  pushl $7
+80106036:	6a 07                	push   $0x7
+  jmp alltraps
+80106038:	e9 da fa ff ff       	jmp    80105b17 <alltraps>
+
+8010603d <vector8>:
+.globl vector8
+vector8:
+  pushl $8
+8010603d:	6a 08                	push   $0x8
+  jmp alltraps
+8010603f:	e9 d3 fa ff ff       	jmp    80105b17 <alltraps>
+
+80106044 <vector9>:
+.globl vector9
+vector9:
+  pushl $0
+80106044:	6a 00                	push   $0x0
+  pushl $9
+80106046:	6a 09                	push   $0x9
+  jmp alltraps
+80106048:	e9 ca fa ff ff       	jmp    80105b17 <alltraps>
+
+8010604d <vector10>:
+.globl vector10
+vector10:
+  pushl $10
+8010604d:	6a 0a                	push   $0xa
+  jmp alltraps
+8010604f:	e9 c3 fa ff ff       	jmp    80105b17 <alltraps>
+
+80106054 <vector11>:
+.globl vector11
+vector11:
+  pushl $11
+80106054:	6a 0b                	push   $0xb
+  jmp alltraps
+80106056:	e9 bc fa ff ff       	jmp    80105b17 <alltraps>
+
+8010605b <vector12>:
+.globl vector12
+vector12:
+  pushl $12
+8010605b:	6a 0c                	push   $0xc
+  jmp alltraps
+8010605d:	e9 b5 fa ff ff       	jmp    80105b17 <alltraps>
+
+80106062 <vector13>:
+.globl vector13
+vector13:
+  pushl $13
+80106062:	6a 0d                	push   $0xd
+  jmp alltraps
+80106064:	e9 ae fa ff ff       	jmp    80105b17 <alltraps>
+
+80106069 <vector14>:
+.globl vector14
+vector14:
+  pushl $14
+80106069:	6a 0e                	push   $0xe
+  jmp alltraps
+8010606b:	e9 a7 fa ff ff       	jmp    80105b17 <alltraps>
+
+80106070 <vector15>:
+.globl vector15
+vector15:
+  pushl $0
+80106070:	6a 00                	push   $0x0
+  pushl $15
+80106072:	6a 0f                	push   $0xf
+  jmp alltraps
+80106074:	e9 9e fa ff ff       	jmp    80105b17 <alltraps>
+
+80106079 <vector16>:
+.globl vector16
+vector16:
+  pushl $0
+80106079:	6a 00                	push   $0x0
+  pushl $16
+8010607b:	6a 10                	push   $0x10
+  jmp alltraps
+8010607d:	e9 95 fa ff ff       	jmp    80105b17 <alltraps>
+
+80106082 <vector17>:
+.globl vector17
+vector17:
+  pushl $17
+80106082:	6a 11                	push   $0x11
+  jmp alltraps
+80106084:	e9 8e fa ff ff       	jmp    80105b17 <alltraps>
+
+80106089 <vector18>:
+.globl vector18
+vector18:
+  pushl $0
+80106089:	6a 00                	push   $0x0
+  pushl $18
+8010608b:	6a 12                	push   $0x12
+  jmp alltraps
+8010608d:	e9 85 fa ff ff       	jmp    80105b17 <alltraps>
+
+80106092 <vector19>:
+.globl vector19
+vector19:
+  pushl $0
+80106092:	6a 00                	push   $0x0
+  pushl $19
+80106094:	6a 13                	push   $0x13
+  jmp alltraps
+80106096:	e9 7c fa ff ff       	jmp    80105b17 <alltraps>
+
+8010609b <vector20>:
+.globl vector20
+vector20:
+  pushl $0
+8010609b:	6a 00                	push   $0x0
+  pushl $20
+8010609d:	6a 14                	push   $0x14
+  jmp alltraps
+8010609f:	e9 73 fa ff ff       	jmp    80105b17 <alltraps>
+
+801060a4 <vector21>:
+.globl vector21
+vector21:
+  pushl $0
+801060a4:	6a 00                	push   $0x0
+  pushl $21
+801060a6:	6a 15                	push   $0x15
+  jmp alltraps
+801060a8:	e9 6a fa ff ff       	jmp    80105b17 <alltraps>
+
+801060ad <vector22>:
+.globl vector22
+vector22:
+  pushl $0
+801060ad:	6a 00                	push   $0x0
+  pushl $22
+801060af:	6a 16                	push   $0x16
+  jmp alltraps
+801060b1:	e9 61 fa ff ff       	jmp    80105b17 <alltraps>
+
+801060b6 <vector23>:
+.globl vector23
+vector23:
+  pushl $0
+801060b6:	6a 00                	push   $0x0
+  pushl $23
+801060b8:	6a 17                	push   $0x17
+  jmp alltraps
+801060ba:	e9 58 fa ff ff       	jmp    80105b17 <alltraps>
+
+801060bf <vector24>:
+.globl vector24
+vector24:
+  pushl $0
+801060bf:	6a 00                	push   $0x0
+  pushl $24
+801060c1:	6a 18                	push   $0x18
+  jmp alltraps
+801060c3:	e9 4f fa ff ff       	jmp    80105b17 <alltraps>
+
+801060c8 <vector25>:
+.globl vector25
+vector25:
+  pushl $0
+801060c8:	6a 00                	push   $0x0
+  pushl $25
+801060ca:	6a 19                	push   $0x19
+  jmp alltraps
+801060cc:	e9 46 fa ff ff       	jmp    80105b17 <alltraps>
+
+801060d1 <vector26>:
+.globl vector26
+vector26:
+  pushl $0
+801060d1:	6a 00                	push   $0x0
+  pushl $26
+801060d3:	6a 1a                	push   $0x1a
+  jmp alltraps
+801060d5:	e9 3d fa ff ff       	jmp    80105b17 <alltraps>
+
+801060da <vector27>:
+.globl vector27
+vector27:
+  pushl $0
+801060da:	6a 00                	push   $0x0
+  pushl $27
+801060dc:	6a 1b                	push   $0x1b
+  jmp alltraps
+801060de:	e9 34 fa ff ff       	jmp    80105b17 <alltraps>
+
+801060e3 <vector28>:
+.globl vector28
+vector28:
+  pushl $0
+801060e3:	6a 00                	push   $0x0
+  pushl $28
+801060e5:	6a 1c                	push   $0x1c
+  jmp alltraps
+801060e7:	e9 2b fa ff ff       	jmp    80105b17 <alltraps>
+
+801060ec <vector29>:
+.globl vector29
+vector29:
+  pushl $0
+801060ec:	6a 00                	push   $0x0
+  pushl $29
+801060ee:	6a 1d                	push   $0x1d
+  jmp alltraps
+801060f0:	e9 22 fa ff ff       	jmp    80105b17 <alltraps>
+
+801060f5 <vector30>:
+.globl vector30
+vector30:
+  pushl $0
+801060f5:	6a 00                	push   $0x0
+  pushl $30
+801060f7:	6a 1e                	push   $0x1e
+  jmp alltraps
+801060f9:	e9 19 fa ff ff       	jmp    80105b17 <alltraps>
+
+801060fe <vector31>:
+.globl vector31
+vector31:
+  pushl $0
+801060fe:	6a 00                	push   $0x0
+  pushl $31
+80106100:	6a 1f                	push   $0x1f
+  jmp alltraps
+80106102:	e9 10 fa ff ff       	jmp    80105b17 <alltraps>
+
+80106107 <vector32>:
+.globl vector32
+vector32:
+  pushl $0
+80106107:	6a 00                	push   $0x0
+  pushl $32
+80106109:	6a 20                	push   $0x20
+  jmp alltraps
+8010610b:	e9 07 fa ff ff       	jmp    80105b17 <alltraps>
+
+80106110 <vector33>:
+.globl vector33
+vector33:
+  pushl $0
+80106110:	6a 00                	push   $0x0
+  pushl $33
+80106112:	6a 21                	push   $0x21
+  jmp alltraps
+80106114:	e9 fe f9 ff ff       	jmp    80105b17 <alltraps>
+
+80106119 <vector34>:
+.globl vector34
+vector34:
+  pushl $0
+80106119:	6a 00                	push   $0x0
+  pushl $34
+8010611b:	6a 22                	push   $0x22
+  jmp alltraps
+8010611d:	e9 f5 f9 ff ff       	jmp    80105b17 <alltraps>
+
+80106122 <vector35>:
+.globl vector35
+vector35:
+  pushl $0
+80106122:	6a 00                	push   $0x0
+  pushl $35
+80106124:	6a 23                	push   $0x23
+  jmp alltraps
+80106126:	e9 ec f9 ff ff       	jmp    80105b17 <alltraps>
+
+8010612b <vector36>:
+.globl vector36
+vector36:
+  pushl $0
+8010612b:	6a 00                	push   $0x0
+  pushl $36
+8010612d:	6a 24                	push   $0x24
+  jmp alltraps
+8010612f:	e9 e3 f9 ff ff       	jmp    80105b17 <alltraps>
+
+80106134 <vector37>:
+.globl vector37
+vector37:
+  pushl $0
+80106134:	6a 00                	push   $0x0
+  pushl $37
+80106136:	6a 25                	push   $0x25
+  jmp alltraps
+80106138:	e9 da f9 ff ff       	jmp    80105b17 <alltraps>
+
+8010613d <vector38>:
+.globl vector38
+vector38:
+  pushl $0
+8010613d:	6a 00                	push   $0x0
+  pushl $38
+8010613f:	6a 26                	push   $0x26
+  jmp alltraps
+80106141:	e9 d1 f9 ff ff       	jmp    80105b17 <alltraps>
+
+80106146 <vector39>:
+.globl vector39
+vector39:
+  pushl $0
+80106146:	6a 00                	push   $0x0
+  pushl $39
+80106148:	6a 27                	push   $0x27
+  jmp alltraps
+8010614a:	e9 c8 f9 ff ff       	jmp    80105b17 <alltraps>
+
+8010614f <vector40>:
+.globl vector40
+vector40:
+  pushl $0
+8010614f:	6a 00                	push   $0x0
+  pushl $40
+80106151:	6a 28                	push   $0x28
+  jmp alltraps
+80106153:	e9 bf f9 ff ff       	jmp    80105b17 <alltraps>
+
+80106158 <vector41>:
+.globl vector41
+vector41:
+  pushl $0
+80106158:	6a 00                	push   $0x0
+  pushl $41
+8010615a:	6a 29                	push   $0x29
+  jmp alltraps
+8010615c:	e9 b6 f9 ff ff       	jmp    80105b17 <alltraps>
+
+80106161 <vector42>:
+.globl vector42
+vector42:
+  pushl $0
+80106161:	6a 00                	push   $0x0
+  pushl $42
+80106163:	6a 2a                	push   $0x2a
+  jmp alltraps
+80106165:	e9 ad f9 ff ff       	jmp    80105b17 <alltraps>
+
+8010616a <vector43>:
+.globl vector43
+vector43:
+  pushl $0
+8010616a:	6a 00                	push   $0x0
+  pushl $43
+8010616c:	6a 2b                	push   $0x2b
+  jmp alltraps
+8010616e:	e9 a4 f9 ff ff       	jmp    80105b17 <alltraps>
+
+80106173 <vector44>:
+.globl vector44
+vector44:
+  pushl $0
+80106173:	6a 00                	push   $0x0
+  pushl $44
+80106175:	6a 2c                	push   $0x2c
+  jmp alltraps
+80106177:	e9 9b f9 ff ff       	jmp    80105b17 <alltraps>
+
+8010617c <vector45>:
+.globl vector45
+vector45:
+  pushl $0
+8010617c:	6a 00                	push   $0x0
+  pushl $45
+8010617e:	6a 2d                	push   $0x2d
+  jmp alltraps
+80106180:	e9 92 f9 ff ff       	jmp    80105b17 <alltraps>
+
+80106185 <vector46>:
+.globl vector46
+vector46:
+  pushl $0
+80106185:	6a 00                	push   $0x0
+  pushl $46
+80106187:	6a 2e                	push   $0x2e
+  jmp alltraps
+80106189:	e9 89 f9 ff ff       	jmp    80105b17 <alltraps>
+
+8010618e <vector47>:
+.globl vector47
+vector47:
+  pushl $0
+8010618e:	6a 00                	push   $0x0
+  pushl $47
+80106190:	6a 2f                	push   $0x2f
+  jmp alltraps
+80106192:	e9 80 f9 ff ff       	jmp    80105b17 <alltraps>
+
+80106197 <vector48>:
+.globl vector48
+vector48:
+  pushl $0
+80106197:	6a 00                	push   $0x0
+  pushl $48
+80106199:	6a 30                	push   $0x30
+  jmp alltraps
+8010619b:	e9 77 f9 ff ff       	jmp    80105b17 <alltraps>
+
+801061a0 <vector49>:
+.globl vector49
+vector49:
+  pushl $0
+801061a0:	6a 00                	push   $0x0
+  pushl $49
+801061a2:	6a 31                	push   $0x31
+  jmp alltraps
+801061a4:	e9 6e f9 ff ff       	jmp    80105b17 <alltraps>
+
+801061a9 <vector50>:
+.globl vector50
+vector50:
+  pushl $0
+801061a9:	6a 00                	push   $0x0
+  pushl $50
+801061ab:	6a 32                	push   $0x32
+  jmp alltraps
+801061ad:	e9 65 f9 ff ff       	jmp    80105b17 <alltraps>
+
+801061b2 <vector51>:
+.globl vector51
+vector51:
+  pushl $0
+801061b2:	6a 00                	push   $0x0
+  pushl $51
+801061b4:	6a 33                	push   $0x33
+  jmp alltraps
+801061b6:	e9 5c f9 ff ff       	jmp    80105b17 <alltraps>
+
+801061bb <vector52>:
+.globl vector52
+vector52:
+  pushl $0
+801061bb:	6a 00                	push   $0x0
+  pushl $52
+801061bd:	6a 34                	push   $0x34
+  jmp alltraps
+801061bf:	e9 53 f9 ff ff       	jmp    80105b17 <alltraps>
+
+801061c4 <vector53>:
+.globl vector53
+vector53:
+  pushl $0
+801061c4:	6a 00                	push   $0x0
+  pushl $53
+801061c6:	6a 35                	push   $0x35
+  jmp alltraps
+801061c8:	e9 4a f9 ff ff       	jmp    80105b17 <alltraps>
+
+801061cd <vector54>:
+.globl vector54
+vector54:
+  pushl $0
+801061cd:	6a 00                	push   $0x0
+  pushl $54
+801061cf:	6a 36                	push   $0x36
+  jmp alltraps
+801061d1:	e9 41 f9 ff ff       	jmp    80105b17 <alltraps>
+
+801061d6 <vector55>:
+.globl vector55
+vector55:
+  pushl $0
+801061d6:	6a 00                	push   $0x0
+  pushl $55
+801061d8:	6a 37                	push   $0x37
+  jmp alltraps
+801061da:	e9 38 f9 ff ff       	jmp    80105b17 <alltraps>
+
+801061df <vector56>:
+.globl vector56
+vector56:
+  pushl $0
+801061df:	6a 00                	push   $0x0
+  pushl $56
+801061e1:	6a 38                	push   $0x38
+  jmp alltraps
+801061e3:	e9 2f f9 ff ff       	jmp    80105b17 <alltraps>
+
+801061e8 <vector57>:
+.globl vector57
+vector57:
+  pushl $0
+801061e8:	6a 00                	push   $0x0
+  pushl $57
+801061ea:	6a 39                	push   $0x39
+  jmp alltraps
+801061ec:	e9 26 f9 ff ff       	jmp    80105b17 <alltraps>
+
+801061f1 <vector58>:
+.globl vector58
+vector58:
+  pushl $0
+801061f1:	6a 00                	push   $0x0
+  pushl $58
+801061f3:	6a 3a                	push   $0x3a
+  jmp alltraps
+801061f5:	e9 1d f9 ff ff       	jmp    80105b17 <alltraps>
+
+801061fa <vector59>:
+.globl vector59
+vector59:
+  pushl $0
+801061fa:	6a 00                	push   $0x0
+  pushl $59
+801061fc:	6a 3b                	push   $0x3b
+  jmp alltraps
+801061fe:	e9 14 f9 ff ff       	jmp    80105b17 <alltraps>
+
+80106203 <vector60>:
+.globl vector60
+vector60:
+  pushl $0
+80106203:	6a 00                	push   $0x0
+  pushl $60
+80106205:	6a 3c                	push   $0x3c
+  jmp alltraps
+80106207:	e9 0b f9 ff ff       	jmp    80105b17 <alltraps>
+
+8010620c <vector61>:
+.globl vector61
+vector61:
+  pushl $0
+8010620c:	6a 00                	push   $0x0
+  pushl $61
+8010620e:	6a 3d                	push   $0x3d
+  jmp alltraps
+80106210:	e9 02 f9 ff ff       	jmp    80105b17 <alltraps>
+
+80106215 <vector62>:
+.globl vector62
+vector62:
+  pushl $0
+80106215:	6a 00                	push   $0x0
+  pushl $62
+80106217:	6a 3e                	push   $0x3e
+  jmp alltraps
+80106219:	e9 f9 f8 ff ff       	jmp    80105b17 <alltraps>
+
+8010621e <vector63>:
+.globl vector63
+vector63:
+  pushl $0
+8010621e:	6a 00                	push   $0x0
+  pushl $63
+80106220:	6a 3f                	push   $0x3f
+  jmp alltraps
+80106222:	e9 f0 f8 ff ff       	jmp    80105b17 <alltraps>
+
+80106227 <vector64>:
+.globl vector64
+vector64:
+  pushl $0
+80106227:	6a 00                	push   $0x0
+  pushl $64
+80106229:	6a 40                	push   $0x40
+  jmp alltraps
+8010622b:	e9 e7 f8 ff ff       	jmp    80105b17 <alltraps>
+
+80106230 <vector65>:
+.globl vector65
+vector65:
+  pushl $0
+80106230:	6a 00                	push   $0x0
+  pushl $65
+80106232:	6a 41                	push   $0x41
+  jmp alltraps
+80106234:	e9 de f8 ff ff       	jmp    80105b17 <alltraps>
+
+80106239 <vector66>:
+.globl vector66
+vector66:
+  pushl $0
+80106239:	6a 00                	push   $0x0
+  pushl $66
+8010623b:	6a 42                	push   $0x42
+  jmp alltraps
+8010623d:	e9 d5 f8 ff ff       	jmp    80105b17 <alltraps>
+
+80106242 <vector67>:
+.globl vector67
+vector67:
+  pushl $0
+80106242:	6a 00                	push   $0x0
+  pushl $67
+80106244:	6a 43                	push   $0x43
+  jmp alltraps
+80106246:	e9 cc f8 ff ff       	jmp    80105b17 <alltraps>
+
+8010624b <vector68>:
+.globl vector68
+vector68:
+  pushl $0
+8010624b:	6a 00                	push   $0x0
+  pushl $68
+8010624d:	6a 44                	push   $0x44
+  jmp alltraps
+8010624f:	e9 c3 f8 ff ff       	jmp    80105b17 <alltraps>
+
+80106254 <vector69>:
+.globl vector69
+vector69:
+  pushl $0
+80106254:	6a 00                	push   $0x0
+  pushl $69
+80106256:	6a 45                	push   $0x45
+  jmp alltraps
+80106258:	e9 ba f8 ff ff       	jmp    80105b17 <alltraps>
+
+8010625d <vector70>:
+.globl vector70
+vector70:
+  pushl $0
+8010625d:	6a 00                	push   $0x0
+  pushl $70
+8010625f:	6a 46                	push   $0x46
+  jmp alltraps
+80106261:	e9 b1 f8 ff ff       	jmp    80105b17 <alltraps>
+
+80106266 <vector71>:
+.globl vector71
+vector71:
+  pushl $0
+80106266:	6a 00                	push   $0x0
+  pushl $71
+80106268:	6a 47                	push   $0x47
+  jmp alltraps
+8010626a:	e9 a8 f8 ff ff       	jmp    80105b17 <alltraps>
+
+8010626f <vector72>:
+.globl vector72
+vector72:
+  pushl $0
+8010626f:	6a 00                	push   $0x0
+  pushl $72
+80106271:	6a 48                	push   $0x48
+  jmp alltraps
+80106273:	e9 9f f8 ff ff       	jmp    80105b17 <alltraps>
+
+80106278 <vector73>:
+.globl vector73
+vector73:
+  pushl $0
+80106278:	6a 00                	push   $0x0
+  pushl $73
+8010627a:	6a 49                	push   $0x49
+  jmp alltraps
+8010627c:	e9 96 f8 ff ff       	jmp    80105b17 <alltraps>
+
+80106281 <vector74>:
+.globl vector74
+vector74:
+  pushl $0
+80106281:	6a 00                	push   $0x0
+  pushl $74
+80106283:	6a 4a                	push   $0x4a
+  jmp alltraps
+80106285:	e9 8d f8 ff ff       	jmp    80105b17 <alltraps>
+
+8010628a <vector75>:
+.globl vector75
+vector75:
+  pushl $0
+8010628a:	6a 00                	push   $0x0
+  pushl $75
+8010628c:	6a 4b                	push   $0x4b
+  jmp alltraps
+8010628e:	e9 84 f8 ff ff       	jmp    80105b17 <alltraps>
+
+80106293 <vector76>:
+.globl vector76
+vector76:
+  pushl $0
+80106293:	6a 00                	push   $0x0
+  pushl $76
+80106295:	6a 4c                	push   $0x4c
+  jmp alltraps
+80106297:	e9 7b f8 ff ff       	jmp    80105b17 <alltraps>
+
+8010629c <vector77>:
+.globl vector77
+vector77:
+  pushl $0
+8010629c:	6a 00                	push   $0x0
+  pushl $77
+8010629e:	6a 4d                	push   $0x4d
+  jmp alltraps
+801062a0:	e9 72 f8 ff ff       	jmp    80105b17 <alltraps>
+
+801062a5 <vector78>:
+.globl vector78
+vector78:
+  pushl $0
+801062a5:	6a 00                	push   $0x0
+  pushl $78
+801062a7:	6a 4e                	push   $0x4e
+  jmp alltraps
+801062a9:	e9 69 f8 ff ff       	jmp    80105b17 <alltraps>
+
+801062ae <vector79>:
+.globl vector79
+vector79:
+  pushl $0
+801062ae:	6a 00                	push   $0x0
+  pushl $79
+801062b0:	6a 4f                	push   $0x4f
+  jmp alltraps
+801062b2:	e9 60 f8 ff ff       	jmp    80105b17 <alltraps>
+
+801062b7 <vector80>:
+.globl vector80
+vector80:
+  pushl $0
+801062b7:	6a 00                	push   $0x0
+  pushl $80
+801062b9:	6a 50                	push   $0x50
+  jmp alltraps
+801062bb:	e9 57 f8 ff ff       	jmp    80105b17 <alltraps>
+
+801062c0 <vector81>:
+.globl vector81
+vector81:
+  pushl $0
+801062c0:	6a 00                	push   $0x0
+  pushl $81
+801062c2:	6a 51                	push   $0x51
+  jmp alltraps
+801062c4:	e9 4e f8 ff ff       	jmp    80105b17 <alltraps>
+
+801062c9 <vector82>:
+.globl vector82
+vector82:
+  pushl $0
+801062c9:	6a 00                	push   $0x0
+  pushl $82
+801062cb:	6a 52                	push   $0x52
+  jmp alltraps
+801062cd:	e9 45 f8 ff ff       	jmp    80105b17 <alltraps>
+
+801062d2 <vector83>:
+.globl vector83
+vector83:
+  pushl $0
+801062d2:	6a 00                	push   $0x0
+  pushl $83
+801062d4:	6a 53                	push   $0x53
+  jmp alltraps
+801062d6:	e9 3c f8 ff ff       	jmp    80105b17 <alltraps>
+
+801062db <vector84>:
+.globl vector84
+vector84:
+  pushl $0
+801062db:	6a 00                	push   $0x0
+  pushl $84
+801062dd:	6a 54                	push   $0x54
+  jmp alltraps
+801062df:	e9 33 f8 ff ff       	jmp    80105b17 <alltraps>
+
+801062e4 <vector85>:
+.globl vector85
+vector85:
+  pushl $0
+801062e4:	6a 00                	push   $0x0
+  pushl $85
+801062e6:	6a 55                	push   $0x55
+  jmp alltraps
+801062e8:	e9 2a f8 ff ff       	jmp    80105b17 <alltraps>
+
+801062ed <vector86>:
+.globl vector86
+vector86:
+  pushl $0
+801062ed:	6a 00                	push   $0x0
+  pushl $86
+801062ef:	6a 56                	push   $0x56
+  jmp alltraps
+801062f1:	e9 21 f8 ff ff       	jmp    80105b17 <alltraps>
+
+801062f6 <vector87>:
+.globl vector87
+vector87:
+  pushl $0
+801062f6:	6a 00                	push   $0x0
+  pushl $87
+801062f8:	6a 57                	push   $0x57
+  jmp alltraps
+801062fa:	e9 18 f8 ff ff       	jmp    80105b17 <alltraps>
+
+801062ff <vector88>:
+.globl vector88
+vector88:
+  pushl $0
+801062ff:	6a 00                	push   $0x0
+  pushl $88
+80106301:	6a 58                	push   $0x58
+  jmp alltraps
+80106303:	e9 0f f8 ff ff       	jmp    80105b17 <alltraps>
+
+80106308 <vector89>:
+.globl vector89
+vector89:
+  pushl $0
+80106308:	6a 00                	push   $0x0
+  pushl $89
+8010630a:	6a 59                	push   $0x59
+  jmp alltraps
+8010630c:	e9 06 f8 ff ff       	jmp    80105b17 <alltraps>
+
+80106311 <vector90>:
+.globl vector90
+vector90:
+  pushl $0
+80106311:	6a 00                	push   $0x0
+  pushl $90
+80106313:	6a 5a                	push   $0x5a
+  jmp alltraps
+80106315:	e9 fd f7 ff ff       	jmp    80105b17 <alltraps>
+
+8010631a <vector91>:
+.globl vector91
+vector91:
+  pushl $0
+8010631a:	6a 00                	push   $0x0
+  pushl $91
+8010631c:	6a 5b                	push   $0x5b
+  jmp alltraps
+8010631e:	e9 f4 f7 ff ff       	jmp    80105b17 <alltraps>
+
+80106323 <vector92>:
+.globl vector92
+vector92:
+  pushl $0
+80106323:	6a 00                	push   $0x0
+  pushl $92
+80106325:	6a 5c                	push   $0x5c
+  jmp alltraps
+80106327:	e9 eb f7 ff ff       	jmp    80105b17 <alltraps>
+
+8010632c <vector93>:
+.globl vector93
+vector93:
+  pushl $0
+8010632c:	6a 00                	push   $0x0
+  pushl $93
+8010632e:	6a 5d                	push   $0x5d
+  jmp alltraps
+80106330:	e9 e2 f7 ff ff       	jmp    80105b17 <alltraps>
+
+80106335 <vector94>:
+.globl vector94
+vector94:
+  pushl $0
+80106335:	6a 00                	push   $0x0
+  pushl $94
+80106337:	6a 5e                	push   $0x5e
+  jmp alltraps
+80106339:	e9 d9 f7 ff ff       	jmp    80105b17 <alltraps>
+
+8010633e <vector95>:
+.globl vector95
+vector95:
+  pushl $0
+8010633e:	6a 00                	push   $0x0
+  pushl $95
+80106340:	6a 5f                	push   $0x5f
+  jmp alltraps
+80106342:	e9 d0 f7 ff ff       	jmp    80105b17 <alltraps>
+
+80106347 <vector96>:
+.globl vector96
+vector96:
+  pushl $0
+80106347:	6a 00                	push   $0x0
+  pushl $96
+80106349:	6a 60                	push   $0x60
+  jmp alltraps
+8010634b:	e9 c7 f7 ff ff       	jmp    80105b17 <alltraps>
+
+80106350 <vector97>:
+.globl vector97
+vector97:
+  pushl $0
+80106350:	6a 00                	push   $0x0
+  pushl $97
+80106352:	6a 61                	push   $0x61
+  jmp alltraps
+80106354:	e9 be f7 ff ff       	jmp    80105b17 <alltraps>
+
+80106359 <vector98>:
+.globl vector98
+vector98:
+  pushl $0
+80106359:	6a 00                	push   $0x0
+  pushl $98
+8010635b:	6a 62                	push   $0x62
+  jmp alltraps
+8010635d:	e9 b5 f7 ff ff       	jmp    80105b17 <alltraps>
+
+80106362 <vector99>:
+.globl vector99
+vector99:
+  pushl $0
+80106362:	6a 00                	push   $0x0
+  pushl $99
+80106364:	6a 63                	push   $0x63
+  jmp alltraps
+80106366:	e9 ac f7 ff ff       	jmp    80105b17 <alltraps>
+
+8010636b <vector100>:
+.globl vector100
+vector100:
+  pushl $0
+8010636b:	6a 00                	push   $0x0
+  pushl $100
+8010636d:	6a 64                	push   $0x64
+  jmp alltraps
+8010636f:	e9 a3 f7 ff ff       	jmp    80105b17 <alltraps>
+
+80106374 <vector101>:
+.globl vector101
+vector101:
+  pushl $0
+80106374:	6a 00                	push   $0x0
+  pushl $101
+80106376:	6a 65                	push   $0x65
+  jmp alltraps
+80106378:	e9 9a f7 ff ff       	jmp    80105b17 <alltraps>
+
+8010637d <vector102>:
+.globl vector102
+vector102:
+  pushl $0
+8010637d:	6a 00                	push   $0x0
+  pushl $102
+8010637f:	6a 66                	push   $0x66
+  jmp alltraps
+80106381:	e9 91 f7 ff ff       	jmp    80105b17 <alltraps>
+
+80106386 <vector103>:
+.globl vector103
+vector103:
+  pushl $0
+80106386:	6a 00                	push   $0x0
+  pushl $103
+80106388:	6a 67                	push   $0x67
+  jmp alltraps
+8010638a:	e9 88 f7 ff ff       	jmp    80105b17 <alltraps>
+
+8010638f <vector104>:
+.globl vector104
+vector104:
+  pushl $0
+8010638f:	6a 00                	push   $0x0
+  pushl $104
+80106391:	6a 68                	push   $0x68
+  jmp alltraps
+80106393:	e9 7f f7 ff ff       	jmp    80105b17 <alltraps>
+
+80106398 <vector105>:
+.globl vector105
+vector105:
+  pushl $0
+80106398:	6a 00                	push   $0x0
+  pushl $105
+8010639a:	6a 69                	push   $0x69
+  jmp alltraps
+8010639c:	e9 76 f7 ff ff       	jmp    80105b17 <alltraps>
+
+801063a1 <vector106>:
+.globl vector106
+vector106:
+  pushl $0
+801063a1:	6a 00                	push   $0x0
+  pushl $106
+801063a3:	6a 6a                	push   $0x6a
+  jmp alltraps
+801063a5:	e9 6d f7 ff ff       	jmp    80105b17 <alltraps>
+
+801063aa <vector107>:
+.globl vector107
+vector107:
+  pushl $0
+801063aa:	6a 00                	push   $0x0
+  pushl $107
+801063ac:	6a 6b                	push   $0x6b
+  jmp alltraps
+801063ae:	e9 64 f7 ff ff       	jmp    80105b17 <alltraps>
+
+801063b3 <vector108>:
+.globl vector108
+vector108:
+  pushl $0
+801063b3:	6a 00                	push   $0x0
+  pushl $108
+801063b5:	6a 6c                	push   $0x6c
+  jmp alltraps
+801063b7:	e9 5b f7 ff ff       	jmp    80105b17 <alltraps>
+
+801063bc <vector109>:
+.globl vector109
+vector109:
+  pushl $0
+801063bc:	6a 00                	push   $0x0
+  pushl $109
+801063be:	6a 6d                	push   $0x6d
+  jmp alltraps
+801063c0:	e9 52 f7 ff ff       	jmp    80105b17 <alltraps>
+
+801063c5 <vector110>:
+.globl vector110
+vector110:
+  pushl $0
+801063c5:	6a 00                	push   $0x0
+  pushl $110
+801063c7:	6a 6e                	push   $0x6e
+  jmp alltraps
+801063c9:	e9 49 f7 ff ff       	jmp    80105b17 <alltraps>
+
+801063ce <vector111>:
+.globl vector111
+vector111:
+  pushl $0
+801063ce:	6a 00                	push   $0x0
+  pushl $111
+801063d0:	6a 6f                	push   $0x6f
+  jmp alltraps
+801063d2:	e9 40 f7 ff ff       	jmp    80105b17 <alltraps>
+
+801063d7 <vector112>:
+.globl vector112
+vector112:
+  pushl $0
+801063d7:	6a 00                	push   $0x0
+  pushl $112
+801063d9:	6a 70                	push   $0x70
+  jmp alltraps
+801063db:	e9 37 f7 ff ff       	jmp    80105b17 <alltraps>
+
+801063e0 <vector113>:
+.globl vector113
+vector113:
+  pushl $0
+801063e0:	6a 00                	push   $0x0
+  pushl $113
+801063e2:	6a 71                	push   $0x71
+  jmp alltraps
+801063e4:	e9 2e f7 ff ff       	jmp    80105b17 <alltraps>
+
+801063e9 <vector114>:
+.globl vector114
+vector114:
+  pushl $0
+801063e9:	6a 00                	push   $0x0
+  pushl $114
+801063eb:	6a 72                	push   $0x72
+  jmp alltraps
+801063ed:	e9 25 f7 ff ff       	jmp    80105b17 <alltraps>
+
+801063f2 <vector115>:
+.globl vector115
+vector115:
+  pushl $0
+801063f2:	6a 00                	push   $0x0
+  pushl $115
+801063f4:	6a 73                	push   $0x73
+  jmp alltraps
+801063f6:	e9 1c f7 ff ff       	jmp    80105b17 <alltraps>
+
+801063fb <vector116>:
+.globl vector116
+vector116:
+  pushl $0
+801063fb:	6a 00                	push   $0x0
+  pushl $116
+801063fd:	6a 74                	push   $0x74
+  jmp alltraps
+801063ff:	e9 13 f7 ff ff       	jmp    80105b17 <alltraps>
+
+80106404 <vector117>:
+.globl vector117
+vector117:
+  pushl $0
+80106404:	6a 00                	push   $0x0
+  pushl $117
+80106406:	6a 75                	push   $0x75
+  jmp alltraps
+80106408:	e9 0a f7 ff ff       	jmp    80105b17 <alltraps>
+
+8010640d <vector118>:
+.globl vector118
+vector118:
+  pushl $0
+8010640d:	6a 00                	push   $0x0
+  pushl $118
+8010640f:	6a 76                	push   $0x76
+  jmp alltraps
+80106411:	e9 01 f7 ff ff       	jmp    80105b17 <alltraps>
+
+80106416 <vector119>:
+.globl vector119
+vector119:
+  pushl $0
+80106416:	6a 00                	push   $0x0
+  pushl $119
+80106418:	6a 77                	push   $0x77
+  jmp alltraps
+8010641a:	e9 f8 f6 ff ff       	jmp    80105b17 <alltraps>
+
+8010641f <vector120>:
+.globl vector120
+vector120:
+  pushl $0
+8010641f:	6a 00                	push   $0x0
+  pushl $120
+80106421:	6a 78                	push   $0x78
+  jmp alltraps
+80106423:	e9 ef f6 ff ff       	jmp    80105b17 <alltraps>
+
+80106428 <vector121>:
+.globl vector121
+vector121:
+  pushl $0
+80106428:	6a 00                	push   $0x0
+  pushl $121
+8010642a:	6a 79                	push   $0x79
+  jmp alltraps
+8010642c:	e9 e6 f6 ff ff       	jmp    80105b17 <alltraps>
+
+80106431 <vector122>:
+.globl vector122
+vector122:
+  pushl $0
+80106431:	6a 00                	push   $0x0
+  pushl $122
+80106433:	6a 7a                	push   $0x7a
+  jmp alltraps
+80106435:	e9 dd f6 ff ff       	jmp    80105b17 <alltraps>
+
+8010643a <vector123>:
+.globl vector123
+vector123:
+  pushl $0
+8010643a:	6a 00                	push   $0x0
+  pushl $123
+8010643c:	6a 7b                	push   $0x7b
+  jmp alltraps
+8010643e:	e9 d4 f6 ff ff       	jmp    80105b17 <alltraps>
+
+80106443 <vector124>:
+.globl vector124
+vector124:
+  pushl $0
+80106443:	6a 00                	push   $0x0
+  pushl $124
+80106445:	6a 7c                	push   $0x7c
+  jmp alltraps
+80106447:	e9 cb f6 ff ff       	jmp    80105b17 <alltraps>
+
+8010644c <vector125>:
+.globl vector125
+vector125:
+  pushl $0
+8010644c:	6a 00                	push   $0x0
+  pushl $125
+8010644e:	6a 7d                	push   $0x7d
+  jmp alltraps
+80106450:	e9 c2 f6 ff ff       	jmp    80105b17 <alltraps>
+
+80106455 <vector126>:
+.globl vector126
+vector126:
+  pushl $0
+80106455:	6a 00                	push   $0x0
+  pushl $126
+80106457:	6a 7e                	push   $0x7e
+  jmp alltraps
+80106459:	e9 b9 f6 ff ff       	jmp    80105b17 <alltraps>
+
+8010645e <vector127>:
+.globl vector127
+vector127:
+  pushl $0
+8010645e:	6a 00                	push   $0x0
+  pushl $127
+80106460:	6a 7f                	push   $0x7f
+  jmp alltraps
+80106462:	e9 b0 f6 ff ff       	jmp    80105b17 <alltraps>
+
+80106467 <vector128>:
+.globl vector128
+vector128:
+  pushl $0
+80106467:	6a 00                	push   $0x0
+  pushl $128
+80106469:	68 80 00 00 00       	push   $0x80
+  jmp alltraps
+8010646e:	e9 a4 f6 ff ff       	jmp    80105b17 <alltraps>
+
+80106473 <vector129>:
+.globl vector129
+vector129:
+  pushl $0
+80106473:	6a 00                	push   $0x0
+  pushl $129
+80106475:	68 81 00 00 00       	push   $0x81
+  jmp alltraps
+8010647a:	e9 98 f6 ff ff       	jmp    80105b17 <alltraps>
+
+8010647f <vector130>:
+.globl vector130
+vector130:
+  pushl $0
+8010647f:	6a 00                	push   $0x0
+  pushl $130
+80106481:	68 82 00 00 00       	push   $0x82
+  jmp alltraps
+80106486:	e9 8c f6 ff ff       	jmp    80105b17 <alltraps>
+
+8010648b <vector131>:
+.globl vector131
+vector131:
+  pushl $0
+8010648b:	6a 00                	push   $0x0
+  pushl $131
+8010648d:	68 83 00 00 00       	push   $0x83
+  jmp alltraps
+80106492:	e9 80 f6 ff ff       	jmp    80105b17 <alltraps>
+
+80106497 <vector132>:
+.globl vector132
+vector132:
+  pushl $0
+80106497:	6a 00                	push   $0x0
+  pushl $132
+80106499:	68 84 00 00 00       	push   $0x84
+  jmp alltraps
+8010649e:	e9 74 f6 ff ff       	jmp    80105b17 <alltraps>
+
+801064a3 <vector133>:
+.globl vector133
+vector133:
+  pushl $0
+801064a3:	6a 00                	push   $0x0
+  pushl $133
+801064a5:	68 85 00 00 00       	push   $0x85
+  jmp alltraps
+801064aa:	e9 68 f6 ff ff       	jmp    80105b17 <alltraps>
+
+801064af <vector134>:
+.globl vector134
+vector134:
+  pushl $0
+801064af:	6a 00                	push   $0x0
+  pushl $134
+801064b1:	68 86 00 00 00       	push   $0x86
+  jmp alltraps
+801064b6:	e9 5c f6 ff ff       	jmp    80105b17 <alltraps>
+
+801064bb <vector135>:
+.globl vector135
+vector135:
+  pushl $0
+801064bb:	6a 00                	push   $0x0
+  pushl $135
+801064bd:	68 87 00 00 00       	push   $0x87
+  jmp alltraps
+801064c2:	e9 50 f6 ff ff       	jmp    80105b17 <alltraps>
+
+801064c7 <vector136>:
+.globl vector136
+vector136:
+  pushl $0
+801064c7:	6a 00                	push   $0x0
+  pushl $136
+801064c9:	68 88 00 00 00       	push   $0x88
+  jmp alltraps
+801064ce:	e9 44 f6 ff ff       	jmp    80105b17 <alltraps>
+
+801064d3 <vector137>:
+.globl vector137
+vector137:
+  pushl $0
+801064d3:	6a 00                	push   $0x0
+  pushl $137
+801064d5:	68 89 00 00 00       	push   $0x89
+  jmp alltraps
+801064da:	e9 38 f6 ff ff       	jmp    80105b17 <alltraps>
+
+801064df <vector138>:
+.globl vector138
+vector138:
+  pushl $0
+801064df:	6a 00                	push   $0x0
+  pushl $138
+801064e1:	68 8a 00 00 00       	push   $0x8a
+  jmp alltraps
+801064e6:	e9 2c f6 ff ff       	jmp    80105b17 <alltraps>
+
+801064eb <vector139>:
+.globl vector139
+vector139:
+  pushl $0
+801064eb:	6a 00                	push   $0x0
+  pushl $139
+801064ed:	68 8b 00 00 00       	push   $0x8b
+  jmp alltraps
+801064f2:	e9 20 f6 ff ff       	jmp    80105b17 <alltraps>
+
+801064f7 <vector140>:
+.globl vector140
+vector140:
+  pushl $0
+801064f7:	6a 00                	push   $0x0
+  pushl $140
+801064f9:	68 8c 00 00 00       	push   $0x8c
+  jmp alltraps
+801064fe:	e9 14 f6 ff ff       	jmp    80105b17 <alltraps>
+
+80106503 <vector141>:
+.globl vector141
+vector141:
+  pushl $0
+80106503:	6a 00                	push   $0x0
+  pushl $141
+80106505:	68 8d 00 00 00       	push   $0x8d
+  jmp alltraps
+8010650a:	e9 08 f6 ff ff       	jmp    80105b17 <alltraps>
+
+8010650f <vector142>:
+.globl vector142
+vector142:
+  pushl $0
+8010650f:	6a 00                	push   $0x0
+  pushl $142
+80106511:	68 8e 00 00 00       	push   $0x8e
+  jmp alltraps
+80106516:	e9 fc f5 ff ff       	jmp    80105b17 <alltraps>
+
+8010651b <vector143>:
+.globl vector143
+vector143:
+  pushl $0
+8010651b:	6a 00                	push   $0x0
+  pushl $143
+8010651d:	68 8f 00 00 00       	push   $0x8f
+  jmp alltraps
+80106522:	e9 f0 f5 ff ff       	jmp    80105b17 <alltraps>
+
+80106527 <vector144>:
+.globl vector144
+vector144:
+  pushl $0
+80106527:	6a 00                	push   $0x0
+  pushl $144
+80106529:	68 90 00 00 00       	push   $0x90
+  jmp alltraps
+8010652e:	e9 e4 f5 ff ff       	jmp    80105b17 <alltraps>
+
+80106533 <vector145>:
+.globl vector145
+vector145:
+  pushl $0
+80106533:	6a 00                	push   $0x0
+  pushl $145
+80106535:	68 91 00 00 00       	push   $0x91
+  jmp alltraps
+8010653a:	e9 d8 f5 ff ff       	jmp    80105b17 <alltraps>
+
+8010653f <vector146>:
+.globl vector146
+vector146:
+  pushl $0
+8010653f:	6a 00                	push   $0x0
+  pushl $146
+80106541:	68 92 00 00 00       	push   $0x92
+  jmp alltraps
+80106546:	e9 cc f5 ff ff       	jmp    80105b17 <alltraps>
+
+8010654b <vector147>:
+.globl vector147
+vector147:
+  pushl $0
+8010654b:	6a 00                	push   $0x0
+  pushl $147
+8010654d:	68 93 00 00 00       	push   $0x93
+  jmp alltraps
+80106552:	e9 c0 f5 ff ff       	jmp    80105b17 <alltraps>
+
+80106557 <vector148>:
+.globl vector148
+vector148:
+  pushl $0
+80106557:	6a 00                	push   $0x0
+  pushl $148
+80106559:	68 94 00 00 00       	push   $0x94
+  jmp alltraps
+8010655e:	e9 b4 f5 ff ff       	jmp    80105b17 <alltraps>
+
+80106563 <vector149>:
+.globl vector149
+vector149:
+  pushl $0
+80106563:	6a 00                	push   $0x0
+  pushl $149
+80106565:	68 95 00 00 00       	push   $0x95
+  jmp alltraps
+8010656a:	e9 a8 f5 ff ff       	jmp    80105b17 <alltraps>
+
+8010656f <vector150>:
+.globl vector150
+vector150:
+  pushl $0
+8010656f:	6a 00                	push   $0x0
+  pushl $150
+80106571:	68 96 00 00 00       	push   $0x96
+  jmp alltraps
+80106576:	e9 9c f5 ff ff       	jmp    80105b17 <alltraps>
+
+8010657b <vector151>:
+.globl vector151
+vector151:
+  pushl $0
+8010657b:	6a 00                	push   $0x0
+  pushl $151
+8010657d:	68 97 00 00 00       	push   $0x97
+  jmp alltraps
+80106582:	e9 90 f5 ff ff       	jmp    80105b17 <alltraps>
+
+80106587 <vector152>:
+.globl vector152
+vector152:
+  pushl $0
+80106587:	6a 00                	push   $0x0
+  pushl $152
+80106589:	68 98 00 00 00       	push   $0x98
+  jmp alltraps
+8010658e:	e9 84 f5 ff ff       	jmp    80105b17 <alltraps>
+
+80106593 <vector153>:
+.globl vector153
+vector153:
+  pushl $0
+80106593:	6a 00                	push   $0x0
+  pushl $153
+80106595:	68 99 00 00 00       	push   $0x99
+  jmp alltraps
+8010659a:	e9 78 f5 ff ff       	jmp    80105b17 <alltraps>
+
+8010659f <vector154>:
+.globl vector154
+vector154:
+  pushl $0
+8010659f:	6a 00                	push   $0x0
+  pushl $154
+801065a1:	68 9a 00 00 00       	push   $0x9a
+  jmp alltraps
+801065a6:	e9 6c f5 ff ff       	jmp    80105b17 <alltraps>
+
+801065ab <vector155>:
+.globl vector155
+vector155:
+  pushl $0
+801065ab:	6a 00                	push   $0x0
+  pushl $155
+801065ad:	68 9b 00 00 00       	push   $0x9b
+  jmp alltraps
+801065b2:	e9 60 f5 ff ff       	jmp    80105b17 <alltraps>
+
+801065b7 <vector156>:
+.globl vector156
+vector156:
+  pushl $0
+801065b7:	6a 00                	push   $0x0
+  pushl $156
+801065b9:	68 9c 00 00 00       	push   $0x9c
+  jmp alltraps
+801065be:	e9 54 f5 ff ff       	jmp    80105b17 <alltraps>
+
+801065c3 <vector157>:
+.globl vector157
+vector157:
+  pushl $0
+801065c3:	6a 00                	push   $0x0
+  pushl $157
+801065c5:	68 9d 00 00 00       	push   $0x9d
+  jmp alltraps
+801065ca:	e9 48 f5 ff ff       	jmp    80105b17 <alltraps>
+
+801065cf <vector158>:
+.globl vector158
+vector158:
+  pushl $0
+801065cf:	6a 00                	push   $0x0
+  pushl $158
+801065d1:	68 9e 00 00 00       	push   $0x9e
+  jmp alltraps
+801065d6:	e9 3c f5 ff ff       	jmp    80105b17 <alltraps>
+
+801065db <vector159>:
+.globl vector159
+vector159:
+  pushl $0
+801065db:	6a 00                	push   $0x0
+  pushl $159
+801065dd:	68 9f 00 00 00       	push   $0x9f
+  jmp alltraps
+801065e2:	e9 30 f5 ff ff       	jmp    80105b17 <alltraps>
+
+801065e7 <vector160>:
+.globl vector160
+vector160:
+  pushl $0
+801065e7:	6a 00                	push   $0x0
+  pushl $160
+801065e9:	68 a0 00 00 00       	push   $0xa0
+  jmp alltraps
+801065ee:	e9 24 f5 ff ff       	jmp    80105b17 <alltraps>
+
+801065f3 <vector161>:
+.globl vector161
+vector161:
+  pushl $0
+801065f3:	6a 00                	push   $0x0
+  pushl $161
+801065f5:	68 a1 00 00 00       	push   $0xa1
+  jmp alltraps
+801065fa:	e9 18 f5 ff ff       	jmp    80105b17 <alltraps>
+
+801065ff <vector162>:
+.globl vector162
+vector162:
+  pushl $0
+801065ff:	6a 00                	push   $0x0
+  pushl $162
+80106601:	68 a2 00 00 00       	push   $0xa2
+  jmp alltraps
+80106606:	e9 0c f5 ff ff       	jmp    80105b17 <alltraps>
+
+8010660b <vector163>:
+.globl vector163
+vector163:
+  pushl $0
+8010660b:	6a 00                	push   $0x0
+  pushl $163
+8010660d:	68 a3 00 00 00       	push   $0xa3
+  jmp alltraps
+80106612:	e9 00 f5 ff ff       	jmp    80105b17 <alltraps>
+
+80106617 <vector164>:
+.globl vector164
+vector164:
+  pushl $0
+80106617:	6a 00                	push   $0x0
+  pushl $164
+80106619:	68 a4 00 00 00       	push   $0xa4
+  jmp alltraps
+8010661e:	e9 f4 f4 ff ff       	jmp    80105b17 <alltraps>
+
+80106623 <vector165>:
+.globl vector165
+vector165:
+  pushl $0
+80106623:	6a 00                	push   $0x0
+  pushl $165
+80106625:	68 a5 00 00 00       	push   $0xa5
+  jmp alltraps
+8010662a:	e9 e8 f4 ff ff       	jmp    80105b17 <alltraps>
+
+8010662f <vector166>:
+.globl vector166
+vector166:
+  pushl $0
+8010662f:	6a 00                	push   $0x0
+  pushl $166
+80106631:	68 a6 00 00 00       	push   $0xa6
+  jmp alltraps
+80106636:	e9 dc f4 ff ff       	jmp    80105b17 <alltraps>
+
+8010663b <vector167>:
+.globl vector167
+vector167:
+  pushl $0
+8010663b:	6a 00                	push   $0x0
+  pushl $167
+8010663d:	68 a7 00 00 00       	push   $0xa7
+  jmp alltraps
+80106642:	e9 d0 f4 ff ff       	jmp    80105b17 <alltraps>
+
+80106647 <vector168>:
+.globl vector168
+vector168:
+  pushl $0
+80106647:	6a 00                	push   $0x0
+  pushl $168
+80106649:	68 a8 00 00 00       	push   $0xa8
+  jmp alltraps
+8010664e:	e9 c4 f4 ff ff       	jmp    80105b17 <alltraps>
+
+80106653 <vector169>:
+.globl vector169
+vector169:
+  pushl $0
+80106653:	6a 00                	push   $0x0
+  pushl $169
+80106655:	68 a9 00 00 00       	push   $0xa9
+  jmp alltraps
+8010665a:	e9 b8 f4 ff ff       	jmp    80105b17 <alltraps>
+
+8010665f <vector170>:
+.globl vector170
+vector170:
+  pushl $0
+8010665f:	6a 00                	push   $0x0
+  pushl $170
+80106661:	68 aa 00 00 00       	push   $0xaa
+  jmp alltraps
+80106666:	e9 ac f4 ff ff       	jmp    80105b17 <alltraps>
+
+8010666b <vector171>:
+.globl vector171
+vector171:
+  pushl $0
+8010666b:	6a 00                	push   $0x0
+  pushl $171
+8010666d:	68 ab 00 00 00       	push   $0xab
+  jmp alltraps
+80106672:	e9 a0 f4 ff ff       	jmp    80105b17 <alltraps>
+
+80106677 <vector172>:
+.globl vector172
+vector172:
+  pushl $0
+80106677:	6a 00                	push   $0x0
+  pushl $172
+80106679:	68 ac 00 00 00       	push   $0xac
+  jmp alltraps
+8010667e:	e9 94 f4 ff ff       	jmp    80105b17 <alltraps>
+
+80106683 <vector173>:
+.globl vector173
+vector173:
+  pushl $0
+80106683:	6a 00                	push   $0x0
+  pushl $173
+80106685:	68 ad 00 00 00       	push   $0xad
+  jmp alltraps
+8010668a:	e9 88 f4 ff ff       	jmp    80105b17 <alltraps>
+
+8010668f <vector174>:
+.globl vector174
+vector174:
+  pushl $0
+8010668f:	6a 00                	push   $0x0
+  pushl $174
+80106691:	68 ae 00 00 00       	push   $0xae
+  jmp alltraps
+80106696:	e9 7c f4 ff ff       	jmp    80105b17 <alltraps>
+
+8010669b <vector175>:
+.globl vector175
+vector175:
+  pushl $0
+8010669b:	6a 00                	push   $0x0
+  pushl $175
+8010669d:	68 af 00 00 00       	push   $0xaf
+  jmp alltraps
+801066a2:	e9 70 f4 ff ff       	jmp    80105b17 <alltraps>
+
+801066a7 <vector176>:
+.globl vector176
+vector176:
+  pushl $0
+801066a7:	6a 00                	push   $0x0
+  pushl $176
+801066a9:	68 b0 00 00 00       	push   $0xb0
+  jmp alltraps
+801066ae:	e9 64 f4 ff ff       	jmp    80105b17 <alltraps>
+
+801066b3 <vector177>:
+.globl vector177
+vector177:
+  pushl $0
+801066b3:	6a 00                	push   $0x0
+  pushl $177
+801066b5:	68 b1 00 00 00       	push   $0xb1
+  jmp alltraps
+801066ba:	e9 58 f4 ff ff       	jmp    80105b17 <alltraps>
+
+801066bf <vector178>:
+.globl vector178
+vector178:
+  pushl $0
+801066bf:	6a 00                	push   $0x0
+  pushl $178
+801066c1:	68 b2 00 00 00       	push   $0xb2
+  jmp alltraps
+801066c6:	e9 4c f4 ff ff       	jmp    80105b17 <alltraps>
+
+801066cb <vector179>:
+.globl vector179
+vector179:
+  pushl $0
+801066cb:	6a 00                	push   $0x0
+  pushl $179
+801066cd:	68 b3 00 00 00       	push   $0xb3
+  jmp alltraps
+801066d2:	e9 40 f4 ff ff       	jmp    80105b17 <alltraps>
+
+801066d7 <vector180>:
+.globl vector180
+vector180:
+  pushl $0
+801066d7:	6a 00                	push   $0x0
+  pushl $180
+801066d9:	68 b4 00 00 00       	push   $0xb4
+  jmp alltraps
+801066de:	e9 34 f4 ff ff       	jmp    80105b17 <alltraps>
+
+801066e3 <vector181>:
+.globl vector181
+vector181:
+  pushl $0
+801066e3:	6a 00                	push   $0x0
+  pushl $181
+801066e5:	68 b5 00 00 00       	push   $0xb5
+  jmp alltraps
+801066ea:	e9 28 f4 ff ff       	jmp    80105b17 <alltraps>
+
+801066ef <vector182>:
+.globl vector182
+vector182:
+  pushl $0
+801066ef:	6a 00                	push   $0x0
+  pushl $182
+801066f1:	68 b6 00 00 00       	push   $0xb6
+  jmp alltraps
+801066f6:	e9 1c f4 ff ff       	jmp    80105b17 <alltraps>
+
+801066fb <vector183>:
+.globl vector183
+vector183:
+  pushl $0
+801066fb:	6a 00                	push   $0x0
+  pushl $183
+801066fd:	68 b7 00 00 00       	push   $0xb7
+  jmp alltraps
+80106702:	e9 10 f4 ff ff       	jmp    80105b17 <alltraps>
+
+80106707 <vector184>:
+.globl vector184
+vector184:
+  pushl $0
+80106707:	6a 00                	push   $0x0
+  pushl $184
+80106709:	68 b8 00 00 00       	push   $0xb8
+  jmp alltraps
+8010670e:	e9 04 f4 ff ff       	jmp    80105b17 <alltraps>
+
+80106713 <vector185>:
+.globl vector185
+vector185:
+  pushl $0
+80106713:	6a 00                	push   $0x0
+  pushl $185
+80106715:	68 b9 00 00 00       	push   $0xb9
+  jmp alltraps
+8010671a:	e9 f8 f3 ff ff       	jmp    80105b17 <alltraps>
+
+8010671f <vector186>:
+.globl vector186
+vector186:
+  pushl $0
+8010671f:	6a 00                	push   $0x0
+  pushl $186
+80106721:	68 ba 00 00 00       	push   $0xba
+  jmp alltraps
+80106726:	e9 ec f3 ff ff       	jmp    80105b17 <alltraps>
+
+8010672b <vector187>:
+.globl vector187
+vector187:
+  pushl $0
+8010672b:	6a 00                	push   $0x0
+  pushl $187
+8010672d:	68 bb 00 00 00       	push   $0xbb
+  jmp alltraps
+80106732:	e9 e0 f3 ff ff       	jmp    80105b17 <alltraps>
+
+80106737 <vector188>:
+.globl vector188
+vector188:
+  pushl $0
+80106737:	6a 00                	push   $0x0
+  pushl $188
+80106739:	68 bc 00 00 00       	push   $0xbc
+  jmp alltraps
+8010673e:	e9 d4 f3 ff ff       	jmp    80105b17 <alltraps>
+
+80106743 <vector189>:
+.globl vector189
+vector189:
+  pushl $0
+80106743:	6a 00                	push   $0x0
+  pushl $189
+80106745:	68 bd 00 00 00       	push   $0xbd
+  jmp alltraps
+8010674a:	e9 c8 f3 ff ff       	jmp    80105b17 <alltraps>
+
+8010674f <vector190>:
+.globl vector190
+vector190:
+  pushl $0
+8010674f:	6a 00                	push   $0x0
+  pushl $190
+80106751:	68 be 00 00 00       	push   $0xbe
+  jmp alltraps
+80106756:	e9 bc f3 ff ff       	jmp    80105b17 <alltraps>
+
+8010675b <vector191>:
+.globl vector191
+vector191:
+  pushl $0
+8010675b:	6a 00                	push   $0x0
+  pushl $191
+8010675d:	68 bf 00 00 00       	push   $0xbf
+  jmp alltraps
+80106762:	e9 b0 f3 ff ff       	jmp    80105b17 <alltraps>
+
+80106767 <vector192>:
+.globl vector192
+vector192:
+  pushl $0
+80106767:	6a 00                	push   $0x0
+  pushl $192
+80106769:	68 c0 00 00 00       	push   $0xc0
+  jmp alltraps
+8010676e:	e9 a4 f3 ff ff       	jmp    80105b17 <alltraps>
+
+80106773 <vector193>:
+.globl vector193
+vector193:
+  pushl $0
+80106773:	6a 00                	push   $0x0
+  pushl $193
+80106775:	68 c1 00 00 00       	push   $0xc1
+  jmp alltraps
+8010677a:	e9 98 f3 ff ff       	jmp    80105b17 <alltraps>
+
+8010677f <vector194>:
+.globl vector194
+vector194:
+  pushl $0
+8010677f:	6a 00                	push   $0x0
+  pushl $194
+80106781:	68 c2 00 00 00       	push   $0xc2
+  jmp alltraps
+80106786:	e9 8c f3 ff ff       	jmp    80105b17 <alltraps>
+
+8010678b <vector195>:
+.globl vector195
+vector195:
+  pushl $0
+8010678b:	6a 00                	push   $0x0
+  pushl $195
+8010678d:	68 c3 00 00 00       	push   $0xc3
+  jmp alltraps
+80106792:	e9 80 f3 ff ff       	jmp    80105b17 <alltraps>
+
+80106797 <vector196>:
+.globl vector196
+vector196:
+  pushl $0
+80106797:	6a 00                	push   $0x0
+  pushl $196
+80106799:	68 c4 00 00 00       	push   $0xc4
+  jmp alltraps
+8010679e:	e9 74 f3 ff ff       	jmp    80105b17 <alltraps>
+
+801067a3 <vector197>:
+.globl vector197
+vector197:
+  pushl $0
+801067a3:	6a 00                	push   $0x0
+  pushl $197
+801067a5:	68 c5 00 00 00       	push   $0xc5
+  jmp alltraps
+801067aa:	e9 68 f3 ff ff       	jmp    80105b17 <alltraps>
+
+801067af <vector198>:
+.globl vector198
+vector198:
+  pushl $0
+801067af:	6a 00                	push   $0x0
+  pushl $198
+801067b1:	68 c6 00 00 00       	push   $0xc6
+  jmp alltraps
+801067b6:	e9 5c f3 ff ff       	jmp    80105b17 <alltraps>
+
+801067bb <vector199>:
+.globl vector199
+vector199:
+  pushl $0
+801067bb:	6a 00                	push   $0x0
+  pushl $199
+801067bd:	68 c7 00 00 00       	push   $0xc7
+  jmp alltraps
+801067c2:	e9 50 f3 ff ff       	jmp    80105b17 <alltraps>
+
+801067c7 <vector200>:
+.globl vector200
+vector200:
+  pushl $0
+801067c7:	6a 00                	push   $0x0
+  pushl $200
+801067c9:	68 c8 00 00 00       	push   $0xc8
+  jmp alltraps
+801067ce:	e9 44 f3 ff ff       	jmp    80105b17 <alltraps>
+
+801067d3 <vector201>:
+.globl vector201
+vector201:
+  pushl $0
+801067d3:	6a 00                	push   $0x0
+  pushl $201
+801067d5:	68 c9 00 00 00       	push   $0xc9
+  jmp alltraps
+801067da:	e9 38 f3 ff ff       	jmp    80105b17 <alltraps>
+
+801067df <vector202>:
+.globl vector202
+vector202:
+  pushl $0
+801067df:	6a 00                	push   $0x0
+  pushl $202
+801067e1:	68 ca 00 00 00       	push   $0xca
+  jmp alltraps
+801067e6:	e9 2c f3 ff ff       	jmp    80105b17 <alltraps>
+
+801067eb <vector203>:
+.globl vector203
+vector203:
+  pushl $0
+801067eb:	6a 00                	push   $0x0
+  pushl $203
+801067ed:	68 cb 00 00 00       	push   $0xcb
+  jmp alltraps
+801067f2:	e9 20 f3 ff ff       	jmp    80105b17 <alltraps>
+
+801067f7 <vector204>:
+.globl vector204
+vector204:
+  pushl $0
+801067f7:	6a 00                	push   $0x0
+  pushl $204
+801067f9:	68 cc 00 00 00       	push   $0xcc
+  jmp alltraps
+801067fe:	e9 14 f3 ff ff       	jmp    80105b17 <alltraps>
+
+80106803 <vector205>:
+.globl vector205
+vector205:
+  pushl $0
+80106803:	6a 00                	push   $0x0
+  pushl $205
+80106805:	68 cd 00 00 00       	push   $0xcd
+  jmp alltraps
+8010680a:	e9 08 f3 ff ff       	jmp    80105b17 <alltraps>
+
+8010680f <vector206>:
+.globl vector206
+vector206:
+  pushl $0
+8010680f:	6a 00                	push   $0x0
+  pushl $206
+80106811:	68 ce 00 00 00       	push   $0xce
+  jmp alltraps
+80106816:	e9 fc f2 ff ff       	jmp    80105b17 <alltraps>
+
+8010681b <vector207>:
+.globl vector207
+vector207:
+  pushl $0
+8010681b:	6a 00                	push   $0x0
+  pushl $207
+8010681d:	68 cf 00 00 00       	push   $0xcf
+  jmp alltraps
+80106822:	e9 f0 f2 ff ff       	jmp    80105b17 <alltraps>
+
+80106827 <vector208>:
+.globl vector208
+vector208:
+  pushl $0
+80106827:	6a 00                	push   $0x0
+  pushl $208
+80106829:	68 d0 00 00 00       	push   $0xd0
+  jmp alltraps
+8010682e:	e9 e4 f2 ff ff       	jmp    80105b17 <alltraps>
+
+80106833 <vector209>:
+.globl vector209
+vector209:
+  pushl $0
+80106833:	6a 00                	push   $0x0
+  pushl $209
+80106835:	68 d1 00 00 00       	push   $0xd1
+  jmp alltraps
+8010683a:	e9 d8 f2 ff ff       	jmp    80105b17 <alltraps>
+
+8010683f <vector210>:
+.globl vector210
+vector210:
+  pushl $0
+8010683f:	6a 00                	push   $0x0
+  pushl $210
+80106841:	68 d2 00 00 00       	push   $0xd2
+  jmp alltraps
+80106846:	e9 cc f2 ff ff       	jmp    80105b17 <alltraps>
+
+8010684b <vector211>:
+.globl vector211
+vector211:
+  pushl $0
+8010684b:	6a 00                	push   $0x0
+  pushl $211
+8010684d:	68 d3 00 00 00       	push   $0xd3
+  jmp alltraps
+80106852:	e9 c0 f2 ff ff       	jmp    80105b17 <alltraps>
+
+80106857 <vector212>:
+.globl vector212
+vector212:
+  pushl $0
+80106857:	6a 00                	push   $0x0
+  pushl $212
+80106859:	68 d4 00 00 00       	push   $0xd4
+  jmp alltraps
+8010685e:	e9 b4 f2 ff ff       	jmp    80105b17 <alltraps>
+
+80106863 <vector213>:
+.globl vector213
+vector213:
+  pushl $0
+80106863:	6a 00                	push   $0x0
+  pushl $213
+80106865:	68 d5 00 00 00       	push   $0xd5
+  jmp alltraps
+8010686a:	e9 a8 f2 ff ff       	jmp    80105b17 <alltraps>
+
+8010686f <vector214>:
+.globl vector214
+vector214:
+  pushl $0
+8010686f:	6a 00                	push   $0x0
+  pushl $214
+80106871:	68 d6 00 00 00       	push   $0xd6
+  jmp alltraps
+80106876:	e9 9c f2 ff ff       	jmp    80105b17 <alltraps>
+
+8010687b <vector215>:
+.globl vector215
+vector215:
+  pushl $0
+8010687b:	6a 00                	push   $0x0
+  pushl $215
+8010687d:	68 d7 00 00 00       	push   $0xd7
+  jmp alltraps
+80106882:	e9 90 f2 ff ff       	jmp    80105b17 <alltraps>
+
+80106887 <vector216>:
+.globl vector216
+vector216:
+  pushl $0
+80106887:	6a 00                	push   $0x0
+  pushl $216
+80106889:	68 d8 00 00 00       	push   $0xd8
+  jmp alltraps
+8010688e:	e9 84 f2 ff ff       	jmp    80105b17 <alltraps>
+
+80106893 <vector217>:
+.globl vector217
+vector217:
+  pushl $0
+80106893:	6a 00                	push   $0x0
+  pushl $217
+80106895:	68 d9 00 00 00       	push   $0xd9
+  jmp alltraps
+8010689a:	e9 78 f2 ff ff       	jmp    80105b17 <alltraps>
+
+8010689f <vector218>:
+.globl vector218
+vector218:
+  pushl $0
+8010689f:	6a 00                	push   $0x0
+  pushl $218
+801068a1:	68 da 00 00 00       	push   $0xda
+  jmp alltraps
+801068a6:	e9 6c f2 ff ff       	jmp    80105b17 <alltraps>
+
+801068ab <vector219>:
+.globl vector219
+vector219:
+  pushl $0
+801068ab:	6a 00                	push   $0x0
+  pushl $219
+801068ad:	68 db 00 00 00       	push   $0xdb
+  jmp alltraps
+801068b2:	e9 60 f2 ff ff       	jmp    80105b17 <alltraps>
+
+801068b7 <vector220>:
+.globl vector220
+vector220:
+  pushl $0
+801068b7:	6a 00                	push   $0x0
+  pushl $220
+801068b9:	68 dc 00 00 00       	push   $0xdc
+  jmp alltraps
+801068be:	e9 54 f2 ff ff       	jmp    80105b17 <alltraps>
+
+801068c3 <vector221>:
+.globl vector221
+vector221:
+  pushl $0
+801068c3:	6a 00                	push   $0x0
+  pushl $221
+801068c5:	68 dd 00 00 00       	push   $0xdd
+  jmp alltraps
+801068ca:	e9 48 f2 ff ff       	jmp    80105b17 <alltraps>
+
+801068cf <vector222>:
+.globl vector222
+vector222:
+  pushl $0
+801068cf:	6a 00                	push   $0x0
+  pushl $222
+801068d1:	68 de 00 00 00       	push   $0xde
+  jmp alltraps
+801068d6:	e9 3c f2 ff ff       	jmp    80105b17 <alltraps>
+
+801068db <vector223>:
+.globl vector223
+vector223:
+  pushl $0
+801068db:	6a 00                	push   $0x0
+  pushl $223
+801068dd:	68 df 00 00 00       	push   $0xdf
+  jmp alltraps
+801068e2:	e9 30 f2 ff ff       	jmp    80105b17 <alltraps>
+
+801068e7 <vector224>:
+.globl vector224
+vector224:
+  pushl $0
+801068e7:	6a 00                	push   $0x0
+  pushl $224
+801068e9:	68 e0 00 00 00       	push   $0xe0
+  jmp alltraps
+801068ee:	e9 24 f2 ff ff       	jmp    80105b17 <alltraps>
+
+801068f3 <vector225>:
+.globl vector225
+vector225:
+  pushl $0
+801068f3:	6a 00                	push   $0x0
+  pushl $225
+801068f5:	68 e1 00 00 00       	push   $0xe1
+  jmp alltraps
+801068fa:	e9 18 f2 ff ff       	jmp    80105b17 <alltraps>
+
+801068ff <vector226>:
+.globl vector226
+vector226:
+  pushl $0
+801068ff:	6a 00                	push   $0x0
+  pushl $226
+80106901:	68 e2 00 00 00       	push   $0xe2
+  jmp alltraps
+80106906:	e9 0c f2 ff ff       	jmp    80105b17 <alltraps>
+
+8010690b <vector227>:
+.globl vector227
+vector227:
+  pushl $0
+8010690b:	6a 00                	push   $0x0
+  pushl $227
+8010690d:	68 e3 00 00 00       	push   $0xe3
+  jmp alltraps
+80106912:	e9 00 f2 ff ff       	jmp    80105b17 <alltraps>
+
+80106917 <vector228>:
+.globl vector228
+vector228:
+  pushl $0
+80106917:	6a 00                	push   $0x0
+  pushl $228
+80106919:	68 e4 00 00 00       	push   $0xe4
+  jmp alltraps
+8010691e:	e9 f4 f1 ff ff       	jmp    80105b17 <alltraps>
+
+80106923 <vector229>:
+.globl vector229
+vector229:
+  pushl $0
+80106923:	6a 00                	push   $0x0
+  pushl $229
+80106925:	68 e5 00 00 00       	push   $0xe5
+  jmp alltraps
+8010692a:	e9 e8 f1 ff ff       	jmp    80105b17 <alltraps>
+
+8010692f <vector230>:
+.globl vector230
+vector230:
+  pushl $0
+8010692f:	6a 00                	push   $0x0
+  pushl $230
+80106931:	68 e6 00 00 00       	push   $0xe6
+  jmp alltraps
+80106936:	e9 dc f1 ff ff       	jmp    80105b17 <alltraps>
+
+8010693b <vector231>:
+.globl vector231
+vector231:
+  pushl $0
+8010693b:	6a 00                	push   $0x0
+  pushl $231
+8010693d:	68 e7 00 00 00       	push   $0xe7
+  jmp alltraps
+80106942:	e9 d0 f1 ff ff       	jmp    80105b17 <alltraps>
+
+80106947 <vector232>:
+.globl vector232
+vector232:
+  pushl $0
+80106947:	6a 00                	push   $0x0
+  pushl $232
+80106949:	68 e8 00 00 00       	push   $0xe8
+  jmp alltraps
+8010694e:	e9 c4 f1 ff ff       	jmp    80105b17 <alltraps>
+
+80106953 <vector233>:
+.globl vector233
+vector233:
+  pushl $0
+80106953:	6a 00                	push   $0x0
+  pushl $233
+80106955:	68 e9 00 00 00       	push   $0xe9
+  jmp alltraps
+8010695a:	e9 b8 f1 ff ff       	jmp    80105b17 <alltraps>
+
+8010695f <vector234>:
+.globl vector234
+vector234:
+  pushl $0
+8010695f:	6a 00                	push   $0x0
+  pushl $234
+80106961:	68 ea 00 00 00       	push   $0xea
+  jmp alltraps
+80106966:	e9 ac f1 ff ff       	jmp    80105b17 <alltraps>
+
+8010696b <vector235>:
+.globl vector235
+vector235:
+  pushl $0
+8010696b:	6a 00                	push   $0x0
+  pushl $235
+8010696d:	68 eb 00 00 00       	push   $0xeb
+  jmp alltraps
+80106972:	e9 a0 f1 ff ff       	jmp    80105b17 <alltraps>
+
+80106977 <vector236>:
+.globl vector236
+vector236:
+  pushl $0
+80106977:	6a 00                	push   $0x0
+  pushl $236
+80106979:	68 ec 00 00 00       	push   $0xec
+  jmp alltraps
+8010697e:	e9 94 f1 ff ff       	jmp    80105b17 <alltraps>
+
+80106983 <vector237>:
+.globl vector237
+vector237:
+  pushl $0
+80106983:	6a 00                	push   $0x0
+  pushl $237
+80106985:	68 ed 00 00 00       	push   $0xed
+  jmp alltraps
+8010698a:	e9 88 f1 ff ff       	jmp    80105b17 <alltraps>
+
+8010698f <vector238>:
+.globl vector238
+vector238:
+  pushl $0
+8010698f:	6a 00                	push   $0x0
+  pushl $238
+80106991:	68 ee 00 00 00       	push   $0xee
+  jmp alltraps
+80106996:	e9 7c f1 ff ff       	jmp    80105b17 <alltraps>
+
+8010699b <vector239>:
+.globl vector239
+vector239:
+  pushl $0
+8010699b:	6a 00                	push   $0x0
+  pushl $239
+8010699d:	68 ef 00 00 00       	push   $0xef
+  jmp alltraps
+801069a2:	e9 70 f1 ff ff       	jmp    80105b17 <alltraps>
+
+801069a7 <vector240>:
+.globl vector240
+vector240:
+  pushl $0
+801069a7:	6a 00                	push   $0x0
+  pushl $240
+801069a9:	68 f0 00 00 00       	push   $0xf0
+  jmp alltraps
+801069ae:	e9 64 f1 ff ff       	jmp    80105b17 <alltraps>
+
+801069b3 <vector241>:
+.globl vector241
+vector241:
+  pushl $0
+801069b3:	6a 00                	push   $0x0
+  pushl $241
+801069b5:	68 f1 00 00 00       	push   $0xf1
+  jmp alltraps
+801069ba:	e9 58 f1 ff ff       	jmp    80105b17 <alltraps>
+
+801069bf <vector242>:
+.globl vector242
+vector242:
+  pushl $0
+801069bf:	6a 00                	push   $0x0
+  pushl $242
+801069c1:	68 f2 00 00 00       	push   $0xf2
+  jmp alltraps
+801069c6:	e9 4c f1 ff ff       	jmp    80105b17 <alltraps>
+
+801069cb <vector243>:
+.globl vector243
+vector243:
+  pushl $0
+801069cb:	6a 00                	push   $0x0
+  pushl $243
+801069cd:	68 f3 00 00 00       	push   $0xf3
+  jmp alltraps
+801069d2:	e9 40 f1 ff ff       	jmp    80105b17 <alltraps>
+
+801069d7 <vector244>:
+.globl vector244
+vector244:
+  pushl $0
+801069d7:	6a 00                	push   $0x0
+  pushl $244
+801069d9:	68 f4 00 00 00       	push   $0xf4
+  jmp alltraps
+801069de:	e9 34 f1 ff ff       	jmp    80105b17 <alltraps>
+
+801069e3 <vector245>:
+.globl vector245
+vector245:
+  pushl $0
+801069e3:	6a 00                	push   $0x0
+  pushl $245
+801069e5:	68 f5 00 00 00       	push   $0xf5
+  jmp alltraps
+801069ea:	e9 28 f1 ff ff       	jmp    80105b17 <alltraps>
+
+801069ef <vector246>:
+.globl vector246
+vector246:
+  pushl $0
+801069ef:	6a 00                	push   $0x0
+  pushl $246
+801069f1:	68 f6 00 00 00       	push   $0xf6
+  jmp alltraps
+801069f6:	e9 1c f1 ff ff       	jmp    80105b17 <alltraps>
+
+801069fb <vector247>:
+.globl vector247
+vector247:
+  pushl $0
+801069fb:	6a 00                	push   $0x0
+  pushl $247
+801069fd:	68 f7 00 00 00       	push   $0xf7
+  jmp alltraps
+80106a02:	e9 10 f1 ff ff       	jmp    80105b17 <alltraps>
+
+80106a07 <vector248>:
+.globl vector248
+vector248:
+  pushl $0
+80106a07:	6a 00                	push   $0x0
+  pushl $248
+80106a09:	68 f8 00 00 00       	push   $0xf8
+  jmp alltraps
+80106a0e:	e9 04 f1 ff ff       	jmp    80105b17 <alltraps>
+
+80106a13 <vector249>:
+.globl vector249
+vector249:
+  pushl $0
+80106a13:	6a 00                	push   $0x0
+  pushl $249
+80106a15:	68 f9 00 00 00       	push   $0xf9
+  jmp alltraps
+80106a1a:	e9 f8 f0 ff ff       	jmp    80105b17 <alltraps>
+
+80106a1f <vector250>:
+.globl vector250
+vector250:
+  pushl $0
+80106a1f:	6a 00                	push   $0x0
+  pushl $250
+80106a21:	68 fa 00 00 00       	push   $0xfa
+  jmp alltraps
+80106a26:	e9 ec f0 ff ff       	jmp    80105b17 <alltraps>
+
+80106a2b <vector251>:
+.globl vector251
+vector251:
+  pushl $0
+80106a2b:	6a 00                	push   $0x0
+  pushl $251
+80106a2d:	68 fb 00 00 00       	push   $0xfb
+  jmp alltraps
+80106a32:	e9 e0 f0 ff ff       	jmp    80105b17 <alltraps>
+
+80106a37 <vector252>:
+.globl vector252
+vector252:
+  pushl $0
+80106a37:	6a 00                	push   $0x0
+  pushl $252
+80106a39:	68 fc 00 00 00       	push   $0xfc
+  jmp alltraps
+80106a3e:	e9 d4 f0 ff ff       	jmp    80105b17 <alltraps>
+
+80106a43 <vector253>:
+.globl vector253
+vector253:
+  pushl $0
+80106a43:	6a 00                	push   $0x0
+  pushl $253
+80106a45:	68 fd 00 00 00       	push   $0xfd
+  jmp alltraps
+80106a4a:	e9 c8 f0 ff ff       	jmp    80105b17 <alltraps>
+
+80106a4f <vector254>:
+.globl vector254
+vector254:
+  pushl $0
+80106a4f:	6a 00                	push   $0x0
+  pushl $254
+80106a51:	68 fe 00 00 00       	push   $0xfe
+  jmp alltraps
+80106a56:	e9 bc f0 ff ff       	jmp    80105b17 <alltraps>
+
+80106a5b <vector255>:
+.globl vector255
+vector255:
+  pushl $0
+80106a5b:	6a 00                	push   $0x0
+  pushl $255
+80106a5d:	68 ff 00 00 00       	push   $0xff
+  jmp alltraps
+80106a62:	e9 b0 f0 ff ff       	jmp    80105b17 <alltraps>
+80106a67:	66 90                	xchg   %ax,%ax
+80106a69:	66 90                	xchg   %ax,%ax
+80106a6b:	66 90                	xchg   %ax,%ax
+80106a6d:	66 90                	xchg   %ax,%ax
+80106a6f:	90                   	nop
+
+80106a70 <walkpgdir>:
+// Return the address of the PTE in page table pgdir
+// that corresponds to virtual address va.  If alloc!=0,
+// create any required page table pages.
+static pte_t *
+walkpgdir(pde_t *pgdir, const void *va, int alloc)
+{
+80106a70:	55                   	push   %ebp
+80106a71:	89 e5                	mov    %esp,%ebp
+80106a73:	57                   	push   %edi
+80106a74:	56                   	push   %esi
+80106a75:	53                   	push   %ebx
+  pde_t *pde;
+  pte_t *pgtab;
+
+  pde = &pgdir[PDX(va)];
+80106a76:	89 d3                	mov    %edx,%ebx
+{
+80106a78:	89 d7                	mov    %edx,%edi
+  pde = &pgdir[PDX(va)];
+80106a7a:	c1 eb 16             	shr    $0x16,%ebx
+80106a7d:	8d 34 98             	lea    (%eax,%ebx,4),%esi
+{
+80106a80:	83 ec 0c             	sub    $0xc,%esp
+  if(*pde & PTE_P){
+80106a83:	8b 06                	mov    (%esi),%eax
+80106a85:	a8 01                	test   $0x1,%al
+80106a87:	74 27                	je     80106ab0 <walkpgdir+0x40>
+    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+80106a89:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106a8e:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+    // The permissions here are overly generous, but they can
+    // be further restricted by the permissions in the page table
+    // entries, if necessary.
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+  }
+  return &pgtab[PTX(va)];
+80106a94:	c1 ef 0a             	shr    $0xa,%edi
+}
+80106a97:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return &pgtab[PTX(va)];
+80106a9a:	89 fa                	mov    %edi,%edx
+80106a9c:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+80106aa2:	8d 04 13             	lea    (%ebx,%edx,1),%eax
+}
+80106aa5:	5b                   	pop    %ebx
+80106aa6:	5e                   	pop    %esi
+80106aa7:	5f                   	pop    %edi
+80106aa8:	5d                   	pop    %ebp
+80106aa9:	c3                   	ret    
+80106aaa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
+80106ab0:	85 c9                	test   %ecx,%ecx
+80106ab2:	74 2c                	je     80106ae0 <walkpgdir+0x70>
+80106ab4:	e8 17 ba ff ff       	call   801024d0 <kalloc>
+80106ab9:	85 c0                	test   %eax,%eax
+80106abb:	89 c3                	mov    %eax,%ebx
+80106abd:	74 21                	je     80106ae0 <walkpgdir+0x70>
+    memset(pgtab, 0, PGSIZE);
+80106abf:	83 ec 04             	sub    $0x4,%esp
+80106ac2:	68 00 10 00 00       	push   $0x1000
+80106ac7:	6a 00                	push   $0x0
+80106ac9:	50                   	push   %eax
+80106aca:	e8 f1 dc ff ff       	call   801047c0 <memset>
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+80106acf:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106ad5:	83 c4 10             	add    $0x10,%esp
+80106ad8:	83 c8 07             	or     $0x7,%eax
+80106adb:	89 06                	mov    %eax,(%esi)
+80106add:	eb b5                	jmp    80106a94 <walkpgdir+0x24>
+80106adf:	90                   	nop
+}
+80106ae0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return 0;
+80106ae3:	31 c0                	xor    %eax,%eax
+}
+80106ae5:	5b                   	pop    %ebx
+80106ae6:	5e                   	pop    %esi
+80106ae7:	5f                   	pop    %edi
+80106ae8:	5d                   	pop    %ebp
+80106ae9:	c3                   	ret    
+80106aea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106af0 <mappages>:
+// Create PTEs for virtual addresses starting at va that refer to
+// physical addresses starting at pa. va and size might not
+// be page-aligned.
+static int
+mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
+{
+80106af0:	55                   	push   %ebp
+80106af1:	89 e5                	mov    %esp,%ebp
+80106af3:	57                   	push   %edi
+80106af4:	56                   	push   %esi
+80106af5:	53                   	push   %ebx
+  char *a, *last;
+  pte_t *pte;
+
+  a = (char*)PGROUNDDOWN((uint)va);
+80106af6:	89 d3                	mov    %edx,%ebx
+80106af8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+{
+80106afe:	83 ec 1c             	sub    $0x1c,%esp
+80106b01:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+80106b04:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+80106b08:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106b0b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106b10:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  for(;;){
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+      return -1;
+    if(*pte & PTE_P)
+      panic("remap");
+    *pte = pa | perm | PTE_P;
+80106b13:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106b16:	29 df                	sub    %ebx,%edi
+80106b18:	83 c8 01             	or     $0x1,%eax
+80106b1b:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80106b1e:	eb 15                	jmp    80106b35 <mappages+0x45>
+    if(*pte & PTE_P)
+80106b20:	f6 00 01             	testb  $0x1,(%eax)
+80106b23:	75 45                	jne    80106b6a <mappages+0x7a>
+    *pte = pa | perm | PTE_P;
+80106b25:	0b 75 dc             	or     -0x24(%ebp),%esi
+    if(a == last)
+80106b28:	3b 5d e0             	cmp    -0x20(%ebp),%ebx
+    *pte = pa | perm | PTE_P;
+80106b2b:	89 30                	mov    %esi,(%eax)
+    if(a == last)
+80106b2d:	74 31                	je     80106b60 <mappages+0x70>
+      break;
+    a += PGSIZE;
+80106b2f:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+80106b35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106b38:	b9 01 00 00 00       	mov    $0x1,%ecx
+80106b3d:	89 da                	mov    %ebx,%edx
+80106b3f:	8d 34 3b             	lea    (%ebx,%edi,1),%esi
+80106b42:	e8 29 ff ff ff       	call   80106a70 <walkpgdir>
+80106b47:	85 c0                	test   %eax,%eax
+80106b49:	75 d5                	jne    80106b20 <mappages+0x30>
+    pa += PGSIZE;
+  }
+  return 0;
+}
+80106b4b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+80106b4e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106b53:	5b                   	pop    %ebx
+80106b54:	5e                   	pop    %esi
+80106b55:	5f                   	pop    %edi
+80106b56:	5d                   	pop    %ebp
+80106b57:	c3                   	ret    
+80106b58:	90                   	nop
+80106b59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b60:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80106b63:	31 c0                	xor    %eax,%eax
+}
+80106b65:	5b                   	pop    %ebx
+80106b66:	5e                   	pop    %esi
+80106b67:	5f                   	pop    %edi
+80106b68:	5d                   	pop    %ebp
+80106b69:	c3                   	ret    
+      panic("remap");
+80106b6a:	83 ec 0c             	sub    $0xc,%esp
+80106b6d:	68 b8 7c 10 80       	push   $0x80107cb8
+80106b72:	e8 19 98 ff ff       	call   80100390 <panic>
+80106b77:	89 f6                	mov    %esi,%esi
+80106b79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106b80 <deallocuvm.part.0>:
+// Deallocate user pages to bring the process size from oldsz to
+// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+int
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+80106b80:	55                   	push   %ebp
+80106b81:	89 e5                	mov    %esp,%ebp
+80106b83:	57                   	push   %edi
+80106b84:	56                   	push   %esi
+80106b85:	53                   	push   %ebx
+  uint a, pa;
+
+  if(newsz >= oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(newsz);
+80106b86:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+80106b8c:	89 c7                	mov    %eax,%edi
+  a = PGROUNDUP(newsz);
+80106b8e:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+80106b94:	83 ec 1c             	sub    $0x1c,%esp
+80106b97:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+  for(; a  < oldsz; a += PGSIZE){
+80106b9a:	39 d3                	cmp    %edx,%ebx
+80106b9c:	73 66                	jae    80106c04 <deallocuvm.part.0+0x84>
+80106b9e:	89 d6                	mov    %edx,%esi
+80106ba0:	eb 3d                	jmp    80106bdf <deallocuvm.part.0+0x5f>
+80106ba2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    pte = walkpgdir(pgdir, (char*)a, 0);
+    if(!pte)
+      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
+    else if((*pte & PTE_P) != 0){
+80106ba8:	8b 10                	mov    (%eax),%edx
+80106baa:	f6 c2 01             	test   $0x1,%dl
+80106bad:	74 26                	je     80106bd5 <deallocuvm.part.0+0x55>
+      pa = PTE_ADDR(*pte);
+      if(pa == 0)
+80106baf:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80106bb5:	74 58                	je     80106c0f <deallocuvm.part.0+0x8f>
+        panic("kfree");
+      char *v = P2V(pa);
+      kfree(v);
+80106bb7:	83 ec 0c             	sub    $0xc,%esp
+      char *v = P2V(pa);
+80106bba:	81 c2 00 00 00 80    	add    $0x80000000,%edx
+80106bc0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+      kfree(v);
+80106bc3:	52                   	push   %edx
+80106bc4:	e8 57 b7 ff ff       	call   80102320 <kfree>
+      *pte = 0;
+80106bc9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106bcc:	83 c4 10             	add    $0x10,%esp
+80106bcf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  for(; a  < oldsz; a += PGSIZE){
+80106bd5:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106bdb:	39 f3                	cmp    %esi,%ebx
+80106bdd:	73 25                	jae    80106c04 <deallocuvm.part.0+0x84>
+    pte = walkpgdir(pgdir, (char*)a, 0);
+80106bdf:	31 c9                	xor    %ecx,%ecx
+80106be1:	89 da                	mov    %ebx,%edx
+80106be3:	89 f8                	mov    %edi,%eax
+80106be5:	e8 86 fe ff ff       	call   80106a70 <walkpgdir>
+    if(!pte)
+80106bea:	85 c0                	test   %eax,%eax
+80106bec:	75 ba                	jne    80106ba8 <deallocuvm.part.0+0x28>
+      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
+80106bee:	81 e3 00 00 c0 ff    	and    $0xffc00000,%ebx
+80106bf4:	81 c3 00 f0 3f 00    	add    $0x3ff000,%ebx
+  for(; a  < oldsz; a += PGSIZE){
+80106bfa:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106c00:	39 f3                	cmp    %esi,%ebx
+80106c02:	72 db                	jb     80106bdf <deallocuvm.part.0+0x5f>
+    }
+  }
+  return newsz;
+}
+80106c04:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106c07:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106c0a:	5b                   	pop    %ebx
+80106c0b:	5e                   	pop    %esi
+80106c0c:	5f                   	pop    %edi
+80106c0d:	5d                   	pop    %ebp
+80106c0e:	c3                   	ret    
+        panic("kfree");
+80106c0f:	83 ec 0c             	sub    $0xc,%esp
+80106c12:	68 06 76 10 80       	push   $0x80107606
+80106c17:	e8 74 97 ff ff       	call   80100390 <panic>
+80106c1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106c20 <seginit>:
+{
+80106c20:	55                   	push   %ebp
+80106c21:	89 e5                	mov    %esp,%ebp
+80106c23:	83 ec 18             	sub    $0x18,%esp
+  c = &cpus[cpuid()];
+80106c26:	e8 a5 ce ff ff       	call   80103ad0 <cpuid>
+80106c2b:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+  pd[0] = size-1;
+80106c31:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80106c36:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
+80106c3a:	c7 80 18 28 11 80 ff 	movl   $0xffff,-0x7feed7e8(%eax)
+80106c41:	ff 00 00 
+80106c44:	c7 80 1c 28 11 80 00 	movl   $0xcf9a00,-0x7feed7e4(%eax)
+80106c4b:	9a cf 00 
+  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
+80106c4e:	c7 80 20 28 11 80 ff 	movl   $0xffff,-0x7feed7e0(%eax)
+80106c55:	ff 00 00 
+80106c58:	c7 80 24 28 11 80 00 	movl   $0xcf9200,-0x7feed7dc(%eax)
+80106c5f:	92 cf 00 
+  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
+80106c62:	c7 80 28 28 11 80 ff 	movl   $0xffff,-0x7feed7d8(%eax)
+80106c69:	ff 00 00 
+80106c6c:	c7 80 2c 28 11 80 00 	movl   $0xcffa00,-0x7feed7d4(%eax)
+80106c73:	fa cf 00 
+  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
+80106c76:	c7 80 30 28 11 80 ff 	movl   $0xffff,-0x7feed7d0(%eax)
+80106c7d:	ff 00 00 
+80106c80:	c7 80 34 28 11 80 00 	movl   $0xcff200,-0x7feed7cc(%eax)
+80106c87:	f2 cf 00 
+  lgdt(c->gdt, sizeof(c->gdt));
+80106c8a:	05 10 28 11 80       	add    $0x80112810,%eax
+  pd[1] = (uint)p;
+80106c8f:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+  pd[2] = (uint)p >> 16;
+80106c93:	c1 e8 10             	shr    $0x10,%eax
+80106c96:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+  asm volatile("lgdt (%0)" : : "r" (pd));
+80106c9a:	8d 45 f2             	lea    -0xe(%ebp),%eax
+80106c9d:	0f 01 10             	lgdtl  (%eax)
+}
+80106ca0:	c9                   	leave  
+80106ca1:	c3                   	ret    
+80106ca2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106ca9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106cb0 <switchkvm>:
+  lcr3(V2P(kpgdir));   // switch to the kernel page table
+80106cb0:	a1 c4 56 11 80       	mov    0x801156c4,%eax
+{
+80106cb5:	55                   	push   %ebp
+80106cb6:	89 e5                	mov    %esp,%ebp
+  lcr3(V2P(kpgdir));   // switch to the kernel page table
+80106cb8:	05 00 00 00 80       	add    $0x80000000,%eax
+}
+
+static inline void
+lcr3(uint val)
+{
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+80106cbd:	0f 22 d8             	mov    %eax,%cr3
+}
+80106cc0:	5d                   	pop    %ebp
+80106cc1:	c3                   	ret    
+80106cc2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106cc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106cd0 <switchuvm>:
+{
+80106cd0:	55                   	push   %ebp
+80106cd1:	89 e5                	mov    %esp,%ebp
+80106cd3:	57                   	push   %edi
+80106cd4:	56                   	push   %esi
+80106cd5:	53                   	push   %ebx
+80106cd6:	83 ec 1c             	sub    $0x1c,%esp
+80106cd9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(p == 0)
+80106cdc:	85 db                	test   %ebx,%ebx
+80106cde:	0f 84 cb 00 00 00    	je     80106daf <switchuvm+0xdf>
+  if(p->kstack == 0)
+80106ce4:	8b 43 08             	mov    0x8(%ebx),%eax
+80106ce7:	85 c0                	test   %eax,%eax
+80106ce9:	0f 84 da 00 00 00    	je     80106dc9 <switchuvm+0xf9>
+  if(p->pgdir == 0)
+80106cef:	8b 43 04             	mov    0x4(%ebx),%eax
+80106cf2:	85 c0                	test   %eax,%eax
+80106cf4:	0f 84 c2 00 00 00    	je     80106dbc <switchuvm+0xec>
+  pushcli();
+80106cfa:	e8 e1 d8 ff ff       	call   801045e0 <pushcli>
+  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
+80106cff:	e8 4c cd ff ff       	call   80103a50 <mycpu>
+80106d04:	89 c6                	mov    %eax,%esi
+80106d06:	e8 45 cd ff ff       	call   80103a50 <mycpu>
+80106d0b:	89 c7                	mov    %eax,%edi
+80106d0d:	e8 3e cd ff ff       	call   80103a50 <mycpu>
+80106d12:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106d15:	83 c7 08             	add    $0x8,%edi
+80106d18:	e8 33 cd ff ff       	call   80103a50 <mycpu>
+80106d1d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106d20:	83 c0 08             	add    $0x8,%eax
+80106d23:	ba 67 00 00 00       	mov    $0x67,%edx
+80106d28:	c1 e8 18             	shr    $0x18,%eax
+80106d2b:	66 89 96 98 00 00 00 	mov    %dx,0x98(%esi)
+80106d32:	66 89 be 9a 00 00 00 	mov    %di,0x9a(%esi)
+80106d39:	88 86 9f 00 00 00    	mov    %al,0x9f(%esi)
+  mycpu()->ts.iomb = (ushort) 0xFFFF;
+80106d3f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
+80106d44:	83 c1 08             	add    $0x8,%ecx
+80106d47:	c1 e9 10             	shr    $0x10,%ecx
+80106d4a:	88 8e 9c 00 00 00    	mov    %cl,0x9c(%esi)
+80106d50:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80106d55:	66 89 8e 9d 00 00 00 	mov    %cx,0x9d(%esi)
+  mycpu()->ts.ss0 = SEG_KDATA << 3;
+80106d5c:	be 10 00 00 00       	mov    $0x10,%esi
+  mycpu()->gdt[SEG_TSS].s = 0;
+80106d61:	e8 ea cc ff ff       	call   80103a50 <mycpu>
+80106d66:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+  mycpu()->ts.ss0 = SEG_KDATA << 3;
+80106d6d:	e8 de cc ff ff       	call   80103a50 <mycpu>
+80106d72:	66 89 70 10          	mov    %si,0x10(%eax)
+  mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
+80106d76:	8b 73 08             	mov    0x8(%ebx),%esi
+80106d79:	e8 d2 cc ff ff       	call   80103a50 <mycpu>
+80106d7e:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80106d84:	89 70 0c             	mov    %esi,0xc(%eax)
+  mycpu()->ts.iomb = (ushort) 0xFFFF;
+80106d87:	e8 c4 cc ff ff       	call   80103a50 <mycpu>
+80106d8c:	66 89 78 6e          	mov    %di,0x6e(%eax)
+  asm volatile("ltr %0" : : "r" (sel));
+80106d90:	b8 28 00 00 00       	mov    $0x28,%eax
+80106d95:	0f 00 d8             	ltr    %ax
+  lcr3(V2P(p->pgdir));  // switch to process's address space
+80106d98:	8b 43 04             	mov    0x4(%ebx),%eax
+80106d9b:	05 00 00 00 80       	add    $0x80000000,%eax
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+80106da0:	0f 22 d8             	mov    %eax,%cr3
+}
+80106da3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106da6:	5b                   	pop    %ebx
+80106da7:	5e                   	pop    %esi
+80106da8:	5f                   	pop    %edi
+80106da9:	5d                   	pop    %ebp
+  popcli();
+80106daa:	e9 71 d8 ff ff       	jmp    80104620 <popcli>
+    panic("switchuvm: no process");
+80106daf:	83 ec 0c             	sub    $0xc,%esp
+80106db2:	68 be 7c 10 80       	push   $0x80107cbe
+80106db7:	e8 d4 95 ff ff       	call   80100390 <panic>
+    panic("switchuvm: no pgdir");
+80106dbc:	83 ec 0c             	sub    $0xc,%esp
+80106dbf:	68 e9 7c 10 80       	push   $0x80107ce9
+80106dc4:	e8 c7 95 ff ff       	call   80100390 <panic>
+    panic("switchuvm: no kstack");
+80106dc9:	83 ec 0c             	sub    $0xc,%esp
+80106dcc:	68 d4 7c 10 80       	push   $0x80107cd4
+80106dd1:	e8 ba 95 ff ff       	call   80100390 <panic>
+80106dd6:	8d 76 00             	lea    0x0(%esi),%esi
+80106dd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106de0 <inituvm>:
+{
+80106de0:	55                   	push   %ebp
+80106de1:	89 e5                	mov    %esp,%ebp
+80106de3:	57                   	push   %edi
+80106de4:	56                   	push   %esi
+80106de5:	53                   	push   %ebx
+80106de6:	83 ec 1c             	sub    $0x1c,%esp
+80106de9:	8b 75 10             	mov    0x10(%ebp),%esi
+80106dec:	8b 45 08             	mov    0x8(%ebp),%eax
+80106def:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  if(sz >= PGSIZE)
+80106df2:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+{
+80106df8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(sz >= PGSIZE)
+80106dfb:	77 49                	ja     80106e46 <inituvm+0x66>
+  mem = kalloc();
+80106dfd:	e8 ce b6 ff ff       	call   801024d0 <kalloc>
+  memset(mem, 0, PGSIZE);
+80106e02:	83 ec 04             	sub    $0x4,%esp
+  mem = kalloc();
+80106e05:	89 c3                	mov    %eax,%ebx
+  memset(mem, 0, PGSIZE);
+80106e07:	68 00 10 00 00       	push   $0x1000
+80106e0c:	6a 00                	push   $0x0
+80106e0e:	50                   	push   %eax
+80106e0f:	e8 ac d9 ff ff       	call   801047c0 <memset>
+  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
+80106e14:	58                   	pop    %eax
+80106e15:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106e1b:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106e20:	5a                   	pop    %edx
+80106e21:	6a 06                	push   $0x6
+80106e23:	50                   	push   %eax
+80106e24:	31 d2                	xor    %edx,%edx
+80106e26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106e29:	e8 c2 fc ff ff       	call   80106af0 <mappages>
+  memmove(mem, init, sz);
+80106e2e:	89 75 10             	mov    %esi,0x10(%ebp)
+80106e31:	89 7d 0c             	mov    %edi,0xc(%ebp)
+80106e34:	83 c4 10             	add    $0x10,%esp
+80106e37:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+80106e3a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106e3d:	5b                   	pop    %ebx
+80106e3e:	5e                   	pop    %esi
+80106e3f:	5f                   	pop    %edi
+80106e40:	5d                   	pop    %ebp
+  memmove(mem, init, sz);
+80106e41:	e9 2a da ff ff       	jmp    80104870 <memmove>
+    panic("inituvm: more than a page");
+80106e46:	83 ec 0c             	sub    $0xc,%esp
+80106e49:	68 fd 7c 10 80       	push   $0x80107cfd
+80106e4e:	e8 3d 95 ff ff       	call   80100390 <panic>
+80106e53:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106e59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106e60 <loaduvm>:
+{
+80106e60:	55                   	push   %ebp
+80106e61:	89 e5                	mov    %esp,%ebp
+80106e63:	57                   	push   %edi
+80106e64:	56                   	push   %esi
+80106e65:	53                   	push   %ebx
+80106e66:	83 ec 0c             	sub    $0xc,%esp
+  if((uint) addr % PGSIZE != 0)
+80106e69:	f7 45 0c ff 0f 00 00 	testl  $0xfff,0xc(%ebp)
+80106e70:	0f 85 91 00 00 00    	jne    80106f07 <loaduvm+0xa7>
+  for(i = 0; i < sz; i += PGSIZE){
+80106e76:	8b 75 18             	mov    0x18(%ebp),%esi
+80106e79:	31 db                	xor    %ebx,%ebx
+80106e7b:	85 f6                	test   %esi,%esi
+80106e7d:	75 1a                	jne    80106e99 <loaduvm+0x39>
+80106e7f:	eb 6f                	jmp    80106ef0 <loaduvm+0x90>
+80106e81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106e88:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106e8e:	81 ee 00 10 00 00    	sub    $0x1000,%esi
+80106e94:	39 5d 18             	cmp    %ebx,0x18(%ebp)
+80106e97:	76 57                	jbe    80106ef0 <loaduvm+0x90>
+    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
+80106e99:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106e9c:	8b 45 08             	mov    0x8(%ebp),%eax
+80106e9f:	31 c9                	xor    %ecx,%ecx
+80106ea1:	01 da                	add    %ebx,%edx
+80106ea3:	e8 c8 fb ff ff       	call   80106a70 <walkpgdir>
+80106ea8:	85 c0                	test   %eax,%eax
+80106eaa:	74 4e                	je     80106efa <loaduvm+0x9a>
+    pa = PTE_ADDR(*pte);
+80106eac:	8b 00                	mov    (%eax),%eax
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80106eae:	8b 4d 14             	mov    0x14(%ebp),%ecx
+    if(sz - i < PGSIZE)
+80106eb1:	bf 00 10 00 00       	mov    $0x1000,%edi
+    pa = PTE_ADDR(*pte);
+80106eb6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+    if(sz - i < PGSIZE)
+80106ebb:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+80106ec1:	0f 46 fe             	cmovbe %esi,%edi
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80106ec4:	01 d9                	add    %ebx,%ecx
+80106ec6:	05 00 00 00 80       	add    $0x80000000,%eax
+80106ecb:	57                   	push   %edi
+80106ecc:	51                   	push   %ecx
+80106ecd:	50                   	push   %eax
+80106ece:	ff 75 10             	pushl  0x10(%ebp)
+80106ed1:	e8 9a aa ff ff       	call   80101970 <readi>
+80106ed6:	83 c4 10             	add    $0x10,%esp
+80106ed9:	39 f8                	cmp    %edi,%eax
+80106edb:	74 ab                	je     80106e88 <loaduvm+0x28>
+}
+80106edd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+80106ee0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106ee5:	5b                   	pop    %ebx
+80106ee6:	5e                   	pop    %esi
+80106ee7:	5f                   	pop    %edi
+80106ee8:	5d                   	pop    %ebp
+80106ee9:	c3                   	ret    
+80106eea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106ef0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80106ef3:	31 c0                	xor    %eax,%eax
+}
+80106ef5:	5b                   	pop    %ebx
+80106ef6:	5e                   	pop    %esi
+80106ef7:	5f                   	pop    %edi
+80106ef8:	5d                   	pop    %ebp
+80106ef9:	c3                   	ret    
+      panic("loaduvm: address should exist");
+80106efa:	83 ec 0c             	sub    $0xc,%esp
+80106efd:	68 17 7d 10 80       	push   $0x80107d17
+80106f02:	e8 89 94 ff ff       	call   80100390 <panic>
+    panic("loaduvm: addr must be page aligned");
+80106f07:	83 ec 0c             	sub    $0xc,%esp
+80106f0a:	68 b8 7d 10 80       	push   $0x80107db8
+80106f0f:	e8 7c 94 ff ff       	call   80100390 <panic>
+80106f14:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106f1a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80106f20 <allocuvm>:
+{
+80106f20:	55                   	push   %ebp
+80106f21:	89 e5                	mov    %esp,%ebp
+80106f23:	57                   	push   %edi
+80106f24:	56                   	push   %esi
+80106f25:	53                   	push   %ebx
+80106f26:	83 ec 1c             	sub    $0x1c,%esp
+  if(newsz >= KERNBASE)
+80106f29:	8b 7d 10             	mov    0x10(%ebp),%edi
+80106f2c:	85 ff                	test   %edi,%edi
+80106f2e:	0f 88 8e 00 00 00    	js     80106fc2 <allocuvm+0xa2>
+  if(newsz < oldsz)
+80106f34:	3b 7d 0c             	cmp    0xc(%ebp),%edi
+80106f37:	0f 82 93 00 00 00    	jb     80106fd0 <allocuvm+0xb0>
+  a = PGROUNDUP(oldsz);
+80106f3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106f40:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80106f46:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; a < newsz; a += PGSIZE){
+80106f4c:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+80106f4f:	0f 86 7e 00 00 00    	jbe    80106fd3 <allocuvm+0xb3>
+80106f55:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+80106f58:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106f5b:	eb 42                	jmp    80106f9f <allocuvm+0x7f>
+80106f5d:	8d 76 00             	lea    0x0(%esi),%esi
+    memset(mem, 0, PGSIZE);
+80106f60:	83 ec 04             	sub    $0x4,%esp
+80106f63:	68 00 10 00 00       	push   $0x1000
+80106f68:	6a 00                	push   $0x0
+80106f6a:	50                   	push   %eax
+80106f6b:	e8 50 d8 ff ff       	call   801047c0 <memset>
+    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+80106f70:	58                   	pop    %eax
+80106f71:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
+80106f77:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106f7c:	5a                   	pop    %edx
+80106f7d:	6a 06                	push   $0x6
+80106f7f:	50                   	push   %eax
+80106f80:	89 da                	mov    %ebx,%edx
+80106f82:	89 f8                	mov    %edi,%eax
+80106f84:	e8 67 fb ff ff       	call   80106af0 <mappages>
+80106f89:	83 c4 10             	add    $0x10,%esp
+80106f8c:	85 c0                	test   %eax,%eax
+80106f8e:	78 50                	js     80106fe0 <allocuvm+0xc0>
+  for(; a < newsz; a += PGSIZE){
+80106f90:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106f96:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+80106f99:	0f 86 81 00 00 00    	jbe    80107020 <allocuvm+0x100>
+    mem = kalloc();
+80106f9f:	e8 2c b5 ff ff       	call   801024d0 <kalloc>
+    if(mem == 0){
+80106fa4:	85 c0                	test   %eax,%eax
+    mem = kalloc();
+80106fa6:	89 c6                	mov    %eax,%esi
+    if(mem == 0){
+80106fa8:	75 b6                	jne    80106f60 <allocuvm+0x40>
+      cprintf("allocuvm out of memory\n");
+80106faa:	83 ec 0c             	sub    $0xc,%esp
+80106fad:	68 35 7d 10 80       	push   $0x80107d35
+80106fb2:	e8 a9 96 ff ff       	call   80100660 <cprintf>
+  if(newsz >= oldsz)
+80106fb7:	83 c4 10             	add    $0x10,%esp
+80106fba:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106fbd:	39 45 10             	cmp    %eax,0x10(%ebp)
+80106fc0:	77 6e                	ja     80107030 <allocuvm+0x110>
+}
+80106fc2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return 0;
+80106fc5:	31 ff                	xor    %edi,%edi
+}
+80106fc7:	89 f8                	mov    %edi,%eax
+80106fc9:	5b                   	pop    %ebx
+80106fca:	5e                   	pop    %esi
+80106fcb:	5f                   	pop    %edi
+80106fcc:	5d                   	pop    %ebp
+80106fcd:	c3                   	ret    
+80106fce:	66 90                	xchg   %ax,%ax
+    return oldsz;
+80106fd0:	8b 7d 0c             	mov    0xc(%ebp),%edi
+}
+80106fd3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106fd6:	89 f8                	mov    %edi,%eax
+80106fd8:	5b                   	pop    %ebx
+80106fd9:	5e                   	pop    %esi
+80106fda:	5f                   	pop    %edi
+80106fdb:	5d                   	pop    %ebp
+80106fdc:	c3                   	ret    
+80106fdd:	8d 76 00             	lea    0x0(%esi),%esi
+      cprintf("allocuvm out of memory (2)\n");
+80106fe0:	83 ec 0c             	sub    $0xc,%esp
+80106fe3:	68 4d 7d 10 80       	push   $0x80107d4d
+80106fe8:	e8 73 96 ff ff       	call   80100660 <cprintf>
+  if(newsz >= oldsz)
+80106fed:	83 c4 10             	add    $0x10,%esp
+80106ff0:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106ff3:	39 45 10             	cmp    %eax,0x10(%ebp)
+80106ff6:	76 0d                	jbe    80107005 <allocuvm+0xe5>
+80106ff8:	89 c1                	mov    %eax,%ecx
+80106ffa:	8b 55 10             	mov    0x10(%ebp),%edx
+80106ffd:	8b 45 08             	mov    0x8(%ebp),%eax
+80107000:	e8 7b fb ff ff       	call   80106b80 <deallocuvm.part.0>
+      kfree(mem);
+80107005:	83 ec 0c             	sub    $0xc,%esp
+      return 0;
+80107008:	31 ff                	xor    %edi,%edi
+      kfree(mem);
+8010700a:	56                   	push   %esi
+8010700b:	e8 10 b3 ff ff       	call   80102320 <kfree>
+      return 0;
+80107010:	83 c4 10             	add    $0x10,%esp
+}
+80107013:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107016:	89 f8                	mov    %edi,%eax
+80107018:	5b                   	pop    %ebx
+80107019:	5e                   	pop    %esi
+8010701a:	5f                   	pop    %edi
+8010701b:	5d                   	pop    %ebp
+8010701c:	c3                   	ret    
+8010701d:	8d 76 00             	lea    0x0(%esi),%esi
+80107020:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80107023:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107026:	5b                   	pop    %ebx
+80107027:	89 f8                	mov    %edi,%eax
+80107029:	5e                   	pop    %esi
+8010702a:	5f                   	pop    %edi
+8010702b:	5d                   	pop    %ebp
+8010702c:	c3                   	ret    
+8010702d:	8d 76 00             	lea    0x0(%esi),%esi
+80107030:	89 c1                	mov    %eax,%ecx
+80107032:	8b 55 10             	mov    0x10(%ebp),%edx
+80107035:	8b 45 08             	mov    0x8(%ebp),%eax
+      return 0;
+80107038:	31 ff                	xor    %edi,%edi
+8010703a:	e8 41 fb ff ff       	call   80106b80 <deallocuvm.part.0>
+8010703f:	eb 92                	jmp    80106fd3 <allocuvm+0xb3>
+80107041:	eb 0d                	jmp    80107050 <deallocuvm>
+80107043:	90                   	nop
+80107044:	90                   	nop
+80107045:	90                   	nop
+80107046:	90                   	nop
+80107047:	90                   	nop
+80107048:	90                   	nop
+80107049:	90                   	nop
+8010704a:	90                   	nop
+8010704b:	90                   	nop
+8010704c:	90                   	nop
+8010704d:	90                   	nop
+8010704e:	90                   	nop
+8010704f:	90                   	nop
+
+80107050 <deallocuvm>:
+{
+80107050:	55                   	push   %ebp
+80107051:	89 e5                	mov    %esp,%ebp
+80107053:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107056:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80107059:	8b 45 08             	mov    0x8(%ebp),%eax
+  if(newsz >= oldsz)
+8010705c:	39 d1                	cmp    %edx,%ecx
+8010705e:	73 10                	jae    80107070 <deallocuvm+0x20>
+}
+80107060:	5d                   	pop    %ebp
+80107061:	e9 1a fb ff ff       	jmp    80106b80 <deallocuvm.part.0>
+80107066:	8d 76 00             	lea    0x0(%esi),%esi
+80107069:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80107070:	89 d0                	mov    %edx,%eax
+80107072:	5d                   	pop    %ebp
+80107073:	c3                   	ret    
+80107074:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010707a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80107080 <freevm>:
+
+// Free a page table and all the physical memory pages
+// in the user part.
+void
+freevm(pde_t *pgdir)
+{
+80107080:	55                   	push   %ebp
+80107081:	89 e5                	mov    %esp,%ebp
+80107083:	57                   	push   %edi
+80107084:	56                   	push   %esi
+80107085:	53                   	push   %ebx
+80107086:	83 ec 0c             	sub    $0xc,%esp
+80107089:	8b 75 08             	mov    0x8(%ebp),%esi
+  uint i;
+
+  if(pgdir == 0)
+8010708c:	85 f6                	test   %esi,%esi
+8010708e:	74 59                	je     801070e9 <freevm+0x69>
+80107090:	31 c9                	xor    %ecx,%ecx
+80107092:	ba 00 00 00 80       	mov    $0x80000000,%edx
+80107097:	89 f0                	mov    %esi,%eax
+80107099:	e8 e2 fa ff ff       	call   80106b80 <deallocuvm.part.0>
+8010709e:	89 f3                	mov    %esi,%ebx
+801070a0:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+801070a6:	eb 0f                	jmp    801070b7 <freevm+0x37>
+801070a8:	90                   	nop
+801070a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801070b0:	83 c3 04             	add    $0x4,%ebx
+    panic("freevm: no pgdir");
+  deallocuvm(pgdir, KERNBASE, 0);
+  for(i = 0; i < NPDENTRIES; i++){
+801070b3:	39 fb                	cmp    %edi,%ebx
+801070b5:	74 23                	je     801070da <freevm+0x5a>
+    if(pgdir[i] & PTE_P){
+801070b7:	8b 03                	mov    (%ebx),%eax
+801070b9:	a8 01                	test   $0x1,%al
+801070bb:	74 f3                	je     801070b0 <freevm+0x30>
+      char * v = P2V(PTE_ADDR(pgdir[i]));
+801070bd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+      kfree(v);
+801070c2:	83 ec 0c             	sub    $0xc,%esp
+801070c5:	83 c3 04             	add    $0x4,%ebx
+      char * v = P2V(PTE_ADDR(pgdir[i]));
+801070c8:	05 00 00 00 80       	add    $0x80000000,%eax
+      kfree(v);
+801070cd:	50                   	push   %eax
+801070ce:	e8 4d b2 ff ff       	call   80102320 <kfree>
+801070d3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < NPDENTRIES; i++){
+801070d6:	39 fb                	cmp    %edi,%ebx
+801070d8:	75 dd                	jne    801070b7 <freevm+0x37>
+    }
+  }
+  kfree((char*)pgdir);
+801070da:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+801070dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801070e0:	5b                   	pop    %ebx
+801070e1:	5e                   	pop    %esi
+801070e2:	5f                   	pop    %edi
+801070e3:	5d                   	pop    %ebp
+  kfree((char*)pgdir);
+801070e4:	e9 37 b2 ff ff       	jmp    80102320 <kfree>
+    panic("freevm: no pgdir");
+801070e9:	83 ec 0c             	sub    $0xc,%esp
+801070ec:	68 69 7d 10 80       	push   $0x80107d69
+801070f1:	e8 9a 92 ff ff       	call   80100390 <panic>
+801070f6:	8d 76 00             	lea    0x0(%esi),%esi
+801070f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80107100 <setupkvm>:
+{
+80107100:	55                   	push   %ebp
+80107101:	89 e5                	mov    %esp,%ebp
+80107103:	56                   	push   %esi
+80107104:	53                   	push   %ebx
+  if((pgdir = (pde_t*)kalloc()) == 0)
+80107105:	e8 c6 b3 ff ff       	call   801024d0 <kalloc>
+8010710a:	85 c0                	test   %eax,%eax
+8010710c:	89 c6                	mov    %eax,%esi
+8010710e:	74 42                	je     80107152 <setupkvm+0x52>
+  memset(pgdir, 0, PGSIZE);
+80107110:	83 ec 04             	sub    $0x4,%esp
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+80107113:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+  memset(pgdir, 0, PGSIZE);
+80107118:	68 00 10 00 00       	push   $0x1000
+8010711d:	6a 00                	push   $0x0
+8010711f:	50                   	push   %eax
+80107120:	e8 9b d6 ff ff       	call   801047c0 <memset>
+80107125:	83 c4 10             	add    $0x10,%esp
+                (uint)k->phys_start, k->perm) < 0) {
+80107128:	8b 43 04             	mov    0x4(%ebx),%eax
+    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
+8010712b:	8b 4b 08             	mov    0x8(%ebx),%ecx
+8010712e:	83 ec 08             	sub    $0x8,%esp
+80107131:	8b 13                	mov    (%ebx),%edx
+80107133:	ff 73 0c             	pushl  0xc(%ebx)
+80107136:	50                   	push   %eax
+80107137:	29 c1                	sub    %eax,%ecx
+80107139:	89 f0                	mov    %esi,%eax
+8010713b:	e8 b0 f9 ff ff       	call   80106af0 <mappages>
+80107140:	83 c4 10             	add    $0x10,%esp
+80107143:	85 c0                	test   %eax,%eax
+80107145:	78 19                	js     80107160 <setupkvm+0x60>
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+80107147:	83 c3 10             	add    $0x10,%ebx
+8010714a:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
+80107150:	75 d6                	jne    80107128 <setupkvm+0x28>
+}
+80107152:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107155:	89 f0                	mov    %esi,%eax
+80107157:	5b                   	pop    %ebx
+80107158:	5e                   	pop    %esi
+80107159:	5d                   	pop    %ebp
+8010715a:	c3                   	ret    
+8010715b:	90                   	nop
+8010715c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      freevm(pgdir);
+80107160:	83 ec 0c             	sub    $0xc,%esp
+80107163:	56                   	push   %esi
+      return 0;
+80107164:	31 f6                	xor    %esi,%esi
+      freevm(pgdir);
+80107166:	e8 15 ff ff ff       	call   80107080 <freevm>
+      return 0;
+8010716b:	83 c4 10             	add    $0x10,%esp
+}
+8010716e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107171:	89 f0                	mov    %esi,%eax
+80107173:	5b                   	pop    %ebx
+80107174:	5e                   	pop    %esi
+80107175:	5d                   	pop    %ebp
+80107176:	c3                   	ret    
+80107177:	89 f6                	mov    %esi,%esi
+80107179:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80107180 <kvmalloc>:
+{
+80107180:	55                   	push   %ebp
+80107181:	89 e5                	mov    %esp,%ebp
+80107183:	83 ec 08             	sub    $0x8,%esp
+  kpgdir = setupkvm();
+80107186:	e8 75 ff ff ff       	call   80107100 <setupkvm>
+8010718b:	a3 c4 56 11 80       	mov    %eax,0x801156c4
+  lcr3(V2P(kpgdir));   // switch to the kernel page table
+80107190:	05 00 00 00 80       	add    $0x80000000,%eax
+80107195:	0f 22 d8             	mov    %eax,%cr3
+}
+80107198:	c9                   	leave  
+80107199:	c3                   	ret    
+8010719a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801071a0 <clearpteu>:
+
+// Clear PTE_U on a page. Used to create an inaccessible
+// page beneath the user stack.
+void
+clearpteu(pde_t *pgdir, char *uva)
+{
+801071a0:	55                   	push   %ebp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+801071a1:	31 c9                	xor    %ecx,%ecx
+{
+801071a3:	89 e5                	mov    %esp,%ebp
+801071a5:	83 ec 08             	sub    $0x8,%esp
+  pte = walkpgdir(pgdir, uva, 0);
+801071a8:	8b 55 0c             	mov    0xc(%ebp),%edx
+801071ab:	8b 45 08             	mov    0x8(%ebp),%eax
+801071ae:	e8 bd f8 ff ff       	call   80106a70 <walkpgdir>
+  if(pte == 0)
+801071b3:	85 c0                	test   %eax,%eax
+801071b5:	74 05                	je     801071bc <clearpteu+0x1c>
+    panic("clearpteu");
+  *pte &= ~PTE_U;
+801071b7:	83 20 fb             	andl   $0xfffffffb,(%eax)
+}
+801071ba:	c9                   	leave  
+801071bb:	c3                   	ret    
+    panic("clearpteu");
+801071bc:	83 ec 0c             	sub    $0xc,%esp
+801071bf:	68 7a 7d 10 80       	push   $0x80107d7a
+801071c4:	e8 c7 91 ff ff       	call   80100390 <panic>
+801071c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801071d0 <copyuvm>:
+
+// Given a parent process's page table, create a copy
+// of it for a child.
+pde_t*
+copyuvm(pde_t *pgdir, uint sz)
+{
+801071d0:	55                   	push   %ebp
+801071d1:	89 e5                	mov    %esp,%ebp
+801071d3:	57                   	push   %edi
+801071d4:	56                   	push   %esi
+801071d5:	53                   	push   %ebx
+801071d6:	83 ec 1c             	sub    $0x1c,%esp
+  pde_t *d;
+  pte_t *pte;
+  uint pa, i, flags;
+  char *mem;
+
+  if((d = setupkvm()) == 0)
+801071d9:	e8 22 ff ff ff       	call   80107100 <setupkvm>
+801071de:	85 c0                	test   %eax,%eax
+801071e0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801071e3:	0f 84 9f 00 00 00    	je     80107288 <copyuvm+0xb8>
+    return 0;
+  for(i = 0; i < sz; i += PGSIZE){
+801071e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+801071ec:	85 c9                	test   %ecx,%ecx
+801071ee:	0f 84 94 00 00 00    	je     80107288 <copyuvm+0xb8>
+801071f4:	31 ff                	xor    %edi,%edi
+801071f6:	eb 4a                	jmp    80107242 <copyuvm+0x72>
+801071f8:	90                   	nop
+801071f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      panic("copyuvm: page not present");
+    pa = PTE_ADDR(*pte);
+    flags = PTE_FLAGS(*pte);
+    if((mem = kalloc()) == 0)
+      goto bad;
+    memmove(mem, (char*)P2V(pa), PGSIZE);
+80107200:	83 ec 04             	sub    $0x4,%esp
+80107203:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+80107209:	68 00 10 00 00       	push   $0x1000
+8010720e:	53                   	push   %ebx
+8010720f:	50                   	push   %eax
+80107210:	e8 5b d6 ff ff       	call   80104870 <memmove>
+    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
+80107215:	58                   	pop    %eax
+80107216:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
+8010721c:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80107221:	5a                   	pop    %edx
+80107222:	ff 75 e4             	pushl  -0x1c(%ebp)
+80107225:	50                   	push   %eax
+80107226:	89 fa                	mov    %edi,%edx
+80107228:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010722b:	e8 c0 f8 ff ff       	call   80106af0 <mappages>
+80107230:	83 c4 10             	add    $0x10,%esp
+80107233:	85 c0                	test   %eax,%eax
+80107235:	78 61                	js     80107298 <copyuvm+0xc8>
+  for(i = 0; i < sz; i += PGSIZE){
+80107237:	81 c7 00 10 00 00    	add    $0x1000,%edi
+8010723d:	39 7d 0c             	cmp    %edi,0xc(%ebp)
+80107240:	76 46                	jbe    80107288 <copyuvm+0xb8>
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+80107242:	8b 45 08             	mov    0x8(%ebp),%eax
+80107245:	31 c9                	xor    %ecx,%ecx
+80107247:	89 fa                	mov    %edi,%edx
+80107249:	e8 22 f8 ff ff       	call   80106a70 <walkpgdir>
+8010724e:	85 c0                	test   %eax,%eax
+80107250:	74 61                	je     801072b3 <copyuvm+0xe3>
+    if(!(*pte & PTE_P))
+80107252:	8b 00                	mov    (%eax),%eax
+80107254:	a8 01                	test   $0x1,%al
+80107256:	74 4e                	je     801072a6 <copyuvm+0xd6>
+    pa = PTE_ADDR(*pte);
+80107258:	89 c3                	mov    %eax,%ebx
+    flags = PTE_FLAGS(*pte);
+8010725a:	25 ff 0f 00 00       	and    $0xfff,%eax
+    pa = PTE_ADDR(*pte);
+8010725f:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+    flags = PTE_FLAGS(*pte);
+80107265:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if((mem = kalloc()) == 0)
+80107268:	e8 63 b2 ff ff       	call   801024d0 <kalloc>
+8010726d:	85 c0                	test   %eax,%eax
+8010726f:	89 c6                	mov    %eax,%esi
+80107271:	75 8d                	jne    80107200 <copyuvm+0x30>
+    }
+  }
+  return d;
+
+bad:
+  freevm(d);
+80107273:	83 ec 0c             	sub    $0xc,%esp
+80107276:	ff 75 e0             	pushl  -0x20(%ebp)
+80107279:	e8 02 fe ff ff       	call   80107080 <freevm>
+  return 0;
+8010727e:	83 c4 10             	add    $0x10,%esp
+80107281:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+}
+80107288:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010728b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010728e:	5b                   	pop    %ebx
+8010728f:	5e                   	pop    %esi
+80107290:	5f                   	pop    %edi
+80107291:	5d                   	pop    %ebp
+80107292:	c3                   	ret    
+80107293:	90                   	nop
+80107294:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      kfree(mem);
+80107298:	83 ec 0c             	sub    $0xc,%esp
+8010729b:	56                   	push   %esi
+8010729c:	e8 7f b0 ff ff       	call   80102320 <kfree>
+      goto bad;
+801072a1:	83 c4 10             	add    $0x10,%esp
+801072a4:	eb cd                	jmp    80107273 <copyuvm+0xa3>
+      panic("copyuvm: page not present");
+801072a6:	83 ec 0c             	sub    $0xc,%esp
+801072a9:	68 9e 7d 10 80       	push   $0x80107d9e
+801072ae:	e8 dd 90 ff ff       	call   80100390 <panic>
+      panic("copyuvm: pte should exist");
+801072b3:	83 ec 0c             	sub    $0xc,%esp
+801072b6:	68 84 7d 10 80       	push   $0x80107d84
+801072bb:	e8 d0 90 ff ff       	call   80100390 <panic>
+
+801072c0 <uva2ka>:
+
+//PAGEBREAK!
+// Map user virtual address to kernel address.
+char*
+uva2ka(pde_t *pgdir, char *uva)
+{
+801072c0:	55                   	push   %ebp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+801072c1:	31 c9                	xor    %ecx,%ecx
+{
+801072c3:	89 e5                	mov    %esp,%ebp
+801072c5:	83 ec 08             	sub    $0x8,%esp
+  pte = walkpgdir(pgdir, uva, 0);
+801072c8:	8b 55 0c             	mov    0xc(%ebp),%edx
+801072cb:	8b 45 08             	mov    0x8(%ebp),%eax
+801072ce:	e8 9d f7 ff ff       	call   80106a70 <walkpgdir>
+  if((*pte & PTE_P) == 0)
+801072d3:	8b 00                	mov    (%eax),%eax
+    return 0;
+  if((*pte & PTE_U) == 0)
+    return 0;
+  return (char*)P2V(PTE_ADDR(*pte));
+}
+801072d5:	c9                   	leave  
+  if((*pte & PTE_U) == 0)
+801072d6:	89 c2                	mov    %eax,%edx
+  return (char*)P2V(PTE_ADDR(*pte));
+801072d8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  if((*pte & PTE_U) == 0)
+801072dd:	83 e2 05             	and    $0x5,%edx
+  return (char*)P2V(PTE_ADDR(*pte));
+801072e0:	05 00 00 00 80       	add    $0x80000000,%eax
+801072e5:	83 fa 05             	cmp    $0x5,%edx
+801072e8:	ba 00 00 00 00       	mov    $0x0,%edx
+801072ed:	0f 45 c2             	cmovne %edx,%eax
+}
+801072f0:	c3                   	ret    
+801072f1:	eb 0d                	jmp    80107300 <copyout>
+801072f3:	90                   	nop
+801072f4:	90                   	nop
+801072f5:	90                   	nop
+801072f6:	90                   	nop
+801072f7:	90                   	nop
+801072f8:	90                   	nop
+801072f9:	90                   	nop
+801072fa:	90                   	nop
+801072fb:	90                   	nop
+801072fc:	90                   	nop
+801072fd:	90                   	nop
+801072fe:	90                   	nop
+801072ff:	90                   	nop
+
+80107300 <copyout>:
+// Copy len bytes from p to user address va in page table pgdir.
+// Most useful when pgdir is not the current page table.
+// uva2ka ensures this only works for PTE_U pages.
+int
+copyout(pde_t *pgdir, uint va, void *p, uint len)
+{
+80107300:	55                   	push   %ebp
+80107301:	89 e5                	mov    %esp,%ebp
+80107303:	57                   	push   %edi
+80107304:	56                   	push   %esi
+80107305:	53                   	push   %ebx
+80107306:	83 ec 1c             	sub    $0x1c,%esp
+80107309:	8b 5d 14             	mov    0x14(%ebp),%ebx
+8010730c:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010730f:	8b 7d 10             	mov    0x10(%ebp),%edi
+  char *buf, *pa0;
+  uint n, va0;
+
+  buf = (char*)p;
+  while(len > 0){
+80107312:	85 db                	test   %ebx,%ebx
+80107314:	75 40                	jne    80107356 <copyout+0x56>
+80107316:	eb 70                	jmp    80107388 <copyout+0x88>
+80107318:	90                   	nop
+80107319:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    va0 = (uint)PGROUNDDOWN(va);
+    pa0 = uva2ka(pgdir, (char*)va0);
+    if(pa0 == 0)
+      return -1;
+    n = PGSIZE - (va - va0);
+80107320:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80107323:	89 f1                	mov    %esi,%ecx
+80107325:	29 d1                	sub    %edx,%ecx
+80107327:	81 c1 00 10 00 00    	add    $0x1000,%ecx
+8010732d:	39 d9                	cmp    %ebx,%ecx
+8010732f:	0f 47 cb             	cmova  %ebx,%ecx
+    if(n > len)
+      n = len;
+    memmove(pa0 + (va - va0), buf, n);
+80107332:	29 f2                	sub    %esi,%edx
+80107334:	83 ec 04             	sub    $0x4,%esp
+80107337:	01 d0                	add    %edx,%eax
+80107339:	51                   	push   %ecx
+8010733a:	57                   	push   %edi
+8010733b:	50                   	push   %eax
+8010733c:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+8010733f:	e8 2c d5 ff ff       	call   80104870 <memmove>
+    len -= n;
+    buf += n;
+80107344:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+  while(len > 0){
+80107347:	83 c4 10             	add    $0x10,%esp
+    va = va0 + PGSIZE;
+8010734a:	8d 96 00 10 00 00    	lea    0x1000(%esi),%edx
+    buf += n;
+80107350:	01 cf                	add    %ecx,%edi
+  while(len > 0){
+80107352:	29 cb                	sub    %ecx,%ebx
+80107354:	74 32                	je     80107388 <copyout+0x88>
+    va0 = (uint)PGROUNDDOWN(va);
+80107356:	89 d6                	mov    %edx,%esi
+    pa0 = uva2ka(pgdir, (char*)va0);
+80107358:	83 ec 08             	sub    $0x8,%esp
+    va0 = (uint)PGROUNDDOWN(va);
+8010735b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+8010735e:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+    pa0 = uva2ka(pgdir, (char*)va0);
+80107364:	56                   	push   %esi
+80107365:	ff 75 08             	pushl  0x8(%ebp)
+80107368:	e8 53 ff ff ff       	call   801072c0 <uva2ka>
+    if(pa0 == 0)
+8010736d:	83 c4 10             	add    $0x10,%esp
+80107370:	85 c0                	test   %eax,%eax
+80107372:	75 ac                	jne    80107320 <copyout+0x20>
+  }
+  return 0;
+}
+80107374:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+80107377:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010737c:	5b                   	pop    %ebx
+8010737d:	5e                   	pop    %esi
+8010737e:	5f                   	pop    %edi
+8010737f:	5d                   	pop    %ebp
+80107380:	c3                   	ret    
+80107381:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107388:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+8010738b:	31 c0                	xor    %eax,%eax
+}
+8010738d:	5b                   	pop    %ebx
+8010738e:	5e                   	pop    %esi
+8010738f:	5f                   	pop    %edi
+80107390:	5d                   	pop    %ebp
+80107391:	c3                   	ret    
diff -ruN src-old/kernel.sym src/kernel.sym
--- src-old/kernel.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/kernel.sym	2023-04-19 02:18:55.420105350 +0000
@@ -0,0 +1,530 @@
+80100000 .text
+801073a0 .rodata
+80107ddc .stab
+80107ddd .stabstr
+80108000 .data
+8010a520 .bss
+00000000 .debug_line
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_aranges
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 .comment
+00000000 bio.c
+00000000 console.c
+8010a520 cons
+8010a558 panicked
+80100410 consputc
+80100580 printint
+80107410 digits.1555
+00000000 exec.c
+00000000 file.c
+00000000 fs.c
+80101110 balloc
+80101220 iget
+801012f0 bmap
+80101410 bfree
+80101c70 namex
+00000000 ide.c
+80101f30 idestart
+8010a580 idelock
+8010a560 havedisk1
+8010a564 idequeue
+00000000 ioapic.c
+00000000 kalloc.c
+00000000 kmalloc.c
+8010a5b4 freep
+8010a5b8 base
+00000000 mmap.c
+00000000 kbd.c
+8010a5c0 shift.1385
+80107780 shiftcode
+80107680 togglecode
+80107660 charcode.1386
+80108200 normalmap
+80108100 shiftmap
+80108000 ctlmap
+00000000 lapic.c
+00000000 log.c
+80102d10 install_trans
+80102db0 write_head
+00000000 main.c
+80103150 mpmain
+80103190 mpenter
+00000000 mp.c
+801032d0 mpsearch1
+00000000 picirq.c
+00000000 pipe.c
+00000000 proc.c
+80103910 allocproc
+8010a000 first.1602
+8010a5c4 initproc
+80107a40 states.1628
+00000000 sleeplock.c
+00000000 spinlock.c
+00000000 string.c
+00000000 syscall.c
+80107ac0 syscalls
+00000000 sysfile.c
+80104c10 create
+80104db0 argfd.constprop.0
+00000000 sysproc.c
+00000000 trap.c
+00000000 uart.c
+80105e70 uartgetc
+8010a5c8 uart
+80105ea0 uartputc.part.0
+00000000 vm.c
+80106a70 walkpgdir
+80106af0 mappages
+80106b80 deallocuvm.part.0
+8010a420 kmap
+80100270 consoleread
+801069bf vector242
+80106416 vector119
+8010000c entry
+801062f6 vector87
+801062ed vector86
+801049a0 safestrcpy
+80104f50 sys_close
+80106a2b vector251
+801059a0 sys_kmalloc
+8010631a vector91
+80106110 vector33
+801065ff vector162
+80104080 yield
+801126a0 log
+80112660 kmem
+80106863 vector213
+801063b3 vector108
+80105ef0 uartinit
+8010616a vector43
+80102a60 lapiceoi
+80106623 vector165
+80106713 vector185
+80102230 ioapicinit
+801063f2 vector115
+80100f60 fileread
+80106431 vector122
+80105870 sys_sbrk
+80112780 ioapicid
+801065b7 vector156
+801069e3 vector245
+80112654 ioapic
+80106743 vector189
+80106034 vector7
+8010620c vector61
+801060bf vector24
+801063ce vector111
+801067c7 vector200
+80106242 vector67
+801064df vector138
+80106281 vector74
+80103e90 sched
+80104870 memmove
+801061e8 vector57
+80104bb0 syscall
+8010686f vector214
+80106362 vector99
+80102790 munmap
+80103ad0 cpuid
+80101a70 writei
+80106503 vector141
+801057f0 sys_fork
+8010b5e0 bcache
+80106677 vector172
+801069b3 vector241
+80104590 getcallerpcs
+80105480 sys_mkdir
+80106a43 vector253
+80106010 vector3
+80106007 vector2
+80101ba0 namecmp
+8010690b vector227
+8010683f vector210
+80104b70 argstr
+801068e7 vector224
+80106158 vector41
+80100660 cprintf
+80100df0 filedup
+80101ef0 namei
+801060a4 vector21
+80100040 binit
+801066b3 vector177
+8010640d vector118
+8010625d vector70
+80106254 vector69
+80106983 vector237
+80106227 vector64
+801060da vector27
+80106497 vector132
+8010671f vector186
+80104e70 sys_read
+80106893 vector217
+80104a10 fetchint
+80107100 setupkvm
+801048d0 memcpy
+80107080 freevm
+80105ffe vector1
+801066bf vector178
+8010613d vector38
+80102320 kfree
+8010698f vector238
+80103a50 mycpu
+801017c0 iput
+801064a3 vector133
+80106278 vector73
+80106527 vector144
+80106a4f vector254
+801013d0 readsb
+8010a004 nextpid
+80106374 vector101
+8010684b vector211
+80103350 mpinit
+8010668f vector174
+801069cb vector243
+80100d60 fileinit
+80104570 initlock
+80106467 vector128
+80107300 copyout
+801062c0 vector81
+801040d0 sleep
+80102a80 microdelay
+80106062 vector13
+80105ad0 sys_munmap
+801061b2 vector51
+80106079 vector16
+8010ff40 input
+801069a7 vector240
+801061cd vector54
+80106092 vector19
+80106323 vector92
+801069d7 vector244
+80101940 stati
+801064f7 vector140
+80105820 sys_kill
+8010617c vector45
+801062ae vector79
+80103660 pipeclose
+80106923 vector229
+801065cf vector158
+80104fa0 sys_fstat
+80100600 consolewrite
+80106146 vector39
+80106647 vector168
+80102540 kmfree
+80102f20 end_op
+80106122 vector35
+801063e0 vector113
+801023b0 freerange
+80105a20 sys_mmap
+8010644c vector125
+80106f20 allocuvm
+80105b2f trapret
+80106887 vector216
+8010621e vector63
+801060d1 vector26
+80106773 vector193
+80102940 lapicinit
+80106797 vector196
+80106833 vector209
+801026b0 mmap
+80106019 vector4
+8010665f vector170
+8010a5d0 stack
+801064c7 vector136
+8010604d vector10
+8010680f vector206
+80101770 iunlock
+801058c0 sys_sleep
+80106a5b vector255
+801066e3 vector181
+801061fa vector59
+801062e4 vector85
+801062db vector84
+801066fb vector183
+801065db vector159
+80106857 vector212
+80104ff0 sys_link
+8010618e vector47
+80106917 vector228
+80106161 vector42
+801063e9 vector114
+801072c0 uva2ka
+8010669b vector175
+8010651b vector143
+80100d80 filealloc
+80104290 wakeup
+8010647f vector130
+801069ef vector246
+80106044 vector9
+8010650f vector142
+8010636b vector100
+801067d3 vector201
+801071a0 clearpteu
+80103af0 myproc
+80105b40 tvinit
+80106203 vector60
+801060b6 vector23
+80101660 idup
+80106977 vector236
+80102920 kbdintr
+80105320 sys_open
+8010693b vector231
+80106239 vector66
+801060ec vector29
+80101970 readi
+801064bb vector135
+80100810 consoleintr
+801042f0 kill
+8010629c vector77
+80101520 ialloc
+801066d7 vector180
+801156c4 kpgdir
+80106827 vector208
+80102b20 cmostime
+80105fe0 uartintr
+80106359 vector98
+80106350 vector97
+801066a7 vector176
+8010677f vector194
+80106107 vector32
+801156c8 end
+801067bb vector199
+8010648b vector131
+80106a37 vector252
+80100ff0 filewrite
+80105ff5 vector0
+80104ac0 argint
+80100a10 exec
+80106533 vector145
+80104ee0 sys_write
+80104770 release
+80104a50 fetchstr
+801063aa vector107
+8010614f vector40
+80104190 wait
+8010637d vector102
+80109000 entrypgdir
+0010000c _start
+801061df vector56
+8010624b vector68
+8010602b vector6
+8010a48c _binary_initcode_end
+80100000 multiboot_header
+80106473 vector129
+80103df0 scheduler
+80101bc0 dirlookup
+801067a3 vector197
+80100e40 fileclose
+80102eb0 begin_op
+80106587 vector152
+80107180 kvmalloc
+8010692f vector230
+801048e0 strncmp
+80106134 vector37
+80106803 vector205
+801065f3 vector161
+80114e80 tickslock
+80103700 pipewrite
+80104940 strncpy
+80106266 vector71
+801071d0 copyuvm
+8010ffe0 ftable
+801065e7 vector160
+80104b10 argptr
+8010687b vector215
+801065c3 vector157
+80104e00 sys_dup
+801063d7 vector112
+80100390 panic
+801039e0 forkret
+801066ef vector182
+8010605b vector12
+80104810 memcmp
+80102840 kbdgetc
+801063bc vector109
+8010609b vector20
+80103c90 fork
+801059e0 sys_kmfree
+801061c4 vector53
+80106089 vector18
+0000008a _binary_entryother_size
+801127a0 cpus
+801044e0 releasesleep
+8010633e vector95
+80104680 holding
+801109e0 sb
+801046b0 acquire
+801068ff vector226
+80101f10 nameiparent
+801061a0 vector49
+80106173 vector44
+8011269c lapic
+801062a5 vector78
+80105b17 alltraps
+80106683 vector173
+80106404 vector117
+801062c9 vector82
+801068cf vector222
+8010603d vector8
+80106563 vector149
+801015e0 iupdate
+80108000 data
+801047c0 memset
+80106947 vector232
+801031b0 main
+80106cb0 switchkvm
+801063a1 vector106
+801068b7 vector220
+80106311 vector90
+8010660b vector163
+8010695f vector234
+80103080 log_write
+80104480 acquiresleep
+80105140 sys_unlink
+80106215 vector62
+801060c8 vector25
+801067af vector198
+8010641f vector120
+8010a48c _binary_entryother_start
+80102400 kinit1
+801061a9 vector50
+80106070 vector15
+8010657b vector151
+801062d2 vector83
+80106308 vector89
+801062ff vector88
+80105bf0 trap
+80105970 sys_uptime
+801066cb vector179
+80106119 vector34
+80106185 vector46
+801064af vector134
+801068db vector223
+80114ec0 idt
+8010689f vector218
+80103a30 pinit
+80107050 deallocuvm
+801068f3 vector225
+80102a40 lapicid
+8010672b vector187
+80103c10 growproc
+80104520 holdingsleep
+80112d20 ncpu
+801060f5 vector30
+80103b20 userinit
+801000d0 bread
+8010645e vector127
+80103810 piperead
+801156c0 ticks
+80106767 vector192
+8010662f vector166
+801009c0 consoleinit
+80106293 vector76
+8010628a vector75
+80102090 ideintr
+8010678b vector195
+8010656f vector150
+801061f1 vector58
+80106a07 vector248
+8010643a vector123
+80106347 vector96
+801060fe vector31
+801067eb vector203
+801064eb vector139
+80106593 vector153
+80106617 vector164
+80104370 procdump
+80106428 vector121
+80105fb0 uartputc
+80106022 vector5
+8010663b vector167
+801065ab vector155
+80106a13 vector249
+801001e0 brelse
+80106a1f vector250
+80106443 vector124
+801063c5 vector110
+801067f7 vector204
+80101690 ilock
+80105620 sys_exec
+801064d3 vector137
+8010a460 _binary_initcode_start
+801049fb swtch
+801069fb vector247
+801060ad vector22
+801067df vector202
+80106c20 seginit
+80101920 iunlockput
+8010626f vector72
+801061d6 vector55
+80106455 vector126
+80106230 vector65
+801060e3 vector28
+8010a516 _binary_entryother_end
+80106653 vector169
+801001a0 bwrite
+80106953 vector233
+801025d0 kmalloc
+80105bc0 idtinit
+80103f50 exit
+80105810 sys_wait
+80105800 sys_exit
+80101e30 dirlink
+0000002c _binary_initcode_size
+8010654b vector147
+80104440 initsleeplock
+80102010 ideinit
+80106e60 loaduvm
+8010638f vector104
+801063fb vector116
+80112d40 ptable
+801022e0 ioapicenable
+80104620 popcli
+8010a008 vectors
+801061bb vector52
+80106082 vector17
+80106707 vector184
+801049e0 strlen
+80105710 sys_pipe
+80101490 iinit
+80103530 picinit
+8010681b vector207
+80106de0 inituvm
+8010674f vector190
+8010699b vector239
+80106335 vector94
+8010632c vector93
+80102e10 initlog
+80106737 vector188
+80106197 vector48
+80102130 iderw
+801068ab vector219
+80106557 vector148
+801068c3 vector221
+801024d0 kalloc
+80110980 devsw
+80105860 sys_getpid
+801062b7 vector80
+8010666b vector171
+8010659f vector154
+8010612b vector36
+80103550 pipealloc
+8010696b vector235
+80106398 vector105
+80105570 sys_chdir
+80110a00 icache
+8010653f vector146
+8010675b vector191
+80106386 vector103
+801054e0 sys_mknod
+80102a90 lapicstartap
+80106cd0 switchuvm
+801045e0 pushcli
+80102470 kinit2
+80106054 vector11
+80106069 vector14
+80100f10 filestat
Binary files src-old/_kill and src/_kill differ
diff -ruN src-old/kill.asm src/kill.asm
--- src-old/kill.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/kill.asm	2023-04-19 02:18:56.044179297 +0000
@@ -0,0 +1,1190 @@
+
+_kill:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char **argv)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	56                   	push   %esi
+   e:	53                   	push   %ebx
+   f:	51                   	push   %ecx
+  10:	83 ec 0c             	sub    $0xc,%esp
+  13:	8b 01                	mov    (%ecx),%eax
+  15:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  if(argc < 2){
+  18:	83 f8 01             	cmp    $0x1,%eax
+  1b:	7e 2c                	jle    49 <main+0x49>
+  1d:	8d 5a 04             	lea    0x4(%edx),%ebx
+  20:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  23:	90                   	nop
+  24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    printf(2, "usage: kill pid...\n");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    kill(atoi(argv[i]));
+  28:	83 ec 0c             	sub    $0xc,%esp
+  2b:	ff 33                	pushl  (%ebx)
+  2d:	83 c3 04             	add    $0x4,%ebx
+  30:	e8 0b 02 00 00       	call   240 <atoi>
+  35:	89 04 24             	mov    %eax,(%esp)
+  38:	e8 a5 02 00 00       	call   2e2 <kill>
+  for(i=1; i<argc; i++)
+  3d:	83 c4 10             	add    $0x10,%esp
+  40:	39 f3                	cmp    %esi,%ebx
+  42:	75 e4                	jne    28 <main+0x28>
+  exit();
+  44:	e8 69 02 00 00       	call   2b2 <exit>
+    printf(2, "usage: kill pid...\n");
+  49:	50                   	push   %eax
+  4a:	50                   	push   %eax
+  4b:	68 78 07 00 00       	push   $0x778
+  50:	6a 02                	push   $0x2
+  52:	e8 c9 03 00 00       	call   420 <printf>
+    exit();
+  57:	e8 56 02 00 00       	call   2b2 <exit>
+  5c:	66 90                	xchg   %ax,%ax
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 45 08             	mov    0x8(%ebp),%eax
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  6a:	89 c2                	mov    %eax,%edx
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  70:	83 c1 01             	add    $0x1,%ecx
+  73:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  77:	83 c2 01             	add    $0x1,%edx
+  7a:	84 db                	test   %bl,%bl
+  7c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  7f:	75 ef                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  81:	5b                   	pop    %ebx
+  82:	5d                   	pop    %ebp
+  83:	c3                   	ret    
+  84:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  8a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	53                   	push   %ebx
+  94:	8b 55 08             	mov    0x8(%ebp),%edx
+  97:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  9a:	0f b6 02             	movzbl (%edx),%eax
+  9d:	0f b6 19             	movzbl (%ecx),%ebx
+  a0:	84 c0                	test   %al,%al
+  a2:	75 1c                	jne    c0 <strcmp+0x30>
+  a4:	eb 2a                	jmp    d0 <strcmp+0x40>
+  a6:	8d 76 00             	lea    0x0(%esi),%esi
+  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  b0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  b3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  b6:	83 c1 01             	add    $0x1,%ecx
+  b9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  bc:	84 c0                	test   %al,%al
+  be:	74 10                	je     d0 <strcmp+0x40>
+  c0:	38 d8                	cmp    %bl,%al
+  c2:	74 ec                	je     b0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  c4:	29 d8                	sub    %ebx,%eax
+}
+  c6:	5b                   	pop    %ebx
+  c7:	5d                   	pop    %ebp
+  c8:	c3                   	ret    
+  c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  d0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  d2:	29 d8                	sub    %ebx,%eax
+}
+  d4:	5b                   	pop    %ebx
+  d5:	5d                   	pop    %ebp
+  d6:	c3                   	ret    
+  d7:	89 f6                	mov    %esi,%esi
+  d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000000e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  e6:	80 39 00             	cmpb   $0x0,(%ecx)
+  e9:	74 15                	je     100 <strlen+0x20>
+  eb:	31 d2                	xor    %edx,%edx
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  f0:	83 c2 01             	add    $0x1,%edx
+  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  f7:	89 d0                	mov    %edx,%eax
+  f9:	75 f5                	jne    f0 <strlen+0x10>
+    ;
+  return n;
+}
+  fb:	5d                   	pop    %ebp
+  fc:	c3                   	ret    
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 100:	31 c0                	xor    %eax,%eax
+}
+ 102:	5d                   	pop    %ebp
+ 103:	c3                   	ret    
+ 104:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 10a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000110 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 117:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 11a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 11d:	89 d7                	mov    %edx,%edi
+ 11f:	fc                   	cld    
+ 120:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 122:	89 d0                	mov    %edx,%eax
+ 124:	5f                   	pop    %edi
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	89 f6                	mov    %esi,%esi
+ 129:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000130 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	53                   	push   %ebx
+ 134:	8b 45 08             	mov    0x8(%ebp),%eax
+ 137:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 13a:	0f b6 10             	movzbl (%eax),%edx
+ 13d:	84 d2                	test   %dl,%dl
+ 13f:	74 1d                	je     15e <strchr+0x2e>
+    if(*s == c)
+ 141:	38 d3                	cmp    %dl,%bl
+ 143:	89 d9                	mov    %ebx,%ecx
+ 145:	75 0d                	jne    154 <strchr+0x24>
+ 147:	eb 17                	jmp    160 <strchr+0x30>
+ 149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 150:	38 ca                	cmp    %cl,%dl
+ 152:	74 0c                	je     160 <strchr+0x30>
+  for(; *s; s++)
+ 154:	83 c0 01             	add    $0x1,%eax
+ 157:	0f b6 10             	movzbl (%eax),%edx
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 15e:	31 c0                	xor    %eax,%eax
+}
+ 160:	5b                   	pop    %ebx
+ 161:	5d                   	pop    %ebp
+ 162:	c3                   	ret    
+ 163:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000170 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	57                   	push   %edi
+ 174:	56                   	push   %esi
+ 175:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 176:	31 f6                	xor    %esi,%esi
+ 178:	89 f3                	mov    %esi,%ebx
+{
+ 17a:	83 ec 1c             	sub    $0x1c,%esp
+ 17d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 180:	eb 2f                	jmp    1b1 <gets+0x41>
+ 182:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 188:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 18b:	83 ec 04             	sub    $0x4,%esp
+ 18e:	6a 01                	push   $0x1
+ 190:	50                   	push   %eax
+ 191:	6a 00                	push   $0x0
+ 193:	e8 32 01 00 00       	call   2ca <read>
+    if(cc < 1)
+ 198:	83 c4 10             	add    $0x10,%esp
+ 19b:	85 c0                	test   %eax,%eax
+ 19d:	7e 1c                	jle    1bb <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 19f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1a3:	83 c7 01             	add    $0x1,%edi
+ 1a6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1a9:	3c 0a                	cmp    $0xa,%al
+ 1ab:	74 23                	je     1d0 <gets+0x60>
+ 1ad:	3c 0d                	cmp    $0xd,%al
+ 1af:	74 1f                	je     1d0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1b1:	83 c3 01             	add    $0x1,%ebx
+ 1b4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1b7:	89 fe                	mov    %edi,%esi
+ 1b9:	7c cd                	jl     188 <gets+0x18>
+ 1bb:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1c0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1c6:	5b                   	pop    %ebx
+ 1c7:	5e                   	pop    %esi
+ 1c8:	5f                   	pop    %edi
+ 1c9:	5d                   	pop    %ebp
+ 1ca:	c3                   	ret    
+ 1cb:	90                   	nop
+ 1cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1d0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1d3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d6:	01 de                	add    %ebx,%esi
+ 1d8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1da:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e0:	5b                   	pop    %ebx
+ 1e1:	5e                   	pop    %esi
+ 1e2:	5f                   	pop    %edi
+ 1e3:	5d                   	pop    %ebp
+ 1e4:	c3                   	ret    
+ 1e5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	56                   	push   %esi
+ 1f4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f5:	83 ec 08             	sub    $0x8,%esp
+ 1f8:	6a 00                	push   $0x0
+ 1fa:	ff 75 08             	pushl  0x8(%ebp)
+ 1fd:	e8 f0 00 00 00       	call   2f2 <open>
+  if(fd < 0)
+ 202:	83 c4 10             	add    $0x10,%esp
+ 205:	85 c0                	test   %eax,%eax
+ 207:	78 27                	js     230 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	ff 75 0c             	pushl  0xc(%ebp)
+ 20f:	89 c3                	mov    %eax,%ebx
+ 211:	50                   	push   %eax
+ 212:	e8 f3 00 00 00       	call   30a <fstat>
+  close(fd);
+ 217:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 21a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 21c:	e8 b9 00 00 00       	call   2da <close>
+  return r;
+ 221:	83 c4 10             	add    $0x10,%esp
+}
+ 224:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 227:	89 f0                	mov    %esi,%eax
+ 229:	5b                   	pop    %ebx
+ 22a:	5e                   	pop    %esi
+ 22b:	5d                   	pop    %ebp
+ 22c:	c3                   	ret    
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 230:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 235:	eb ed                	jmp    224 <stat+0x34>
+ 237:	89 f6                	mov    %esi,%esi
+ 239:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000240 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	53                   	push   %ebx
+ 244:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 247:	0f be 11             	movsbl (%ecx),%edx
+ 24a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 24d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 24f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 254:	77 1f                	ja     275 <atoi+0x35>
+ 256:	8d 76 00             	lea    0x0(%esi),%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 260:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 263:	83 c1 01             	add    $0x1,%ecx
+ 266:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 26a:	0f be 11             	movsbl (%ecx),%edx
+ 26d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 270:	80 fb 09             	cmp    $0x9,%bl
+ 273:	76 eb                	jbe    260 <atoi+0x20>
+  return n;
+}
+ 275:	5b                   	pop    %ebx
+ 276:	5d                   	pop    %ebp
+ 277:	c3                   	ret    
+ 278:	90                   	nop
+ 279:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000280 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	56                   	push   %esi
+ 284:	53                   	push   %ebx
+ 285:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 288:	8b 45 08             	mov    0x8(%ebp),%eax
+ 28b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 28e:	85 db                	test   %ebx,%ebx
+ 290:	7e 14                	jle    2a6 <memmove+0x26>
+ 292:	31 d2                	xor    %edx,%edx
+ 294:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 298:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 29c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 29f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 2a2:	39 d3                	cmp    %edx,%ebx
+ 2a4:	75 f2                	jne    298 <memmove+0x18>
+  return vdst;
+}
+ 2a6:	5b                   	pop    %ebx
+ 2a7:	5e                   	pop    %esi
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+
+000002aa <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2aa:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <exit>:
+SYSCALL(exit)
+ 2b2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <wait>:
+SYSCALL(wait)
+ 2ba:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <pipe>:
+SYSCALL(pipe)
+ 2c2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <read>:
+SYSCALL(read)
+ 2ca:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <write>:
+SYSCALL(write)
+ 2d2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <close>:
+SYSCALL(close)
+ 2da:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <kill>:
+SYSCALL(kill)
+ 2e2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <exec>:
+SYSCALL(exec)
+ 2ea:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <open>:
+SYSCALL(open)
+ 2f2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <mknod>:
+SYSCALL(mknod)
+ 2fa:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <unlink>:
+SYSCALL(unlink)
+ 302:	b8 12 00 00 00       	mov    $0x12,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <fstat>:
+SYSCALL(fstat)
+ 30a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <link>:
+SYSCALL(link)
+ 312:	b8 13 00 00 00       	mov    $0x13,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <mkdir>:
+SYSCALL(mkdir)
+ 31a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <chdir>:
+SYSCALL(chdir)
+ 322:	b8 09 00 00 00       	mov    $0x9,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <dup>:
+SYSCALL(dup)
+ 32a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <getpid>:
+SYSCALL(getpid)
+ 332:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <sbrk>:
+SYSCALL(sbrk)
+ 33a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <sleep>:
+SYSCALL(sleep)
+ 342:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <uptime>:
+SYSCALL(uptime)
+ 34a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <kmalloc>:
+SYSCALL(kmalloc)
+ 352:	b8 16 00 00 00       	mov    $0x16,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <kmfree>:
+SYSCALL(kmfree) 
+ 35a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <mmap>:
+SYSCALL(mmap)
+ 362:	b8 18 00 00 00       	mov    $0x18,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <munmap>:
+ 36a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+ 372:	66 90                	xchg   %ax,%ax
+ 374:	66 90                	xchg   %ax,%ax
+ 376:	66 90                	xchg   %ax,%ax
+ 378:	66 90                	xchg   %ax,%ax
+ 37a:	66 90                	xchg   %ax,%ax
+ 37c:	66 90                	xchg   %ax,%ax
+ 37e:	66 90                	xchg   %ax,%ax
+
+00000380 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 389:	85 d2                	test   %edx,%edx
+{
+ 38b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 38e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 390:	79 76                	jns    408 <printint+0x88>
+ 392:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 396:	74 70                	je     408 <printint+0x88>
+    x = -xx;
+ 398:	f7 d8                	neg    %eax
+    neg = 1;
+ 39a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3a1:	31 f6                	xor    %esi,%esi
+ 3a3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3a6:	eb 0a                	jmp    3b2 <printint+0x32>
+ 3a8:	90                   	nop
+ 3a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3b0:	89 fe                	mov    %edi,%esi
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3b7:	f7 f1                	div    %ecx
+ 3b9:	0f b6 92 94 07 00 00 	movzbl 0x794(%edx),%edx
+  }while((x /= base) != 0);
+ 3c0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 3c2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 3c5:	75 e9                	jne    3b0 <printint+0x30>
+  if(neg)
+ 3c7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ca:	85 c0                	test   %eax,%eax
+ 3cc:	74 08                	je     3d6 <printint+0x56>
+    buf[i++] = '-';
+ 3ce:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3d3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3d6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3da:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3e0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 3e3:	83 ec 04             	sub    $0x4,%esp
+ 3e6:	83 ee 01             	sub    $0x1,%esi
+ 3e9:	6a 01                	push   $0x1
+ 3eb:	53                   	push   %ebx
+ 3ec:	57                   	push   %edi
+ 3ed:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3f0:	e8 dd fe ff ff       	call   2d2 <write>
+
+  while(--i >= 0)
+ 3f5:	83 c4 10             	add    $0x10,%esp
+ 3f8:	39 de                	cmp    %ebx,%esi
+ 3fa:	75 e4                	jne    3e0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ff:	5b                   	pop    %ebx
+ 400:	5e                   	pop    %esi
+ 401:	5f                   	pop    %edi
+ 402:	5d                   	pop    %ebp
+ 403:	c3                   	ret    
+ 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 408:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 40f:	eb 90                	jmp    3a1 <printint+0x21>
+ 411:	eb 0d                	jmp    420 <printf>
+ 413:	90                   	nop
+ 414:	90                   	nop
+ 415:	90                   	nop
+ 416:	90                   	nop
+ 417:	90                   	nop
+ 418:	90                   	nop
+ 419:	90                   	nop
+ 41a:	90                   	nop
+ 41b:	90                   	nop
+ 41c:	90                   	nop
+ 41d:	90                   	nop
+ 41e:	90                   	nop
+ 41f:	90                   	nop
+
+00000420 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
+ 425:	53                   	push   %ebx
+ 426:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 429:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 42c:	0f b6 1e             	movzbl (%esi),%ebx
+ 42f:	84 db                	test   %bl,%bl
+ 431:	0f 84 b3 00 00 00    	je     4ea <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 437:	8d 45 10             	lea    0x10(%ebp),%eax
+ 43a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 43d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 43f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 442:	eb 2f                	jmp    473 <printf+0x53>
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 448:	83 f8 25             	cmp    $0x25,%eax
+ 44b:	0f 84 a7 00 00 00    	je     4f8 <printf+0xd8>
+  write(fd, &c, 1);
+ 451:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 454:	83 ec 04             	sub    $0x4,%esp
+ 457:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 45a:	6a 01                	push   $0x1
+ 45c:	50                   	push   %eax
+ 45d:	ff 75 08             	pushl  0x8(%ebp)
+ 460:	e8 6d fe ff ff       	call   2d2 <write>
+ 465:	83 c4 10             	add    $0x10,%esp
+ 468:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 46b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 46f:	84 db                	test   %bl,%bl
+ 471:	74 77                	je     4ea <printf+0xca>
+    if(state == 0){
+ 473:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 475:	0f be cb             	movsbl %bl,%ecx
+ 478:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 47b:	74 cb                	je     448 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 47d:	83 ff 25             	cmp    $0x25,%edi
+ 480:	75 e6                	jne    468 <printf+0x48>
+      if(c == 'd'){
+ 482:	83 f8 64             	cmp    $0x64,%eax
+ 485:	0f 84 05 01 00 00    	je     590 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 48b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 491:	83 f9 70             	cmp    $0x70,%ecx
+ 494:	74 72                	je     508 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 496:	83 f8 73             	cmp    $0x73,%eax
+ 499:	0f 84 99 00 00 00    	je     538 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 49f:	83 f8 63             	cmp    $0x63,%eax
+ 4a2:	0f 84 08 01 00 00    	je     5b0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	0f 84 ef 00 00 00    	je     5a0 <printf+0x180>
+  write(fd, &c, 1);
+ 4b1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4b4:	83 ec 04             	sub    $0x4,%esp
+ 4b7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4bb:	6a 01                	push   $0x1
+ 4bd:	50                   	push   %eax
+ 4be:	ff 75 08             	pushl  0x8(%ebp)
+ 4c1:	e8 0c fe ff ff       	call   2d2 <write>
+ 4c6:	83 c4 0c             	add    $0xc,%esp
+ 4c9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4cc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4cf:	6a 01                	push   $0x1
+ 4d1:	50                   	push   %eax
+ 4d2:	ff 75 08             	pushl  0x8(%ebp)
+ 4d5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4d8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 4da:	e8 f3 fd ff ff       	call   2d2 <write>
+  for(i = 0; fmt[i]; i++){
+ 4df:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 4e3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4e6:	84 db                	test   %bl,%bl
+ 4e8:	75 89                	jne    473 <printf+0x53>
+    }
+  }
+}
+ 4ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ed:	5b                   	pop    %ebx
+ 4ee:	5e                   	pop    %esi
+ 4ef:	5f                   	pop    %edi
+ 4f0:	5d                   	pop    %ebp
+ 4f1:	c3                   	ret    
+ 4f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 4f8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4fd:	e9 66 ff ff ff       	jmp    468 <printf+0x48>
+ 502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 508:	83 ec 0c             	sub    $0xc,%esp
+ 50b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 510:	6a 00                	push   $0x0
+ 512:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 515:	8b 45 08             	mov    0x8(%ebp),%eax
+ 518:	8b 17                	mov    (%edi),%edx
+ 51a:	e8 61 fe ff ff       	call   380 <printint>
+        ap++;
+ 51f:	89 f8                	mov    %edi,%eax
+ 521:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 524:	31 ff                	xor    %edi,%edi
+        ap++;
+ 526:	83 c0 04             	add    $0x4,%eax
+ 529:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 52c:	e9 37 ff ff ff       	jmp    468 <printf+0x48>
+ 531:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 538:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 53b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 53d:	83 c0 04             	add    $0x4,%eax
+ 540:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 543:	85 c9                	test   %ecx,%ecx
+ 545:	0f 84 8e 00 00 00    	je     5d9 <printf+0x1b9>
+        while(*s != 0){
+ 54b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 54e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 550:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 552:	84 c0                	test   %al,%al
+ 554:	0f 84 0e ff ff ff    	je     468 <printf+0x48>
+ 55a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 55d:	89 de                	mov    %ebx,%esi
+ 55f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 562:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 565:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 568:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 56b:	83 c6 01             	add    $0x1,%esi
+ 56e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 571:	6a 01                	push   $0x1
+ 573:	57                   	push   %edi
+ 574:	53                   	push   %ebx
+ 575:	e8 58 fd ff ff       	call   2d2 <write>
+        while(*s != 0){
+ 57a:	0f b6 06             	movzbl (%esi),%eax
+ 57d:	83 c4 10             	add    $0x10,%esp
+ 580:	84 c0                	test   %al,%al
+ 582:	75 e4                	jne    568 <printf+0x148>
+ 584:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 587:	31 ff                	xor    %edi,%edi
+ 589:	e9 da fe ff ff       	jmp    468 <printf+0x48>
+ 58e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 598:	6a 01                	push   $0x1
+ 59a:	e9 73 ff ff ff       	jmp    512 <printf+0xf2>
+ 59f:	90                   	nop
+  write(fd, &c, 1);
+ 5a0:	83 ec 04             	sub    $0x4,%esp
+ 5a3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5a6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5a9:	6a 01                	push   $0x1
+ 5ab:	e9 21 ff ff ff       	jmp    4d1 <printf+0xb1>
+        putc(fd, *ap);
+ 5b0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5b3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5b6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5b8:	6a 01                	push   $0x1
+        ap++;
+ 5ba:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5bd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 5c0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5c3:	50                   	push   %eax
+ 5c4:	ff 75 08             	pushl  0x8(%ebp)
+ 5c7:	e8 06 fd ff ff       	call   2d2 <write>
+        ap++;
+ 5cc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5cf:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5d2:	31 ff                	xor    %edi,%edi
+ 5d4:	e9 8f fe ff ff       	jmp    468 <printf+0x48>
+          s = "(null)";
+ 5d9:	bb 8c 07 00 00       	mov    $0x78c,%ebx
+        while(*s != 0){
+ 5de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e3:	e9 72 ff ff ff       	jmp    55a <printf+0x13a>
+ 5e8:	66 90                	xchg   %ax,%ax
+ 5ea:	66 90                	xchg   %ax,%ax
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
+
+000005f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5f0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f1:	a1 40 0a 00 00       	mov    0xa40,%eax
+{
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 608:	39 c8                	cmp    %ecx,%eax
+ 60a:	8b 10                	mov    (%eax),%edx
+ 60c:	73 32                	jae    640 <free+0x50>
+ 60e:	39 d1                	cmp    %edx,%ecx
+ 610:	72 04                	jb     616 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 612:	39 d0                	cmp    %edx,%eax
+ 614:	72 32                	jb     648 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 616:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 619:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 61c:	39 fa                	cmp    %edi,%edx
+ 61e:	74 30                	je     650 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 620:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 623:	8b 50 04             	mov    0x4(%eax),%edx
+ 626:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 629:	39 f1                	cmp    %esi,%ecx
+ 62b:	74 3a                	je     667 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 62d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 62f:	a3 40 0a 00 00       	mov    %eax,0xa40
+}
+ 634:	5b                   	pop    %ebx
+ 635:	5e                   	pop    %esi
+ 636:	5f                   	pop    %edi
+ 637:	5d                   	pop    %ebp
+ 638:	c3                   	ret    
+ 639:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 640:	39 d0                	cmp    %edx,%eax
+ 642:	72 04                	jb     648 <free+0x58>
+ 644:	39 d1                	cmp    %edx,%ecx
+ 646:	72 ce                	jb     616 <free+0x26>
+{
+ 648:	89 d0                	mov    %edx,%eax
+ 64a:	eb bc                	jmp    608 <free+0x18>
+ 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 650:	03 72 04             	add    0x4(%edx),%esi
+ 653:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 656:	8b 10                	mov    (%eax),%edx
+ 658:	8b 12                	mov    (%edx),%edx
+ 65a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 65d:	8b 50 04             	mov    0x4(%eax),%edx
+ 660:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 663:	39 f1                	cmp    %esi,%ecx
+ 665:	75 c6                	jne    62d <free+0x3d>
+    p->s.size += bp->s.size;
+ 667:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 66a:	a3 40 0a 00 00       	mov    %eax,0xa40
+    p->s.size += bp->s.size;
+ 66f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 672:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 675:	89 10                	mov    %edx,(%eax)
+}
+ 677:	5b                   	pop    %ebx
+ 678:	5e                   	pop    %esi
+ 679:	5f                   	pop    %edi
+ 67a:	5d                   	pop    %ebp
+ 67b:	c3                   	ret    
+ 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000680 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 68c:	8b 15 40 0a 00 00    	mov    0xa40,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 692:	8d 78 07             	lea    0x7(%eax),%edi
+ 695:	c1 ef 03             	shr    $0x3,%edi
+ 698:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 69b:	85 d2                	test   %edx,%edx
+ 69d:	0f 84 9d 00 00 00    	je     740 <malloc+0xc0>
+ 6a3:	8b 02                	mov    (%edx),%eax
+ 6a5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 6a8:	39 cf                	cmp    %ecx,%edi
+ 6aa:	76 6c                	jbe    718 <malloc+0x98>
+ 6ac:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6b2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6b7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ba:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6c1:	eb 0e                	jmp    6d1 <malloc+0x51>
+ 6c3:	90                   	nop
+ 6c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6c8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6ca:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6cd:	39 f9                	cmp    %edi,%ecx
+ 6cf:	73 47                	jae    718 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6d1:	39 05 40 0a 00 00    	cmp    %eax,0xa40
+ 6d7:	89 c2                	mov    %eax,%edx
+ 6d9:	75 ed                	jne    6c8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6db:	83 ec 0c             	sub    $0xc,%esp
+ 6de:	56                   	push   %esi
+ 6df:	e8 56 fc ff ff       	call   33a <sbrk>
+  if(p == (char*)-1)
+ 6e4:	83 c4 10             	add    $0x10,%esp
+ 6e7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ea:	74 1c                	je     708 <malloc+0x88>
+  hp->s.size = nu;
+ 6ec:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6ef:	83 ec 0c             	sub    $0xc,%esp
+ 6f2:	83 c0 08             	add    $0x8,%eax
+ 6f5:	50                   	push   %eax
+ 6f6:	e8 f5 fe ff ff       	call   5f0 <free>
+  return freep;
+ 6fb:	8b 15 40 0a 00 00    	mov    0xa40,%edx
+      if((p = morecore(nunits)) == 0)
+ 701:	83 c4 10             	add    $0x10,%esp
+ 704:	85 d2                	test   %edx,%edx
+ 706:	75 c0                	jne    6c8 <malloc+0x48>
+        return 0;
+  }
+}
+ 708:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 70b:	31 c0                	xor    %eax,%eax
+}
+ 70d:	5b                   	pop    %ebx
+ 70e:	5e                   	pop    %esi
+ 70f:	5f                   	pop    %edi
+ 710:	5d                   	pop    %ebp
+ 711:	c3                   	ret    
+ 712:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 718:	39 cf                	cmp    %ecx,%edi
+ 71a:	74 54                	je     770 <malloc+0xf0>
+        p->s.size -= nunits;
+ 71c:	29 f9                	sub    %edi,%ecx
+ 71e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 721:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 724:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 727:	89 15 40 0a 00 00    	mov    %edx,0xa40
+}
+ 72d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 730:	83 c0 08             	add    $0x8,%eax
+}
+ 733:	5b                   	pop    %ebx
+ 734:	5e                   	pop    %esi
+ 735:	5f                   	pop    %edi
+ 736:	5d                   	pop    %ebp
+ 737:	c3                   	ret    
+ 738:	90                   	nop
+ 739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 740:	c7 05 40 0a 00 00 44 	movl   $0xa44,0xa40
+ 747:	0a 00 00 
+ 74a:	c7 05 44 0a 00 00 44 	movl   $0xa44,0xa44
+ 751:	0a 00 00 
+    base.s.size = 0;
+ 754:	b8 44 0a 00 00       	mov    $0xa44,%eax
+ 759:	c7 05 48 0a 00 00 00 	movl   $0x0,0xa48
+ 760:	00 00 00 
+ 763:	e9 44 ff ff ff       	jmp    6ac <malloc+0x2c>
+ 768:	90                   	nop
+ 769:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 770:	8b 08                	mov    (%eax),%ecx
+ 772:	89 0a                	mov    %ecx,(%edx)
+ 774:	eb b1                	jmp    727 <malloc+0xa7>
diff -ruN src-old/kill.d src/kill.d
--- src-old/kill.d	1970-01-01 00:00:00.000000000 +0000
+++ src/kill.d	2023-04-19 02:18:56.024176932 +0000
@@ -0,0 +1 @@
+kill.o: kill.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files src-old/kill.o and src/kill.o differ
diff -ruN src-old/kill.sym src/kill.sym
--- src-old/kill.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/kill.sym	2023-04-19 02:18:56.052180244 +0000
@@ -0,0 +1,61 @@
+00000000 .text
+00000778 .rodata
+000007a8 .eh_frame
+00000a40 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 kill.c
+00000000 ulib.c
+00000000 printf.c
+00000380 printint
+00000794 digits.1052
+00000000 umalloc.c
+00000a40 freep
+00000a44 base
+00000060 strcpy
+00000420 printf
+00000280 memmove
+0000036a munmap
+000002fa mknod
+00000170 gets
+00000332 getpid
+00000680 malloc
+00000342 sleep
+0000035a kmfree
+00000362 mmap
+000002c2 pipe
+000002d2 write
+0000030a fstat
+000002e2 kill
+00000322 chdir
+000002ea exec
+000002ba wait
+000002ca read
+00000302 unlink
+000002aa fork
+0000033a sbrk
+0000034a uptime
+00000a40 __bss_start
+00000110 memset
+00000000 main
+00000090 strcmp
+0000032a dup
+000001f0 stat
+00000a40 _edata
+00000a4c _end
+00000312 link
+00000352 kmalloc
+000002b2 exit
+00000240 atoi
+000000e0 strlen
+000002f2 open
+00000130 strchr
+0000031a mkdir
+000002da close
+000005f0 free
diff -ruN src-old/kmalloc.c src/kmalloc.c
--- src-old/kmalloc.c	1970-01-01 00:00:00.000000000 +0000
+++ src/kmalloc.c	2023-04-19 02:17:16.018998806 +0000
@@ -0,0 +1,92 @@
+#include "types.h"
+#include "stat.h"
+#include "defs.h"
+#include "param.h"
+
+typedef long Align;
+
+union header {
+  struct {
+    union header *ptr;
+    uint size;
+  } s;
+  Align x;
+};
+
+typedef union header Header;
+
+static Header base;
+static Header *freep;
+
+void
+kmfree(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+      
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+
+static Header*
+morecore(uint nu)
+{
+    //check less than 4096
+  char *p;
+  Header *hp;
+
+  p = kalloc();
+  if(p == 0)
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = 4096 / sizeof(Header);
+  kmfree((void*)(hp + 1));
+  return freep;
+}
+
+void*
+kmalloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  if(nbytes > 4096)
+  {
+    panic("kmalloc: requested more than allowed in a single allocation");
+  }
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+        p += p->s.size;
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
diff -ruN src-old/kmalloc.d src/kmalloc.d
--- src-old/kmalloc.d	1970-01-01 00:00:00.000000000 +0000
+++ src/kmalloc.d	2023-04-19 02:18:54.115950592 +0000
@@ -0,0 +1,2 @@
+kmalloc.o: kmalloc.c /usr/include/stdc-predef.h types.h stat.h defs.h \
+ param.h
Binary files src-old/kmalloc.o and src/kmalloc.o differ
diff -ruN src-old/lapic.d src/lapic.d
--- src-old/lapic.d	1970-01-01 00:00:00.000000000 +0000
+++ src/lapic.d	2023-04-19 02:18:54.263968168 +0000
@@ -0,0 +1,2 @@
+lapic.o: lapic.c /usr/include/stdc-predef.h param.h types.h defs.h date.h \
+ memlayout.h traps.h mmu.h x86.h
Binary files src-old/lapic.o and src/lapic.o differ
Binary files src-old/_ln and src/_ln differ
diff -ruN src-old/ln.asm src/ln.asm
--- src-old/ln.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/ln.asm	2023-04-19 02:18:56.100185921 +0000
@@ -0,0 +1,1188 @@
+
+_ln:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+  if(argc != 3){
+   7:	83 39 03             	cmpl   $0x3,(%ecx)
+{
+   a:	ff 71 fc             	pushl  -0x4(%ecx)
+   d:	55                   	push   %ebp
+   e:	89 e5                	mov    %esp,%ebp
+  10:	53                   	push   %ebx
+  11:	51                   	push   %ecx
+  12:	8b 59 04             	mov    0x4(%ecx),%ebx
+  if(argc != 3){
+  15:	74 13                	je     2a <main+0x2a>
+    printf(2, "Usage: ln old new\n");
+  17:	52                   	push   %edx
+  18:	52                   	push   %edx
+  19:	68 78 07 00 00       	push   $0x778
+  1e:	6a 02                	push   $0x2
+  20:	e8 fb 03 00 00       	call   420 <printf>
+    exit();
+  25:	e8 88 02 00 00       	call   2b2 <exit>
+  }
+  if(link(argv[1], argv[2]) < 0)
+  2a:	50                   	push   %eax
+  2b:	50                   	push   %eax
+  2c:	ff 73 08             	pushl  0x8(%ebx)
+  2f:	ff 73 04             	pushl  0x4(%ebx)
+  32:	e8 db 02 00 00       	call   312 <link>
+  37:	83 c4 10             	add    $0x10,%esp
+  3a:	85 c0                	test   %eax,%eax
+  3c:	78 05                	js     43 <main+0x43>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  exit();
+  3e:	e8 6f 02 00 00       	call   2b2 <exit>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  43:	ff 73 08             	pushl  0x8(%ebx)
+  46:	ff 73 04             	pushl  0x4(%ebx)
+  49:	68 8b 07 00 00       	push   $0x78b
+  4e:	6a 02                	push   $0x2
+  50:	e8 cb 03 00 00       	call   420 <printf>
+  55:	83 c4 10             	add    $0x10,%esp
+  58:	eb e4                	jmp    3e <main+0x3e>
+  5a:	66 90                	xchg   %ax,%ax
+  5c:	66 90                	xchg   %ax,%ax
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 45 08             	mov    0x8(%ebp),%eax
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  6a:	89 c2                	mov    %eax,%edx
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  70:	83 c1 01             	add    $0x1,%ecx
+  73:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  77:	83 c2 01             	add    $0x1,%edx
+  7a:	84 db                	test   %bl,%bl
+  7c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  7f:	75 ef                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  81:	5b                   	pop    %ebx
+  82:	5d                   	pop    %ebp
+  83:	c3                   	ret    
+  84:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  8a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	53                   	push   %ebx
+  94:	8b 55 08             	mov    0x8(%ebp),%edx
+  97:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  9a:	0f b6 02             	movzbl (%edx),%eax
+  9d:	0f b6 19             	movzbl (%ecx),%ebx
+  a0:	84 c0                	test   %al,%al
+  a2:	75 1c                	jne    c0 <strcmp+0x30>
+  a4:	eb 2a                	jmp    d0 <strcmp+0x40>
+  a6:	8d 76 00             	lea    0x0(%esi),%esi
+  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  b0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  b3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  b6:	83 c1 01             	add    $0x1,%ecx
+  b9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  bc:	84 c0                	test   %al,%al
+  be:	74 10                	je     d0 <strcmp+0x40>
+  c0:	38 d8                	cmp    %bl,%al
+  c2:	74 ec                	je     b0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  c4:	29 d8                	sub    %ebx,%eax
+}
+  c6:	5b                   	pop    %ebx
+  c7:	5d                   	pop    %ebp
+  c8:	c3                   	ret    
+  c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  d0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  d2:	29 d8                	sub    %ebx,%eax
+}
+  d4:	5b                   	pop    %ebx
+  d5:	5d                   	pop    %ebp
+  d6:	c3                   	ret    
+  d7:	89 f6                	mov    %esi,%esi
+  d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000000e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  e6:	80 39 00             	cmpb   $0x0,(%ecx)
+  e9:	74 15                	je     100 <strlen+0x20>
+  eb:	31 d2                	xor    %edx,%edx
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  f0:	83 c2 01             	add    $0x1,%edx
+  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  f7:	89 d0                	mov    %edx,%eax
+  f9:	75 f5                	jne    f0 <strlen+0x10>
+    ;
+  return n;
+}
+  fb:	5d                   	pop    %ebp
+  fc:	c3                   	ret    
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 100:	31 c0                	xor    %eax,%eax
+}
+ 102:	5d                   	pop    %ebp
+ 103:	c3                   	ret    
+ 104:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 10a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000110 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 117:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 11a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 11d:	89 d7                	mov    %edx,%edi
+ 11f:	fc                   	cld    
+ 120:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 122:	89 d0                	mov    %edx,%eax
+ 124:	5f                   	pop    %edi
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	89 f6                	mov    %esi,%esi
+ 129:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000130 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	53                   	push   %ebx
+ 134:	8b 45 08             	mov    0x8(%ebp),%eax
+ 137:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 13a:	0f b6 10             	movzbl (%eax),%edx
+ 13d:	84 d2                	test   %dl,%dl
+ 13f:	74 1d                	je     15e <strchr+0x2e>
+    if(*s == c)
+ 141:	38 d3                	cmp    %dl,%bl
+ 143:	89 d9                	mov    %ebx,%ecx
+ 145:	75 0d                	jne    154 <strchr+0x24>
+ 147:	eb 17                	jmp    160 <strchr+0x30>
+ 149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 150:	38 ca                	cmp    %cl,%dl
+ 152:	74 0c                	je     160 <strchr+0x30>
+  for(; *s; s++)
+ 154:	83 c0 01             	add    $0x1,%eax
+ 157:	0f b6 10             	movzbl (%eax),%edx
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 15e:	31 c0                	xor    %eax,%eax
+}
+ 160:	5b                   	pop    %ebx
+ 161:	5d                   	pop    %ebp
+ 162:	c3                   	ret    
+ 163:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000170 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	57                   	push   %edi
+ 174:	56                   	push   %esi
+ 175:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 176:	31 f6                	xor    %esi,%esi
+ 178:	89 f3                	mov    %esi,%ebx
+{
+ 17a:	83 ec 1c             	sub    $0x1c,%esp
+ 17d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 180:	eb 2f                	jmp    1b1 <gets+0x41>
+ 182:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 188:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 18b:	83 ec 04             	sub    $0x4,%esp
+ 18e:	6a 01                	push   $0x1
+ 190:	50                   	push   %eax
+ 191:	6a 00                	push   $0x0
+ 193:	e8 32 01 00 00       	call   2ca <read>
+    if(cc < 1)
+ 198:	83 c4 10             	add    $0x10,%esp
+ 19b:	85 c0                	test   %eax,%eax
+ 19d:	7e 1c                	jle    1bb <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 19f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1a3:	83 c7 01             	add    $0x1,%edi
+ 1a6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1a9:	3c 0a                	cmp    $0xa,%al
+ 1ab:	74 23                	je     1d0 <gets+0x60>
+ 1ad:	3c 0d                	cmp    $0xd,%al
+ 1af:	74 1f                	je     1d0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1b1:	83 c3 01             	add    $0x1,%ebx
+ 1b4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1b7:	89 fe                	mov    %edi,%esi
+ 1b9:	7c cd                	jl     188 <gets+0x18>
+ 1bb:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1c0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1c6:	5b                   	pop    %ebx
+ 1c7:	5e                   	pop    %esi
+ 1c8:	5f                   	pop    %edi
+ 1c9:	5d                   	pop    %ebp
+ 1ca:	c3                   	ret    
+ 1cb:	90                   	nop
+ 1cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1d0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1d3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d6:	01 de                	add    %ebx,%esi
+ 1d8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1da:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e0:	5b                   	pop    %ebx
+ 1e1:	5e                   	pop    %esi
+ 1e2:	5f                   	pop    %edi
+ 1e3:	5d                   	pop    %ebp
+ 1e4:	c3                   	ret    
+ 1e5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	56                   	push   %esi
+ 1f4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f5:	83 ec 08             	sub    $0x8,%esp
+ 1f8:	6a 00                	push   $0x0
+ 1fa:	ff 75 08             	pushl  0x8(%ebp)
+ 1fd:	e8 f0 00 00 00       	call   2f2 <open>
+  if(fd < 0)
+ 202:	83 c4 10             	add    $0x10,%esp
+ 205:	85 c0                	test   %eax,%eax
+ 207:	78 27                	js     230 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	ff 75 0c             	pushl  0xc(%ebp)
+ 20f:	89 c3                	mov    %eax,%ebx
+ 211:	50                   	push   %eax
+ 212:	e8 f3 00 00 00       	call   30a <fstat>
+  close(fd);
+ 217:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 21a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 21c:	e8 b9 00 00 00       	call   2da <close>
+  return r;
+ 221:	83 c4 10             	add    $0x10,%esp
+}
+ 224:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 227:	89 f0                	mov    %esi,%eax
+ 229:	5b                   	pop    %ebx
+ 22a:	5e                   	pop    %esi
+ 22b:	5d                   	pop    %ebp
+ 22c:	c3                   	ret    
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 230:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 235:	eb ed                	jmp    224 <stat+0x34>
+ 237:	89 f6                	mov    %esi,%esi
+ 239:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000240 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	53                   	push   %ebx
+ 244:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 247:	0f be 11             	movsbl (%ecx),%edx
+ 24a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 24d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 24f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 254:	77 1f                	ja     275 <atoi+0x35>
+ 256:	8d 76 00             	lea    0x0(%esi),%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 260:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 263:	83 c1 01             	add    $0x1,%ecx
+ 266:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 26a:	0f be 11             	movsbl (%ecx),%edx
+ 26d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 270:	80 fb 09             	cmp    $0x9,%bl
+ 273:	76 eb                	jbe    260 <atoi+0x20>
+  return n;
+}
+ 275:	5b                   	pop    %ebx
+ 276:	5d                   	pop    %ebp
+ 277:	c3                   	ret    
+ 278:	90                   	nop
+ 279:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000280 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	56                   	push   %esi
+ 284:	53                   	push   %ebx
+ 285:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 288:	8b 45 08             	mov    0x8(%ebp),%eax
+ 28b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 28e:	85 db                	test   %ebx,%ebx
+ 290:	7e 14                	jle    2a6 <memmove+0x26>
+ 292:	31 d2                	xor    %edx,%edx
+ 294:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 298:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 29c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 29f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 2a2:	39 d3                	cmp    %edx,%ebx
+ 2a4:	75 f2                	jne    298 <memmove+0x18>
+  return vdst;
+}
+ 2a6:	5b                   	pop    %ebx
+ 2a7:	5e                   	pop    %esi
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+
+000002aa <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2aa:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <exit>:
+SYSCALL(exit)
+ 2b2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <wait>:
+SYSCALL(wait)
+ 2ba:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <pipe>:
+SYSCALL(pipe)
+ 2c2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <read>:
+SYSCALL(read)
+ 2ca:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <write>:
+SYSCALL(write)
+ 2d2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <close>:
+SYSCALL(close)
+ 2da:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <kill>:
+SYSCALL(kill)
+ 2e2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <exec>:
+SYSCALL(exec)
+ 2ea:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <open>:
+SYSCALL(open)
+ 2f2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <mknod>:
+SYSCALL(mknod)
+ 2fa:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <unlink>:
+SYSCALL(unlink)
+ 302:	b8 12 00 00 00       	mov    $0x12,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <fstat>:
+SYSCALL(fstat)
+ 30a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <link>:
+SYSCALL(link)
+ 312:	b8 13 00 00 00       	mov    $0x13,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <mkdir>:
+SYSCALL(mkdir)
+ 31a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <chdir>:
+SYSCALL(chdir)
+ 322:	b8 09 00 00 00       	mov    $0x9,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <dup>:
+SYSCALL(dup)
+ 32a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <getpid>:
+SYSCALL(getpid)
+ 332:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <sbrk>:
+SYSCALL(sbrk)
+ 33a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <sleep>:
+SYSCALL(sleep)
+ 342:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <uptime>:
+SYSCALL(uptime)
+ 34a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <kmalloc>:
+SYSCALL(kmalloc)
+ 352:	b8 16 00 00 00       	mov    $0x16,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <kmfree>:
+SYSCALL(kmfree) 
+ 35a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <mmap>:
+SYSCALL(mmap)
+ 362:	b8 18 00 00 00       	mov    $0x18,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <munmap>:
+ 36a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+ 372:	66 90                	xchg   %ax,%ax
+ 374:	66 90                	xchg   %ax,%ax
+ 376:	66 90                	xchg   %ax,%ax
+ 378:	66 90                	xchg   %ax,%ax
+ 37a:	66 90                	xchg   %ax,%ax
+ 37c:	66 90                	xchg   %ax,%ax
+ 37e:	66 90                	xchg   %ax,%ax
+
+00000380 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 389:	85 d2                	test   %edx,%edx
+{
+ 38b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 38e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 390:	79 76                	jns    408 <printint+0x88>
+ 392:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 396:	74 70                	je     408 <printint+0x88>
+    x = -xx;
+ 398:	f7 d8                	neg    %eax
+    neg = 1;
+ 39a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3a1:	31 f6                	xor    %esi,%esi
+ 3a3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3a6:	eb 0a                	jmp    3b2 <printint+0x32>
+ 3a8:	90                   	nop
+ 3a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3b0:	89 fe                	mov    %edi,%esi
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3b7:	f7 f1                	div    %ecx
+ 3b9:	0f b6 92 a8 07 00 00 	movzbl 0x7a8(%edx),%edx
+  }while((x /= base) != 0);
+ 3c0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 3c2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 3c5:	75 e9                	jne    3b0 <printint+0x30>
+  if(neg)
+ 3c7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ca:	85 c0                	test   %eax,%eax
+ 3cc:	74 08                	je     3d6 <printint+0x56>
+    buf[i++] = '-';
+ 3ce:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3d3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3d6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3da:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3e0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 3e3:	83 ec 04             	sub    $0x4,%esp
+ 3e6:	83 ee 01             	sub    $0x1,%esi
+ 3e9:	6a 01                	push   $0x1
+ 3eb:	53                   	push   %ebx
+ 3ec:	57                   	push   %edi
+ 3ed:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3f0:	e8 dd fe ff ff       	call   2d2 <write>
+
+  while(--i >= 0)
+ 3f5:	83 c4 10             	add    $0x10,%esp
+ 3f8:	39 de                	cmp    %ebx,%esi
+ 3fa:	75 e4                	jne    3e0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ff:	5b                   	pop    %ebx
+ 400:	5e                   	pop    %esi
+ 401:	5f                   	pop    %edi
+ 402:	5d                   	pop    %ebp
+ 403:	c3                   	ret    
+ 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 408:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 40f:	eb 90                	jmp    3a1 <printint+0x21>
+ 411:	eb 0d                	jmp    420 <printf>
+ 413:	90                   	nop
+ 414:	90                   	nop
+ 415:	90                   	nop
+ 416:	90                   	nop
+ 417:	90                   	nop
+ 418:	90                   	nop
+ 419:	90                   	nop
+ 41a:	90                   	nop
+ 41b:	90                   	nop
+ 41c:	90                   	nop
+ 41d:	90                   	nop
+ 41e:	90                   	nop
+ 41f:	90                   	nop
+
+00000420 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
+ 425:	53                   	push   %ebx
+ 426:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 429:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 42c:	0f b6 1e             	movzbl (%esi),%ebx
+ 42f:	84 db                	test   %bl,%bl
+ 431:	0f 84 b3 00 00 00    	je     4ea <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 437:	8d 45 10             	lea    0x10(%ebp),%eax
+ 43a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 43d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 43f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 442:	eb 2f                	jmp    473 <printf+0x53>
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 448:	83 f8 25             	cmp    $0x25,%eax
+ 44b:	0f 84 a7 00 00 00    	je     4f8 <printf+0xd8>
+  write(fd, &c, 1);
+ 451:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 454:	83 ec 04             	sub    $0x4,%esp
+ 457:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 45a:	6a 01                	push   $0x1
+ 45c:	50                   	push   %eax
+ 45d:	ff 75 08             	pushl  0x8(%ebp)
+ 460:	e8 6d fe ff ff       	call   2d2 <write>
+ 465:	83 c4 10             	add    $0x10,%esp
+ 468:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 46b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 46f:	84 db                	test   %bl,%bl
+ 471:	74 77                	je     4ea <printf+0xca>
+    if(state == 0){
+ 473:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 475:	0f be cb             	movsbl %bl,%ecx
+ 478:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 47b:	74 cb                	je     448 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 47d:	83 ff 25             	cmp    $0x25,%edi
+ 480:	75 e6                	jne    468 <printf+0x48>
+      if(c == 'd'){
+ 482:	83 f8 64             	cmp    $0x64,%eax
+ 485:	0f 84 05 01 00 00    	je     590 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 48b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 491:	83 f9 70             	cmp    $0x70,%ecx
+ 494:	74 72                	je     508 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 496:	83 f8 73             	cmp    $0x73,%eax
+ 499:	0f 84 99 00 00 00    	je     538 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 49f:	83 f8 63             	cmp    $0x63,%eax
+ 4a2:	0f 84 08 01 00 00    	je     5b0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	0f 84 ef 00 00 00    	je     5a0 <printf+0x180>
+  write(fd, &c, 1);
+ 4b1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4b4:	83 ec 04             	sub    $0x4,%esp
+ 4b7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4bb:	6a 01                	push   $0x1
+ 4bd:	50                   	push   %eax
+ 4be:	ff 75 08             	pushl  0x8(%ebp)
+ 4c1:	e8 0c fe ff ff       	call   2d2 <write>
+ 4c6:	83 c4 0c             	add    $0xc,%esp
+ 4c9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4cc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4cf:	6a 01                	push   $0x1
+ 4d1:	50                   	push   %eax
+ 4d2:	ff 75 08             	pushl  0x8(%ebp)
+ 4d5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4d8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 4da:	e8 f3 fd ff ff       	call   2d2 <write>
+  for(i = 0; fmt[i]; i++){
+ 4df:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 4e3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4e6:	84 db                	test   %bl,%bl
+ 4e8:	75 89                	jne    473 <printf+0x53>
+    }
+  }
+}
+ 4ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ed:	5b                   	pop    %ebx
+ 4ee:	5e                   	pop    %esi
+ 4ef:	5f                   	pop    %edi
+ 4f0:	5d                   	pop    %ebp
+ 4f1:	c3                   	ret    
+ 4f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 4f8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4fd:	e9 66 ff ff ff       	jmp    468 <printf+0x48>
+ 502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 508:	83 ec 0c             	sub    $0xc,%esp
+ 50b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 510:	6a 00                	push   $0x0
+ 512:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 515:	8b 45 08             	mov    0x8(%ebp),%eax
+ 518:	8b 17                	mov    (%edi),%edx
+ 51a:	e8 61 fe ff ff       	call   380 <printint>
+        ap++;
+ 51f:	89 f8                	mov    %edi,%eax
+ 521:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 524:	31 ff                	xor    %edi,%edi
+        ap++;
+ 526:	83 c0 04             	add    $0x4,%eax
+ 529:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 52c:	e9 37 ff ff ff       	jmp    468 <printf+0x48>
+ 531:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 538:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 53b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 53d:	83 c0 04             	add    $0x4,%eax
+ 540:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 543:	85 c9                	test   %ecx,%ecx
+ 545:	0f 84 8e 00 00 00    	je     5d9 <printf+0x1b9>
+        while(*s != 0){
+ 54b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 54e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 550:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 552:	84 c0                	test   %al,%al
+ 554:	0f 84 0e ff ff ff    	je     468 <printf+0x48>
+ 55a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 55d:	89 de                	mov    %ebx,%esi
+ 55f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 562:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 565:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 568:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 56b:	83 c6 01             	add    $0x1,%esi
+ 56e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 571:	6a 01                	push   $0x1
+ 573:	57                   	push   %edi
+ 574:	53                   	push   %ebx
+ 575:	e8 58 fd ff ff       	call   2d2 <write>
+        while(*s != 0){
+ 57a:	0f b6 06             	movzbl (%esi),%eax
+ 57d:	83 c4 10             	add    $0x10,%esp
+ 580:	84 c0                	test   %al,%al
+ 582:	75 e4                	jne    568 <printf+0x148>
+ 584:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 587:	31 ff                	xor    %edi,%edi
+ 589:	e9 da fe ff ff       	jmp    468 <printf+0x48>
+ 58e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 598:	6a 01                	push   $0x1
+ 59a:	e9 73 ff ff ff       	jmp    512 <printf+0xf2>
+ 59f:	90                   	nop
+  write(fd, &c, 1);
+ 5a0:	83 ec 04             	sub    $0x4,%esp
+ 5a3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5a6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5a9:	6a 01                	push   $0x1
+ 5ab:	e9 21 ff ff ff       	jmp    4d1 <printf+0xb1>
+        putc(fd, *ap);
+ 5b0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5b3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5b6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5b8:	6a 01                	push   $0x1
+        ap++;
+ 5ba:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5bd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 5c0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5c3:	50                   	push   %eax
+ 5c4:	ff 75 08             	pushl  0x8(%ebp)
+ 5c7:	e8 06 fd ff ff       	call   2d2 <write>
+        ap++;
+ 5cc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5cf:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5d2:	31 ff                	xor    %edi,%edi
+ 5d4:	e9 8f fe ff ff       	jmp    468 <printf+0x48>
+          s = "(null)";
+ 5d9:	bb 9f 07 00 00       	mov    $0x79f,%ebx
+        while(*s != 0){
+ 5de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e3:	e9 72 ff ff ff       	jmp    55a <printf+0x13a>
+ 5e8:	66 90                	xchg   %ax,%ax
+ 5ea:	66 90                	xchg   %ax,%ax
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
+
+000005f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5f0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f1:	a1 50 0a 00 00       	mov    0xa50,%eax
+{
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 608:	39 c8                	cmp    %ecx,%eax
+ 60a:	8b 10                	mov    (%eax),%edx
+ 60c:	73 32                	jae    640 <free+0x50>
+ 60e:	39 d1                	cmp    %edx,%ecx
+ 610:	72 04                	jb     616 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 612:	39 d0                	cmp    %edx,%eax
+ 614:	72 32                	jb     648 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 616:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 619:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 61c:	39 fa                	cmp    %edi,%edx
+ 61e:	74 30                	je     650 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 620:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 623:	8b 50 04             	mov    0x4(%eax),%edx
+ 626:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 629:	39 f1                	cmp    %esi,%ecx
+ 62b:	74 3a                	je     667 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 62d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 62f:	a3 50 0a 00 00       	mov    %eax,0xa50
+}
+ 634:	5b                   	pop    %ebx
+ 635:	5e                   	pop    %esi
+ 636:	5f                   	pop    %edi
+ 637:	5d                   	pop    %ebp
+ 638:	c3                   	ret    
+ 639:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 640:	39 d0                	cmp    %edx,%eax
+ 642:	72 04                	jb     648 <free+0x58>
+ 644:	39 d1                	cmp    %edx,%ecx
+ 646:	72 ce                	jb     616 <free+0x26>
+{
+ 648:	89 d0                	mov    %edx,%eax
+ 64a:	eb bc                	jmp    608 <free+0x18>
+ 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 650:	03 72 04             	add    0x4(%edx),%esi
+ 653:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 656:	8b 10                	mov    (%eax),%edx
+ 658:	8b 12                	mov    (%edx),%edx
+ 65a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 65d:	8b 50 04             	mov    0x4(%eax),%edx
+ 660:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 663:	39 f1                	cmp    %esi,%ecx
+ 665:	75 c6                	jne    62d <free+0x3d>
+    p->s.size += bp->s.size;
+ 667:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 66a:	a3 50 0a 00 00       	mov    %eax,0xa50
+    p->s.size += bp->s.size;
+ 66f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 672:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 675:	89 10                	mov    %edx,(%eax)
+}
+ 677:	5b                   	pop    %ebx
+ 678:	5e                   	pop    %esi
+ 679:	5f                   	pop    %edi
+ 67a:	5d                   	pop    %ebp
+ 67b:	c3                   	ret    
+ 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000680 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 68c:	8b 15 50 0a 00 00    	mov    0xa50,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 692:	8d 78 07             	lea    0x7(%eax),%edi
+ 695:	c1 ef 03             	shr    $0x3,%edi
+ 698:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 69b:	85 d2                	test   %edx,%edx
+ 69d:	0f 84 9d 00 00 00    	je     740 <malloc+0xc0>
+ 6a3:	8b 02                	mov    (%edx),%eax
+ 6a5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 6a8:	39 cf                	cmp    %ecx,%edi
+ 6aa:	76 6c                	jbe    718 <malloc+0x98>
+ 6ac:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6b2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6b7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ba:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6c1:	eb 0e                	jmp    6d1 <malloc+0x51>
+ 6c3:	90                   	nop
+ 6c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6c8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6ca:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6cd:	39 f9                	cmp    %edi,%ecx
+ 6cf:	73 47                	jae    718 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6d1:	39 05 50 0a 00 00    	cmp    %eax,0xa50
+ 6d7:	89 c2                	mov    %eax,%edx
+ 6d9:	75 ed                	jne    6c8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6db:	83 ec 0c             	sub    $0xc,%esp
+ 6de:	56                   	push   %esi
+ 6df:	e8 56 fc ff ff       	call   33a <sbrk>
+  if(p == (char*)-1)
+ 6e4:	83 c4 10             	add    $0x10,%esp
+ 6e7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ea:	74 1c                	je     708 <malloc+0x88>
+  hp->s.size = nu;
+ 6ec:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6ef:	83 ec 0c             	sub    $0xc,%esp
+ 6f2:	83 c0 08             	add    $0x8,%eax
+ 6f5:	50                   	push   %eax
+ 6f6:	e8 f5 fe ff ff       	call   5f0 <free>
+  return freep;
+ 6fb:	8b 15 50 0a 00 00    	mov    0xa50,%edx
+      if((p = morecore(nunits)) == 0)
+ 701:	83 c4 10             	add    $0x10,%esp
+ 704:	85 d2                	test   %edx,%edx
+ 706:	75 c0                	jne    6c8 <malloc+0x48>
+        return 0;
+  }
+}
+ 708:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 70b:	31 c0                	xor    %eax,%eax
+}
+ 70d:	5b                   	pop    %ebx
+ 70e:	5e                   	pop    %esi
+ 70f:	5f                   	pop    %edi
+ 710:	5d                   	pop    %ebp
+ 711:	c3                   	ret    
+ 712:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 718:	39 cf                	cmp    %ecx,%edi
+ 71a:	74 54                	je     770 <malloc+0xf0>
+        p->s.size -= nunits;
+ 71c:	29 f9                	sub    %edi,%ecx
+ 71e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 721:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 724:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 727:	89 15 50 0a 00 00    	mov    %edx,0xa50
+}
+ 72d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 730:	83 c0 08             	add    $0x8,%eax
+}
+ 733:	5b                   	pop    %ebx
+ 734:	5e                   	pop    %esi
+ 735:	5f                   	pop    %edi
+ 736:	5d                   	pop    %ebp
+ 737:	c3                   	ret    
+ 738:	90                   	nop
+ 739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 740:	c7 05 50 0a 00 00 54 	movl   $0xa54,0xa50
+ 747:	0a 00 00 
+ 74a:	c7 05 54 0a 00 00 54 	movl   $0xa54,0xa54
+ 751:	0a 00 00 
+    base.s.size = 0;
+ 754:	b8 54 0a 00 00       	mov    $0xa54,%eax
+ 759:	c7 05 58 0a 00 00 00 	movl   $0x0,0xa58
+ 760:	00 00 00 
+ 763:	e9 44 ff ff ff       	jmp    6ac <malloc+0x2c>
+ 768:	90                   	nop
+ 769:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 770:	8b 08                	mov    (%eax),%ecx
+ 772:	89 0a                	mov    %ecx,(%edx)
+ 774:	eb b1                	jmp    727 <malloc+0xa7>
diff -ruN src-old/ln.d src/ln.d
--- src-old/ln.d	1970-01-01 00:00:00.000000000 +0000
+++ src/ln.d	2023-04-19 02:18:56.076183082 +0000
@@ -0,0 +1 @@
+ln.o: ln.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files src-old/ln.o and src/ln.o differ
diff -ruN src-old/ln.sym src/ln.sym
--- src-old/ln.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/ln.sym	2023-04-19 02:18:56.108186867 +0000
@@ -0,0 +1,61 @@
+00000000 .text
+00000778 .rodata
+000007bc .eh_frame
+00000a50 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ln.c
+00000000 ulib.c
+00000000 printf.c
+00000380 printint
+000007a8 digits.1052
+00000000 umalloc.c
+00000a50 freep
+00000a54 base
+00000060 strcpy
+00000420 printf
+00000280 memmove
+0000036a munmap
+000002fa mknod
+00000170 gets
+00000332 getpid
+00000680 malloc
+00000342 sleep
+0000035a kmfree
+00000362 mmap
+000002c2 pipe
+000002d2 write
+0000030a fstat
+000002e2 kill
+00000322 chdir
+000002ea exec
+000002ba wait
+000002ca read
+00000302 unlink
+000002aa fork
+0000033a sbrk
+0000034a uptime
+00000a50 __bss_start
+00000110 memset
+00000000 main
+00000090 strcmp
+0000032a dup
+000001f0 stat
+00000a50 _edata
+00000a5c _end
+00000312 link
+00000352 kmalloc
+000002b2 exit
+00000240 atoi
+000000e0 strlen
+000002f2 open
+00000130 strchr
+0000031a mkdir
+000002da close
+000005f0 free
diff -ruN src-old/log.d src/log.d
--- src-old/log.d	1970-01-01 00:00:00.000000000 +0000
+++ src/log.d	2023-04-19 02:18:54.327975769 +0000
@@ -0,0 +1,2 @@
+log.o: log.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files src-old/log.o and src/log.o differ
Binary files src-old/_ls and src/_ls differ
diff -ruN src-old/ls.asm src/ls.asm
--- src-old/ls.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/ls.asm	2023-04-19 02:18:56.168193964 +0000
@@ -0,0 +1,1468 @@
+
+_ls:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  close(fd);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	56                   	push   %esi
+   e:	53                   	push   %ebx
+   f:	51                   	push   %ecx
+  10:	83 ec 0c             	sub    $0xc,%esp
+  13:	8b 01                	mov    (%ecx),%eax
+  15:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  if(argc < 2){
+  18:	83 f8 01             	cmp    $0x1,%eax
+  1b:	7e 24                	jle    41 <main+0x41>
+  1d:	8d 5a 04             	lea    0x4(%edx),%ebx
+  20:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  23:	90                   	nop
+  24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    ls(".");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    ls(argv[i]);
+  28:	83 ec 0c             	sub    $0xc,%esp
+  2b:	ff 33                	pushl  (%ebx)
+  2d:	83 c3 04             	add    $0x4,%ebx
+  30:	e8 cb 00 00 00       	call   100 <ls>
+  for(i=1; i<argc; i++)
+  35:	83 c4 10             	add    $0x10,%esp
+  38:	39 f3                	cmp    %esi,%ebx
+  3a:	75 ec                	jne    28 <main+0x28>
+  exit();
+  3c:	e8 41 05 00 00       	call   582 <exit>
+    ls(".");
+  41:	83 ec 0c             	sub    $0xc,%esp
+  44:	68 90 0a 00 00       	push   $0xa90
+  49:	e8 b2 00 00 00       	call   100 <ls>
+    exit();
+  4e:	e8 2f 05 00 00       	call   582 <exit>
+  53:	66 90                	xchg   %ax,%ax
+  55:	66 90                	xchg   %ax,%ax
+  57:	66 90                	xchg   %ax,%ax
+  59:	66 90                	xchg   %ax,%ax
+  5b:	66 90                	xchg   %ax,%ax
+  5d:	66 90                	xchg   %ax,%ax
+  5f:	90                   	nop
+
+00000060 <fmtname>:
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	56                   	push   %esi
+  64:	53                   	push   %ebx
+  65:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+  68:	83 ec 0c             	sub    $0xc,%esp
+  6b:	53                   	push   %ebx
+  6c:	e8 3f 03 00 00       	call   3b0 <strlen>
+  71:	83 c4 10             	add    $0x10,%esp
+  74:	01 d8                	add    %ebx,%eax
+  76:	73 0f                	jae    87 <fmtname+0x27>
+  78:	eb 12                	jmp    8c <fmtname+0x2c>
+  7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  80:	83 e8 01             	sub    $0x1,%eax
+  83:	39 c3                	cmp    %eax,%ebx
+  85:	77 05                	ja     8c <fmtname+0x2c>
+  87:	80 38 2f             	cmpb   $0x2f,(%eax)
+  8a:	75 f4                	jne    80 <fmtname+0x20>
+  p++;
+  8c:	8d 58 01             	lea    0x1(%eax),%ebx
+  if(strlen(p) >= DIRSIZ)
+  8f:	83 ec 0c             	sub    $0xc,%esp
+  92:	53                   	push   %ebx
+  93:	e8 18 03 00 00       	call   3b0 <strlen>
+  98:	83 c4 10             	add    $0x10,%esp
+  9b:	83 f8 0d             	cmp    $0xd,%eax
+  9e:	77 4a                	ja     ea <fmtname+0x8a>
+  memmove(buf, p, strlen(p));
+  a0:	83 ec 0c             	sub    $0xc,%esp
+  a3:	53                   	push   %ebx
+  a4:	e8 07 03 00 00       	call   3b0 <strlen>
+  a9:	83 c4 0c             	add    $0xc,%esp
+  ac:	50                   	push   %eax
+  ad:	53                   	push   %ebx
+  ae:	68 bc 0d 00 00       	push   $0xdbc
+  b3:	e8 98 04 00 00       	call   550 <memmove>
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  b8:	89 1c 24             	mov    %ebx,(%esp)
+  bb:	e8 f0 02 00 00       	call   3b0 <strlen>
+  c0:	89 1c 24             	mov    %ebx,(%esp)
+  c3:	89 c6                	mov    %eax,%esi
+  return buf;
+  c5:	bb bc 0d 00 00       	mov    $0xdbc,%ebx
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  ca:	e8 e1 02 00 00       	call   3b0 <strlen>
+  cf:	ba 0e 00 00 00       	mov    $0xe,%edx
+  d4:	83 c4 0c             	add    $0xc,%esp
+  d7:	05 bc 0d 00 00       	add    $0xdbc,%eax
+  dc:	29 f2                	sub    %esi,%edx
+  de:	52                   	push   %edx
+  df:	6a 20                	push   $0x20
+  e1:	50                   	push   %eax
+  e2:	e8 f9 02 00 00       	call   3e0 <memset>
+  return buf;
+  e7:	83 c4 10             	add    $0x10,%esp
+}
+  ea:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  ed:	89 d8                	mov    %ebx,%eax
+  ef:	5b                   	pop    %ebx
+  f0:	5e                   	pop    %esi
+  f1:	5d                   	pop    %ebp
+  f2:	c3                   	ret    
+  f3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000100 <ls>:
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	57                   	push   %edi
+ 104:	56                   	push   %esi
+ 105:	53                   	push   %ebx
+ 106:	81 ec 64 02 00 00    	sub    $0x264,%esp
+ 10c:	8b 7d 08             	mov    0x8(%ebp),%edi
+  if((fd = open(path, 0)) < 0){
+ 10f:	6a 00                	push   $0x0
+ 111:	57                   	push   %edi
+ 112:	e8 ab 04 00 00       	call   5c2 <open>
+ 117:	83 c4 10             	add    $0x10,%esp
+ 11a:	85 c0                	test   %eax,%eax
+ 11c:	78 52                	js     170 <ls+0x70>
+  if(fstat(fd, &st) < 0){
+ 11e:	8d b5 d4 fd ff ff    	lea    -0x22c(%ebp),%esi
+ 124:	83 ec 08             	sub    $0x8,%esp
+ 127:	89 c3                	mov    %eax,%ebx
+ 129:	56                   	push   %esi
+ 12a:	50                   	push   %eax
+ 12b:	e8 aa 04 00 00       	call   5da <fstat>
+ 130:	83 c4 10             	add    $0x10,%esp
+ 133:	85 c0                	test   %eax,%eax
+ 135:	0f 88 c5 00 00 00    	js     200 <ls+0x100>
+  switch(st.type){
+ 13b:	0f b7 85 d4 fd ff ff 	movzwl -0x22c(%ebp),%eax
+ 142:	66 83 f8 01          	cmp    $0x1,%ax
+ 146:	0f 84 84 00 00 00    	je     1d0 <ls+0xd0>
+ 14c:	66 83 f8 02          	cmp    $0x2,%ax
+ 150:	74 3e                	je     190 <ls+0x90>
+  close(fd);
+ 152:	83 ec 0c             	sub    $0xc,%esp
+ 155:	53                   	push   %ebx
+ 156:	e8 4f 04 00 00       	call   5aa <close>
+ 15b:	83 c4 10             	add    $0x10,%esp
+}
+ 15e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 161:	5b                   	pop    %ebx
+ 162:	5e                   	pop    %esi
+ 163:	5f                   	pop    %edi
+ 164:	5d                   	pop    %ebp
+ 165:	c3                   	ret    
+ 166:	8d 76 00             	lea    0x0(%esi),%esi
+ 169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    printf(2, "ls: cannot open %s\n", path);
+ 170:	83 ec 04             	sub    $0x4,%esp
+ 173:	57                   	push   %edi
+ 174:	68 48 0a 00 00       	push   $0xa48
+ 179:	6a 02                	push   $0x2
+ 17b:	e8 70 05 00 00       	call   6f0 <printf>
+    return;
+ 180:	83 c4 10             	add    $0x10,%esp
+}
+ 183:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 186:	5b                   	pop    %ebx
+ 187:	5e                   	pop    %esi
+ 188:	5f                   	pop    %edi
+ 189:	5d                   	pop    %ebp
+ 18a:	c3                   	ret    
+ 18b:	90                   	nop
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
+ 190:	83 ec 0c             	sub    $0xc,%esp
+ 193:	8b 95 e4 fd ff ff    	mov    -0x21c(%ebp),%edx
+ 199:	8b b5 dc fd ff ff    	mov    -0x224(%ebp),%esi
+ 19f:	57                   	push   %edi
+ 1a0:	89 95 b4 fd ff ff    	mov    %edx,-0x24c(%ebp)
+ 1a6:	e8 b5 fe ff ff       	call   60 <fmtname>
+ 1ab:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
+ 1b1:	59                   	pop    %ecx
+ 1b2:	5f                   	pop    %edi
+ 1b3:	52                   	push   %edx
+ 1b4:	56                   	push   %esi
+ 1b5:	6a 02                	push   $0x2
+ 1b7:	50                   	push   %eax
+ 1b8:	68 70 0a 00 00       	push   $0xa70
+ 1bd:	6a 01                	push   $0x1
+ 1bf:	e8 2c 05 00 00       	call   6f0 <printf>
+    break;
+ 1c4:	83 c4 20             	add    $0x20,%esp
+ 1c7:	eb 89                	jmp    152 <ls+0x52>
+ 1c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+ 1d0:	83 ec 0c             	sub    $0xc,%esp
+ 1d3:	57                   	push   %edi
+ 1d4:	e8 d7 01 00 00       	call   3b0 <strlen>
+ 1d9:	83 c0 10             	add    $0x10,%eax
+ 1dc:	83 c4 10             	add    $0x10,%esp
+ 1df:	3d 00 02 00 00       	cmp    $0x200,%eax
+ 1e4:	76 42                	jbe    228 <ls+0x128>
+      printf(1, "ls: path too long\n");
+ 1e6:	83 ec 08             	sub    $0x8,%esp
+ 1e9:	68 7d 0a 00 00       	push   $0xa7d
+ 1ee:	6a 01                	push   $0x1
+ 1f0:	e8 fb 04 00 00       	call   6f0 <printf>
+      break;
+ 1f5:	83 c4 10             	add    $0x10,%esp
+ 1f8:	e9 55 ff ff ff       	jmp    152 <ls+0x52>
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(2, "ls: cannot stat %s\n", path);
+ 200:	83 ec 04             	sub    $0x4,%esp
+ 203:	57                   	push   %edi
+ 204:	68 5c 0a 00 00       	push   $0xa5c
+ 209:	6a 02                	push   $0x2
+ 20b:	e8 e0 04 00 00       	call   6f0 <printf>
+    close(fd);
+ 210:	89 1c 24             	mov    %ebx,(%esp)
+ 213:	e8 92 03 00 00       	call   5aa <close>
+    return;
+ 218:	83 c4 10             	add    $0x10,%esp
+}
+ 21b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 21e:	5b                   	pop    %ebx
+ 21f:	5e                   	pop    %esi
+ 220:	5f                   	pop    %edi
+ 221:	5d                   	pop    %ebp
+ 222:	c3                   	ret    
+ 223:	90                   	nop
+ 224:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    strcpy(buf, path);
+ 228:	83 ec 08             	sub    $0x8,%esp
+ 22b:	57                   	push   %edi
+ 22c:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
+ 232:	57                   	push   %edi
+ 233:	e8 f8 00 00 00       	call   330 <strcpy>
+    p = buf+strlen(buf);
+ 238:	89 3c 24             	mov    %edi,(%esp)
+ 23b:	e8 70 01 00 00       	call   3b0 <strlen>
+ 240:	01 f8                	add    %edi,%eax
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 242:	83 c4 10             	add    $0x10,%esp
+    *p++ = '/';
+ 245:	8d 48 01             	lea    0x1(%eax),%ecx
+    p = buf+strlen(buf);
+ 248:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
+    *p++ = '/';
+ 24e:	c6 00 2f             	movb   $0x2f,(%eax)
+ 251:	89 8d a4 fd ff ff    	mov    %ecx,-0x25c(%ebp)
+ 257:	89 f6                	mov    %esi,%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 260:	8d 85 c4 fd ff ff    	lea    -0x23c(%ebp),%eax
+ 266:	83 ec 04             	sub    $0x4,%esp
+ 269:	6a 10                	push   $0x10
+ 26b:	50                   	push   %eax
+ 26c:	53                   	push   %ebx
+ 26d:	e8 28 03 00 00       	call   59a <read>
+ 272:	83 c4 10             	add    $0x10,%esp
+ 275:	83 f8 10             	cmp    $0x10,%eax
+ 278:	0f 85 d4 fe ff ff    	jne    152 <ls+0x52>
+      if(de.inum == 0)
+ 27e:	66 83 bd c4 fd ff ff 	cmpw   $0x0,-0x23c(%ebp)
+ 285:	00 
+ 286:	74 d8                	je     260 <ls+0x160>
+      memmove(p, de.name, DIRSIZ);
+ 288:	8d 85 c6 fd ff ff    	lea    -0x23a(%ebp),%eax
+ 28e:	83 ec 04             	sub    $0x4,%esp
+ 291:	6a 0e                	push   $0xe
+ 293:	50                   	push   %eax
+ 294:	ff b5 a4 fd ff ff    	pushl  -0x25c(%ebp)
+ 29a:	e8 b1 02 00 00       	call   550 <memmove>
+      p[DIRSIZ] = 0;
+ 29f:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
+ 2a5:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
+      if(stat(buf, &st) < 0){
+ 2a9:	58                   	pop    %eax
+ 2aa:	5a                   	pop    %edx
+ 2ab:	56                   	push   %esi
+ 2ac:	57                   	push   %edi
+ 2ad:	e8 0e 02 00 00       	call   4c0 <stat>
+ 2b2:	83 c4 10             	add    $0x10,%esp
+ 2b5:	85 c0                	test   %eax,%eax
+ 2b7:	78 5f                	js     318 <ls+0x218>
+      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+ 2b9:	0f bf 85 d4 fd ff ff 	movswl -0x22c(%ebp),%eax
+ 2c0:	83 ec 0c             	sub    $0xc,%esp
+ 2c3:	8b 8d e4 fd ff ff    	mov    -0x21c(%ebp),%ecx
+ 2c9:	8b 95 dc fd ff ff    	mov    -0x224(%ebp),%edx
+ 2cf:	57                   	push   %edi
+ 2d0:	89 8d ac fd ff ff    	mov    %ecx,-0x254(%ebp)
+ 2d6:	89 95 b0 fd ff ff    	mov    %edx,-0x250(%ebp)
+ 2dc:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
+ 2e2:	e8 79 fd ff ff       	call   60 <fmtname>
+ 2e7:	5a                   	pop    %edx
+ 2e8:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
+ 2ee:	59                   	pop    %ecx
+ 2ef:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
+ 2f5:	51                   	push   %ecx
+ 2f6:	52                   	push   %edx
+ 2f7:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)
+ 2fd:	50                   	push   %eax
+ 2fe:	68 70 0a 00 00       	push   $0xa70
+ 303:	6a 01                	push   $0x1
+ 305:	e8 e6 03 00 00       	call   6f0 <printf>
+ 30a:	83 c4 20             	add    $0x20,%esp
+ 30d:	e9 4e ff ff ff       	jmp    260 <ls+0x160>
+ 312:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printf(1, "ls: cannot stat %s\n", buf);
+ 318:	83 ec 04             	sub    $0x4,%esp
+ 31b:	57                   	push   %edi
+ 31c:	68 5c 0a 00 00       	push   $0xa5c
+ 321:	6a 01                	push   $0x1
+ 323:	e8 c8 03 00 00       	call   6f0 <printf>
+        continue;
+ 328:	83 c4 10             	add    $0x10,%esp
+ 32b:	e9 30 ff ff ff       	jmp    260 <ls+0x160>
+
+00000330 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	53                   	push   %ebx
+ 334:	8b 45 08             	mov    0x8(%ebp),%eax
+ 337:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 33a:	89 c2                	mov    %eax,%edx
+ 33c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 340:	83 c1 01             	add    $0x1,%ecx
+ 343:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 347:	83 c2 01             	add    $0x1,%edx
+ 34a:	84 db                	test   %bl,%bl
+ 34c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 34f:	75 ef                	jne    340 <strcpy+0x10>
+    ;
+  return os;
+}
+ 351:	5b                   	pop    %ebx
+ 352:	5d                   	pop    %ebp
+ 353:	c3                   	ret    
+ 354:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 35a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000360 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	53                   	push   %ebx
+ 364:	8b 55 08             	mov    0x8(%ebp),%edx
+ 367:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 36a:	0f b6 02             	movzbl (%edx),%eax
+ 36d:	0f b6 19             	movzbl (%ecx),%ebx
+ 370:	84 c0                	test   %al,%al
+ 372:	75 1c                	jne    390 <strcmp+0x30>
+ 374:	eb 2a                	jmp    3a0 <strcmp+0x40>
+ 376:	8d 76 00             	lea    0x0(%esi),%esi
+ 379:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 380:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 383:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 386:	83 c1 01             	add    $0x1,%ecx
+ 389:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 38c:	84 c0                	test   %al,%al
+ 38e:	74 10                	je     3a0 <strcmp+0x40>
+ 390:	38 d8                	cmp    %bl,%al
+ 392:	74 ec                	je     380 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 394:	29 d8                	sub    %ebx,%eax
+}
+ 396:	5b                   	pop    %ebx
+ 397:	5d                   	pop    %ebp
+ 398:	c3                   	ret    
+ 399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 3a2:	29 d8                	sub    %ebx,%eax
+}
+ 3a4:	5b                   	pop    %ebx
+ 3a5:	5d                   	pop    %ebp
+ 3a6:	c3                   	ret    
+ 3a7:	89 f6                	mov    %esi,%esi
+ 3a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000003b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3b6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 3b9:	74 15                	je     3d0 <strlen+0x20>
+ 3bb:	31 d2                	xor    %edx,%edx
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c0:	83 c2 01             	add    $0x1,%edx
+ 3c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 3c7:	89 d0                	mov    %edx,%eax
+ 3c9:	75 f5                	jne    3c0 <strlen+0x10>
+    ;
+  return n;
+}
+ 3cb:	5d                   	pop    %ebp
+ 3cc:	c3                   	ret    
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 3d0:	31 c0                	xor    %eax,%eax
+}
+ 3d2:	5d                   	pop    %ebp
+ 3d3:	c3                   	ret    
+ 3d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000003e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 3e0:	55                   	push   %ebp
+ 3e1:	89 e5                	mov    %esp,%ebp
+ 3e3:	57                   	push   %edi
+ 3e4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 3e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 3ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3ed:	89 d7                	mov    %edx,%edi
+ 3ef:	fc                   	cld    
+ 3f0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 3f2:	89 d0                	mov    %edx,%eax
+ 3f4:	5f                   	pop    %edi
+ 3f5:	5d                   	pop    %ebp
+ 3f6:	c3                   	ret    
+ 3f7:	89 f6                	mov    %esi,%esi
+ 3f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000400 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	53                   	push   %ebx
+ 404:	8b 45 08             	mov    0x8(%ebp),%eax
+ 407:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 40a:	0f b6 10             	movzbl (%eax),%edx
+ 40d:	84 d2                	test   %dl,%dl
+ 40f:	74 1d                	je     42e <strchr+0x2e>
+    if(*s == c)
+ 411:	38 d3                	cmp    %dl,%bl
+ 413:	89 d9                	mov    %ebx,%ecx
+ 415:	75 0d                	jne    424 <strchr+0x24>
+ 417:	eb 17                	jmp    430 <strchr+0x30>
+ 419:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 420:	38 ca                	cmp    %cl,%dl
+ 422:	74 0c                	je     430 <strchr+0x30>
+  for(; *s; s++)
+ 424:	83 c0 01             	add    $0x1,%eax
+ 427:	0f b6 10             	movzbl (%eax),%edx
+ 42a:	84 d2                	test   %dl,%dl
+ 42c:	75 f2                	jne    420 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 42e:	31 c0                	xor    %eax,%eax
+}
+ 430:	5b                   	pop    %ebx
+ 431:	5d                   	pop    %ebp
+ 432:	c3                   	ret    
+ 433:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 439:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000440 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 446:	31 f6                	xor    %esi,%esi
+ 448:	89 f3                	mov    %esi,%ebx
+{
+ 44a:	83 ec 1c             	sub    $0x1c,%esp
+ 44d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 450:	eb 2f                	jmp    481 <gets+0x41>
+ 452:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 458:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 45b:	83 ec 04             	sub    $0x4,%esp
+ 45e:	6a 01                	push   $0x1
+ 460:	50                   	push   %eax
+ 461:	6a 00                	push   $0x0
+ 463:	e8 32 01 00 00       	call   59a <read>
+    if(cc < 1)
+ 468:	83 c4 10             	add    $0x10,%esp
+ 46b:	85 c0                	test   %eax,%eax
+ 46d:	7e 1c                	jle    48b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 46f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 473:	83 c7 01             	add    $0x1,%edi
+ 476:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 479:	3c 0a                	cmp    $0xa,%al
+ 47b:	74 23                	je     4a0 <gets+0x60>
+ 47d:	3c 0d                	cmp    $0xd,%al
+ 47f:	74 1f                	je     4a0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 481:	83 c3 01             	add    $0x1,%ebx
+ 484:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 487:	89 fe                	mov    %edi,%esi
+ 489:	7c cd                	jl     458 <gets+0x18>
+ 48b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 48d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 490:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 493:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 496:	5b                   	pop    %ebx
+ 497:	5e                   	pop    %esi
+ 498:	5f                   	pop    %edi
+ 499:	5d                   	pop    %ebp
+ 49a:	c3                   	ret    
+ 49b:	90                   	nop
+ 49c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4a0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4a3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4a6:	01 de                	add    %ebx,%esi
+ 4a8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4aa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4b0:	5b                   	pop    %ebx
+ 4b1:	5e                   	pop    %esi
+ 4b2:	5f                   	pop    %edi
+ 4b3:	5d                   	pop    %ebp
+ 4b4:	c3                   	ret    
+ 4b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000004c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4c0:	55                   	push   %ebp
+ 4c1:	89 e5                	mov    %esp,%ebp
+ 4c3:	56                   	push   %esi
+ 4c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4c5:	83 ec 08             	sub    $0x8,%esp
+ 4c8:	6a 00                	push   $0x0
+ 4ca:	ff 75 08             	pushl  0x8(%ebp)
+ 4cd:	e8 f0 00 00 00       	call   5c2 <open>
+  if(fd < 0)
+ 4d2:	83 c4 10             	add    $0x10,%esp
+ 4d5:	85 c0                	test   %eax,%eax
+ 4d7:	78 27                	js     500 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 4d9:	83 ec 08             	sub    $0x8,%esp
+ 4dc:	ff 75 0c             	pushl  0xc(%ebp)
+ 4df:	89 c3                	mov    %eax,%ebx
+ 4e1:	50                   	push   %eax
+ 4e2:	e8 f3 00 00 00       	call   5da <fstat>
+  close(fd);
+ 4e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 4ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 4ec:	e8 b9 00 00 00       	call   5aa <close>
+  return r;
+ 4f1:	83 c4 10             	add    $0x10,%esp
+}
+ 4f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 4f7:	89 f0                	mov    %esi,%eax
+ 4f9:	5b                   	pop    %ebx
+ 4fa:	5e                   	pop    %esi
+ 4fb:	5d                   	pop    %ebp
+ 4fc:	c3                   	ret    
+ 4fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 500:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 505:	eb ed                	jmp    4f4 <stat+0x34>
+ 507:	89 f6                	mov    %esi,%esi
+ 509:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000510 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 510:	55                   	push   %ebp
+ 511:	89 e5                	mov    %esp,%ebp
+ 513:	53                   	push   %ebx
+ 514:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 517:	0f be 11             	movsbl (%ecx),%edx
+ 51a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 51d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 51f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 524:	77 1f                	ja     545 <atoi+0x35>
+ 526:	8d 76 00             	lea    0x0(%esi),%esi
+ 529:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 530:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 533:	83 c1 01             	add    $0x1,%ecx
+ 536:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 53a:	0f be 11             	movsbl (%ecx),%edx
+ 53d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 540:	80 fb 09             	cmp    $0x9,%bl
+ 543:	76 eb                	jbe    530 <atoi+0x20>
+  return n;
+}
+ 545:	5b                   	pop    %ebx
+ 546:	5d                   	pop    %ebp
+ 547:	c3                   	ret    
+ 548:	90                   	nop
+ 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000550 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 550:	55                   	push   %ebp
+ 551:	89 e5                	mov    %esp,%ebp
+ 553:	56                   	push   %esi
+ 554:	53                   	push   %ebx
+ 555:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 558:	8b 45 08             	mov    0x8(%ebp),%eax
+ 55b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 55e:	85 db                	test   %ebx,%ebx
+ 560:	7e 14                	jle    576 <memmove+0x26>
+ 562:	31 d2                	xor    %edx,%edx
+ 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 568:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 56c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 56f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 572:	39 d3                	cmp    %edx,%ebx
+ 574:	75 f2                	jne    568 <memmove+0x18>
+  return vdst;
+}
+ 576:	5b                   	pop    %ebx
+ 577:	5e                   	pop    %esi
+ 578:	5d                   	pop    %ebp
+ 579:	c3                   	ret    
+
+0000057a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 57a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 57f:	cd 40                	int    $0x40
+ 581:	c3                   	ret    
+
+00000582 <exit>:
+SYSCALL(exit)
+ 582:	b8 02 00 00 00       	mov    $0x2,%eax
+ 587:	cd 40                	int    $0x40
+ 589:	c3                   	ret    
+
+0000058a <wait>:
+SYSCALL(wait)
+ 58a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 58f:	cd 40                	int    $0x40
+ 591:	c3                   	ret    
+
+00000592 <pipe>:
+SYSCALL(pipe)
+ 592:	b8 04 00 00 00       	mov    $0x4,%eax
+ 597:	cd 40                	int    $0x40
+ 599:	c3                   	ret    
+
+0000059a <read>:
+SYSCALL(read)
+ 59a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 59f:	cd 40                	int    $0x40
+ 5a1:	c3                   	ret    
+
+000005a2 <write>:
+SYSCALL(write)
+ 5a2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5a7:	cd 40                	int    $0x40
+ 5a9:	c3                   	ret    
+
+000005aa <close>:
+SYSCALL(close)
+ 5aa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5af:	cd 40                	int    $0x40
+ 5b1:	c3                   	ret    
+
+000005b2 <kill>:
+SYSCALL(kill)
+ 5b2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5b7:	cd 40                	int    $0x40
+ 5b9:	c3                   	ret    
+
+000005ba <exec>:
+SYSCALL(exec)
+ 5ba:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5bf:	cd 40                	int    $0x40
+ 5c1:	c3                   	ret    
+
+000005c2 <open>:
+SYSCALL(open)
+ 5c2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5c7:	cd 40                	int    $0x40
+ 5c9:	c3                   	ret    
+
+000005ca <mknod>:
+SYSCALL(mknod)
+ 5ca:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5cf:	cd 40                	int    $0x40
+ 5d1:	c3                   	ret    
+
+000005d2 <unlink>:
+SYSCALL(unlink)
+ 5d2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5d7:	cd 40                	int    $0x40
+ 5d9:	c3                   	ret    
+
+000005da <fstat>:
+SYSCALL(fstat)
+ 5da:	b8 08 00 00 00       	mov    $0x8,%eax
+ 5df:	cd 40                	int    $0x40
+ 5e1:	c3                   	ret    
+
+000005e2 <link>:
+SYSCALL(link)
+ 5e2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 5e7:	cd 40                	int    $0x40
+ 5e9:	c3                   	ret    
+
+000005ea <mkdir>:
+SYSCALL(mkdir)
+ 5ea:	b8 14 00 00 00       	mov    $0x14,%eax
+ 5ef:	cd 40                	int    $0x40
+ 5f1:	c3                   	ret    
+
+000005f2 <chdir>:
+SYSCALL(chdir)
+ 5f2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 5f7:	cd 40                	int    $0x40
+ 5f9:	c3                   	ret    
+
+000005fa <dup>:
+SYSCALL(dup)
+ 5fa:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 5ff:	cd 40                	int    $0x40
+ 601:	c3                   	ret    
+
+00000602 <getpid>:
+SYSCALL(getpid)
+ 602:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 607:	cd 40                	int    $0x40
+ 609:	c3                   	ret    
+
+0000060a <sbrk>:
+SYSCALL(sbrk)
+ 60a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 60f:	cd 40                	int    $0x40
+ 611:	c3                   	ret    
+
+00000612 <sleep>:
+SYSCALL(sleep)
+ 612:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 617:	cd 40                	int    $0x40
+ 619:	c3                   	ret    
+
+0000061a <uptime>:
+SYSCALL(uptime)
+ 61a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 61f:	cd 40                	int    $0x40
+ 621:	c3                   	ret    
+
+00000622 <kmalloc>:
+SYSCALL(kmalloc)
+ 622:	b8 16 00 00 00       	mov    $0x16,%eax
+ 627:	cd 40                	int    $0x40
+ 629:	c3                   	ret    
+
+0000062a <kmfree>:
+SYSCALL(kmfree) 
+ 62a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 62f:	cd 40                	int    $0x40
+ 631:	c3                   	ret    
+
+00000632 <mmap>:
+SYSCALL(mmap)
+ 632:	b8 18 00 00 00       	mov    $0x18,%eax
+ 637:	cd 40                	int    $0x40
+ 639:	c3                   	ret    
+
+0000063a <munmap>:
+ 63a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 63f:	cd 40                	int    $0x40
+ 641:	c3                   	ret    
+ 642:	66 90                	xchg   %ax,%ax
+ 644:	66 90                	xchg   %ax,%ax
+ 646:	66 90                	xchg   %ax,%ax
+ 648:	66 90                	xchg   %ax,%ax
+ 64a:	66 90                	xchg   %ax,%ax
+ 64c:	66 90                	xchg   %ax,%ax
+ 64e:	66 90                	xchg   %ax,%ax
+
+00000650 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 650:	55                   	push   %ebp
+ 651:	89 e5                	mov    %esp,%ebp
+ 653:	57                   	push   %edi
+ 654:	56                   	push   %esi
+ 655:	53                   	push   %ebx
+ 656:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 659:	85 d2                	test   %edx,%edx
+{
+ 65b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 65e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 660:	79 76                	jns    6d8 <printint+0x88>
+ 662:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 666:	74 70                	je     6d8 <printint+0x88>
+    x = -xx;
+ 668:	f7 d8                	neg    %eax
+    neg = 1;
+ 66a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 671:	31 f6                	xor    %esi,%esi
+ 673:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 676:	eb 0a                	jmp    682 <printint+0x32>
+ 678:	90                   	nop
+ 679:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 680:	89 fe                	mov    %edi,%esi
+ 682:	31 d2                	xor    %edx,%edx
+ 684:	8d 7e 01             	lea    0x1(%esi),%edi
+ 687:	f7 f1                	div    %ecx
+ 689:	0f b6 92 9c 0a 00 00 	movzbl 0xa9c(%edx),%edx
+  }while((x /= base) != 0);
+ 690:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 692:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 695:	75 e9                	jne    680 <printint+0x30>
+  if(neg)
+ 697:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 69a:	85 c0                	test   %eax,%eax
+ 69c:	74 08                	je     6a6 <printint+0x56>
+    buf[i++] = '-';
+ 69e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 6a3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 6a6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 6aa:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 6ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 6b0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 6b3:	83 ec 04             	sub    $0x4,%esp
+ 6b6:	83 ee 01             	sub    $0x1,%esi
+ 6b9:	6a 01                	push   $0x1
+ 6bb:	53                   	push   %ebx
+ 6bc:	57                   	push   %edi
+ 6bd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 6c0:	e8 dd fe ff ff       	call   5a2 <write>
+
+  while(--i >= 0)
+ 6c5:	83 c4 10             	add    $0x10,%esp
+ 6c8:	39 de                	cmp    %ebx,%esi
+ 6ca:	75 e4                	jne    6b0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 6cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6cf:	5b                   	pop    %ebx
+ 6d0:	5e                   	pop    %esi
+ 6d1:	5f                   	pop    %edi
+ 6d2:	5d                   	pop    %ebp
+ 6d3:	c3                   	ret    
+ 6d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 6d8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 6df:	eb 90                	jmp    671 <printint+0x21>
+ 6e1:	eb 0d                	jmp    6f0 <printf>
+ 6e3:	90                   	nop
+ 6e4:	90                   	nop
+ 6e5:	90                   	nop
+ 6e6:	90                   	nop
+ 6e7:	90                   	nop
+ 6e8:	90                   	nop
+ 6e9:	90                   	nop
+ 6ea:	90                   	nop
+ 6eb:	90                   	nop
+ 6ec:	90                   	nop
+ 6ed:	90                   	nop
+ 6ee:	90                   	nop
+ 6ef:	90                   	nop
+
+000006f0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 6f0:	55                   	push   %ebp
+ 6f1:	89 e5                	mov    %esp,%ebp
+ 6f3:	57                   	push   %edi
+ 6f4:	56                   	push   %esi
+ 6f5:	53                   	push   %ebx
+ 6f6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 6f9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 6fc:	0f b6 1e             	movzbl (%esi),%ebx
+ 6ff:	84 db                	test   %bl,%bl
+ 701:	0f 84 b3 00 00 00    	je     7ba <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 707:	8d 45 10             	lea    0x10(%ebp),%eax
+ 70a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 70d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 70f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 712:	eb 2f                	jmp    743 <printf+0x53>
+ 714:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 718:	83 f8 25             	cmp    $0x25,%eax
+ 71b:	0f 84 a7 00 00 00    	je     7c8 <printf+0xd8>
+  write(fd, &c, 1);
+ 721:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 724:	83 ec 04             	sub    $0x4,%esp
+ 727:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 72a:	6a 01                	push   $0x1
+ 72c:	50                   	push   %eax
+ 72d:	ff 75 08             	pushl  0x8(%ebp)
+ 730:	e8 6d fe ff ff       	call   5a2 <write>
+ 735:	83 c4 10             	add    $0x10,%esp
+ 738:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 73b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 73f:	84 db                	test   %bl,%bl
+ 741:	74 77                	je     7ba <printf+0xca>
+    if(state == 0){
+ 743:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 745:	0f be cb             	movsbl %bl,%ecx
+ 748:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 74b:	74 cb                	je     718 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 74d:	83 ff 25             	cmp    $0x25,%edi
+ 750:	75 e6                	jne    738 <printf+0x48>
+      if(c == 'd'){
+ 752:	83 f8 64             	cmp    $0x64,%eax
+ 755:	0f 84 05 01 00 00    	je     860 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 75b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 761:	83 f9 70             	cmp    $0x70,%ecx
+ 764:	74 72                	je     7d8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 766:	83 f8 73             	cmp    $0x73,%eax
+ 769:	0f 84 99 00 00 00    	je     808 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 76f:	83 f8 63             	cmp    $0x63,%eax
+ 772:	0f 84 08 01 00 00    	je     880 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 778:	83 f8 25             	cmp    $0x25,%eax
+ 77b:	0f 84 ef 00 00 00    	je     870 <printf+0x180>
+  write(fd, &c, 1);
+ 781:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 784:	83 ec 04             	sub    $0x4,%esp
+ 787:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 78b:	6a 01                	push   $0x1
+ 78d:	50                   	push   %eax
+ 78e:	ff 75 08             	pushl  0x8(%ebp)
+ 791:	e8 0c fe ff ff       	call   5a2 <write>
+ 796:	83 c4 0c             	add    $0xc,%esp
+ 799:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 79c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 79f:	6a 01                	push   $0x1
+ 7a1:	50                   	push   %eax
+ 7a2:	ff 75 08             	pushl  0x8(%ebp)
+ 7a5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 7a8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 7aa:	e8 f3 fd ff ff       	call   5a2 <write>
+  for(i = 0; fmt[i]; i++){
+ 7af:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 7b3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 7b6:	84 db                	test   %bl,%bl
+ 7b8:	75 89                	jne    743 <printf+0x53>
+    }
+  }
+}
+ 7ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7bd:	5b                   	pop    %ebx
+ 7be:	5e                   	pop    %esi
+ 7bf:	5f                   	pop    %edi
+ 7c0:	5d                   	pop    %ebp
+ 7c1:	c3                   	ret    
+ 7c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 7c8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 7cd:	e9 66 ff ff ff       	jmp    738 <printf+0x48>
+ 7d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 7d8:	83 ec 0c             	sub    $0xc,%esp
+ 7db:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7e0:	6a 00                	push   $0x0
+ 7e2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 7e5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 7e8:	8b 17                	mov    (%edi),%edx
+ 7ea:	e8 61 fe ff ff       	call   650 <printint>
+        ap++;
+ 7ef:	89 f8                	mov    %edi,%eax
+ 7f1:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 7f4:	31 ff                	xor    %edi,%edi
+        ap++;
+ 7f6:	83 c0 04             	add    $0x4,%eax
+ 7f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 7fc:	e9 37 ff ff ff       	jmp    738 <printf+0x48>
+ 801:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 808:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 80b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 80d:	83 c0 04             	add    $0x4,%eax
+ 810:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 813:	85 c9                	test   %ecx,%ecx
+ 815:	0f 84 8e 00 00 00    	je     8a9 <printf+0x1b9>
+        while(*s != 0){
+ 81b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 81e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 820:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 822:	84 c0                	test   %al,%al
+ 824:	0f 84 0e ff ff ff    	je     738 <printf+0x48>
+ 82a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 82d:	89 de                	mov    %ebx,%esi
+ 82f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 832:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 835:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 838:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 83b:	83 c6 01             	add    $0x1,%esi
+ 83e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 841:	6a 01                	push   $0x1
+ 843:	57                   	push   %edi
+ 844:	53                   	push   %ebx
+ 845:	e8 58 fd ff ff       	call   5a2 <write>
+        while(*s != 0){
+ 84a:	0f b6 06             	movzbl (%esi),%eax
+ 84d:	83 c4 10             	add    $0x10,%esp
+ 850:	84 c0                	test   %al,%al
+ 852:	75 e4                	jne    838 <printf+0x148>
+ 854:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 857:	31 ff                	xor    %edi,%edi
+ 859:	e9 da fe ff ff       	jmp    738 <printf+0x48>
+ 85e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 860:	83 ec 0c             	sub    $0xc,%esp
+ 863:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 868:	6a 01                	push   $0x1
+ 86a:	e9 73 ff ff ff       	jmp    7e2 <printf+0xf2>
+ 86f:	90                   	nop
+  write(fd, &c, 1);
+ 870:	83 ec 04             	sub    $0x4,%esp
+ 873:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 876:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 879:	6a 01                	push   $0x1
+ 87b:	e9 21 ff ff ff       	jmp    7a1 <printf+0xb1>
+        putc(fd, *ap);
+ 880:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 883:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 886:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 888:	6a 01                	push   $0x1
+        ap++;
+ 88a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 88d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 890:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 893:	50                   	push   %eax
+ 894:	ff 75 08             	pushl  0x8(%ebp)
+ 897:	e8 06 fd ff ff       	call   5a2 <write>
+        ap++;
+ 89c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 89f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 8a2:	31 ff                	xor    %edi,%edi
+ 8a4:	e9 8f fe ff ff       	jmp    738 <printf+0x48>
+          s = "(null)";
+ 8a9:	bb 92 0a 00 00       	mov    $0xa92,%ebx
+        while(*s != 0){
+ 8ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8b3:	e9 72 ff ff ff       	jmp    82a <printf+0x13a>
+ 8b8:	66 90                	xchg   %ax,%ax
+ 8ba:	66 90                	xchg   %ax,%ax
+ 8bc:	66 90                	xchg   %ax,%ax
+ 8be:	66 90                	xchg   %ax,%ax
+
+000008c0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8c0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8c1:	a1 cc 0d 00 00       	mov    0xdcc,%eax
+{
+ 8c6:	89 e5                	mov    %esp,%ebp
+ 8c8:	57                   	push   %edi
+ 8c9:	56                   	push   %esi
+ 8ca:	53                   	push   %ebx
+ 8cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 8ce:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 8d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8d8:	39 c8                	cmp    %ecx,%eax
+ 8da:	8b 10                	mov    (%eax),%edx
+ 8dc:	73 32                	jae    910 <free+0x50>
+ 8de:	39 d1                	cmp    %edx,%ecx
+ 8e0:	72 04                	jb     8e6 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 8e2:	39 d0                	cmp    %edx,%eax
+ 8e4:	72 32                	jb     918 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 8e6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 8e9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 8ec:	39 fa                	cmp    %edi,%edx
+ 8ee:	74 30                	je     920 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 8f0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 8f3:	8b 50 04             	mov    0x4(%eax),%edx
+ 8f6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 8f9:	39 f1                	cmp    %esi,%ecx
+ 8fb:	74 3a                	je     937 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 8fd:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 8ff:	a3 cc 0d 00 00       	mov    %eax,0xdcc
+}
+ 904:	5b                   	pop    %ebx
+ 905:	5e                   	pop    %esi
+ 906:	5f                   	pop    %edi
+ 907:	5d                   	pop    %ebp
+ 908:	c3                   	ret    
+ 909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 910:	39 d0                	cmp    %edx,%eax
+ 912:	72 04                	jb     918 <free+0x58>
+ 914:	39 d1                	cmp    %edx,%ecx
+ 916:	72 ce                	jb     8e6 <free+0x26>
+{
+ 918:	89 d0                	mov    %edx,%eax
+ 91a:	eb bc                	jmp    8d8 <free+0x18>
+ 91c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 920:	03 72 04             	add    0x4(%edx),%esi
+ 923:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 926:	8b 10                	mov    (%eax),%edx
+ 928:	8b 12                	mov    (%edx),%edx
+ 92a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 92d:	8b 50 04             	mov    0x4(%eax),%edx
+ 930:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 933:	39 f1                	cmp    %esi,%ecx
+ 935:	75 c6                	jne    8fd <free+0x3d>
+    p->s.size += bp->s.size;
+ 937:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 93a:	a3 cc 0d 00 00       	mov    %eax,0xdcc
+    p->s.size += bp->s.size;
+ 93f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 942:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 945:	89 10                	mov    %edx,(%eax)
+}
+ 947:	5b                   	pop    %ebx
+ 948:	5e                   	pop    %esi
+ 949:	5f                   	pop    %edi
+ 94a:	5d                   	pop    %ebp
+ 94b:	c3                   	ret    
+ 94c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000950 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 950:	55                   	push   %ebp
+ 951:	89 e5                	mov    %esp,%ebp
+ 953:	57                   	push   %edi
+ 954:	56                   	push   %esi
+ 955:	53                   	push   %ebx
+ 956:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 959:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 95c:	8b 15 cc 0d 00 00    	mov    0xdcc,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 962:	8d 78 07             	lea    0x7(%eax),%edi
+ 965:	c1 ef 03             	shr    $0x3,%edi
+ 968:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 96b:	85 d2                	test   %edx,%edx
+ 96d:	0f 84 9d 00 00 00    	je     a10 <malloc+0xc0>
+ 973:	8b 02                	mov    (%edx),%eax
+ 975:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 978:	39 cf                	cmp    %ecx,%edi
+ 97a:	76 6c                	jbe    9e8 <malloc+0x98>
+ 97c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 982:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 987:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 98a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 991:	eb 0e                	jmp    9a1 <malloc+0x51>
+ 993:	90                   	nop
+ 994:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 998:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 99a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 99d:	39 f9                	cmp    %edi,%ecx
+ 99f:	73 47                	jae    9e8 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9a1:	39 05 cc 0d 00 00    	cmp    %eax,0xdcc
+ 9a7:	89 c2                	mov    %eax,%edx
+ 9a9:	75 ed                	jne    998 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 9ab:	83 ec 0c             	sub    $0xc,%esp
+ 9ae:	56                   	push   %esi
+ 9af:	e8 56 fc ff ff       	call   60a <sbrk>
+  if(p == (char*)-1)
+ 9b4:	83 c4 10             	add    $0x10,%esp
+ 9b7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9ba:	74 1c                	je     9d8 <malloc+0x88>
+  hp->s.size = nu;
+ 9bc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9bf:	83 ec 0c             	sub    $0xc,%esp
+ 9c2:	83 c0 08             	add    $0x8,%eax
+ 9c5:	50                   	push   %eax
+ 9c6:	e8 f5 fe ff ff       	call   8c0 <free>
+  return freep;
+ 9cb:	8b 15 cc 0d 00 00    	mov    0xdcc,%edx
+      if((p = morecore(nunits)) == 0)
+ 9d1:	83 c4 10             	add    $0x10,%esp
+ 9d4:	85 d2                	test   %edx,%edx
+ 9d6:	75 c0                	jne    998 <malloc+0x48>
+        return 0;
+  }
+}
+ 9d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 9db:	31 c0                	xor    %eax,%eax
+}
+ 9dd:	5b                   	pop    %ebx
+ 9de:	5e                   	pop    %esi
+ 9df:	5f                   	pop    %edi
+ 9e0:	5d                   	pop    %ebp
+ 9e1:	c3                   	ret    
+ 9e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 9e8:	39 cf                	cmp    %ecx,%edi
+ 9ea:	74 54                	je     a40 <malloc+0xf0>
+        p->s.size -= nunits;
+ 9ec:	29 f9                	sub    %edi,%ecx
+ 9ee:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 9f1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 9f4:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 9f7:	89 15 cc 0d 00 00    	mov    %edx,0xdcc
+}
+ 9fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a00:	83 c0 08             	add    $0x8,%eax
+}
+ a03:	5b                   	pop    %ebx
+ a04:	5e                   	pop    %esi
+ a05:	5f                   	pop    %edi
+ a06:	5d                   	pop    %ebp
+ a07:	c3                   	ret    
+ a08:	90                   	nop
+ a09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ a10:	c7 05 cc 0d 00 00 d0 	movl   $0xdd0,0xdcc
+ a17:	0d 00 00 
+ a1a:	c7 05 d0 0d 00 00 d0 	movl   $0xdd0,0xdd0
+ a21:	0d 00 00 
+    base.s.size = 0;
+ a24:	b8 d0 0d 00 00       	mov    $0xdd0,%eax
+ a29:	c7 05 d4 0d 00 00 00 	movl   $0x0,0xdd4
+ a30:	00 00 00 
+ a33:	e9 44 ff ff ff       	jmp    97c <malloc+0x2c>
+ a38:	90                   	nop
+ a39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ a40:	8b 08                	mov    (%eax),%ecx
+ a42:	89 0a                	mov    %ecx,(%edx)
+ a44:	eb b1                	jmp    9f7 <malloc+0xa7>
diff -ruN src-old/ls.d src/ls.d
--- src-old/ls.d	1970-01-01 00:00:00.000000000 +0000
+++ src/ls.d	2023-04-19 02:18:56.148191599 +0000
@@ -0,0 +1 @@
+ls.o: ls.c /usr/include/stdc-predef.h types.h stat.h user.h fs.h
Binary files src-old/ls.o and src/ls.o differ
diff -ruN src-old/ls.sym src/ls.sym
--- src-old/ls.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/ls.sym	2023-04-19 02:18:56.176194911 +0000
@@ -0,0 +1,64 @@
+00000000 .text
+00000a48 .rodata
+00000ab0 .eh_frame
+00000dbc .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ls.c
+00000dbc buf.1063
+00000000 ulib.c
+00000000 printf.c
+00000650 printint
+00000a9c digits.1052
+00000000 umalloc.c
+00000dcc freep
+00000dd0 base
+00000330 strcpy
+00000060 fmtname
+000006f0 printf
+00000550 memmove
+0000063a munmap
+000005ca mknod
+00000440 gets
+00000602 getpid
+00000950 malloc
+00000612 sleep
+0000062a kmfree
+00000632 mmap
+00000592 pipe
+000005a2 write
+000005da fstat
+000005b2 kill
+000005f2 chdir
+000005ba exec
+0000058a wait
+0000059a read
+000005d2 unlink
+0000057a fork
+0000060a sbrk
+0000061a uptime
+00000dbc __bss_start
+000003e0 memset
+00000000 main
+00000360 strcmp
+000005fa dup
+000004c0 stat
+00000dbc _edata
+00000dd8 _end
+000005e2 link
+00000622 kmalloc
+00000100 ls
+00000582 exit
+00000510 atoi
+000003b0 strlen
+000005c2 open
+00000400 strchr
+000005ea mkdir
+000005aa close
+000008c0 free
diff -ruN src-old/main.d src/main.d
--- src-old/main.d	1970-01-01 00:00:00.000000000 +0000
+++ src/main.d	2023-04-19 02:18:54.371980993 +0000
@@ -0,0 +1,2 @@
+main.o: main.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h
Binary files src-old/main.o and src/main.o differ
diff -ruN src-old/Makefile src/Makefile
--- src-old/Makefile	2023-04-19 02:17:15.882978788 +0000
+++ src/Makefile	2023-04-19 02:17:16.010997630 +0000
@@ -7,6 +7,8 @@
 	ide.o\
 	ioapic.o\
 	kalloc.o\
+	kmalloc.o\
+	mmap.o\
 	kbd.o\
 	lapic.o\
 	log.o\
@@ -28,6 +30,7 @@
 	vectors.o\
 	vm.o\
 
+
 # Cross-compiling (e.g., on Mac OS X)
 # TOOLPREFIX = i386-jos-elf
 
@@ -181,6 +184,10 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_xv6_2\
+	_buggy\
+	_five\
+
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -248,12 +255,15 @@
 # check in that version.
 
 EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	mkfs.c xv6_2.c buggy.c five.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
+	kmalloc.c\
+	mmap.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
+
 dist:
 	rm -rf dist
 	mkdir dist
diff -ruN src-old/Makefile.test src/Makefile.test
--- src-old/Makefile.test	2023-04-19 02:17:15.882978788 +0000
+++ src/Makefile.test	2023-04-19 02:18:53.351859710 +0000
@@ -7,6 +7,8 @@
 	ide.o\
 	ioapic.o\
 	kalloc.o\
+	kmalloc.o\
+	mmap.o\
 	kbd.o\
 	lapic.o\
 	log.o\
@@ -28,6 +30,7 @@
 	vectors.o\
 	vm.o\
 
+
 # Cross-compiling (e.g., on Mac OS X)
 # TOOLPREFIX = i386-jos-elf
 
@@ -188,6 +191,10 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_xv6_2\
+	_buggy\
+	_five\
+
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -255,12 +262,15 @@
 # check in that version.
 
 EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	mkfs.c xv6_2.c buggy.c five.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
+	kmalloc.c\
+	mmap.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
+
 dist:
 	rm -rf dist
 	mkdir dist
Binary files src-old/_mkdir and src/_mkdir differ
diff -ruN src-old/mkdir.asm src/mkdir.asm
--- src-old/mkdir.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/mkdir.asm	2023-04-19 02:18:56.644250269 +0000
@@ -0,0 +1,1210 @@
+
+_mkdir:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	bf 01 00 00 00       	mov    $0x1,%edi
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 31                	mov    (%ecx),%esi
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  21:	83 fe 01             	cmp    $0x1,%esi
+  24:	7e 3e                	jle    64 <main+0x64>
+  26:	8d 76 00             	lea    0x0(%esi),%esi
+  29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    printf(2, "Usage: mkdir files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(mkdir(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 00 03 00 00       	call   33a <mkdir>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 82 02 00 00       	call   2d2 <exit>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 af 07 00 00       	push   $0x7af
+  58:	6a 02                	push   $0x2
+  5a:	e8 e1 03 00 00       	call   440 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: mkdir files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 98 07 00 00       	push   $0x798
+  6b:	6a 02                	push   $0x2
+  6d:	e8 ce 03 00 00       	call   440 <printf>
+    exit();
+  72:	e8 5b 02 00 00       	call   2d2 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	55                   	push   %ebp
+  81:	89 e5                	mov    %esp,%ebp
+  83:	53                   	push   %ebx
+  84:	8b 45 08             	mov    0x8(%ebp),%eax
+  87:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  8a:	89 c2                	mov    %eax,%edx
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  90:	83 c1 01             	add    $0x1,%ecx
+  93:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  97:	83 c2 01             	add    $0x1,%edx
+  9a:	84 db                	test   %bl,%bl
+  9c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  9f:	75 ef                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  a1:	5b                   	pop    %ebx
+  a2:	5d                   	pop    %ebp
+  a3:	c3                   	ret    
+  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	53                   	push   %ebx
+  b4:	8b 55 08             	mov    0x8(%ebp),%edx
+  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  ba:	0f b6 02             	movzbl (%edx),%eax
+  bd:	0f b6 19             	movzbl (%ecx),%ebx
+  c0:	84 c0                	test   %al,%al
+  c2:	75 1c                	jne    e0 <strcmp+0x30>
+  c4:	eb 2a                	jmp    f0 <strcmp+0x40>
+  c6:	8d 76 00             	lea    0x0(%esi),%esi
+  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  d0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  d3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  d6:	83 c1 01             	add    $0x1,%ecx
+  d9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  dc:	84 c0                	test   %al,%al
+  de:	74 10                	je     f0 <strcmp+0x40>
+  e0:	38 d8                	cmp    %bl,%al
+  e2:	74 ec                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e4:	29 d8                	sub    %ebx,%eax
+}
+  e6:	5b                   	pop    %ebx
+  e7:	5d                   	pop    %ebp
+  e8:	c3                   	ret    
+  e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	89 f6                	mov    %esi,%esi
+  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 106:	80 39 00             	cmpb   $0x0,(%ecx)
+ 109:	74 15                	je     120 <strlen+0x20>
+ 10b:	31 d2                	xor    %edx,%edx
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+ 110:	83 c2 01             	add    $0x1,%edx
+ 113:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 117:	89 d0                	mov    %edx,%eax
+ 119:	75 f5                	jne    110 <strlen+0x10>
+    ;
+  return n;
+}
+ 11b:	5d                   	pop    %ebp
+ 11c:	c3                   	ret    
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 120:	31 c0                	xor    %eax,%eax
+}
+ 122:	5d                   	pop    %ebp
+ 123:	c3                   	ret    
+ 124:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 12a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	57                   	push   %edi
+ 134:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 137:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 13d:	89 d7                	mov    %edx,%edi
+ 13f:	fc                   	cld    
+ 140:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 142:	89 d0                	mov    %edx,%eax
+ 144:	5f                   	pop    %edi
+ 145:	5d                   	pop    %ebp
+ 146:	c3                   	ret    
+ 147:	89 f6                	mov    %esi,%esi
+ 149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 15a:	0f b6 10             	movzbl (%eax),%edx
+ 15d:	84 d2                	test   %dl,%dl
+ 15f:	74 1d                	je     17e <strchr+0x2e>
+    if(*s == c)
+ 161:	38 d3                	cmp    %dl,%bl
+ 163:	89 d9                	mov    %ebx,%ecx
+ 165:	75 0d                	jne    174 <strchr+0x24>
+ 167:	eb 17                	jmp    180 <strchr+0x30>
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 170:	38 ca                	cmp    %cl,%dl
+ 172:	74 0c                	je     180 <strchr+0x30>
+  for(; *s; s++)
+ 174:	83 c0 01             	add    $0x1,%eax
+ 177:	0f b6 10             	movzbl (%eax),%edx
+ 17a:	84 d2                	test   %dl,%dl
+ 17c:	75 f2                	jne    170 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 17e:	31 c0                	xor    %eax,%eax
+}
+ 180:	5b                   	pop    %ebx
+ 181:	5d                   	pop    %ebp
+ 182:	c3                   	ret    
+ 183:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	57                   	push   %edi
+ 194:	56                   	push   %esi
+ 195:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 196:	31 f6                	xor    %esi,%esi
+ 198:	89 f3                	mov    %esi,%ebx
+{
+ 19a:	83 ec 1c             	sub    $0x1c,%esp
+ 19d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1a0:	eb 2f                	jmp    1d1 <gets+0x41>
+ 1a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1a8:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1ab:	83 ec 04             	sub    $0x4,%esp
+ 1ae:	6a 01                	push   $0x1
+ 1b0:	50                   	push   %eax
+ 1b1:	6a 00                	push   $0x0
+ 1b3:	e8 32 01 00 00       	call   2ea <read>
+    if(cc < 1)
+ 1b8:	83 c4 10             	add    $0x10,%esp
+ 1bb:	85 c0                	test   %eax,%eax
+ 1bd:	7e 1c                	jle    1db <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 1bf:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1c3:	83 c7 01             	add    $0x1,%edi
+ 1c6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1c9:	3c 0a                	cmp    $0xa,%al
+ 1cb:	74 23                	je     1f0 <gets+0x60>
+ 1cd:	3c 0d                	cmp    $0xd,%al
+ 1cf:	74 1f                	je     1f0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1d1:	83 c3 01             	add    $0x1,%ebx
+ 1d4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1d7:	89 fe                	mov    %edi,%esi
+ 1d9:	7c cd                	jl     1a8 <gets+0x18>
+ 1db:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1e0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e6:	5b                   	pop    %ebx
+ 1e7:	5e                   	pop    %esi
+ 1e8:	5f                   	pop    %edi
+ 1e9:	5d                   	pop    %ebp
+ 1ea:	c3                   	ret    
+ 1eb:	90                   	nop
+ 1ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1f0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1f3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f6:	01 de                	add    %ebx,%esi
+ 1f8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1fa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 200:	5b                   	pop    %ebx
+ 201:	5e                   	pop    %esi
+ 202:	5f                   	pop    %edi
+ 203:	5d                   	pop    %ebp
+ 204:	c3                   	ret    
+ 205:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	56                   	push   %esi
+ 214:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 215:	83 ec 08             	sub    $0x8,%esp
+ 218:	6a 00                	push   $0x0
+ 21a:	ff 75 08             	pushl  0x8(%ebp)
+ 21d:	e8 f0 00 00 00       	call   312 <open>
+  if(fd < 0)
+ 222:	83 c4 10             	add    $0x10,%esp
+ 225:	85 c0                	test   %eax,%eax
+ 227:	78 27                	js     250 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	ff 75 0c             	pushl  0xc(%ebp)
+ 22f:	89 c3                	mov    %eax,%ebx
+ 231:	50                   	push   %eax
+ 232:	e8 f3 00 00 00       	call   32a <fstat>
+  close(fd);
+ 237:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 23c:	e8 b9 00 00 00       	call   2fa <close>
+  return r;
+ 241:	83 c4 10             	add    $0x10,%esp
+}
+ 244:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 247:	89 f0                	mov    %esi,%eax
+ 249:	5b                   	pop    %ebx
+ 24a:	5e                   	pop    %esi
+ 24b:	5d                   	pop    %ebp
+ 24c:	c3                   	ret    
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 250:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 255:	eb ed                	jmp    244 <stat+0x34>
+ 257:	89 f6                	mov    %esi,%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	53                   	push   %ebx
+ 264:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 267:	0f be 11             	movsbl (%ecx),%edx
+ 26a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 26d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 26f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 274:	77 1f                	ja     295 <atoi+0x35>
+ 276:	8d 76 00             	lea    0x0(%esi),%esi
+ 279:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 280:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 283:	83 c1 01             	add    $0x1,%ecx
+ 286:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 11             	movsbl (%ecx),%edx
+ 28d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	5b                   	pop    %ebx
+ 296:	5d                   	pop    %ebp
+ 297:	c3                   	ret    
+ 298:	90                   	nop
+ 299:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	56                   	push   %esi
+ 2a4:	53                   	push   %ebx
+ 2a5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 2a8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2ae:	85 db                	test   %ebx,%ebx
+ 2b0:	7e 14                	jle    2c6 <memmove+0x26>
+ 2b2:	31 d2                	xor    %edx,%edx
+ 2b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 2b8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 2bc:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 2bf:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 2c2:	39 d3                	cmp    %edx,%ebx
+ 2c4:	75 f2                	jne    2b8 <memmove+0x18>
+  return vdst;
+}
+ 2c6:	5b                   	pop    %ebx
+ 2c7:	5e                   	pop    %esi
+ 2c8:	5d                   	pop    %ebp
+ 2c9:	c3                   	ret    
+
+000002ca <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ca:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <exit>:
+SYSCALL(exit)
+ 2d2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <wait>:
+SYSCALL(wait)
+ 2da:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <pipe>:
+SYSCALL(pipe)
+ 2e2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <read>:
+SYSCALL(read)
+ 2ea:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <write>:
+SYSCALL(write)
+ 2f2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <close>:
+SYSCALL(close)
+ 2fa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <kill>:
+SYSCALL(kill)
+ 302:	b8 06 00 00 00       	mov    $0x6,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <exec>:
+SYSCALL(exec)
+ 30a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <open>:
+SYSCALL(open)
+ 312:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <mknod>:
+SYSCALL(mknod)
+ 31a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <unlink>:
+SYSCALL(unlink)
+ 322:	b8 12 00 00 00       	mov    $0x12,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <fstat>:
+SYSCALL(fstat)
+ 32a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <link>:
+SYSCALL(link)
+ 332:	b8 13 00 00 00       	mov    $0x13,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <mkdir>:
+SYSCALL(mkdir)
+ 33a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <chdir>:
+SYSCALL(chdir)
+ 342:	b8 09 00 00 00       	mov    $0x9,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <dup>:
+SYSCALL(dup)
+ 34a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <getpid>:
+SYSCALL(getpid)
+ 352:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <sbrk>:
+SYSCALL(sbrk)
+ 35a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <sleep>:
+SYSCALL(sleep)
+ 362:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <uptime>:
+SYSCALL(uptime)
+ 36a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <kmalloc>:
+SYSCALL(kmalloc)
+ 372:	b8 16 00 00 00       	mov    $0x16,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <kmfree>:
+SYSCALL(kmfree) 
+ 37a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <mmap>:
+SYSCALL(mmap)
+ 382:	b8 18 00 00 00       	mov    $0x18,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <munmap>:
+ 38a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+ 392:	66 90                	xchg   %ax,%ax
+ 394:	66 90                	xchg   %ax,%ax
+ 396:	66 90                	xchg   %ax,%ax
+ 398:	66 90                	xchg   %ax,%ax
+ 39a:	66 90                	xchg   %ax,%ax
+ 39c:	66 90                	xchg   %ax,%ax
+ 39e:	66 90                	xchg   %ax,%ax
+
+000003a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3a9:	85 d2                	test   %edx,%edx
+{
+ 3ab:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 3ae:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 3b0:	79 76                	jns    428 <printint+0x88>
+ 3b2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3b6:	74 70                	je     428 <printint+0x88>
+    x = -xx;
+ 3b8:	f7 d8                	neg    %eax
+    neg = 1;
+ 3ba:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3c1:	31 f6                	xor    %esi,%esi
+ 3c3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3c6:	eb 0a                	jmp    3d2 <printint+0x32>
+ 3c8:	90                   	nop
+ 3c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3d0:	89 fe                	mov    %edi,%esi
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3d7:	f7 f1                	div    %ecx
+ 3d9:	0f b6 92 d4 07 00 00 	movzbl 0x7d4(%edx),%edx
+  }while((x /= base) != 0);
+ 3e0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 3e2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 3e5:	75 e9                	jne    3d0 <printint+0x30>
+  if(neg)
+ 3e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ea:	85 c0                	test   %eax,%eax
+ 3ec:	74 08                	je     3f6 <printint+0x56>
+    buf[i++] = '-';
+ 3ee:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3f3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3f6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3fa:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 400:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 403:	83 ec 04             	sub    $0x4,%esp
+ 406:	83 ee 01             	sub    $0x1,%esi
+ 409:	6a 01                	push   $0x1
+ 40b:	53                   	push   %ebx
+ 40c:	57                   	push   %edi
+ 40d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 410:	e8 dd fe ff ff       	call   2f2 <write>
+
+  while(--i >= 0)
+ 415:	83 c4 10             	add    $0x10,%esp
+ 418:	39 de                	cmp    %ebx,%esi
+ 41a:	75 e4                	jne    400 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 41f:	5b                   	pop    %ebx
+ 420:	5e                   	pop    %esi
+ 421:	5f                   	pop    %edi
+ 422:	5d                   	pop    %ebp
+ 423:	c3                   	ret    
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 428:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 42f:	eb 90                	jmp    3c1 <printint+0x21>
+ 431:	eb 0d                	jmp    440 <printf>
+ 433:	90                   	nop
+ 434:	90                   	nop
+ 435:	90                   	nop
+ 436:	90                   	nop
+ 437:	90                   	nop
+ 438:	90                   	nop
+ 439:	90                   	nop
+ 43a:	90                   	nop
+ 43b:	90                   	nop
+ 43c:	90                   	nop
+ 43d:	90                   	nop
+ 43e:	90                   	nop
+ 43f:	90                   	nop
+
+00000440 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+ 446:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 449:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 44c:	0f b6 1e             	movzbl (%esi),%ebx
+ 44f:	84 db                	test   %bl,%bl
+ 451:	0f 84 b3 00 00 00    	je     50a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 457:	8d 45 10             	lea    0x10(%ebp),%eax
+ 45a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 45d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 45f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 462:	eb 2f                	jmp    493 <printf+0x53>
+ 464:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	0f 84 a7 00 00 00    	je     518 <printf+0xd8>
+  write(fd, &c, 1);
+ 471:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 474:	83 ec 04             	sub    $0x4,%esp
+ 477:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 47a:	6a 01                	push   $0x1
+ 47c:	50                   	push   %eax
+ 47d:	ff 75 08             	pushl  0x8(%ebp)
+ 480:	e8 6d fe ff ff       	call   2f2 <write>
+ 485:	83 c4 10             	add    $0x10,%esp
+ 488:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 48b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 48f:	84 db                	test   %bl,%bl
+ 491:	74 77                	je     50a <printf+0xca>
+    if(state == 0){
+ 493:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 495:	0f be cb             	movsbl %bl,%ecx
+ 498:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 49b:	74 cb                	je     468 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 49d:	83 ff 25             	cmp    $0x25,%edi
+ 4a0:	75 e6                	jne    488 <printf+0x48>
+      if(c == 'd'){
+ 4a2:	83 f8 64             	cmp    $0x64,%eax
+ 4a5:	0f 84 05 01 00 00    	je     5b0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4ab:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4b1:	83 f9 70             	cmp    $0x70,%ecx
+ 4b4:	74 72                	je     528 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4b6:	83 f8 73             	cmp    $0x73,%eax
+ 4b9:	0f 84 99 00 00 00    	je     558 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4bf:	83 f8 63             	cmp    $0x63,%eax
+ 4c2:	0f 84 08 01 00 00    	je     5d0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4c8:	83 f8 25             	cmp    $0x25,%eax
+ 4cb:	0f 84 ef 00 00 00    	je     5c0 <printf+0x180>
+  write(fd, &c, 1);
+ 4d1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4d4:	83 ec 04             	sub    $0x4,%esp
+ 4d7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4db:	6a 01                	push   $0x1
+ 4dd:	50                   	push   %eax
+ 4de:	ff 75 08             	pushl  0x8(%ebp)
+ 4e1:	e8 0c fe ff ff       	call   2f2 <write>
+ 4e6:	83 c4 0c             	add    $0xc,%esp
+ 4e9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4ec:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4ef:	6a 01                	push   $0x1
+ 4f1:	50                   	push   %eax
+ 4f2:	ff 75 08             	pushl  0x8(%ebp)
+ 4f5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4f8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 4fa:	e8 f3 fd ff ff       	call   2f2 <write>
+  for(i = 0; fmt[i]; i++){
+ 4ff:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 503:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 506:	84 db                	test   %bl,%bl
+ 508:	75 89                	jne    493 <printf+0x53>
+    }
+  }
+}
+ 50a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 50d:	5b                   	pop    %ebx
+ 50e:	5e                   	pop    %esi
+ 50f:	5f                   	pop    %edi
+ 510:	5d                   	pop    %ebp
+ 511:	c3                   	ret    
+ 512:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 518:	bf 25 00 00 00       	mov    $0x25,%edi
+ 51d:	e9 66 ff ff ff       	jmp    488 <printf+0x48>
+ 522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 528:	83 ec 0c             	sub    $0xc,%esp
+ 52b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 530:	6a 00                	push   $0x0
+ 532:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 535:	8b 45 08             	mov    0x8(%ebp),%eax
+ 538:	8b 17                	mov    (%edi),%edx
+ 53a:	e8 61 fe ff ff       	call   3a0 <printint>
+        ap++;
+ 53f:	89 f8                	mov    %edi,%eax
+ 541:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 544:	31 ff                	xor    %edi,%edi
+        ap++;
+ 546:	83 c0 04             	add    $0x4,%eax
+ 549:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 54c:	e9 37 ff ff ff       	jmp    488 <printf+0x48>
+ 551:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 558:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 55b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 55d:	83 c0 04             	add    $0x4,%eax
+ 560:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 563:	85 c9                	test   %ecx,%ecx
+ 565:	0f 84 8e 00 00 00    	je     5f9 <printf+0x1b9>
+        while(*s != 0){
+ 56b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 56e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 570:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 572:	84 c0                	test   %al,%al
+ 574:	0f 84 0e ff ff ff    	je     488 <printf+0x48>
+ 57a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 57d:	89 de                	mov    %ebx,%esi
+ 57f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 582:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 585:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 588:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 58b:	83 c6 01             	add    $0x1,%esi
+ 58e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 591:	6a 01                	push   $0x1
+ 593:	57                   	push   %edi
+ 594:	53                   	push   %ebx
+ 595:	e8 58 fd ff ff       	call   2f2 <write>
+        while(*s != 0){
+ 59a:	0f b6 06             	movzbl (%esi),%eax
+ 59d:	83 c4 10             	add    $0x10,%esp
+ 5a0:	84 c0                	test   %al,%al
+ 5a2:	75 e4                	jne    588 <printf+0x148>
+ 5a4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 5a7:	31 ff                	xor    %edi,%edi
+ 5a9:	e9 da fe ff ff       	jmp    488 <printf+0x48>
+ 5ae:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 5b0:	83 ec 0c             	sub    $0xc,%esp
+ 5b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5b8:	6a 01                	push   $0x1
+ 5ba:	e9 73 ff ff ff       	jmp    532 <printf+0xf2>
+ 5bf:	90                   	nop
+  write(fd, &c, 1);
+ 5c0:	83 ec 04             	sub    $0x4,%esp
+ 5c3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5c6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5c9:	6a 01                	push   $0x1
+ 5cb:	e9 21 ff ff ff       	jmp    4f1 <printf+0xb1>
+        putc(fd, *ap);
+ 5d0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5d3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5d6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5d8:	6a 01                	push   $0x1
+        ap++;
+ 5da:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5dd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 5e0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5e3:	50                   	push   %eax
+ 5e4:	ff 75 08             	pushl  0x8(%ebp)
+ 5e7:	e8 06 fd ff ff       	call   2f2 <write>
+        ap++;
+ 5ec:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5ef:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5f2:	31 ff                	xor    %edi,%edi
+ 5f4:	e9 8f fe ff ff       	jmp    488 <printf+0x48>
+          s = "(null)";
+ 5f9:	bb cb 07 00 00       	mov    $0x7cb,%ebx
+        while(*s != 0){
+ 5fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 603:	e9 72 ff ff ff       	jmp    57a <printf+0x13a>
+ 608:	66 90                	xchg   %ax,%ax
+ 60a:	66 90                	xchg   %ax,%ax
+ 60c:	66 90                	xchg   %ax,%ax
+ 60e:	66 90                	xchg   %ax,%ax
+
+00000610 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 610:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 611:	a1 84 0a 00 00       	mov    0xa84,%eax
+{
+ 616:	89 e5                	mov    %esp,%ebp
+ 618:	57                   	push   %edi
+ 619:	56                   	push   %esi
+ 61a:	53                   	push   %ebx
+ 61b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 61e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 628:	39 c8                	cmp    %ecx,%eax
+ 62a:	8b 10                	mov    (%eax),%edx
+ 62c:	73 32                	jae    660 <free+0x50>
+ 62e:	39 d1                	cmp    %edx,%ecx
+ 630:	72 04                	jb     636 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 632:	39 d0                	cmp    %edx,%eax
+ 634:	72 32                	jb     668 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 636:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 639:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 63c:	39 fa                	cmp    %edi,%edx
+ 63e:	74 30                	je     670 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 640:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 643:	8b 50 04             	mov    0x4(%eax),%edx
+ 646:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 649:	39 f1                	cmp    %esi,%ecx
+ 64b:	74 3a                	je     687 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 64d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 64f:	a3 84 0a 00 00       	mov    %eax,0xa84
+}
+ 654:	5b                   	pop    %ebx
+ 655:	5e                   	pop    %esi
+ 656:	5f                   	pop    %edi
+ 657:	5d                   	pop    %ebp
+ 658:	c3                   	ret    
+ 659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 660:	39 d0                	cmp    %edx,%eax
+ 662:	72 04                	jb     668 <free+0x58>
+ 664:	39 d1                	cmp    %edx,%ecx
+ 666:	72 ce                	jb     636 <free+0x26>
+{
+ 668:	89 d0                	mov    %edx,%eax
+ 66a:	eb bc                	jmp    628 <free+0x18>
+ 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 670:	03 72 04             	add    0x4(%edx),%esi
+ 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 676:	8b 10                	mov    (%eax),%edx
+ 678:	8b 12                	mov    (%edx),%edx
+ 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 67d:	8b 50 04             	mov    0x4(%eax),%edx
+ 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 683:	39 f1                	cmp    %esi,%ecx
+ 685:	75 c6                	jne    64d <free+0x3d>
+    p->s.size += bp->s.size;
+ 687:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 68a:	a3 84 0a 00 00       	mov    %eax,0xa84
+    p->s.size += bp->s.size;
+ 68f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 695:	89 10                	mov    %edx,(%eax)
+}
+ 697:	5b                   	pop    %ebx
+ 698:	5e                   	pop    %esi
+ 699:	5f                   	pop    %edi
+ 69a:	5d                   	pop    %ebp
+ 69b:	c3                   	ret    
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6a0:	55                   	push   %ebp
+ 6a1:	89 e5                	mov    %esp,%ebp
+ 6a3:	57                   	push   %edi
+ 6a4:	56                   	push   %esi
+ 6a5:	53                   	push   %ebx
+ 6a6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6ac:	8b 15 84 0a 00 00    	mov    0xa84,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6b2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6b5:	c1 ef 03             	shr    $0x3,%edi
+ 6b8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6bb:	85 d2                	test   %edx,%edx
+ 6bd:	0f 84 9d 00 00 00    	je     760 <malloc+0xc0>
+ 6c3:	8b 02                	mov    (%edx),%eax
+ 6c5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 6c8:	39 cf                	cmp    %ecx,%edi
+ 6ca:	76 6c                	jbe    738 <malloc+0x98>
+ 6cc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6d2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6d7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6da:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6e1:	eb 0e                	jmp    6f1 <malloc+0x51>
+ 6e3:	90                   	nop
+ 6e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6ea:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ed:	39 f9                	cmp    %edi,%ecx
+ 6ef:	73 47                	jae    738 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6f1:	39 05 84 0a 00 00    	cmp    %eax,0xa84
+ 6f7:	89 c2                	mov    %eax,%edx
+ 6f9:	75 ed                	jne    6e8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6fb:	83 ec 0c             	sub    $0xc,%esp
+ 6fe:	56                   	push   %esi
+ 6ff:	e8 56 fc ff ff       	call   35a <sbrk>
+  if(p == (char*)-1)
+ 704:	83 c4 10             	add    $0x10,%esp
+ 707:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 70a:	74 1c                	je     728 <malloc+0x88>
+  hp->s.size = nu;
+ 70c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 70f:	83 ec 0c             	sub    $0xc,%esp
+ 712:	83 c0 08             	add    $0x8,%eax
+ 715:	50                   	push   %eax
+ 716:	e8 f5 fe ff ff       	call   610 <free>
+  return freep;
+ 71b:	8b 15 84 0a 00 00    	mov    0xa84,%edx
+      if((p = morecore(nunits)) == 0)
+ 721:	83 c4 10             	add    $0x10,%esp
+ 724:	85 d2                	test   %edx,%edx
+ 726:	75 c0                	jne    6e8 <malloc+0x48>
+        return 0;
+  }
+}
+ 728:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 72b:	31 c0                	xor    %eax,%eax
+}
+ 72d:	5b                   	pop    %ebx
+ 72e:	5e                   	pop    %esi
+ 72f:	5f                   	pop    %edi
+ 730:	5d                   	pop    %ebp
+ 731:	c3                   	ret    
+ 732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 738:	39 cf                	cmp    %ecx,%edi
+ 73a:	74 54                	je     790 <malloc+0xf0>
+        p->s.size -= nunits;
+ 73c:	29 f9                	sub    %edi,%ecx
+ 73e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 741:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 744:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 747:	89 15 84 0a 00 00    	mov    %edx,0xa84
+}
+ 74d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 750:	83 c0 08             	add    $0x8,%eax
+}
+ 753:	5b                   	pop    %ebx
+ 754:	5e                   	pop    %esi
+ 755:	5f                   	pop    %edi
+ 756:	5d                   	pop    %ebp
+ 757:	c3                   	ret    
+ 758:	90                   	nop
+ 759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 760:	c7 05 84 0a 00 00 88 	movl   $0xa88,0xa84
+ 767:	0a 00 00 
+ 76a:	c7 05 88 0a 00 00 88 	movl   $0xa88,0xa88
+ 771:	0a 00 00 
+    base.s.size = 0;
+ 774:	b8 88 0a 00 00       	mov    $0xa88,%eax
+ 779:	c7 05 8c 0a 00 00 00 	movl   $0x0,0xa8c
+ 780:	00 00 00 
+ 783:	e9 44 ff ff ff       	jmp    6cc <malloc+0x2c>
+ 788:	90                   	nop
+ 789:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 790:	8b 08                	mov    (%eax),%ecx
+ 792:	89 0a                	mov    %ecx,(%edx)
+ 794:	eb b1                	jmp    747 <malloc+0xa7>
diff -ruN src-old/mkdir.d src/mkdir.d
--- src-old/mkdir.d	1970-01-01 00:00:00.000000000 +0000
+++ src/mkdir.d	2023-04-19 02:18:56.616246957 +0000
@@ -0,0 +1 @@
+mkdir.o: mkdir.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files src-old/mkdir.o and src/mkdir.o differ
diff -ruN src-old/mkdir.sym src/mkdir.sym
--- src-old/mkdir.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/mkdir.sym	2023-04-19 02:18:56.652251214 +0000
@@ -0,0 +1,61 @@
+00000000 .text
+00000798 .rodata
+000007e8 .eh_frame
+00000a84 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 mkdir.c
+00000000 ulib.c
+00000000 printf.c
+000003a0 printint
+000007d4 digits.1052
+00000000 umalloc.c
+00000a84 freep
+00000a88 base
+00000080 strcpy
+00000440 printf
+000002a0 memmove
+0000038a munmap
+0000031a mknod
+00000190 gets
+00000352 getpid
+000006a0 malloc
+00000362 sleep
+0000037a kmfree
+00000382 mmap
+000002e2 pipe
+000002f2 write
+0000032a fstat
+00000302 kill
+00000342 chdir
+0000030a exec
+000002da wait
+000002ea read
+00000322 unlink
+000002ca fork
+0000035a sbrk
+0000036a uptime
+00000a84 __bss_start
+00000130 memset
+00000000 main
+000000b0 strcmp
+0000034a dup
+00000210 stat
+00000a84 _edata
+00000a90 _end
+00000332 link
+00000372 kmalloc
+000002d2 exit
+00000260 atoi
+00000100 strlen
+00000312 open
+00000150 strchr
+0000033a mkdir
+000002fa close
+00000610 free
Binary files src-old/mkfs and src/mkfs differ
diff -ruN src-old/mmap.c src/mmap.c
--- src-old/mmap.c	1970-01-01 00:00:00.000000000 +0000
+++ src/mmap.c	2023-04-19 02:17:16.018998806 +0000
@@ -0,0 +1,115 @@
+#include "types.h"
+#include "x86.h"
+#include "defs.h"
+#include "date.h"
+#include "param.h"
+#include "memlayout.h"
+#include "mmu.h"
+#include "proc.h"
+
+#define MMAPBASE (KERNBASE / 2)
+void *mmap(void *addr, int length, int prot, int flags, int fd, int offset)
+{
+
+    if (addr < (void *)0 || addr == (void *)KERNBASE || addr > (void *)KERNBASE || length < 1)
+    {
+        return (void *)-1;
+    }
+    
+    struct proc *p = myproc();
+
+    // uint total_length = 0;
+
+    // new item in linked list
+    mmapped_region *r = (mmapped_region *)kmalloc(sizeof(mmapped_region));
+
+    // fill up
+    r->start_addr = (void *)PGROUNDUP(MMAPBASE);
+    r->length = length;
+    r->region_type = flags;
+    r->offset = offset;
+    r->prot = prot;
+    r->next = 0;
+
+    int total_length = length;
+    if (p->nregions == 0)
+    {
+        p->first_region = r;
+    }
+    else
+    {
+        // can probably just use this instead of the if statement but be safe for now
+        int i;
+        mmapped_region *active = p->first_region;
+
+        for (i = 0; i < p->nregions; i++)
+        {
+            active = active->next;
+            total_length += PGROUNDUP(active->length);
+            r->start_addr += PGROUNDUP(active->length);
+        }
+        active->next = r;
+    }
+    uint start = (uint)r->start_addr;
+    
+    allocuvm(p->pgdir, start, start+total_length);
+    p->nregions++;
+
+    return r->start_addr; // fix this when I start freeing regions
+}
+
+int munmap(void *addr, int length)
+{
+    struct proc *p = myproc();
+    if (p->nregions == 0)
+    {
+        return -1;
+    }
+
+    mmapped_region *active = p->first_region;
+    mmapped_region *previous = 0;
+    int counter = 0;
+
+    while (counter < p->nregions)
+    {
+
+        // return (int)(active->start_addr);
+        if ((active->start_addr) == addr)
+        {
+
+            // xv6_2
+            // make clean && make qemu-nox
+
+            if ((active->length) == length)
+            {
+
+                // deallocuvm(p->pgdir, PGROUNDUP((int)addr), PGROUNDUP((int)addr - length));
+                deallocuvm(p->pgdir, PGROUNDUP((int)addr + length), PGROUNDUP((int)addr));
+                // first node
+                if (previous == 0)
+                {
+                    p->first_region = active->next;
+                }
+                // not first node
+                else
+                {
+                    previous->next = active->next;
+                }
+                kmfree(active);
+                p->nregions--;
+
+                return 42;
+            }
+        }
+
+        if (active->next == 0)
+        {
+            return -1;
+        }
+        // previous = active;
+        active = active->next;
+        counter++;
+    }
+
+    return -1;
+}
\ No newline at end of file
diff -ruN src-old/mmap.d src/mmap.d
--- src-old/mmap.d	1970-01-01 00:00:00.000000000 +0000
+++ src/mmap.d	2023-04-19 02:18:54.163956293 +0000
@@ -0,0 +1,2 @@
+mmap.o: mmap.c /usr/include/stdc-predef.h types.h x86.h defs.h date.h \
+ param.h memlayout.h mmu.h proc.h
Binary files src-old/mmap.o and src/mmap.o differ
diff -ruN src-old/mp.d src/mp.d
--- src-old/mp.d	1970-01-01 00:00:00.000000000 +0000
+++ src/mp.d	2023-04-19 02:18:54.427987644 +0000
@@ -0,0 +1,2 @@
+mp.o: mp.c /usr/include/stdc-predef.h types.h defs.h param.h memlayout.h \
+ mp.h x86.h mmu.h proc.h
Binary files src-old/mp.o and src/mp.o differ
diff -ruN src-old/picirq.d src/picirq.d
--- src-old/picirq.d	1970-01-01 00:00:00.000000000 +0000
+++ src/picirq.d	2023-04-19 02:18:54.455990969 +0000
@@ -0,0 +1 @@
+picirq.o: picirq.c /usr/include/stdc-predef.h types.h x86.h traps.h
Binary files src-old/picirq.o and src/picirq.o differ
diff -ruN src-old/pipe.d src/pipe.d
--- src-old/pipe.d	1970-01-01 00:00:00.000000000 +0000
+++ src/pipe.d	2023-04-19 02:18:54.511997622 +0000
@@ -0,0 +1,2 @@
+pipe.o: pipe.c /usr/include/stdc-predef.h types.h defs.h param.h mmu.h \
+ proc.h fs.h spinlock.h sleeplock.h file.h
Binary files src-old/pipe.o and src/pipe.o differ
diff -ruN src-old/printf.d src/printf.d
--- src-old/printf.d	1970-01-01 00:00:00.000000000 +0000
+++ src/printf.d	2023-04-19 02:18:55.648132372 +0000
@@ -0,0 +1 @@
+printf.o: printf.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files src-old/printf.o and src/printf.o differ
diff -ruN src-old/proc.c src/proc.c
--- src-old/proc.c	2023-04-19 02:17:15.958989977 +0000
+++ src/proc.c	2023-04-19 02:17:16.018998806 +0000
@@ -7,7 +7,8 @@
 #include "proc.h"
 #include "spinlock.h"
 
-struct {
+struct
+{
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
@@ -20,32 +21,32 @@
 
 static void wakeup1(void *chan);
 
-void
-pinit(void)
+void pinit(void)
 {
   initlock(&ptable.lock, "ptable");
 }
 
 // Must be called with interrupts disabled
-int
-cpuid() {
-  return mycpu()-cpus;
+int cpuid()
+{
+  return mycpu() - cpus;
 }
 
 // Must be called with interrupts disabled to avoid the caller being
 // rescheduled between reading lapicid and running through the loop.
-struct cpu*
+struct cpu *
 mycpu(void)
 {
   int apicid, i;
-  
-  if(readeflags()&FL_IF)
+
+  if (readeflags() & FL_IF)
     panic("mycpu called with interrupts enabled\n");
-  
+
   apicid = lapicid();
   // APIC IDs are not guaranteed to be contiguous. Maybe we should have
   // a reverse map, or reserve a register to store &cpus[i].
-  for (i = 0; i < ncpu; ++i) {
+  for (i = 0; i < ncpu; ++i)
+  {
     if (cpus[i].apicid == apicid)
       return &cpus[i];
   }
@@ -54,8 +55,9 @@
 
 // Disable interrupts so that we are not rescheduled
 // while reading proc from the cpu structure
-struct proc*
-myproc(void) {
+struct proc *
+myproc(void)
+{
   struct cpu *c;
   struct proc *p;
   pushcli();
@@ -65,12 +67,12 @@
   return p;
 }
 
-//PAGEBREAK: 32
-// Look in the process table for an UNUSED proc.
-// If found, change state to EMBRYO and initialize
-// state required to run in the kernel.
-// Otherwise return 0.
-static struct proc*
+// PAGEBREAK: 32
+//  Look in the process table for an UNUSED proc.
+//  If found, change state to EMBRYO and initialize
+//  state required to run in the kernel.
+//  Otherwise return 0.
+static struct proc *
 allocproc(void)
 {
   struct proc *p;
@@ -78,8 +80,8 @@
 
   acquire(&ptable.lock);
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == UNUSED)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if (p->state == UNUSED)
       goto found;
 
   release(&ptable.lock);
@@ -92,7 +94,8 @@
   release(&ptable.lock);
 
   // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
+  if ((p->kstack = kalloc()) == 0)
+  {
     p->state = UNUSED;
     return 0;
   }
@@ -100,33 +103,32 @@
 
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
-  p->tf = (struct trapframe*)sp;
+  p->tf = (struct trapframe *)sp;
 
   // Set up new context to start executing at forkret,
   // which returns to trapret.
   sp -= 4;
-  *(uint*)sp = (uint)trapret;
+  *(uint *)sp = (uint)trapret;
 
   sp -= sizeof *p->context;
-  p->context = (struct context*)sp;
+  p->context = (struct context *)sp;
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
 
   return p;
 }
 
-//PAGEBREAK: 32
-// Set up first user process.
-void
-userinit(void)
+// PAGEBREAK: 32
+//  Set up first user process.
+void userinit(void)
 {
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
   p = allocproc();
-  
+
   initproc = p;
-  if((p->pgdir = setupkvm()) == 0)
+  if ((p->pgdir = setupkvm()) == 0)
     panic("userinit: out of memory?");
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
   p->sz = PGSIZE;
@@ -137,7 +139,7 @@
   p->tf->ss = p->tf->ds;
   p->tf->eflags = FL_IF;
   p->tf->esp = PGSIZE;
-  p->tf->eip = 0;  // beginning of initcode.S
+  p->tf->eip = 0; // beginning of initcode.S
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
@@ -155,18 +157,20 @@
 
 // Grow current process's memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
+int growproc(int n)
 {
   uint sz;
   struct proc *curproc = myproc();
 
   sz = curproc->sz;
-  if(n > 0){
-    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  if (n > 0)
+  {
+    if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
-  } else if(n < 0){
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+  }
+  else if (n < 0)
+  {
+    if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
       return -1;
   }
   curproc->sz = sz;
@@ -177,20 +181,21 @@
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
-int
-fork(void)
+int fork(void)
 {
   int i, pid;
   struct proc *np;
   struct proc *curproc = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if ((np = allocproc()) == 0)
+  {
     return -1;
   }
 
   // Copy process state from proc.
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+  if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0)
+  {
     kfree(np->kstack);
     np->kstack = 0;
     np->state = UNUSED;
@@ -200,11 +205,24 @@
   np->parent = curproc;
   *np->tf = *curproc->tf;
 
+  np->nregions = curproc->nregions;
+  np->first_region = curproc->first_region;
+
+  mmapped_region *oldactive = curproc->first_region;
+  mmapped_region *newactive = np->first_region;
+  for (i = 0; i < curproc->nregions; i++)
+  {
+    newactive->next = oldactive->next;
+    newactive = newactive->next;
+    oldactive = oldactive->next;
+     
+  }
+
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
 
-  for(i = 0; i < NOFILE; i++)
-    if(curproc->ofile[i])
+  for (i = 0; i < NOFILE; i++)
+    if (curproc->ofile[i])
       np->ofile[i] = filedup(curproc->ofile[i]);
   np->cwd = idup(curproc->cwd);
 
@@ -224,19 +242,20 @@
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait() to find out it exited.
-void
-exit(void)
+void exit(void)
 {
   struct proc *curproc = myproc();
   struct proc *p;
   int fd;
 
-  if(curproc == initproc)
+  if (curproc == initproc)
     panic("init exiting");
 
   // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd]){
+  for (fd = 0; fd < NOFILE; fd++)
+  {
+    if (curproc->ofile[fd])
+    {
       fileclose(curproc->ofile[fd]);
       curproc->ofile[fd] = 0;
     }
@@ -253,10 +272,12 @@
   wakeup1(curproc->parent);
 
   // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->parent == curproc){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->parent == curproc)
+    {
       p->parent = initproc;
-      if(p->state == ZOMBIE)
+      if (p->state == ZOMBIE)
         wakeup1(initproc);
     }
   }
@@ -269,22 +290,24 @@
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int
-wait(void)
+int wait(void)
 {
   struct proc *p;
   int havekids, pid;
   struct proc *curproc = myproc();
-  
+
   acquire(&ptable.lock);
-  for(;;){
+  for (;;)
+  {
     // Scan through table looking for exited children.
     havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != curproc)
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+      if (p->parent != curproc)
         continue;
       havekids = 1;
-      if(p->state == ZOMBIE){
+      if (p->state == ZOMBIE)
+      {
         // Found one.
         pid = p->pid;
         kfree(p->kstack);
@@ -301,39 +324,41 @@
     }
 
     // No point waiting if we don't have any children.
-    if(!havekids || curproc->killed){
+    if (!havekids || curproc->killed)
+    {
       release(&ptable.lock);
       return -1;
     }
 
     // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+    sleep(curproc, &ptable.lock); // DOC: wait-sleep
   }
 }
 
-//PAGEBREAK: 42
-// Per-CPU process scheduler.
-// Each CPU calls scheduler() after setting itself up.
-// Scheduler never returns.  It loops, doing:
-//  - choose a process to run
-//  - swtch to start running that process
-//  - eventually that process transfers control
-//      via swtch back to the scheduler.
-void
-scheduler(void)
+// PAGEBREAK: 42
+//  Per-CPU process scheduler.
+//  Each CPU calls scheduler() after setting itself up.
+//  Scheduler never returns.  It loops, doing:
+//   - choose a process to run
+//   - swtch to start running that process
+//   - eventually that process transfers control
+//       via swtch back to the scheduler.
+void scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
-  for(;;){
+
+  for (;;)
+  {
     // Enable interrupts on this processor.
     sti();
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+      if (p->state != RUNNABLE)
         continue;
 
       // Switch to chosen process.  It is the process's job
@@ -351,7 +376,6 @@
       c->proc = 0;
     }
     release(&ptable.lock);
-
   }
 }
 
@@ -362,19 +386,18 @@
 // be proc->intena and proc->ncli, but that would
 // break in the few places where a lock is held but
 // there's no process.
-void
-sched(void)
+void sched(void)
 {
   int intena;
   struct proc *p = myproc();
 
-  if(!holding(&ptable.lock))
+  if (!holding(&ptable.lock))
     panic("sched ptable.lock");
-  if(mycpu()->ncli != 1)
+  if (mycpu()->ncli != 1)
     panic("sched locks");
-  if(p->state == RUNNING)
+  if (p->state == RUNNING)
     panic("sched running");
-  if(readeflags()&FL_IF)
+  if (readeflags() & FL_IF)
     panic("sched interruptible");
   intena = mycpu()->intena;
   swtch(&p->context, mycpu()->scheduler);
@@ -382,10 +405,9 @@
 }
 
 // Give up the CPU for one scheduling round.
-void
-yield(void)
+void yield(void)
 {
-  acquire(&ptable.lock);  //DOC: yieldlock
+  acquire(&ptable.lock); // DOC: yieldlock
   myproc()->state = RUNNABLE;
   sched();
   release(&ptable.lock);
@@ -393,14 +415,14 @@
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
-void
-forkret(void)
+void forkret(void)
 {
   static int first = 1;
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
 
-  if (first) {
+  if (first)
+  {
     // Some initialization functions must be run in the context
     // of a regular process (e.g., they call sleep), and thus cannot
     // be run from main().
@@ -414,15 +436,14 @@
 
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
+void sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
-  if(p == 0)
+
+  if (p == 0)
     panic("sleep");
 
-  if(lk == 0)
+  if (lk == 0)
     panic("sleep without lk");
 
   // Must acquire ptable.lock in order to
@@ -431,8 +452,9 @@
   // guaranteed that we won't miss any wakeup
   // (wakeup runs with ptable.lock locked),
   // so it's okay to release lk.
-  if(lk != &ptable.lock){  //DOC: sleeplock0
-    acquire(&ptable.lock);  //DOC: sleeplock1
+  if (lk != &ptable.lock)
+  {                        // DOC: sleeplock0
+    acquire(&ptable.lock); // DOC: sleeplock1
     release(lk);
   }
   // Go to sleep.
@@ -445,28 +467,28 @@
   p->chan = 0;
 
   // Reacquire original lock.
-  if(lk != &ptable.lock){  //DOC: sleeplock2
+  if (lk != &ptable.lock)
+  { // DOC: sleeplock2
     release(&ptable.lock);
     acquire(lk);
   }
 }
 
-//PAGEBREAK!
-// Wake up all processes sleeping on chan.
-// The ptable lock must be held.
+// PAGEBREAK!
+//  Wake up all processes sleeping on chan.
+//  The ptable lock must be held.
 static void
 wakeup1(void *chan)
 {
   struct proc *p;
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if (p->state == SLEEPING && p->chan == chan)
       p->state = RUNNABLE;
 }
 
 // Wake up all processes sleeping on chan.
-void
-wakeup(void *chan)
+void wakeup(void *chan)
 {
   acquire(&ptable.lock);
   wakeup1(chan);
@@ -476,17 +498,18 @@
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
-int
-kill(int pid)
+int kill(int pid)
 {
   struct proc *p;
 
   acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->pid == pid){
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->pid == pid)
+    {
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
+      if (p->state == SLEEPING)
         p->state = RUNNABLE;
       release(&ptable.lock);
       return 0;
@@ -496,37 +519,37 @@
   return -1;
 }
 
-//PAGEBREAK: 36
-// Print a process listing to console.  For debugging.
-// Runs when user types ^P on console.
-// No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
+// PAGEBREAK: 36
+//  Print a process listing to console.  For debugging.
+//  Runs when user types ^P on console.
+//  No lock to avoid wedging a stuck machine further.
+void procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [EMBRYO]    "embryo",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
+      [UNUSED] "unused",
+      [EMBRYO] "embryo",
+      [SLEEPING] "sleep ",
+      [RUNNABLE] "runble",
+      [RUNNING] "run   ",
+      [ZOMBIE] "zombie"};
   int i;
   struct proc *p;
   char *state;
   uint pc[10];
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->state == UNUSED)
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+    if (p->state == UNUSED)
       continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
       state = states[p->state];
     else
       state = "???";
     cprintf("%d %s %s", p->pid, state, p->name);
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
+    if (p->state == SLEEPING)
+    {
+      getcallerpcs((uint *)p->context->ebp + 2, pc);
+      for (i = 0; i < 10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
diff -ruN src-old/proc.d src/proc.d
--- src-old/proc.d	1970-01-01 00:00:00.000000000 +0000
+++ src/proc.d	2023-04-19 02:18:54.632011870 +0000
@@ -0,0 +1,2 @@
+proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h x86.h proc.h spinlock.h
diff -ruN src-old/proc.h src/proc.h
--- src-old/proc.h	2023-04-19 02:17:15.962990566 +0000
+++ src/proc.h	2023-04-19 02:17:16.022999393 +0000
@@ -1,30 +1,32 @@
 // Per-CPU state
-struct cpu {
-  uchar apicid;                // Local APIC ID
-  struct context *scheduler;   // swtch() here to enter scheduler
-  struct taskstate ts;         // Used by x86 to find stack for interrupt
-  struct segdesc gdt[NSEGS];   // x86 global descriptor table
-  volatile uint started;       // Has the CPU started?
-  int ncli;                    // Depth of pushcli nesting.
-  int intena;                  // Were interrupts enabled before pushcli?
-  struct proc *proc;           // The process running on this cpu or null
+struct cpu
+{
+  uchar apicid;              // Local APIC ID
+  struct context *scheduler; // swtch() here to enter scheduler
+  struct taskstate ts;       // Used by x86 to find stack for interrupt
+  struct segdesc gdt[NSEGS]; // x86 global descriptor table
+  volatile uint started;     // Has the CPU started?
+  int ncli;                  // Depth of pushcli nesting.
+  int intena;                // Were interrupts enabled before pushcli?
+  struct proc *proc;         // The process running on this cpu or null
 };
 
 extern struct cpu cpus[NCPU];
 extern int ncpu;
 
-//PAGEBREAK: 17
-// Saved registers for kernel context switches.
-// Don't need to save all the segment registers (%cs, etc),
-// because they are constant across kernel contexts.
-// Don't need to save %eax, %ecx, %edx, because the
-// x86 convention is that the caller has saved them.
-// Contexts are stored at the bottom of the stack they
-// describe; the stack pointer is the address of the context.
-// The layout of the context matches the layout of the stack in swtch.S
-// at the "Switch stacks" comment. Switch doesn't save eip explicitly,
-// but it is on the stack and allocproc() manipulates it.
-struct context {
+// PAGEBREAK: 17
+//  Saved registers for kernel context switches.
+//  Don't need to save all the segment registers (%cs, etc),
+//  because they are constant across kernel contexts.
+//  Don't need to save %eax, %ecx, %edx, because the
+//  x86 convention is that the caller has saved them.
+//  Contexts are stored at the bottom of the stack they
+//  describe; the stack pointer is the address of the context.
+//  The layout of the context matches the layout of the stack in swtch.S
+//  at the "Switch stacks" comment. Switch doesn't save eip explicitly,
+//  but it is on the stack and allocproc() manipulates it.
+struct context
+{
   uint edi;
   uint esi;
   uint ebx;
@@ -32,12 +34,34 @@
   uint eip;
 };
 
-enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
+enum procstate
+{
+  UNUSED,
+  EMBRYO,
+  SLEEPING,
+  RUNNABLE,
+  RUNNING,
+  ZOMBIE
+};
+
+typedef struct mmapped_region
+{
+  // Linked-List pointers
+  struct mmapped_region *next;
 
+  // Region Meta-Data:
+  void *start_addr; // starting address for mapped region
+  int length;      // length of allocated region
+  int region_type;  // anonymous of file-backed
+  int offset;       // offset in a file-backed allocation
+  int fd;           // file descriptor (-1 for anonymous allocation)
+  int prot;         // protection bits for the mapped region (default is read-only)
+} mmapped_region;
 // Per-process state
-struct proc {
+struct proc
+{
   uint sz;                     // Size of process memory (bytes)
-  pde_t* pgdir;                // Page table
+  pde_t *pgdir;                // Page table
   char *kstack;                // Bottom of kernel stack for this process
   enum procstate state;        // Process state
   int pid;                     // Process ID
@@ -49,6 +73,8 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int nregions;                
+  mmapped_region *first_region; 
 };
 
 // Process memory is laid out contiguously, low addresses first:
Binary files src-old/proc.o and src/proc.o differ
Binary files src-old/_rm and src/_rm differ
diff -ruN src-old/rm.asm src/rm.asm
--- src-old/rm.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/rm.asm	2023-04-19 02:18:56.704257366 +0000
@@ -0,0 +1,1210 @@
+
+_rm:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	bf 01 00 00 00       	mov    $0x1,%edi
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 31                	mov    (%ecx),%esi
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  21:	83 fe 01             	cmp    $0x1,%esi
+  24:	7e 3e                	jle    64 <main+0x64>
+  26:	8d 76 00             	lea    0x0(%esi),%esi
+  29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    printf(2, "Usage: rm files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(unlink(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 e8 02 00 00       	call   322 <unlink>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 82 02 00 00       	call   2d2 <exit>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 ac 07 00 00       	push   $0x7ac
+  58:	6a 02                	push   $0x2
+  5a:	e8 e1 03 00 00       	call   440 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: rm files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 98 07 00 00       	push   $0x798
+  6b:	6a 02                	push   $0x2
+  6d:	e8 ce 03 00 00       	call   440 <printf>
+    exit();
+  72:	e8 5b 02 00 00       	call   2d2 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	55                   	push   %ebp
+  81:	89 e5                	mov    %esp,%ebp
+  83:	53                   	push   %ebx
+  84:	8b 45 08             	mov    0x8(%ebp),%eax
+  87:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  8a:	89 c2                	mov    %eax,%edx
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  90:	83 c1 01             	add    $0x1,%ecx
+  93:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  97:	83 c2 01             	add    $0x1,%edx
+  9a:	84 db                	test   %bl,%bl
+  9c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  9f:	75 ef                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  a1:	5b                   	pop    %ebx
+  a2:	5d                   	pop    %ebp
+  a3:	c3                   	ret    
+  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	53                   	push   %ebx
+  b4:	8b 55 08             	mov    0x8(%ebp),%edx
+  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  ba:	0f b6 02             	movzbl (%edx),%eax
+  bd:	0f b6 19             	movzbl (%ecx),%ebx
+  c0:	84 c0                	test   %al,%al
+  c2:	75 1c                	jne    e0 <strcmp+0x30>
+  c4:	eb 2a                	jmp    f0 <strcmp+0x40>
+  c6:	8d 76 00             	lea    0x0(%esi),%esi
+  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  d0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  d3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  d6:	83 c1 01             	add    $0x1,%ecx
+  d9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  dc:	84 c0                	test   %al,%al
+  de:	74 10                	je     f0 <strcmp+0x40>
+  e0:	38 d8                	cmp    %bl,%al
+  e2:	74 ec                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e4:	29 d8                	sub    %ebx,%eax
+}
+  e6:	5b                   	pop    %ebx
+  e7:	5d                   	pop    %ebp
+  e8:	c3                   	ret    
+  e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	89 f6                	mov    %esi,%esi
+  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 106:	80 39 00             	cmpb   $0x0,(%ecx)
+ 109:	74 15                	je     120 <strlen+0x20>
+ 10b:	31 d2                	xor    %edx,%edx
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+ 110:	83 c2 01             	add    $0x1,%edx
+ 113:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 117:	89 d0                	mov    %edx,%eax
+ 119:	75 f5                	jne    110 <strlen+0x10>
+    ;
+  return n;
+}
+ 11b:	5d                   	pop    %ebp
+ 11c:	c3                   	ret    
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 120:	31 c0                	xor    %eax,%eax
+}
+ 122:	5d                   	pop    %ebp
+ 123:	c3                   	ret    
+ 124:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 12a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	57                   	push   %edi
+ 134:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 137:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 13d:	89 d7                	mov    %edx,%edi
+ 13f:	fc                   	cld    
+ 140:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 142:	89 d0                	mov    %edx,%eax
+ 144:	5f                   	pop    %edi
+ 145:	5d                   	pop    %ebp
+ 146:	c3                   	ret    
+ 147:	89 f6                	mov    %esi,%esi
+ 149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 15a:	0f b6 10             	movzbl (%eax),%edx
+ 15d:	84 d2                	test   %dl,%dl
+ 15f:	74 1d                	je     17e <strchr+0x2e>
+    if(*s == c)
+ 161:	38 d3                	cmp    %dl,%bl
+ 163:	89 d9                	mov    %ebx,%ecx
+ 165:	75 0d                	jne    174 <strchr+0x24>
+ 167:	eb 17                	jmp    180 <strchr+0x30>
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 170:	38 ca                	cmp    %cl,%dl
+ 172:	74 0c                	je     180 <strchr+0x30>
+  for(; *s; s++)
+ 174:	83 c0 01             	add    $0x1,%eax
+ 177:	0f b6 10             	movzbl (%eax),%edx
+ 17a:	84 d2                	test   %dl,%dl
+ 17c:	75 f2                	jne    170 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 17e:	31 c0                	xor    %eax,%eax
+}
+ 180:	5b                   	pop    %ebx
+ 181:	5d                   	pop    %ebp
+ 182:	c3                   	ret    
+ 183:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	57                   	push   %edi
+ 194:	56                   	push   %esi
+ 195:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 196:	31 f6                	xor    %esi,%esi
+ 198:	89 f3                	mov    %esi,%ebx
+{
+ 19a:	83 ec 1c             	sub    $0x1c,%esp
+ 19d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1a0:	eb 2f                	jmp    1d1 <gets+0x41>
+ 1a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1a8:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1ab:	83 ec 04             	sub    $0x4,%esp
+ 1ae:	6a 01                	push   $0x1
+ 1b0:	50                   	push   %eax
+ 1b1:	6a 00                	push   $0x0
+ 1b3:	e8 32 01 00 00       	call   2ea <read>
+    if(cc < 1)
+ 1b8:	83 c4 10             	add    $0x10,%esp
+ 1bb:	85 c0                	test   %eax,%eax
+ 1bd:	7e 1c                	jle    1db <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 1bf:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1c3:	83 c7 01             	add    $0x1,%edi
+ 1c6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1c9:	3c 0a                	cmp    $0xa,%al
+ 1cb:	74 23                	je     1f0 <gets+0x60>
+ 1cd:	3c 0d                	cmp    $0xd,%al
+ 1cf:	74 1f                	je     1f0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1d1:	83 c3 01             	add    $0x1,%ebx
+ 1d4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1d7:	89 fe                	mov    %edi,%esi
+ 1d9:	7c cd                	jl     1a8 <gets+0x18>
+ 1db:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1e0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e6:	5b                   	pop    %ebx
+ 1e7:	5e                   	pop    %esi
+ 1e8:	5f                   	pop    %edi
+ 1e9:	5d                   	pop    %ebp
+ 1ea:	c3                   	ret    
+ 1eb:	90                   	nop
+ 1ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1f0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1f3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f6:	01 de                	add    %ebx,%esi
+ 1f8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1fa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 200:	5b                   	pop    %ebx
+ 201:	5e                   	pop    %esi
+ 202:	5f                   	pop    %edi
+ 203:	5d                   	pop    %ebp
+ 204:	c3                   	ret    
+ 205:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	56                   	push   %esi
+ 214:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 215:	83 ec 08             	sub    $0x8,%esp
+ 218:	6a 00                	push   $0x0
+ 21a:	ff 75 08             	pushl  0x8(%ebp)
+ 21d:	e8 f0 00 00 00       	call   312 <open>
+  if(fd < 0)
+ 222:	83 c4 10             	add    $0x10,%esp
+ 225:	85 c0                	test   %eax,%eax
+ 227:	78 27                	js     250 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	ff 75 0c             	pushl  0xc(%ebp)
+ 22f:	89 c3                	mov    %eax,%ebx
+ 231:	50                   	push   %eax
+ 232:	e8 f3 00 00 00       	call   32a <fstat>
+  close(fd);
+ 237:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 23c:	e8 b9 00 00 00       	call   2fa <close>
+  return r;
+ 241:	83 c4 10             	add    $0x10,%esp
+}
+ 244:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 247:	89 f0                	mov    %esi,%eax
+ 249:	5b                   	pop    %ebx
+ 24a:	5e                   	pop    %esi
+ 24b:	5d                   	pop    %ebp
+ 24c:	c3                   	ret    
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 250:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 255:	eb ed                	jmp    244 <stat+0x34>
+ 257:	89 f6                	mov    %esi,%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	53                   	push   %ebx
+ 264:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 267:	0f be 11             	movsbl (%ecx),%edx
+ 26a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 26d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 26f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 274:	77 1f                	ja     295 <atoi+0x35>
+ 276:	8d 76 00             	lea    0x0(%esi),%esi
+ 279:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 280:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 283:	83 c1 01             	add    $0x1,%ecx
+ 286:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 11             	movsbl (%ecx),%edx
+ 28d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	5b                   	pop    %ebx
+ 296:	5d                   	pop    %ebp
+ 297:	c3                   	ret    
+ 298:	90                   	nop
+ 299:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	56                   	push   %esi
+ 2a4:	53                   	push   %ebx
+ 2a5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 2a8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2ae:	85 db                	test   %ebx,%ebx
+ 2b0:	7e 14                	jle    2c6 <memmove+0x26>
+ 2b2:	31 d2                	xor    %edx,%edx
+ 2b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 2b8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 2bc:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 2bf:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 2c2:	39 d3                	cmp    %edx,%ebx
+ 2c4:	75 f2                	jne    2b8 <memmove+0x18>
+  return vdst;
+}
+ 2c6:	5b                   	pop    %ebx
+ 2c7:	5e                   	pop    %esi
+ 2c8:	5d                   	pop    %ebp
+ 2c9:	c3                   	ret    
+
+000002ca <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ca:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <exit>:
+SYSCALL(exit)
+ 2d2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <wait>:
+SYSCALL(wait)
+ 2da:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <pipe>:
+SYSCALL(pipe)
+ 2e2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <read>:
+SYSCALL(read)
+ 2ea:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <write>:
+SYSCALL(write)
+ 2f2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <close>:
+SYSCALL(close)
+ 2fa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <kill>:
+SYSCALL(kill)
+ 302:	b8 06 00 00 00       	mov    $0x6,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <exec>:
+SYSCALL(exec)
+ 30a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <open>:
+SYSCALL(open)
+ 312:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <mknod>:
+SYSCALL(mknod)
+ 31a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <unlink>:
+SYSCALL(unlink)
+ 322:	b8 12 00 00 00       	mov    $0x12,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <fstat>:
+SYSCALL(fstat)
+ 32a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <link>:
+SYSCALL(link)
+ 332:	b8 13 00 00 00       	mov    $0x13,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <mkdir>:
+SYSCALL(mkdir)
+ 33a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <chdir>:
+SYSCALL(chdir)
+ 342:	b8 09 00 00 00       	mov    $0x9,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <dup>:
+SYSCALL(dup)
+ 34a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <getpid>:
+SYSCALL(getpid)
+ 352:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <sbrk>:
+SYSCALL(sbrk)
+ 35a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <sleep>:
+SYSCALL(sleep)
+ 362:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <uptime>:
+SYSCALL(uptime)
+ 36a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <kmalloc>:
+SYSCALL(kmalloc)
+ 372:	b8 16 00 00 00       	mov    $0x16,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <kmfree>:
+SYSCALL(kmfree) 
+ 37a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <mmap>:
+SYSCALL(mmap)
+ 382:	b8 18 00 00 00       	mov    $0x18,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <munmap>:
+ 38a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+ 392:	66 90                	xchg   %ax,%ax
+ 394:	66 90                	xchg   %ax,%ax
+ 396:	66 90                	xchg   %ax,%ax
+ 398:	66 90                	xchg   %ax,%ax
+ 39a:	66 90                	xchg   %ax,%ax
+ 39c:	66 90                	xchg   %ax,%ax
+ 39e:	66 90                	xchg   %ax,%ax
+
+000003a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3a9:	85 d2                	test   %edx,%edx
+{
+ 3ab:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 3ae:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 3b0:	79 76                	jns    428 <printint+0x88>
+ 3b2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3b6:	74 70                	je     428 <printint+0x88>
+    x = -xx;
+ 3b8:	f7 d8                	neg    %eax
+    neg = 1;
+ 3ba:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3c1:	31 f6                	xor    %esi,%esi
+ 3c3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3c6:	eb 0a                	jmp    3d2 <printint+0x32>
+ 3c8:	90                   	nop
+ 3c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3d0:	89 fe                	mov    %edi,%esi
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3d7:	f7 f1                	div    %ecx
+ 3d9:	0f b6 92 cc 07 00 00 	movzbl 0x7cc(%edx),%edx
+  }while((x /= base) != 0);
+ 3e0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 3e2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 3e5:	75 e9                	jne    3d0 <printint+0x30>
+  if(neg)
+ 3e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ea:	85 c0                	test   %eax,%eax
+ 3ec:	74 08                	je     3f6 <printint+0x56>
+    buf[i++] = '-';
+ 3ee:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3f3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3f6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3fa:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 400:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 403:	83 ec 04             	sub    $0x4,%esp
+ 406:	83 ee 01             	sub    $0x1,%esi
+ 409:	6a 01                	push   $0x1
+ 40b:	53                   	push   %ebx
+ 40c:	57                   	push   %edi
+ 40d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 410:	e8 dd fe ff ff       	call   2f2 <write>
+
+  while(--i >= 0)
+ 415:	83 c4 10             	add    $0x10,%esp
+ 418:	39 de                	cmp    %ebx,%esi
+ 41a:	75 e4                	jne    400 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 41f:	5b                   	pop    %ebx
+ 420:	5e                   	pop    %esi
+ 421:	5f                   	pop    %edi
+ 422:	5d                   	pop    %ebp
+ 423:	c3                   	ret    
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 428:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 42f:	eb 90                	jmp    3c1 <printint+0x21>
+ 431:	eb 0d                	jmp    440 <printf>
+ 433:	90                   	nop
+ 434:	90                   	nop
+ 435:	90                   	nop
+ 436:	90                   	nop
+ 437:	90                   	nop
+ 438:	90                   	nop
+ 439:	90                   	nop
+ 43a:	90                   	nop
+ 43b:	90                   	nop
+ 43c:	90                   	nop
+ 43d:	90                   	nop
+ 43e:	90                   	nop
+ 43f:	90                   	nop
+
+00000440 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+ 446:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 449:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 44c:	0f b6 1e             	movzbl (%esi),%ebx
+ 44f:	84 db                	test   %bl,%bl
+ 451:	0f 84 b3 00 00 00    	je     50a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 457:	8d 45 10             	lea    0x10(%ebp),%eax
+ 45a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 45d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 45f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 462:	eb 2f                	jmp    493 <printf+0x53>
+ 464:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	0f 84 a7 00 00 00    	je     518 <printf+0xd8>
+  write(fd, &c, 1);
+ 471:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 474:	83 ec 04             	sub    $0x4,%esp
+ 477:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 47a:	6a 01                	push   $0x1
+ 47c:	50                   	push   %eax
+ 47d:	ff 75 08             	pushl  0x8(%ebp)
+ 480:	e8 6d fe ff ff       	call   2f2 <write>
+ 485:	83 c4 10             	add    $0x10,%esp
+ 488:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 48b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 48f:	84 db                	test   %bl,%bl
+ 491:	74 77                	je     50a <printf+0xca>
+    if(state == 0){
+ 493:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 495:	0f be cb             	movsbl %bl,%ecx
+ 498:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 49b:	74 cb                	je     468 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 49d:	83 ff 25             	cmp    $0x25,%edi
+ 4a0:	75 e6                	jne    488 <printf+0x48>
+      if(c == 'd'){
+ 4a2:	83 f8 64             	cmp    $0x64,%eax
+ 4a5:	0f 84 05 01 00 00    	je     5b0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4ab:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4b1:	83 f9 70             	cmp    $0x70,%ecx
+ 4b4:	74 72                	je     528 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4b6:	83 f8 73             	cmp    $0x73,%eax
+ 4b9:	0f 84 99 00 00 00    	je     558 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4bf:	83 f8 63             	cmp    $0x63,%eax
+ 4c2:	0f 84 08 01 00 00    	je     5d0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4c8:	83 f8 25             	cmp    $0x25,%eax
+ 4cb:	0f 84 ef 00 00 00    	je     5c0 <printf+0x180>
+  write(fd, &c, 1);
+ 4d1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4d4:	83 ec 04             	sub    $0x4,%esp
+ 4d7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4db:	6a 01                	push   $0x1
+ 4dd:	50                   	push   %eax
+ 4de:	ff 75 08             	pushl  0x8(%ebp)
+ 4e1:	e8 0c fe ff ff       	call   2f2 <write>
+ 4e6:	83 c4 0c             	add    $0xc,%esp
+ 4e9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4ec:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4ef:	6a 01                	push   $0x1
+ 4f1:	50                   	push   %eax
+ 4f2:	ff 75 08             	pushl  0x8(%ebp)
+ 4f5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4f8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 4fa:	e8 f3 fd ff ff       	call   2f2 <write>
+  for(i = 0; fmt[i]; i++){
+ 4ff:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 503:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 506:	84 db                	test   %bl,%bl
+ 508:	75 89                	jne    493 <printf+0x53>
+    }
+  }
+}
+ 50a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 50d:	5b                   	pop    %ebx
+ 50e:	5e                   	pop    %esi
+ 50f:	5f                   	pop    %edi
+ 510:	5d                   	pop    %ebp
+ 511:	c3                   	ret    
+ 512:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 518:	bf 25 00 00 00       	mov    $0x25,%edi
+ 51d:	e9 66 ff ff ff       	jmp    488 <printf+0x48>
+ 522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 528:	83 ec 0c             	sub    $0xc,%esp
+ 52b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 530:	6a 00                	push   $0x0
+ 532:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 535:	8b 45 08             	mov    0x8(%ebp),%eax
+ 538:	8b 17                	mov    (%edi),%edx
+ 53a:	e8 61 fe ff ff       	call   3a0 <printint>
+        ap++;
+ 53f:	89 f8                	mov    %edi,%eax
+ 541:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 544:	31 ff                	xor    %edi,%edi
+        ap++;
+ 546:	83 c0 04             	add    $0x4,%eax
+ 549:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 54c:	e9 37 ff ff ff       	jmp    488 <printf+0x48>
+ 551:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 558:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 55b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 55d:	83 c0 04             	add    $0x4,%eax
+ 560:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 563:	85 c9                	test   %ecx,%ecx
+ 565:	0f 84 8e 00 00 00    	je     5f9 <printf+0x1b9>
+        while(*s != 0){
+ 56b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 56e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 570:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 572:	84 c0                	test   %al,%al
+ 574:	0f 84 0e ff ff ff    	je     488 <printf+0x48>
+ 57a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 57d:	89 de                	mov    %ebx,%esi
+ 57f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 582:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 585:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 588:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 58b:	83 c6 01             	add    $0x1,%esi
+ 58e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 591:	6a 01                	push   $0x1
+ 593:	57                   	push   %edi
+ 594:	53                   	push   %ebx
+ 595:	e8 58 fd ff ff       	call   2f2 <write>
+        while(*s != 0){
+ 59a:	0f b6 06             	movzbl (%esi),%eax
+ 59d:	83 c4 10             	add    $0x10,%esp
+ 5a0:	84 c0                	test   %al,%al
+ 5a2:	75 e4                	jne    588 <printf+0x148>
+ 5a4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 5a7:	31 ff                	xor    %edi,%edi
+ 5a9:	e9 da fe ff ff       	jmp    488 <printf+0x48>
+ 5ae:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 5b0:	83 ec 0c             	sub    $0xc,%esp
+ 5b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5b8:	6a 01                	push   $0x1
+ 5ba:	e9 73 ff ff ff       	jmp    532 <printf+0xf2>
+ 5bf:	90                   	nop
+  write(fd, &c, 1);
+ 5c0:	83 ec 04             	sub    $0x4,%esp
+ 5c3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5c6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5c9:	6a 01                	push   $0x1
+ 5cb:	e9 21 ff ff ff       	jmp    4f1 <printf+0xb1>
+        putc(fd, *ap);
+ 5d0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5d3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5d6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5d8:	6a 01                	push   $0x1
+        ap++;
+ 5da:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5dd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 5e0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5e3:	50                   	push   %eax
+ 5e4:	ff 75 08             	pushl  0x8(%ebp)
+ 5e7:	e8 06 fd ff ff       	call   2f2 <write>
+        ap++;
+ 5ec:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5ef:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5f2:	31 ff                	xor    %edi,%edi
+ 5f4:	e9 8f fe ff ff       	jmp    488 <printf+0x48>
+          s = "(null)";
+ 5f9:	bb c5 07 00 00       	mov    $0x7c5,%ebx
+        while(*s != 0){
+ 5fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 603:	e9 72 ff ff ff       	jmp    57a <printf+0x13a>
+ 608:	66 90                	xchg   %ax,%ax
+ 60a:	66 90                	xchg   %ax,%ax
+ 60c:	66 90                	xchg   %ax,%ax
+ 60e:	66 90                	xchg   %ax,%ax
+
+00000610 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 610:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 611:	a1 7c 0a 00 00       	mov    0xa7c,%eax
+{
+ 616:	89 e5                	mov    %esp,%ebp
+ 618:	57                   	push   %edi
+ 619:	56                   	push   %esi
+ 61a:	53                   	push   %ebx
+ 61b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 61e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 628:	39 c8                	cmp    %ecx,%eax
+ 62a:	8b 10                	mov    (%eax),%edx
+ 62c:	73 32                	jae    660 <free+0x50>
+ 62e:	39 d1                	cmp    %edx,%ecx
+ 630:	72 04                	jb     636 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 632:	39 d0                	cmp    %edx,%eax
+ 634:	72 32                	jb     668 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 636:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 639:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 63c:	39 fa                	cmp    %edi,%edx
+ 63e:	74 30                	je     670 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 640:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 643:	8b 50 04             	mov    0x4(%eax),%edx
+ 646:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 649:	39 f1                	cmp    %esi,%ecx
+ 64b:	74 3a                	je     687 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 64d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 64f:	a3 7c 0a 00 00       	mov    %eax,0xa7c
+}
+ 654:	5b                   	pop    %ebx
+ 655:	5e                   	pop    %esi
+ 656:	5f                   	pop    %edi
+ 657:	5d                   	pop    %ebp
+ 658:	c3                   	ret    
+ 659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 660:	39 d0                	cmp    %edx,%eax
+ 662:	72 04                	jb     668 <free+0x58>
+ 664:	39 d1                	cmp    %edx,%ecx
+ 666:	72 ce                	jb     636 <free+0x26>
+{
+ 668:	89 d0                	mov    %edx,%eax
+ 66a:	eb bc                	jmp    628 <free+0x18>
+ 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 670:	03 72 04             	add    0x4(%edx),%esi
+ 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 676:	8b 10                	mov    (%eax),%edx
+ 678:	8b 12                	mov    (%edx),%edx
+ 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 67d:	8b 50 04             	mov    0x4(%eax),%edx
+ 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 683:	39 f1                	cmp    %esi,%ecx
+ 685:	75 c6                	jne    64d <free+0x3d>
+    p->s.size += bp->s.size;
+ 687:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 68a:	a3 7c 0a 00 00       	mov    %eax,0xa7c
+    p->s.size += bp->s.size;
+ 68f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 695:	89 10                	mov    %edx,(%eax)
+}
+ 697:	5b                   	pop    %ebx
+ 698:	5e                   	pop    %esi
+ 699:	5f                   	pop    %edi
+ 69a:	5d                   	pop    %ebp
+ 69b:	c3                   	ret    
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6a0:	55                   	push   %ebp
+ 6a1:	89 e5                	mov    %esp,%ebp
+ 6a3:	57                   	push   %edi
+ 6a4:	56                   	push   %esi
+ 6a5:	53                   	push   %ebx
+ 6a6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6ac:	8b 15 7c 0a 00 00    	mov    0xa7c,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6b2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6b5:	c1 ef 03             	shr    $0x3,%edi
+ 6b8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6bb:	85 d2                	test   %edx,%edx
+ 6bd:	0f 84 9d 00 00 00    	je     760 <malloc+0xc0>
+ 6c3:	8b 02                	mov    (%edx),%eax
+ 6c5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 6c8:	39 cf                	cmp    %ecx,%edi
+ 6ca:	76 6c                	jbe    738 <malloc+0x98>
+ 6cc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6d2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6d7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6da:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6e1:	eb 0e                	jmp    6f1 <malloc+0x51>
+ 6e3:	90                   	nop
+ 6e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6ea:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ed:	39 f9                	cmp    %edi,%ecx
+ 6ef:	73 47                	jae    738 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6f1:	39 05 7c 0a 00 00    	cmp    %eax,0xa7c
+ 6f7:	89 c2                	mov    %eax,%edx
+ 6f9:	75 ed                	jne    6e8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6fb:	83 ec 0c             	sub    $0xc,%esp
+ 6fe:	56                   	push   %esi
+ 6ff:	e8 56 fc ff ff       	call   35a <sbrk>
+  if(p == (char*)-1)
+ 704:	83 c4 10             	add    $0x10,%esp
+ 707:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 70a:	74 1c                	je     728 <malloc+0x88>
+  hp->s.size = nu;
+ 70c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 70f:	83 ec 0c             	sub    $0xc,%esp
+ 712:	83 c0 08             	add    $0x8,%eax
+ 715:	50                   	push   %eax
+ 716:	e8 f5 fe ff ff       	call   610 <free>
+  return freep;
+ 71b:	8b 15 7c 0a 00 00    	mov    0xa7c,%edx
+      if((p = morecore(nunits)) == 0)
+ 721:	83 c4 10             	add    $0x10,%esp
+ 724:	85 d2                	test   %edx,%edx
+ 726:	75 c0                	jne    6e8 <malloc+0x48>
+        return 0;
+  }
+}
+ 728:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 72b:	31 c0                	xor    %eax,%eax
+}
+ 72d:	5b                   	pop    %ebx
+ 72e:	5e                   	pop    %esi
+ 72f:	5f                   	pop    %edi
+ 730:	5d                   	pop    %ebp
+ 731:	c3                   	ret    
+ 732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 738:	39 cf                	cmp    %ecx,%edi
+ 73a:	74 54                	je     790 <malloc+0xf0>
+        p->s.size -= nunits;
+ 73c:	29 f9                	sub    %edi,%ecx
+ 73e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 741:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 744:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 747:	89 15 7c 0a 00 00    	mov    %edx,0xa7c
+}
+ 74d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 750:	83 c0 08             	add    $0x8,%eax
+}
+ 753:	5b                   	pop    %ebx
+ 754:	5e                   	pop    %esi
+ 755:	5f                   	pop    %edi
+ 756:	5d                   	pop    %ebp
+ 757:	c3                   	ret    
+ 758:	90                   	nop
+ 759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 760:	c7 05 7c 0a 00 00 80 	movl   $0xa80,0xa7c
+ 767:	0a 00 00 
+ 76a:	c7 05 80 0a 00 00 80 	movl   $0xa80,0xa80
+ 771:	0a 00 00 
+    base.s.size = 0;
+ 774:	b8 80 0a 00 00       	mov    $0xa80,%eax
+ 779:	c7 05 84 0a 00 00 00 	movl   $0x0,0xa84
+ 780:	00 00 00 
+ 783:	e9 44 ff ff ff       	jmp    6cc <malloc+0x2c>
+ 788:	90                   	nop
+ 789:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 790:	8b 08                	mov    (%eax),%ecx
+ 792:	89 0a                	mov    %ecx,(%edx)
+ 794:	eb b1                	jmp    747 <malloc+0xa7>
diff -ruN src-old/rm.d src/rm.d
--- src-old/rm.d	1970-01-01 00:00:00.000000000 +0000
+++ src/rm.d	2023-04-19 02:18:56.680254527 +0000
@@ -0,0 +1 @@
+rm.o: rm.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files src-old/rm.o and src/rm.o differ
diff -ruN src-old/rm.sym src/rm.sym
--- src-old/rm.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/rm.sym	2023-04-19 02:18:56.712258312 +0000
@@ -0,0 +1,61 @@
+00000000 .text
+00000798 .rodata
+000007e0 .eh_frame
+00000a7c .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 rm.c
+00000000 ulib.c
+00000000 printf.c
+000003a0 printint
+000007cc digits.1052
+00000000 umalloc.c
+00000a7c freep
+00000a80 base
+00000080 strcpy
+00000440 printf
+000002a0 memmove
+0000038a munmap
+0000031a mknod
+00000190 gets
+00000352 getpid
+000006a0 malloc
+00000362 sleep
+0000037a kmfree
+00000382 mmap
+000002e2 pipe
+000002f2 write
+0000032a fstat
+00000302 kill
+00000342 chdir
+0000030a exec
+000002da wait
+000002ea read
+00000322 unlink
+000002ca fork
+0000035a sbrk
+0000036a uptime
+00000a7c __bss_start
+00000130 memset
+00000000 main
+000000b0 strcmp
+0000034a dup
+00000210 stat
+00000a7c _edata
+00000a88 _end
+00000332 link
+00000372 kmalloc
+000002d2 exit
+00000260 atoi
+00000100 strlen
+00000312 open
+00000150 strchr
+0000033a mkdir
+000002fa close
+00000610 free
Binary files src-old/_sh and src/_sh differ
diff -ruN src-old/sh.asm src/sh.asm
--- src-old/sh.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/sh.asm	2023-04-19 02:18:56.844273926 +0000
@@ -0,0 +1,2570 @@
+
+_sh:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return 0;
+}
+
+int
+main(void)
+{
+       0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       4:	83 e4 f0             	and    $0xfffffff0,%esp
+       7:	ff 71 fc             	pushl  -0x4(%ecx)
+       a:	55                   	push   %ebp
+       b:	89 e5                	mov    %esp,%ebp
+       d:	51                   	push   %ecx
+       e:	83 ec 04             	sub    $0x4,%esp
+  static char buf[100];
+  int fd;
+
+  // Ensure that three file descriptors are open.
+  while((fd = open("console", O_RDWR)) >= 0){
+      11:	eb 0a                	jmp    1d <main+0x1d>
+      13:	90                   	nop
+      14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(fd >= 3){
+      18:	83 f8 02             	cmp    $0x2,%eax
+      1b:	7f 76                	jg     93 <main+0x93>
+  while((fd = open("console", O_RDWR)) >= 0){
+      1d:	83 ec 08             	sub    $0x8,%esp
+      20:	6a 02                	push   $0x2
+      22:	68 79 12 00 00       	push   $0x1279
+      27:	e8 26 0d 00 00       	call   d52 <open>
+      2c:	83 c4 10             	add    $0x10,%esp
+      2f:	85 c0                	test   %eax,%eax
+      31:	79 e5                	jns    18 <main+0x18>
+      33:	eb 1f                	jmp    54 <main+0x54>
+      35:	8d 76 00             	lea    0x0(%esi),%esi
+    }
+  }
+
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      38:	80 3d a2 18 00 00 20 	cmpb   $0x20,0x18a2
+      3f:	74 7a                	je     bb <main+0xbb>
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+      41:	e8 c4 0c 00 00       	call   d0a <fork>
+  if(pid == -1)
+      46:	83 f8 ff             	cmp    $0xffffffff,%eax
+      49:	74 3b                	je     86 <main+0x86>
+    if(fork1() == 0)
+      4b:	85 c0                	test   %eax,%eax
+      4d:	74 57                	je     a6 <main+0xa6>
+    wait();
+      4f:	e8 c6 0c 00 00       	call   d1a <wait>
+  while(getcmd(buf, sizeof(buf)) >= 0){
+      54:	83 ec 08             	sub    $0x8,%esp
+      57:	6a 64                	push   $0x64
+      59:	68 a0 18 00 00       	push   $0x18a0
+      5e:	e8 9d 00 00 00       	call   100 <getcmd>
+      63:	83 c4 10             	add    $0x10,%esp
+      66:	85 c0                	test   %eax,%eax
+      68:	78 37                	js     a1 <main+0xa1>
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      6a:	80 3d a0 18 00 00 63 	cmpb   $0x63,0x18a0
+      71:	75 ce                	jne    41 <main+0x41>
+      73:	80 3d a1 18 00 00 64 	cmpb   $0x64,0x18a1
+      7a:	74 bc                	je     38 <main+0x38>
+  pid = fork();
+      7c:	e8 89 0c 00 00       	call   d0a <fork>
+  if(pid == -1)
+      81:	83 f8 ff             	cmp    $0xffffffff,%eax
+      84:	75 c5                	jne    4b <main+0x4b>
+    panic("fork");
+      86:	83 ec 0c             	sub    $0xc,%esp
+      89:	68 02 12 00 00       	push   $0x1202
+      8e:	e8 bd 00 00 00       	call   150 <panic>
+      close(fd);
+      93:	83 ec 0c             	sub    $0xc,%esp
+      96:	50                   	push   %eax
+      97:	e8 9e 0c 00 00       	call   d3a <close>
+      break;
+      9c:	83 c4 10             	add    $0x10,%esp
+      9f:	eb b3                	jmp    54 <main+0x54>
+  exit();
+      a1:	e8 6c 0c 00 00       	call   d12 <exit>
+      runcmd(parsecmd(buf));
+      a6:	83 ec 0c             	sub    $0xc,%esp
+      a9:	68 a0 18 00 00       	push   $0x18a0
+      ae:	e8 9d 09 00 00       	call   a50 <parsecmd>
+      b3:	89 04 24             	mov    %eax,(%esp)
+      b6:	e8 b5 00 00 00       	call   170 <runcmd>
+      buf[strlen(buf)-1] = 0;  // chop \n
+      bb:	83 ec 0c             	sub    $0xc,%esp
+      be:	68 a0 18 00 00       	push   $0x18a0
+      c3:	e8 78 0a 00 00       	call   b40 <strlen>
+      if(chdir(buf+3) < 0)
+      c8:	c7 04 24 a3 18 00 00 	movl   $0x18a3,(%esp)
+      buf[strlen(buf)-1] = 0;  // chop \n
+      cf:	c6 80 9f 18 00 00 00 	movb   $0x0,0x189f(%eax)
+      if(chdir(buf+3) < 0)
+      d6:	e8 a7 0c 00 00       	call   d82 <chdir>
+      db:	83 c4 10             	add    $0x10,%esp
+      de:	85 c0                	test   %eax,%eax
+      e0:	0f 89 6e ff ff ff    	jns    54 <main+0x54>
+        printf(2, "cannot cd %s\n", buf+3);
+      e6:	50                   	push   %eax
+      e7:	68 a3 18 00 00       	push   $0x18a3
+      ec:	68 81 12 00 00       	push   $0x1281
+      f1:	6a 02                	push   $0x2
+      f3:	e8 88 0d 00 00       	call   e80 <printf>
+      f8:	83 c4 10             	add    $0x10,%esp
+      fb:	e9 54 ff ff ff       	jmp    54 <main+0x54>
+
+00000100 <getcmd>:
+{
+     100:	55                   	push   %ebp
+     101:	89 e5                	mov    %esp,%ebp
+     103:	56                   	push   %esi
+     104:	53                   	push   %ebx
+     105:	8b 75 0c             	mov    0xc(%ebp),%esi
+     108:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  printf(2, "$ ");
+     10b:	83 ec 08             	sub    $0x8,%esp
+     10e:	68 d8 11 00 00       	push   $0x11d8
+     113:	6a 02                	push   $0x2
+     115:	e8 66 0d 00 00       	call   e80 <printf>
+  memset(buf, 0, nbuf);
+     11a:	83 c4 0c             	add    $0xc,%esp
+     11d:	56                   	push   %esi
+     11e:	6a 00                	push   $0x0
+     120:	53                   	push   %ebx
+     121:	e8 4a 0a 00 00       	call   b70 <memset>
+  gets(buf, nbuf);
+     126:	58                   	pop    %eax
+     127:	5a                   	pop    %edx
+     128:	56                   	push   %esi
+     129:	53                   	push   %ebx
+     12a:	e8 a1 0a 00 00       	call   bd0 <gets>
+  if(buf[0] == 0) // EOF
+     12f:	83 c4 10             	add    $0x10,%esp
+     132:	31 c0                	xor    %eax,%eax
+     134:	80 3b 00             	cmpb   $0x0,(%ebx)
+     137:	0f 94 c0             	sete   %al
+}
+     13a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  if(buf[0] == 0) // EOF
+     13d:	f7 d8                	neg    %eax
+}
+     13f:	5b                   	pop    %ebx
+     140:	5e                   	pop    %esi
+     141:	5d                   	pop    %ebp
+     142:	c3                   	ret    
+     143:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000150 <panic>:
+{
+     150:	55                   	push   %ebp
+     151:	89 e5                	mov    %esp,%ebp
+     153:	83 ec 0c             	sub    $0xc,%esp
+  printf(2, "%s\n", s);
+     156:	ff 75 08             	pushl  0x8(%ebp)
+     159:	68 75 12 00 00       	push   $0x1275
+     15e:	6a 02                	push   $0x2
+     160:	e8 1b 0d 00 00       	call   e80 <printf>
+  exit();
+     165:	e8 a8 0b 00 00       	call   d12 <exit>
+     16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000170 <runcmd>:
+{
+     170:	55                   	push   %ebp
+     171:	89 e5                	mov    %esp,%ebp
+     173:	53                   	push   %ebx
+     174:	83 ec 14             	sub    $0x14,%esp
+     177:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(cmd == 0)
+     17a:	85 db                	test   %ebx,%ebx
+     17c:	74 3a                	je     1b8 <runcmd+0x48>
+  switch(cmd->type){
+     17e:	83 3b 05             	cmpl   $0x5,(%ebx)
+     181:	0f 87 06 01 00 00    	ja     28d <runcmd+0x11d>
+     187:	8b 03                	mov    (%ebx),%eax
+     189:	ff 24 85 90 12 00 00 	jmp    *0x1290(,%eax,4)
+    if(ecmd->argv[0] == 0)
+     190:	8b 43 04             	mov    0x4(%ebx),%eax
+     193:	85 c0                	test   %eax,%eax
+     195:	74 21                	je     1b8 <runcmd+0x48>
+    exec(ecmd->argv[0], ecmd->argv);
+     197:	52                   	push   %edx
+     198:	52                   	push   %edx
+     199:	8d 53 04             	lea    0x4(%ebx),%edx
+     19c:	52                   	push   %edx
+     19d:	50                   	push   %eax
+     19e:	e8 a7 0b 00 00       	call   d4a <exec>
+    printf(2, "exec %s failed\n", ecmd->argv[0]);
+     1a3:	83 c4 0c             	add    $0xc,%esp
+     1a6:	ff 73 04             	pushl  0x4(%ebx)
+     1a9:	68 e2 11 00 00       	push   $0x11e2
+     1ae:	6a 02                	push   $0x2
+     1b0:	e8 cb 0c 00 00       	call   e80 <printf>
+    break;
+     1b5:	83 c4 10             	add    $0x10,%esp
+    exit();
+     1b8:	e8 55 0b 00 00       	call   d12 <exit>
+  pid = fork();
+     1bd:	e8 48 0b 00 00       	call   d0a <fork>
+  if(pid == -1)
+     1c2:	83 f8 ff             	cmp    $0xffffffff,%eax
+     1c5:	0f 84 cf 00 00 00    	je     29a <runcmd+0x12a>
+    if(fork1() == 0)
+     1cb:	85 c0                	test   %eax,%eax
+     1cd:	75 e9                	jne    1b8 <runcmd+0x48>
+      runcmd(bcmd->cmd);
+     1cf:	83 ec 0c             	sub    $0xc,%esp
+     1d2:	ff 73 04             	pushl  0x4(%ebx)
+     1d5:	e8 96 ff ff ff       	call   170 <runcmd>
+    close(rcmd->fd);
+     1da:	83 ec 0c             	sub    $0xc,%esp
+     1dd:	ff 73 14             	pushl  0x14(%ebx)
+     1e0:	e8 55 0b 00 00       	call   d3a <close>
+    if(open(rcmd->file, rcmd->mode) < 0){
+     1e5:	59                   	pop    %ecx
+     1e6:	58                   	pop    %eax
+     1e7:	ff 73 10             	pushl  0x10(%ebx)
+     1ea:	ff 73 08             	pushl  0x8(%ebx)
+     1ed:	e8 60 0b 00 00       	call   d52 <open>
+     1f2:	83 c4 10             	add    $0x10,%esp
+     1f5:	85 c0                	test   %eax,%eax
+     1f7:	79 d6                	jns    1cf <runcmd+0x5f>
+      printf(2, "open %s failed\n", rcmd->file);
+     1f9:	52                   	push   %edx
+     1fa:	ff 73 08             	pushl  0x8(%ebx)
+     1fd:	68 f2 11 00 00       	push   $0x11f2
+     202:	6a 02                	push   $0x2
+     204:	e8 77 0c 00 00       	call   e80 <printf>
+      exit();
+     209:	e8 04 0b 00 00       	call   d12 <exit>
+    if(pipe(p) < 0)
+     20e:	8d 45 f0             	lea    -0x10(%ebp),%eax
+     211:	83 ec 0c             	sub    $0xc,%esp
+     214:	50                   	push   %eax
+     215:	e8 08 0b 00 00       	call   d22 <pipe>
+     21a:	83 c4 10             	add    $0x10,%esp
+     21d:	85 c0                	test   %eax,%eax
+     21f:	0f 88 b0 00 00 00    	js     2d5 <runcmd+0x165>
+  pid = fork();
+     225:	e8 e0 0a 00 00       	call   d0a <fork>
+  if(pid == -1)
+     22a:	83 f8 ff             	cmp    $0xffffffff,%eax
+     22d:	74 6b                	je     29a <runcmd+0x12a>
+    if(fork1() == 0){
+     22f:	85 c0                	test   %eax,%eax
+     231:	0f 84 ab 00 00 00    	je     2e2 <runcmd+0x172>
+  pid = fork();
+     237:	e8 ce 0a 00 00       	call   d0a <fork>
+  if(pid == -1)
+     23c:	83 f8 ff             	cmp    $0xffffffff,%eax
+     23f:	74 59                	je     29a <runcmd+0x12a>
+    if(fork1() == 0){
+     241:	85 c0                	test   %eax,%eax
+     243:	74 62                	je     2a7 <runcmd+0x137>
+    close(p[0]);
+     245:	83 ec 0c             	sub    $0xc,%esp
+     248:	ff 75 f0             	pushl  -0x10(%ebp)
+     24b:	e8 ea 0a 00 00       	call   d3a <close>
+    close(p[1]);
+     250:	58                   	pop    %eax
+     251:	ff 75 f4             	pushl  -0xc(%ebp)
+     254:	e8 e1 0a 00 00       	call   d3a <close>
+    wait();
+     259:	e8 bc 0a 00 00       	call   d1a <wait>
+    wait();
+     25e:	e8 b7 0a 00 00       	call   d1a <wait>
+    break;
+     263:	83 c4 10             	add    $0x10,%esp
+     266:	e9 4d ff ff ff       	jmp    1b8 <runcmd+0x48>
+  pid = fork();
+     26b:	e8 9a 0a 00 00       	call   d0a <fork>
+  if(pid == -1)
+     270:	83 f8 ff             	cmp    $0xffffffff,%eax
+     273:	74 25                	je     29a <runcmd+0x12a>
+    if(fork1() == 0)
+     275:	85 c0                	test   %eax,%eax
+     277:	0f 84 52 ff ff ff    	je     1cf <runcmd+0x5f>
+    wait();
+     27d:	e8 98 0a 00 00       	call   d1a <wait>
+    runcmd(lcmd->right);
+     282:	83 ec 0c             	sub    $0xc,%esp
+     285:	ff 73 08             	pushl  0x8(%ebx)
+     288:	e8 e3 fe ff ff       	call   170 <runcmd>
+    panic("runcmd");
+     28d:	83 ec 0c             	sub    $0xc,%esp
+     290:	68 db 11 00 00       	push   $0x11db
+     295:	e8 b6 fe ff ff       	call   150 <panic>
+    panic("fork");
+     29a:	83 ec 0c             	sub    $0xc,%esp
+     29d:	68 02 12 00 00       	push   $0x1202
+     2a2:	e8 a9 fe ff ff       	call   150 <panic>
+      close(0);
+     2a7:	83 ec 0c             	sub    $0xc,%esp
+     2aa:	6a 00                	push   $0x0
+     2ac:	e8 89 0a 00 00       	call   d3a <close>
+      dup(p[0]);
+     2b1:	5a                   	pop    %edx
+     2b2:	ff 75 f0             	pushl  -0x10(%ebp)
+     2b5:	e8 d0 0a 00 00       	call   d8a <dup>
+      close(p[0]);
+     2ba:	59                   	pop    %ecx
+     2bb:	ff 75 f0             	pushl  -0x10(%ebp)
+     2be:	e8 77 0a 00 00       	call   d3a <close>
+      close(p[1]);
+     2c3:	58                   	pop    %eax
+     2c4:	ff 75 f4             	pushl  -0xc(%ebp)
+     2c7:	e8 6e 0a 00 00       	call   d3a <close>
+      runcmd(pcmd->right);
+     2cc:	58                   	pop    %eax
+     2cd:	ff 73 08             	pushl  0x8(%ebx)
+     2d0:	e8 9b fe ff ff       	call   170 <runcmd>
+      panic("pipe");
+     2d5:	83 ec 0c             	sub    $0xc,%esp
+     2d8:	68 07 12 00 00       	push   $0x1207
+     2dd:	e8 6e fe ff ff       	call   150 <panic>
+      close(1);
+     2e2:	83 ec 0c             	sub    $0xc,%esp
+     2e5:	6a 01                	push   $0x1
+     2e7:	e8 4e 0a 00 00       	call   d3a <close>
+      dup(p[1]);
+     2ec:	58                   	pop    %eax
+     2ed:	ff 75 f4             	pushl  -0xc(%ebp)
+     2f0:	e8 95 0a 00 00       	call   d8a <dup>
+      close(p[0]);
+     2f5:	58                   	pop    %eax
+     2f6:	ff 75 f0             	pushl  -0x10(%ebp)
+     2f9:	e8 3c 0a 00 00       	call   d3a <close>
+      close(p[1]);
+     2fe:	58                   	pop    %eax
+     2ff:	ff 75 f4             	pushl  -0xc(%ebp)
+     302:	e8 33 0a 00 00       	call   d3a <close>
+      runcmd(pcmd->left);
+     307:	58                   	pop    %eax
+     308:	ff 73 04             	pushl  0x4(%ebx)
+     30b:	e8 60 fe ff ff       	call   170 <runcmd>
+
+00000310 <fork1>:
+{
+     310:	55                   	push   %ebp
+     311:	89 e5                	mov    %esp,%ebp
+     313:	83 ec 08             	sub    $0x8,%esp
+  pid = fork();
+     316:	e8 ef 09 00 00       	call   d0a <fork>
+  if(pid == -1)
+     31b:	83 f8 ff             	cmp    $0xffffffff,%eax
+     31e:	74 02                	je     322 <fork1+0x12>
+  return pid;
+}
+     320:	c9                   	leave  
+     321:	c3                   	ret    
+    panic("fork");
+     322:	83 ec 0c             	sub    $0xc,%esp
+     325:	68 02 12 00 00       	push   $0x1202
+     32a:	e8 21 fe ff ff       	call   150 <panic>
+     32f:	90                   	nop
+
+00000330 <execcmd>:
+//PAGEBREAK!
+// Constructors
+
+struct cmd*
+execcmd(void)
+{
+     330:	55                   	push   %ebp
+     331:	89 e5                	mov    %esp,%ebp
+     333:	53                   	push   %ebx
+     334:	83 ec 10             	sub    $0x10,%esp
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     337:	6a 54                	push   $0x54
+     339:	e8 a2 0d 00 00       	call   10e0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     33e:	83 c4 0c             	add    $0xc,%esp
+  cmd = malloc(sizeof(*cmd));
+     341:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     343:	6a 54                	push   $0x54
+     345:	6a 00                	push   $0x0
+     347:	50                   	push   %eax
+     348:	e8 23 08 00 00       	call   b70 <memset>
+  cmd->type = EXEC;
+     34d:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  return (struct cmd*)cmd;
+}
+     353:	89 d8                	mov    %ebx,%eax
+     355:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     358:	c9                   	leave  
+     359:	c3                   	ret    
+     35a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000360 <redircmd>:
+
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+     360:	55                   	push   %ebp
+     361:	89 e5                	mov    %esp,%ebp
+     363:	53                   	push   %ebx
+     364:	83 ec 10             	sub    $0x10,%esp
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     367:	6a 18                	push   $0x18
+     369:	e8 72 0d 00 00       	call   10e0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     36e:	83 c4 0c             	add    $0xc,%esp
+  cmd = malloc(sizeof(*cmd));
+     371:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     373:	6a 18                	push   $0x18
+     375:	6a 00                	push   $0x0
+     377:	50                   	push   %eax
+     378:	e8 f3 07 00 00       	call   b70 <memset>
+  cmd->type = REDIR;
+  cmd->cmd = subcmd;
+     37d:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = REDIR;
+     380:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
+  cmd->cmd = subcmd;
+     386:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->file = file;
+     389:	8b 45 0c             	mov    0xc(%ebp),%eax
+     38c:	89 43 08             	mov    %eax,0x8(%ebx)
+  cmd->efile = efile;
+     38f:	8b 45 10             	mov    0x10(%ebp),%eax
+     392:	89 43 0c             	mov    %eax,0xc(%ebx)
+  cmd->mode = mode;
+     395:	8b 45 14             	mov    0x14(%ebp),%eax
+     398:	89 43 10             	mov    %eax,0x10(%ebx)
+  cmd->fd = fd;
+     39b:	8b 45 18             	mov    0x18(%ebp),%eax
+     39e:	89 43 14             	mov    %eax,0x14(%ebx)
+  return (struct cmd*)cmd;
+}
+     3a1:	89 d8                	mov    %ebx,%eax
+     3a3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     3a6:	c9                   	leave  
+     3a7:	c3                   	ret    
+     3a8:	90                   	nop
+     3a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000003b0 <pipecmd>:
+
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+     3b0:	55                   	push   %ebp
+     3b1:	89 e5                	mov    %esp,%ebp
+     3b3:	53                   	push   %ebx
+     3b4:	83 ec 10             	sub    $0x10,%esp
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     3b7:	6a 0c                	push   $0xc
+     3b9:	e8 22 0d 00 00       	call   10e0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     3be:	83 c4 0c             	add    $0xc,%esp
+  cmd = malloc(sizeof(*cmd));
+     3c1:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     3c3:	6a 0c                	push   $0xc
+     3c5:	6a 00                	push   $0x0
+     3c7:	50                   	push   %eax
+     3c8:	e8 a3 07 00 00       	call   b70 <memset>
+  cmd->type = PIPE;
+  cmd->left = left;
+     3cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = PIPE;
+     3d0:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
+  cmd->left = left;
+     3d6:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     3d9:	8b 45 0c             	mov    0xc(%ebp),%eax
+     3dc:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     3df:	89 d8                	mov    %ebx,%eax
+     3e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     3e4:	c9                   	leave  
+     3e5:	c3                   	ret    
+     3e6:	8d 76 00             	lea    0x0(%esi),%esi
+     3e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000003f0 <listcmd>:
+
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+     3f0:	55                   	push   %ebp
+     3f1:	89 e5                	mov    %esp,%ebp
+     3f3:	53                   	push   %ebx
+     3f4:	83 ec 10             	sub    $0x10,%esp
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     3f7:	6a 0c                	push   $0xc
+     3f9:	e8 e2 0c 00 00       	call   10e0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     3fe:	83 c4 0c             	add    $0xc,%esp
+  cmd = malloc(sizeof(*cmd));
+     401:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     403:	6a 0c                	push   $0xc
+     405:	6a 00                	push   $0x0
+     407:	50                   	push   %eax
+     408:	e8 63 07 00 00       	call   b70 <memset>
+  cmd->type = LIST;
+  cmd->left = left;
+     40d:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = LIST;
+     410:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
+  cmd->left = left;
+     416:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     419:	8b 45 0c             	mov    0xc(%ebp),%eax
+     41c:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     41f:	89 d8                	mov    %ebx,%eax
+     421:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     424:	c9                   	leave  
+     425:	c3                   	ret    
+     426:	8d 76 00             	lea    0x0(%esi),%esi
+     429:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000430 <backcmd>:
+
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+     430:	55                   	push   %ebp
+     431:	89 e5                	mov    %esp,%ebp
+     433:	53                   	push   %ebx
+     434:	83 ec 10             	sub    $0x10,%esp
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     437:	6a 08                	push   $0x8
+     439:	e8 a2 0c 00 00       	call   10e0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     43e:	83 c4 0c             	add    $0xc,%esp
+  cmd = malloc(sizeof(*cmd));
+     441:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     443:	6a 08                	push   $0x8
+     445:	6a 00                	push   $0x0
+     447:	50                   	push   %eax
+     448:	e8 23 07 00 00       	call   b70 <memset>
+  cmd->type = BACK;
+  cmd->cmd = subcmd;
+     44d:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = BACK;
+     450:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
+  cmd->cmd = subcmd;
+     456:	89 43 04             	mov    %eax,0x4(%ebx)
+  return (struct cmd*)cmd;
+}
+     459:	89 d8                	mov    %ebx,%eax
+     45b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     45e:	c9                   	leave  
+     45f:	c3                   	ret    
+
+00000460 <gettoken>:
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+     460:	55                   	push   %ebp
+     461:	89 e5                	mov    %esp,%ebp
+     463:	57                   	push   %edi
+     464:	56                   	push   %esi
+     465:	53                   	push   %ebx
+     466:	83 ec 0c             	sub    $0xc,%esp
+  char *s;
+  int ret;
+
+  s = *ps;
+     469:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+     46c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     46f:	8b 7d 10             	mov    0x10(%ebp),%edi
+  s = *ps;
+     472:	8b 30                	mov    (%eax),%esi
+  while(s < es && strchr(whitespace, *s))
+     474:	39 de                	cmp    %ebx,%esi
+     476:	72 0f                	jb     487 <gettoken+0x27>
+     478:	eb 25                	jmp    49f <gettoken+0x3f>
+     47a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    s++;
+     480:	83 c6 01             	add    $0x1,%esi
+  while(s < es && strchr(whitespace, *s))
+     483:	39 f3                	cmp    %esi,%ebx
+     485:	74 18                	je     49f <gettoken+0x3f>
+     487:	0f be 06             	movsbl (%esi),%eax
+     48a:	83 ec 08             	sub    $0x8,%esp
+     48d:	50                   	push   %eax
+     48e:	68 8c 18 00 00       	push   $0x188c
+     493:	e8 f8 06 00 00       	call   b90 <strchr>
+     498:	83 c4 10             	add    $0x10,%esp
+     49b:	85 c0                	test   %eax,%eax
+     49d:	75 e1                	jne    480 <gettoken+0x20>
+  if(q)
+     49f:	85 ff                	test   %edi,%edi
+     4a1:	74 02                	je     4a5 <gettoken+0x45>
+    *q = s;
+     4a3:	89 37                	mov    %esi,(%edi)
+  ret = *s;
+     4a5:	0f be 06             	movsbl (%esi),%eax
+  switch(*s){
+     4a8:	3c 29                	cmp    $0x29,%al
+     4aa:	7f 54                	jg     500 <gettoken+0xa0>
+     4ac:	3c 28                	cmp    $0x28,%al
+     4ae:	0f 8d c8 00 00 00    	jge    57c <gettoken+0x11c>
+     4b4:	31 ff                	xor    %edi,%edi
+     4b6:	84 c0                	test   %al,%al
+     4b8:	0f 85 d2 00 00 00    	jne    590 <gettoken+0x130>
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+  }
+  if(eq)
+     4be:	8b 55 14             	mov    0x14(%ebp),%edx
+     4c1:	85 d2                	test   %edx,%edx
+     4c3:	74 05                	je     4ca <gettoken+0x6a>
+    *eq = s;
+     4c5:	8b 45 14             	mov    0x14(%ebp),%eax
+     4c8:	89 30                	mov    %esi,(%eax)
+
+  while(s < es && strchr(whitespace, *s))
+     4ca:	39 de                	cmp    %ebx,%esi
+     4cc:	72 09                	jb     4d7 <gettoken+0x77>
+     4ce:	eb 1f                	jmp    4ef <gettoken+0x8f>
+    s++;
+     4d0:	83 c6 01             	add    $0x1,%esi
+  while(s < es && strchr(whitespace, *s))
+     4d3:	39 f3                	cmp    %esi,%ebx
+     4d5:	74 18                	je     4ef <gettoken+0x8f>
+     4d7:	0f be 06             	movsbl (%esi),%eax
+     4da:	83 ec 08             	sub    $0x8,%esp
+     4dd:	50                   	push   %eax
+     4de:	68 8c 18 00 00       	push   $0x188c
+     4e3:	e8 a8 06 00 00       	call   b90 <strchr>
+     4e8:	83 c4 10             	add    $0x10,%esp
+     4eb:	85 c0                	test   %eax,%eax
+     4ed:	75 e1                	jne    4d0 <gettoken+0x70>
+  *ps = s;
+     4ef:	8b 45 08             	mov    0x8(%ebp),%eax
+     4f2:	89 30                	mov    %esi,(%eax)
+  return ret;
+}
+     4f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     4f7:	89 f8                	mov    %edi,%eax
+     4f9:	5b                   	pop    %ebx
+     4fa:	5e                   	pop    %esi
+     4fb:	5f                   	pop    %edi
+     4fc:	5d                   	pop    %ebp
+     4fd:	c3                   	ret    
+     4fe:	66 90                	xchg   %ax,%ax
+  switch(*s){
+     500:	3c 3e                	cmp    $0x3e,%al
+     502:	75 1c                	jne    520 <gettoken+0xc0>
+    if(*s == '>'){
+     504:	80 7e 01 3e          	cmpb   $0x3e,0x1(%esi)
+    s++;
+     508:	8d 46 01             	lea    0x1(%esi),%eax
+    if(*s == '>'){
+     50b:	0f 84 a4 00 00 00    	je     5b5 <gettoken+0x155>
+    s++;
+     511:	89 c6                	mov    %eax,%esi
+     513:	bf 3e 00 00 00       	mov    $0x3e,%edi
+     518:	eb a4                	jmp    4be <gettoken+0x5e>
+     51a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  switch(*s){
+     520:	7f 56                	jg     578 <gettoken+0x118>
+     522:	8d 48 c5             	lea    -0x3b(%eax),%ecx
+     525:	80 f9 01             	cmp    $0x1,%cl
+     528:	76 52                	jbe    57c <gettoken+0x11c>
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     52a:	39 f3                	cmp    %esi,%ebx
+     52c:	77 24                	ja     552 <gettoken+0xf2>
+     52e:	eb 70                	jmp    5a0 <gettoken+0x140>
+     530:	0f be 06             	movsbl (%esi),%eax
+     533:	83 ec 08             	sub    $0x8,%esp
+     536:	50                   	push   %eax
+     537:	68 84 18 00 00       	push   $0x1884
+     53c:	e8 4f 06 00 00       	call   b90 <strchr>
+     541:	83 c4 10             	add    $0x10,%esp
+     544:	85 c0                	test   %eax,%eax
+     546:	75 1f                	jne    567 <gettoken+0x107>
+      s++;
+     548:	83 c6 01             	add    $0x1,%esi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     54b:	39 f3                	cmp    %esi,%ebx
+     54d:	74 51                	je     5a0 <gettoken+0x140>
+     54f:	0f be 06             	movsbl (%esi),%eax
+     552:	83 ec 08             	sub    $0x8,%esp
+     555:	50                   	push   %eax
+     556:	68 8c 18 00 00       	push   $0x188c
+     55b:	e8 30 06 00 00       	call   b90 <strchr>
+     560:	83 c4 10             	add    $0x10,%esp
+     563:	85 c0                	test   %eax,%eax
+     565:	74 c9                	je     530 <gettoken+0xd0>
+    ret = 'a';
+     567:	bf 61 00 00 00       	mov    $0x61,%edi
+     56c:	e9 4d ff ff ff       	jmp    4be <gettoken+0x5e>
+     571:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     578:	3c 7c                	cmp    $0x7c,%al
+     57a:	75 ae                	jne    52a <gettoken+0xca>
+  ret = *s;
+     57c:	0f be f8             	movsbl %al,%edi
+    s++;
+     57f:	83 c6 01             	add    $0x1,%esi
+    break;
+     582:	e9 37 ff ff ff       	jmp    4be <gettoken+0x5e>
+     587:	89 f6                	mov    %esi,%esi
+     589:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  switch(*s){
+     590:	3c 26                	cmp    $0x26,%al
+     592:	75 96                	jne    52a <gettoken+0xca>
+     594:	eb e6                	jmp    57c <gettoken+0x11c>
+     596:	8d 76 00             	lea    0x0(%esi),%esi
+     599:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  if(eq)
+     5a0:	8b 45 14             	mov    0x14(%ebp),%eax
+     5a3:	bf 61 00 00 00       	mov    $0x61,%edi
+     5a8:	85 c0                	test   %eax,%eax
+     5aa:	0f 85 15 ff ff ff    	jne    4c5 <gettoken+0x65>
+     5b0:	e9 3a ff ff ff       	jmp    4ef <gettoken+0x8f>
+      s++;
+     5b5:	83 c6 02             	add    $0x2,%esi
+      ret = '+';
+     5b8:	bf 2b 00 00 00       	mov    $0x2b,%edi
+     5bd:	e9 fc fe ff ff       	jmp    4be <gettoken+0x5e>
+     5c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     5c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000005d0 <peek>:
+
+int
+peek(char **ps, char *es, char *toks)
+{
+     5d0:	55                   	push   %ebp
+     5d1:	89 e5                	mov    %esp,%ebp
+     5d3:	57                   	push   %edi
+     5d4:	56                   	push   %esi
+     5d5:	53                   	push   %ebx
+     5d6:	83 ec 0c             	sub    $0xc,%esp
+     5d9:	8b 7d 08             	mov    0x8(%ebp),%edi
+     5dc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *s;
+
+  s = *ps;
+     5df:	8b 1f                	mov    (%edi),%ebx
+  while(s < es && strchr(whitespace, *s))
+     5e1:	39 f3                	cmp    %esi,%ebx
+     5e3:	72 12                	jb     5f7 <peek+0x27>
+     5e5:	eb 28                	jmp    60f <peek+0x3f>
+     5e7:	89 f6                	mov    %esi,%esi
+     5e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    s++;
+     5f0:	83 c3 01             	add    $0x1,%ebx
+  while(s < es && strchr(whitespace, *s))
+     5f3:	39 de                	cmp    %ebx,%esi
+     5f5:	74 18                	je     60f <peek+0x3f>
+     5f7:	0f be 03             	movsbl (%ebx),%eax
+     5fa:	83 ec 08             	sub    $0x8,%esp
+     5fd:	50                   	push   %eax
+     5fe:	68 8c 18 00 00       	push   $0x188c
+     603:	e8 88 05 00 00       	call   b90 <strchr>
+     608:	83 c4 10             	add    $0x10,%esp
+     60b:	85 c0                	test   %eax,%eax
+     60d:	75 e1                	jne    5f0 <peek+0x20>
+  *ps = s;
+     60f:	89 1f                	mov    %ebx,(%edi)
+  return *s && strchr(toks, *s);
+     611:	0f be 13             	movsbl (%ebx),%edx
+     614:	31 c0                	xor    %eax,%eax
+     616:	84 d2                	test   %dl,%dl
+     618:	74 17                	je     631 <peek+0x61>
+     61a:	83 ec 08             	sub    $0x8,%esp
+     61d:	52                   	push   %edx
+     61e:	ff 75 10             	pushl  0x10(%ebp)
+     621:	e8 6a 05 00 00       	call   b90 <strchr>
+     626:	83 c4 10             	add    $0x10,%esp
+     629:	85 c0                	test   %eax,%eax
+     62b:	0f 95 c0             	setne  %al
+     62e:	0f b6 c0             	movzbl %al,%eax
+}
+     631:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     634:	5b                   	pop    %ebx
+     635:	5e                   	pop    %esi
+     636:	5f                   	pop    %edi
+     637:	5d                   	pop    %ebp
+     638:	c3                   	ret    
+     639:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000640 <parseredirs>:
+  return cmd;
+}
+
+struct cmd*
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+     640:	55                   	push   %ebp
+     641:	89 e5                	mov    %esp,%ebp
+     643:	57                   	push   %edi
+     644:	56                   	push   %esi
+     645:	53                   	push   %ebx
+     646:	83 ec 1c             	sub    $0x1c,%esp
+     649:	8b 75 0c             	mov    0xc(%ebp),%esi
+     64c:	8b 5d 10             	mov    0x10(%ebp),%ebx
+     64f:	90                   	nop
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+     650:	83 ec 04             	sub    $0x4,%esp
+     653:	68 29 12 00 00       	push   $0x1229
+     658:	53                   	push   %ebx
+     659:	56                   	push   %esi
+     65a:	e8 71 ff ff ff       	call   5d0 <peek>
+     65f:	83 c4 10             	add    $0x10,%esp
+     662:	85 c0                	test   %eax,%eax
+     664:	74 6a                	je     6d0 <parseredirs+0x90>
+    tok = gettoken(ps, es, 0, 0);
+     666:	6a 00                	push   $0x0
+     668:	6a 00                	push   $0x0
+     66a:	53                   	push   %ebx
+     66b:	56                   	push   %esi
+     66c:	e8 ef fd ff ff       	call   460 <gettoken>
+     671:	89 c7                	mov    %eax,%edi
+    if(gettoken(ps, es, &q, &eq) != 'a')
+     673:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     676:	50                   	push   %eax
+     677:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     67a:	50                   	push   %eax
+     67b:	53                   	push   %ebx
+     67c:	56                   	push   %esi
+     67d:	e8 de fd ff ff       	call   460 <gettoken>
+     682:	83 c4 20             	add    $0x20,%esp
+     685:	83 f8 61             	cmp    $0x61,%eax
+     688:	75 51                	jne    6db <parseredirs+0x9b>
+      panic("missing file for redirection");
+    switch(tok){
+     68a:	83 ff 3c             	cmp    $0x3c,%edi
+     68d:	74 31                	je     6c0 <parseredirs+0x80>
+     68f:	83 ff 3e             	cmp    $0x3e,%edi
+     692:	74 05                	je     699 <parseredirs+0x59>
+     694:	83 ff 2b             	cmp    $0x2b,%edi
+     697:	75 b7                	jne    650 <parseredirs+0x10>
+      break;
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     699:	83 ec 0c             	sub    $0xc,%esp
+     69c:	6a 01                	push   $0x1
+     69e:	68 01 02 00 00       	push   $0x201
+     6a3:	ff 75 e4             	pushl  -0x1c(%ebp)
+     6a6:	ff 75 e0             	pushl  -0x20(%ebp)
+     6a9:	ff 75 08             	pushl  0x8(%ebp)
+     6ac:	e8 af fc ff ff       	call   360 <redircmd>
+      break;
+     6b1:	83 c4 20             	add    $0x20,%esp
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     6b4:	89 45 08             	mov    %eax,0x8(%ebp)
+      break;
+     6b7:	eb 97                	jmp    650 <parseredirs+0x10>
+     6b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+     6c0:	83 ec 0c             	sub    $0xc,%esp
+     6c3:	6a 00                	push   $0x0
+     6c5:	6a 00                	push   $0x0
+     6c7:	eb da                	jmp    6a3 <parseredirs+0x63>
+     6c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+  return cmd;
+}
+     6d0:	8b 45 08             	mov    0x8(%ebp),%eax
+     6d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     6d6:	5b                   	pop    %ebx
+     6d7:	5e                   	pop    %esi
+     6d8:	5f                   	pop    %edi
+     6d9:	5d                   	pop    %ebp
+     6da:	c3                   	ret    
+      panic("missing file for redirection");
+     6db:	83 ec 0c             	sub    $0xc,%esp
+     6de:	68 0c 12 00 00       	push   $0x120c
+     6e3:	e8 68 fa ff ff       	call   150 <panic>
+     6e8:	90                   	nop
+     6e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000006f0 <parseexec>:
+  return cmd;
+}
+
+struct cmd*
+parseexec(char **ps, char *es)
+{
+     6f0:	55                   	push   %ebp
+     6f1:	89 e5                	mov    %esp,%ebp
+     6f3:	57                   	push   %edi
+     6f4:	56                   	push   %esi
+     6f5:	53                   	push   %ebx
+     6f6:	83 ec 30             	sub    $0x30,%esp
+     6f9:	8b 75 08             	mov    0x8(%ebp),%esi
+     6fc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  char *q, *eq;
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+
+  if(peek(ps, es, "("))
+     6ff:	68 2c 12 00 00       	push   $0x122c
+     704:	57                   	push   %edi
+     705:	56                   	push   %esi
+     706:	e8 c5 fe ff ff       	call   5d0 <peek>
+     70b:	83 c4 10             	add    $0x10,%esp
+     70e:	85 c0                	test   %eax,%eax
+     710:	0f 85 92 00 00 00    	jne    7a8 <parseexec+0xb8>
+     716:	89 c3                	mov    %eax,%ebx
+    return parseblock(ps, es);
+
+  ret = execcmd();
+     718:	e8 13 fc ff ff       	call   330 <execcmd>
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+     71d:	83 ec 04             	sub    $0x4,%esp
+  ret = execcmd();
+     720:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  ret = parseredirs(ret, ps, es);
+     723:	57                   	push   %edi
+     724:	56                   	push   %esi
+     725:	50                   	push   %eax
+     726:	e8 15 ff ff ff       	call   640 <parseredirs>
+     72b:	83 c4 10             	add    $0x10,%esp
+     72e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     731:	eb 18                	jmp    74b <parseexec+0x5b>
+     733:	90                   	nop
+     734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    cmd->argv[argc] = q;
+    cmd->eargv[argc] = eq;
+    argc++;
+    if(argc >= MAXARGS)
+      panic("too many args");
+    ret = parseredirs(ret, ps, es);
+     738:	83 ec 04             	sub    $0x4,%esp
+     73b:	57                   	push   %edi
+     73c:	56                   	push   %esi
+     73d:	ff 75 d4             	pushl  -0x2c(%ebp)
+     740:	e8 fb fe ff ff       	call   640 <parseredirs>
+     745:	83 c4 10             	add    $0x10,%esp
+     748:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     74b:	83 ec 04             	sub    $0x4,%esp
+     74e:	68 43 12 00 00       	push   $0x1243
+     753:	57                   	push   %edi
+     754:	56                   	push   %esi
+     755:	e8 76 fe ff ff       	call   5d0 <peek>
+     75a:	83 c4 10             	add    $0x10,%esp
+     75d:	85 c0                	test   %eax,%eax
+     75f:	75 67                	jne    7c8 <parseexec+0xd8>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+     761:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     764:	50                   	push   %eax
+     765:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     768:	50                   	push   %eax
+     769:	57                   	push   %edi
+     76a:	56                   	push   %esi
+     76b:	e8 f0 fc ff ff       	call   460 <gettoken>
+     770:	83 c4 10             	add    $0x10,%esp
+     773:	85 c0                	test   %eax,%eax
+     775:	74 51                	je     7c8 <parseexec+0xd8>
+    if(tok != 'a')
+     777:	83 f8 61             	cmp    $0x61,%eax
+     77a:	75 6b                	jne    7e7 <parseexec+0xf7>
+    cmd->argv[argc] = q;
+     77c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     77f:	8b 55 d0             	mov    -0x30(%ebp),%edx
+     782:	89 44 9a 04          	mov    %eax,0x4(%edx,%ebx,4)
+    cmd->eargv[argc] = eq;
+     786:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     789:	89 44 9a 2c          	mov    %eax,0x2c(%edx,%ebx,4)
+    argc++;
+     78d:	83 c3 01             	add    $0x1,%ebx
+    if(argc >= MAXARGS)
+     790:	83 fb 0a             	cmp    $0xa,%ebx
+     793:	75 a3                	jne    738 <parseexec+0x48>
+      panic("too many args");
+     795:	83 ec 0c             	sub    $0xc,%esp
+     798:	68 35 12 00 00       	push   $0x1235
+     79d:	e8 ae f9 ff ff       	call   150 <panic>
+     7a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return parseblock(ps, es);
+     7a8:	83 ec 08             	sub    $0x8,%esp
+     7ab:	57                   	push   %edi
+     7ac:	56                   	push   %esi
+     7ad:	e8 5e 01 00 00       	call   910 <parseblock>
+     7b2:	83 c4 10             	add    $0x10,%esp
+     7b5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  }
+  cmd->argv[argc] = 0;
+  cmd->eargv[argc] = 0;
+  return ret;
+}
+     7b8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     7bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     7be:	5b                   	pop    %ebx
+     7bf:	5e                   	pop    %esi
+     7c0:	5f                   	pop    %edi
+     7c1:	5d                   	pop    %ebp
+     7c2:	c3                   	ret    
+     7c3:	90                   	nop
+     7c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     7c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+     7cb:	8d 04 98             	lea    (%eax,%ebx,4),%eax
+  cmd->argv[argc] = 0;
+     7ce:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+  cmd->eargv[argc] = 0;
+     7d5:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
+}
+     7dc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     7df:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     7e2:	5b                   	pop    %ebx
+     7e3:	5e                   	pop    %esi
+     7e4:	5f                   	pop    %edi
+     7e5:	5d                   	pop    %ebp
+     7e6:	c3                   	ret    
+      panic("syntax");
+     7e7:	83 ec 0c             	sub    $0xc,%esp
+     7ea:	68 2e 12 00 00       	push   $0x122e
+     7ef:	e8 5c f9 ff ff       	call   150 <panic>
+     7f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     7fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000800 <parsepipe>:
+{
+     800:	55                   	push   %ebp
+     801:	89 e5                	mov    %esp,%ebp
+     803:	57                   	push   %edi
+     804:	56                   	push   %esi
+     805:	53                   	push   %ebx
+     806:	83 ec 14             	sub    $0x14,%esp
+     809:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     80c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  cmd = parseexec(ps, es);
+     80f:	56                   	push   %esi
+     810:	53                   	push   %ebx
+     811:	e8 da fe ff ff       	call   6f0 <parseexec>
+  if(peek(ps, es, "|")){
+     816:	83 c4 0c             	add    $0xc,%esp
+  cmd = parseexec(ps, es);
+     819:	89 c7                	mov    %eax,%edi
+  if(peek(ps, es, "|")){
+     81b:	68 48 12 00 00       	push   $0x1248
+     820:	56                   	push   %esi
+     821:	53                   	push   %ebx
+     822:	e8 a9 fd ff ff       	call   5d0 <peek>
+     827:	83 c4 10             	add    $0x10,%esp
+     82a:	85 c0                	test   %eax,%eax
+     82c:	75 12                	jne    840 <parsepipe+0x40>
+}
+     82e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     831:	89 f8                	mov    %edi,%eax
+     833:	5b                   	pop    %ebx
+     834:	5e                   	pop    %esi
+     835:	5f                   	pop    %edi
+     836:	5d                   	pop    %ebp
+     837:	c3                   	ret    
+     838:	90                   	nop
+     839:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    gettoken(ps, es, 0, 0);
+     840:	6a 00                	push   $0x0
+     842:	6a 00                	push   $0x0
+     844:	56                   	push   %esi
+     845:	53                   	push   %ebx
+     846:	e8 15 fc ff ff       	call   460 <gettoken>
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     84b:	58                   	pop    %eax
+     84c:	5a                   	pop    %edx
+     84d:	56                   	push   %esi
+     84e:	53                   	push   %ebx
+     84f:	e8 ac ff ff ff       	call   800 <parsepipe>
+     854:	89 7d 08             	mov    %edi,0x8(%ebp)
+     857:	89 45 0c             	mov    %eax,0xc(%ebp)
+     85a:	83 c4 10             	add    $0x10,%esp
+}
+     85d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     860:	5b                   	pop    %ebx
+     861:	5e                   	pop    %esi
+     862:	5f                   	pop    %edi
+     863:	5d                   	pop    %ebp
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     864:	e9 47 fb ff ff       	jmp    3b0 <pipecmd>
+     869:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000870 <parseline>:
+{
+     870:	55                   	push   %ebp
+     871:	89 e5                	mov    %esp,%ebp
+     873:	57                   	push   %edi
+     874:	56                   	push   %esi
+     875:	53                   	push   %ebx
+     876:	83 ec 14             	sub    $0x14,%esp
+     879:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     87c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  cmd = parsepipe(ps, es);
+     87f:	56                   	push   %esi
+     880:	53                   	push   %ebx
+     881:	e8 7a ff ff ff       	call   800 <parsepipe>
+  while(peek(ps, es, "&")){
+     886:	83 c4 10             	add    $0x10,%esp
+  cmd = parsepipe(ps, es);
+     889:	89 c7                	mov    %eax,%edi
+  while(peek(ps, es, "&")){
+     88b:	eb 1b                	jmp    8a8 <parseline+0x38>
+     88d:	8d 76 00             	lea    0x0(%esi),%esi
+    gettoken(ps, es, 0, 0);
+     890:	6a 00                	push   $0x0
+     892:	6a 00                	push   $0x0
+     894:	56                   	push   %esi
+     895:	53                   	push   %ebx
+     896:	e8 c5 fb ff ff       	call   460 <gettoken>
+    cmd = backcmd(cmd);
+     89b:	89 3c 24             	mov    %edi,(%esp)
+     89e:	e8 8d fb ff ff       	call   430 <backcmd>
+     8a3:	83 c4 10             	add    $0x10,%esp
+     8a6:	89 c7                	mov    %eax,%edi
+  while(peek(ps, es, "&")){
+     8a8:	83 ec 04             	sub    $0x4,%esp
+     8ab:	68 4a 12 00 00       	push   $0x124a
+     8b0:	56                   	push   %esi
+     8b1:	53                   	push   %ebx
+     8b2:	e8 19 fd ff ff       	call   5d0 <peek>
+     8b7:	83 c4 10             	add    $0x10,%esp
+     8ba:	85 c0                	test   %eax,%eax
+     8bc:	75 d2                	jne    890 <parseline+0x20>
+  if(peek(ps, es, ";")){
+     8be:	83 ec 04             	sub    $0x4,%esp
+     8c1:	68 46 12 00 00       	push   $0x1246
+     8c6:	56                   	push   %esi
+     8c7:	53                   	push   %ebx
+     8c8:	e8 03 fd ff ff       	call   5d0 <peek>
+     8cd:	83 c4 10             	add    $0x10,%esp
+     8d0:	85 c0                	test   %eax,%eax
+     8d2:	75 0c                	jne    8e0 <parseline+0x70>
+}
+     8d4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     8d7:	89 f8                	mov    %edi,%eax
+     8d9:	5b                   	pop    %ebx
+     8da:	5e                   	pop    %esi
+     8db:	5f                   	pop    %edi
+     8dc:	5d                   	pop    %ebp
+     8dd:	c3                   	ret    
+     8de:	66 90                	xchg   %ax,%ax
+    gettoken(ps, es, 0, 0);
+     8e0:	6a 00                	push   $0x0
+     8e2:	6a 00                	push   $0x0
+     8e4:	56                   	push   %esi
+     8e5:	53                   	push   %ebx
+     8e6:	e8 75 fb ff ff       	call   460 <gettoken>
+    cmd = listcmd(cmd, parseline(ps, es));
+     8eb:	58                   	pop    %eax
+     8ec:	5a                   	pop    %edx
+     8ed:	56                   	push   %esi
+     8ee:	53                   	push   %ebx
+     8ef:	e8 7c ff ff ff       	call   870 <parseline>
+     8f4:	89 7d 08             	mov    %edi,0x8(%ebp)
+     8f7:	89 45 0c             	mov    %eax,0xc(%ebp)
+     8fa:	83 c4 10             	add    $0x10,%esp
+}
+     8fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     900:	5b                   	pop    %ebx
+     901:	5e                   	pop    %esi
+     902:	5f                   	pop    %edi
+     903:	5d                   	pop    %ebp
+    cmd = listcmd(cmd, parseline(ps, es));
+     904:	e9 e7 fa ff ff       	jmp    3f0 <listcmd>
+     909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000910 <parseblock>:
+{
+     910:	55                   	push   %ebp
+     911:	89 e5                	mov    %esp,%ebp
+     913:	57                   	push   %edi
+     914:	56                   	push   %esi
+     915:	53                   	push   %ebx
+     916:	83 ec 10             	sub    $0x10,%esp
+     919:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     91c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if(!peek(ps, es, "("))
+     91f:	68 2c 12 00 00       	push   $0x122c
+     924:	56                   	push   %esi
+     925:	53                   	push   %ebx
+     926:	e8 a5 fc ff ff       	call   5d0 <peek>
+     92b:	83 c4 10             	add    $0x10,%esp
+     92e:	85 c0                	test   %eax,%eax
+     930:	74 4a                	je     97c <parseblock+0x6c>
+  gettoken(ps, es, 0, 0);
+     932:	6a 00                	push   $0x0
+     934:	6a 00                	push   $0x0
+     936:	56                   	push   %esi
+     937:	53                   	push   %ebx
+     938:	e8 23 fb ff ff       	call   460 <gettoken>
+  cmd = parseline(ps, es);
+     93d:	58                   	pop    %eax
+     93e:	5a                   	pop    %edx
+     93f:	56                   	push   %esi
+     940:	53                   	push   %ebx
+     941:	e8 2a ff ff ff       	call   870 <parseline>
+  if(!peek(ps, es, ")"))
+     946:	83 c4 0c             	add    $0xc,%esp
+  cmd = parseline(ps, es);
+     949:	89 c7                	mov    %eax,%edi
+  if(!peek(ps, es, ")"))
+     94b:	68 68 12 00 00       	push   $0x1268
+     950:	56                   	push   %esi
+     951:	53                   	push   %ebx
+     952:	e8 79 fc ff ff       	call   5d0 <peek>
+     957:	83 c4 10             	add    $0x10,%esp
+     95a:	85 c0                	test   %eax,%eax
+     95c:	74 2b                	je     989 <parseblock+0x79>
+  gettoken(ps, es, 0, 0);
+     95e:	6a 00                	push   $0x0
+     960:	6a 00                	push   $0x0
+     962:	56                   	push   %esi
+     963:	53                   	push   %ebx
+     964:	e8 f7 fa ff ff       	call   460 <gettoken>
+  cmd = parseredirs(cmd, ps, es);
+     969:	83 c4 0c             	add    $0xc,%esp
+     96c:	56                   	push   %esi
+     96d:	53                   	push   %ebx
+     96e:	57                   	push   %edi
+     96f:	e8 cc fc ff ff       	call   640 <parseredirs>
+}
+     974:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     977:	5b                   	pop    %ebx
+     978:	5e                   	pop    %esi
+     979:	5f                   	pop    %edi
+     97a:	5d                   	pop    %ebp
+     97b:	c3                   	ret    
+    panic("parseblock");
+     97c:	83 ec 0c             	sub    $0xc,%esp
+     97f:	68 4c 12 00 00       	push   $0x124c
+     984:	e8 c7 f7 ff ff       	call   150 <panic>
+    panic("syntax - missing )");
+     989:	83 ec 0c             	sub    $0xc,%esp
+     98c:	68 57 12 00 00       	push   $0x1257
+     991:	e8 ba f7 ff ff       	call   150 <panic>
+     996:	8d 76 00             	lea    0x0(%esi),%esi
+     999:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000009a0 <nulterminate>:
+
+// NUL-terminate all the counted strings.
+struct cmd*
+nulterminate(struct cmd *cmd)
+{
+     9a0:	55                   	push   %ebp
+     9a1:	89 e5                	mov    %esp,%ebp
+     9a3:	53                   	push   %ebx
+     9a4:	83 ec 04             	sub    $0x4,%esp
+     9a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+     9aa:	85 db                	test   %ebx,%ebx
+     9ac:	74 20                	je     9ce <nulterminate+0x2e>
+    return 0;
+
+  switch(cmd->type){
+     9ae:	83 3b 05             	cmpl   $0x5,(%ebx)
+     9b1:	77 1b                	ja     9ce <nulterminate+0x2e>
+     9b3:	8b 03                	mov    (%ebx),%eax
+     9b5:	ff 24 85 a8 12 00 00 	jmp    *0x12a8(,%eax,4)
+     9bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    nulterminate(lcmd->right);
+    break;
+
+  case BACK:
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+     9c0:	83 ec 0c             	sub    $0xc,%esp
+     9c3:	ff 73 04             	pushl  0x4(%ebx)
+     9c6:	e8 d5 ff ff ff       	call   9a0 <nulterminate>
+    break;
+     9cb:	83 c4 10             	add    $0x10,%esp
+  }
+  return cmd;
+}
+     9ce:	89 d8                	mov    %ebx,%eax
+     9d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     9d3:	c9                   	leave  
+     9d4:	c3                   	ret    
+     9d5:	8d 76 00             	lea    0x0(%esi),%esi
+    nulterminate(lcmd->left);
+     9d8:	83 ec 0c             	sub    $0xc,%esp
+     9db:	ff 73 04             	pushl  0x4(%ebx)
+     9de:	e8 bd ff ff ff       	call   9a0 <nulterminate>
+    nulterminate(lcmd->right);
+     9e3:	58                   	pop    %eax
+     9e4:	ff 73 08             	pushl  0x8(%ebx)
+     9e7:	e8 b4 ff ff ff       	call   9a0 <nulterminate>
+}
+     9ec:	89 d8                	mov    %ebx,%eax
+    break;
+     9ee:	83 c4 10             	add    $0x10,%esp
+}
+     9f1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     9f4:	c9                   	leave  
+     9f5:	c3                   	ret    
+     9f6:	8d 76 00             	lea    0x0(%esi),%esi
+     9f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    for(i=0; ecmd->argv[i]; i++)
+     a00:	8b 4b 04             	mov    0x4(%ebx),%ecx
+     a03:	8d 43 08             	lea    0x8(%ebx),%eax
+     a06:	85 c9                	test   %ecx,%ecx
+     a08:	74 c4                	je     9ce <nulterminate+0x2e>
+     a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      *ecmd->eargv[i] = 0;
+     a10:	8b 50 24             	mov    0x24(%eax),%edx
+     a13:	83 c0 04             	add    $0x4,%eax
+     a16:	c6 02 00             	movb   $0x0,(%edx)
+    for(i=0; ecmd->argv[i]; i++)
+     a19:	8b 50 fc             	mov    -0x4(%eax),%edx
+     a1c:	85 d2                	test   %edx,%edx
+     a1e:	75 f0                	jne    a10 <nulterminate+0x70>
+}
+     a20:	89 d8                	mov    %ebx,%eax
+     a22:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a25:	c9                   	leave  
+     a26:	c3                   	ret    
+     a27:	89 f6                	mov    %esi,%esi
+     a29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    nulterminate(rcmd->cmd);
+     a30:	83 ec 0c             	sub    $0xc,%esp
+     a33:	ff 73 04             	pushl  0x4(%ebx)
+     a36:	e8 65 ff ff ff       	call   9a0 <nulterminate>
+    *rcmd->efile = 0;
+     a3b:	8b 43 0c             	mov    0xc(%ebx),%eax
+    break;
+     a3e:	83 c4 10             	add    $0x10,%esp
+    *rcmd->efile = 0;
+     a41:	c6 00 00             	movb   $0x0,(%eax)
+}
+     a44:	89 d8                	mov    %ebx,%eax
+     a46:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a49:	c9                   	leave  
+     a4a:	c3                   	ret    
+     a4b:	90                   	nop
+     a4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000a50 <parsecmd>:
+{
+     a50:	55                   	push   %ebp
+     a51:	89 e5                	mov    %esp,%ebp
+     a53:	56                   	push   %esi
+     a54:	53                   	push   %ebx
+  es = s + strlen(s);
+     a55:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     a58:	83 ec 0c             	sub    $0xc,%esp
+     a5b:	53                   	push   %ebx
+     a5c:	e8 df 00 00 00       	call   b40 <strlen>
+  cmd = parseline(&s, es);
+     a61:	59                   	pop    %ecx
+  es = s + strlen(s);
+     a62:	01 c3                	add    %eax,%ebx
+  cmd = parseline(&s, es);
+     a64:	8d 45 08             	lea    0x8(%ebp),%eax
+     a67:	5e                   	pop    %esi
+     a68:	53                   	push   %ebx
+     a69:	50                   	push   %eax
+     a6a:	e8 01 fe ff ff       	call   870 <parseline>
+     a6f:	89 c6                	mov    %eax,%esi
+  peek(&s, es, "");
+     a71:	8d 45 08             	lea    0x8(%ebp),%eax
+     a74:	83 c4 0c             	add    $0xc,%esp
+     a77:	68 f1 11 00 00       	push   $0x11f1
+     a7c:	53                   	push   %ebx
+     a7d:	50                   	push   %eax
+     a7e:	e8 4d fb ff ff       	call   5d0 <peek>
+  if(s != es){
+     a83:	8b 45 08             	mov    0x8(%ebp),%eax
+     a86:	83 c4 10             	add    $0x10,%esp
+     a89:	39 d8                	cmp    %ebx,%eax
+     a8b:	75 12                	jne    a9f <parsecmd+0x4f>
+  nulterminate(cmd);
+     a8d:	83 ec 0c             	sub    $0xc,%esp
+     a90:	56                   	push   %esi
+     a91:	e8 0a ff ff ff       	call   9a0 <nulterminate>
+}
+     a96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     a99:	89 f0                	mov    %esi,%eax
+     a9b:	5b                   	pop    %ebx
+     a9c:	5e                   	pop    %esi
+     a9d:	5d                   	pop    %ebp
+     a9e:	c3                   	ret    
+    printf(2, "leftovers: %s\n", s);
+     a9f:	52                   	push   %edx
+     aa0:	50                   	push   %eax
+     aa1:	68 6a 12 00 00       	push   $0x126a
+     aa6:	6a 02                	push   $0x2
+     aa8:	e8 d3 03 00 00       	call   e80 <printf>
+    panic("syntax");
+     aad:	c7 04 24 2e 12 00 00 	movl   $0x122e,(%esp)
+     ab4:	e8 97 f6 ff ff       	call   150 <panic>
+     ab9:	66 90                	xchg   %ax,%ax
+     abb:	66 90                	xchg   %ax,%ax
+     abd:	66 90                	xchg   %ax,%ax
+     abf:	90                   	nop
+
+00000ac0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+     ac0:	55                   	push   %ebp
+     ac1:	89 e5                	mov    %esp,%ebp
+     ac3:	53                   	push   %ebx
+     ac4:	8b 45 08             	mov    0x8(%ebp),%eax
+     ac7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+     aca:	89 c2                	mov    %eax,%edx
+     acc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     ad0:	83 c1 01             	add    $0x1,%ecx
+     ad3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+     ad7:	83 c2 01             	add    $0x1,%edx
+     ada:	84 db                	test   %bl,%bl
+     adc:	88 5a ff             	mov    %bl,-0x1(%edx)
+     adf:	75 ef                	jne    ad0 <strcpy+0x10>
+    ;
+  return os;
+}
+     ae1:	5b                   	pop    %ebx
+     ae2:	5d                   	pop    %ebp
+     ae3:	c3                   	ret    
+     ae4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     aea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000af0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+     af0:	55                   	push   %ebp
+     af1:	89 e5                	mov    %esp,%ebp
+     af3:	53                   	push   %ebx
+     af4:	8b 55 08             	mov    0x8(%ebp),%edx
+     af7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+     afa:	0f b6 02             	movzbl (%edx),%eax
+     afd:	0f b6 19             	movzbl (%ecx),%ebx
+     b00:	84 c0                	test   %al,%al
+     b02:	75 1c                	jne    b20 <strcmp+0x30>
+     b04:	eb 2a                	jmp    b30 <strcmp+0x40>
+     b06:	8d 76 00             	lea    0x0(%esi),%esi
+     b09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+     b10:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+     b13:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+     b16:	83 c1 01             	add    $0x1,%ecx
+     b19:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+     b1c:	84 c0                	test   %al,%al
+     b1e:	74 10                	je     b30 <strcmp+0x40>
+     b20:	38 d8                	cmp    %bl,%al
+     b22:	74 ec                	je     b10 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+     b24:	29 d8                	sub    %ebx,%eax
+}
+     b26:	5b                   	pop    %ebx
+     b27:	5d                   	pop    %ebp
+     b28:	c3                   	ret    
+     b29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     b30:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+     b32:	29 d8                	sub    %ebx,%eax
+}
+     b34:	5b                   	pop    %ebx
+     b35:	5d                   	pop    %ebp
+     b36:	c3                   	ret    
+     b37:	89 f6                	mov    %esi,%esi
+     b39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000b40 <strlen>:
+
+uint
+strlen(const char *s)
+{
+     b40:	55                   	push   %ebp
+     b41:	89 e5                	mov    %esp,%ebp
+     b43:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+     b46:	80 39 00             	cmpb   $0x0,(%ecx)
+     b49:	74 15                	je     b60 <strlen+0x20>
+     b4b:	31 d2                	xor    %edx,%edx
+     b4d:	8d 76 00             	lea    0x0(%esi),%esi
+     b50:	83 c2 01             	add    $0x1,%edx
+     b53:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+     b57:	89 d0                	mov    %edx,%eax
+     b59:	75 f5                	jne    b50 <strlen+0x10>
+    ;
+  return n;
+}
+     b5b:	5d                   	pop    %ebp
+     b5c:	c3                   	ret    
+     b5d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+     b60:	31 c0                	xor    %eax,%eax
+}
+     b62:	5d                   	pop    %ebp
+     b63:	c3                   	ret    
+     b64:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     b6a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000b70 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+     b70:	55                   	push   %ebp
+     b71:	89 e5                	mov    %esp,%ebp
+     b73:	57                   	push   %edi
+     b74:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+     b77:	8b 4d 10             	mov    0x10(%ebp),%ecx
+     b7a:	8b 45 0c             	mov    0xc(%ebp),%eax
+     b7d:	89 d7                	mov    %edx,%edi
+     b7f:	fc                   	cld    
+     b80:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+     b82:	89 d0                	mov    %edx,%eax
+     b84:	5f                   	pop    %edi
+     b85:	5d                   	pop    %ebp
+     b86:	c3                   	ret    
+     b87:	89 f6                	mov    %esi,%esi
+     b89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000b90 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+     b90:	55                   	push   %ebp
+     b91:	89 e5                	mov    %esp,%ebp
+     b93:	53                   	push   %ebx
+     b94:	8b 45 08             	mov    0x8(%ebp),%eax
+     b97:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+     b9a:	0f b6 10             	movzbl (%eax),%edx
+     b9d:	84 d2                	test   %dl,%dl
+     b9f:	74 1d                	je     bbe <strchr+0x2e>
+    if(*s == c)
+     ba1:	38 d3                	cmp    %dl,%bl
+     ba3:	89 d9                	mov    %ebx,%ecx
+     ba5:	75 0d                	jne    bb4 <strchr+0x24>
+     ba7:	eb 17                	jmp    bc0 <strchr+0x30>
+     ba9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bb0:	38 ca                	cmp    %cl,%dl
+     bb2:	74 0c                	je     bc0 <strchr+0x30>
+  for(; *s; s++)
+     bb4:	83 c0 01             	add    $0x1,%eax
+     bb7:	0f b6 10             	movzbl (%eax),%edx
+     bba:	84 d2                	test   %dl,%dl
+     bbc:	75 f2                	jne    bb0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+     bbe:	31 c0                	xor    %eax,%eax
+}
+     bc0:	5b                   	pop    %ebx
+     bc1:	5d                   	pop    %ebp
+     bc2:	c3                   	ret    
+     bc3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     bc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000bd0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+     bd0:	55                   	push   %ebp
+     bd1:	89 e5                	mov    %esp,%ebp
+     bd3:	57                   	push   %edi
+     bd4:	56                   	push   %esi
+     bd5:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     bd6:	31 f6                	xor    %esi,%esi
+     bd8:	89 f3                	mov    %esi,%ebx
+{
+     bda:	83 ec 1c             	sub    $0x1c,%esp
+     bdd:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+     be0:	eb 2f                	jmp    c11 <gets+0x41>
+     be2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+     be8:	8d 45 e7             	lea    -0x19(%ebp),%eax
+     beb:	83 ec 04             	sub    $0x4,%esp
+     bee:	6a 01                	push   $0x1
+     bf0:	50                   	push   %eax
+     bf1:	6a 00                	push   $0x0
+     bf3:	e8 32 01 00 00       	call   d2a <read>
+    if(cc < 1)
+     bf8:	83 c4 10             	add    $0x10,%esp
+     bfb:	85 c0                	test   %eax,%eax
+     bfd:	7e 1c                	jle    c1b <gets+0x4b>
+      break;
+    buf[i++] = c;
+     bff:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+     c03:	83 c7 01             	add    $0x1,%edi
+     c06:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+     c09:	3c 0a                	cmp    $0xa,%al
+     c0b:	74 23                	je     c30 <gets+0x60>
+     c0d:	3c 0d                	cmp    $0xd,%al
+     c0f:	74 1f                	je     c30 <gets+0x60>
+  for(i=0; i+1 < max; ){
+     c11:	83 c3 01             	add    $0x1,%ebx
+     c14:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+     c17:	89 fe                	mov    %edi,%esi
+     c19:	7c cd                	jl     be8 <gets+0x18>
+     c1b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+     c1d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+     c20:	c6 03 00             	movb   $0x0,(%ebx)
+}
+     c23:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     c26:	5b                   	pop    %ebx
+     c27:	5e                   	pop    %esi
+     c28:	5f                   	pop    %edi
+     c29:	5d                   	pop    %ebp
+     c2a:	c3                   	ret    
+     c2b:	90                   	nop
+     c2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c30:	8b 75 08             	mov    0x8(%ebp),%esi
+     c33:	8b 45 08             	mov    0x8(%ebp),%eax
+     c36:	01 de                	add    %ebx,%esi
+     c38:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+     c3a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+     c3d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     c40:	5b                   	pop    %ebx
+     c41:	5e                   	pop    %esi
+     c42:	5f                   	pop    %edi
+     c43:	5d                   	pop    %ebp
+     c44:	c3                   	ret    
+     c45:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000c50 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+     c50:	55                   	push   %ebp
+     c51:	89 e5                	mov    %esp,%ebp
+     c53:	56                   	push   %esi
+     c54:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+     c55:	83 ec 08             	sub    $0x8,%esp
+     c58:	6a 00                	push   $0x0
+     c5a:	ff 75 08             	pushl  0x8(%ebp)
+     c5d:	e8 f0 00 00 00       	call   d52 <open>
+  if(fd < 0)
+     c62:	83 c4 10             	add    $0x10,%esp
+     c65:	85 c0                	test   %eax,%eax
+     c67:	78 27                	js     c90 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+     c69:	83 ec 08             	sub    $0x8,%esp
+     c6c:	ff 75 0c             	pushl  0xc(%ebp)
+     c6f:	89 c3                	mov    %eax,%ebx
+     c71:	50                   	push   %eax
+     c72:	e8 f3 00 00 00       	call   d6a <fstat>
+  close(fd);
+     c77:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+     c7a:	89 c6                	mov    %eax,%esi
+  close(fd);
+     c7c:	e8 b9 00 00 00       	call   d3a <close>
+  return r;
+     c81:	83 c4 10             	add    $0x10,%esp
+}
+     c84:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     c87:	89 f0                	mov    %esi,%eax
+     c89:	5b                   	pop    %ebx
+     c8a:	5e                   	pop    %esi
+     c8b:	5d                   	pop    %ebp
+     c8c:	c3                   	ret    
+     c8d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+     c90:	be ff ff ff ff       	mov    $0xffffffff,%esi
+     c95:	eb ed                	jmp    c84 <stat+0x34>
+     c97:	89 f6                	mov    %esi,%esi
+     c99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000ca0 <atoi>:
+
+int
+atoi(const char *s)
+{
+     ca0:	55                   	push   %ebp
+     ca1:	89 e5                	mov    %esp,%ebp
+     ca3:	53                   	push   %ebx
+     ca4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     ca7:	0f be 11             	movsbl (%ecx),%edx
+     caa:	8d 42 d0             	lea    -0x30(%edx),%eax
+     cad:	3c 09                	cmp    $0x9,%al
+  n = 0;
+     caf:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+     cb4:	77 1f                	ja     cd5 <atoi+0x35>
+     cb6:	8d 76 00             	lea    0x0(%esi),%esi
+     cb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+     cc0:	8d 04 80             	lea    (%eax,%eax,4),%eax
+     cc3:	83 c1 01             	add    $0x1,%ecx
+     cc6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+     cca:	0f be 11             	movsbl (%ecx),%edx
+     ccd:	8d 5a d0             	lea    -0x30(%edx),%ebx
+     cd0:	80 fb 09             	cmp    $0x9,%bl
+     cd3:	76 eb                	jbe    cc0 <atoi+0x20>
+  return n;
+}
+     cd5:	5b                   	pop    %ebx
+     cd6:	5d                   	pop    %ebp
+     cd7:	c3                   	ret    
+     cd8:	90                   	nop
+     cd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000ce0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+     ce0:	55                   	push   %ebp
+     ce1:	89 e5                	mov    %esp,%ebp
+     ce3:	56                   	push   %esi
+     ce4:	53                   	push   %ebx
+     ce5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+     ce8:	8b 45 08             	mov    0x8(%ebp),%eax
+     ceb:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+     cee:	85 db                	test   %ebx,%ebx
+     cf0:	7e 14                	jle    d06 <memmove+0x26>
+     cf2:	31 d2                	xor    %edx,%edx
+     cf4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+     cf8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+     cfc:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+     cff:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+     d02:	39 d3                	cmp    %edx,%ebx
+     d04:	75 f2                	jne    cf8 <memmove+0x18>
+  return vdst;
+}
+     d06:	5b                   	pop    %ebx
+     d07:	5e                   	pop    %esi
+     d08:	5d                   	pop    %ebp
+     d09:	c3                   	ret    
+
+00000d0a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+     d0a:	b8 01 00 00 00       	mov    $0x1,%eax
+     d0f:	cd 40                	int    $0x40
+     d11:	c3                   	ret    
+
+00000d12 <exit>:
+SYSCALL(exit)
+     d12:	b8 02 00 00 00       	mov    $0x2,%eax
+     d17:	cd 40                	int    $0x40
+     d19:	c3                   	ret    
+
+00000d1a <wait>:
+SYSCALL(wait)
+     d1a:	b8 03 00 00 00       	mov    $0x3,%eax
+     d1f:	cd 40                	int    $0x40
+     d21:	c3                   	ret    
+
+00000d22 <pipe>:
+SYSCALL(pipe)
+     d22:	b8 04 00 00 00       	mov    $0x4,%eax
+     d27:	cd 40                	int    $0x40
+     d29:	c3                   	ret    
+
+00000d2a <read>:
+SYSCALL(read)
+     d2a:	b8 05 00 00 00       	mov    $0x5,%eax
+     d2f:	cd 40                	int    $0x40
+     d31:	c3                   	ret    
+
+00000d32 <write>:
+SYSCALL(write)
+     d32:	b8 10 00 00 00       	mov    $0x10,%eax
+     d37:	cd 40                	int    $0x40
+     d39:	c3                   	ret    
+
+00000d3a <close>:
+SYSCALL(close)
+     d3a:	b8 15 00 00 00       	mov    $0x15,%eax
+     d3f:	cd 40                	int    $0x40
+     d41:	c3                   	ret    
+
+00000d42 <kill>:
+SYSCALL(kill)
+     d42:	b8 06 00 00 00       	mov    $0x6,%eax
+     d47:	cd 40                	int    $0x40
+     d49:	c3                   	ret    
+
+00000d4a <exec>:
+SYSCALL(exec)
+     d4a:	b8 07 00 00 00       	mov    $0x7,%eax
+     d4f:	cd 40                	int    $0x40
+     d51:	c3                   	ret    
+
+00000d52 <open>:
+SYSCALL(open)
+     d52:	b8 0f 00 00 00       	mov    $0xf,%eax
+     d57:	cd 40                	int    $0x40
+     d59:	c3                   	ret    
+
+00000d5a <mknod>:
+SYSCALL(mknod)
+     d5a:	b8 11 00 00 00       	mov    $0x11,%eax
+     d5f:	cd 40                	int    $0x40
+     d61:	c3                   	ret    
+
+00000d62 <unlink>:
+SYSCALL(unlink)
+     d62:	b8 12 00 00 00       	mov    $0x12,%eax
+     d67:	cd 40                	int    $0x40
+     d69:	c3                   	ret    
+
+00000d6a <fstat>:
+SYSCALL(fstat)
+     d6a:	b8 08 00 00 00       	mov    $0x8,%eax
+     d6f:	cd 40                	int    $0x40
+     d71:	c3                   	ret    
+
+00000d72 <link>:
+SYSCALL(link)
+     d72:	b8 13 00 00 00       	mov    $0x13,%eax
+     d77:	cd 40                	int    $0x40
+     d79:	c3                   	ret    
+
+00000d7a <mkdir>:
+SYSCALL(mkdir)
+     d7a:	b8 14 00 00 00       	mov    $0x14,%eax
+     d7f:	cd 40                	int    $0x40
+     d81:	c3                   	ret    
+
+00000d82 <chdir>:
+SYSCALL(chdir)
+     d82:	b8 09 00 00 00       	mov    $0x9,%eax
+     d87:	cd 40                	int    $0x40
+     d89:	c3                   	ret    
+
+00000d8a <dup>:
+SYSCALL(dup)
+     d8a:	b8 0a 00 00 00       	mov    $0xa,%eax
+     d8f:	cd 40                	int    $0x40
+     d91:	c3                   	ret    
+
+00000d92 <getpid>:
+SYSCALL(getpid)
+     d92:	b8 0b 00 00 00       	mov    $0xb,%eax
+     d97:	cd 40                	int    $0x40
+     d99:	c3                   	ret    
+
+00000d9a <sbrk>:
+SYSCALL(sbrk)
+     d9a:	b8 0c 00 00 00       	mov    $0xc,%eax
+     d9f:	cd 40                	int    $0x40
+     da1:	c3                   	ret    
+
+00000da2 <sleep>:
+SYSCALL(sleep)
+     da2:	b8 0d 00 00 00       	mov    $0xd,%eax
+     da7:	cd 40                	int    $0x40
+     da9:	c3                   	ret    
+
+00000daa <uptime>:
+SYSCALL(uptime)
+     daa:	b8 0e 00 00 00       	mov    $0xe,%eax
+     daf:	cd 40                	int    $0x40
+     db1:	c3                   	ret    
+
+00000db2 <kmalloc>:
+SYSCALL(kmalloc)
+     db2:	b8 16 00 00 00       	mov    $0x16,%eax
+     db7:	cd 40                	int    $0x40
+     db9:	c3                   	ret    
+
+00000dba <kmfree>:
+SYSCALL(kmfree) 
+     dba:	b8 17 00 00 00       	mov    $0x17,%eax
+     dbf:	cd 40                	int    $0x40
+     dc1:	c3                   	ret    
+
+00000dc2 <mmap>:
+SYSCALL(mmap)
+     dc2:	b8 18 00 00 00       	mov    $0x18,%eax
+     dc7:	cd 40                	int    $0x40
+     dc9:	c3                   	ret    
+
+00000dca <munmap>:
+     dca:	b8 19 00 00 00       	mov    $0x19,%eax
+     dcf:	cd 40                	int    $0x40
+     dd1:	c3                   	ret    
+     dd2:	66 90                	xchg   %ax,%ax
+     dd4:	66 90                	xchg   %ax,%ax
+     dd6:	66 90                	xchg   %ax,%ax
+     dd8:	66 90                	xchg   %ax,%ax
+     dda:	66 90                	xchg   %ax,%ax
+     ddc:	66 90                	xchg   %ax,%ax
+     dde:	66 90                	xchg   %ax,%ax
+
+00000de0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+     de0:	55                   	push   %ebp
+     de1:	89 e5                	mov    %esp,%ebp
+     de3:	57                   	push   %edi
+     de4:	56                   	push   %esi
+     de5:	53                   	push   %ebx
+     de6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+     de9:	85 d2                	test   %edx,%edx
+{
+     deb:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+     dee:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+     df0:	79 76                	jns    e68 <printint+0x88>
+     df2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+     df6:	74 70                	je     e68 <printint+0x88>
+    x = -xx;
+     df8:	f7 d8                	neg    %eax
+    neg = 1;
+     dfa:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+     e01:	31 f6                	xor    %esi,%esi
+     e03:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+     e06:	eb 0a                	jmp    e12 <printint+0x32>
+     e08:	90                   	nop
+     e09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+     e10:	89 fe                	mov    %edi,%esi
+     e12:	31 d2                	xor    %edx,%edx
+     e14:	8d 7e 01             	lea    0x1(%esi),%edi
+     e17:	f7 f1                	div    %ecx
+     e19:	0f b6 92 c8 12 00 00 	movzbl 0x12c8(%edx),%edx
+  }while((x /= base) != 0);
+     e20:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+     e22:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+     e25:	75 e9                	jne    e10 <printint+0x30>
+  if(neg)
+     e27:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+     e2a:	85 c0                	test   %eax,%eax
+     e2c:	74 08                	je     e36 <printint+0x56>
+    buf[i++] = '-';
+     e2e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+     e33:	8d 7e 02             	lea    0x2(%esi),%edi
+     e36:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+     e3a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+     e3d:	8d 76 00             	lea    0x0(%esi),%esi
+     e40:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+     e43:	83 ec 04             	sub    $0x4,%esp
+     e46:	83 ee 01             	sub    $0x1,%esi
+     e49:	6a 01                	push   $0x1
+     e4b:	53                   	push   %ebx
+     e4c:	57                   	push   %edi
+     e4d:	88 45 d7             	mov    %al,-0x29(%ebp)
+     e50:	e8 dd fe ff ff       	call   d32 <write>
+
+  while(--i >= 0)
+     e55:	83 c4 10             	add    $0x10,%esp
+     e58:	39 de                	cmp    %ebx,%esi
+     e5a:	75 e4                	jne    e40 <printint+0x60>
+    putc(fd, buf[i]);
+}
+     e5c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     e5f:	5b                   	pop    %ebx
+     e60:	5e                   	pop    %esi
+     e61:	5f                   	pop    %edi
+     e62:	5d                   	pop    %ebp
+     e63:	c3                   	ret    
+     e64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+     e68:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+     e6f:	eb 90                	jmp    e01 <printint+0x21>
+     e71:	eb 0d                	jmp    e80 <printf>
+     e73:	90                   	nop
+     e74:	90                   	nop
+     e75:	90                   	nop
+     e76:	90                   	nop
+     e77:	90                   	nop
+     e78:	90                   	nop
+     e79:	90                   	nop
+     e7a:	90                   	nop
+     e7b:	90                   	nop
+     e7c:	90                   	nop
+     e7d:	90                   	nop
+     e7e:	90                   	nop
+     e7f:	90                   	nop
+
+00000e80 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+     e80:	55                   	push   %ebp
+     e81:	89 e5                	mov    %esp,%ebp
+     e83:	57                   	push   %edi
+     e84:	56                   	push   %esi
+     e85:	53                   	push   %ebx
+     e86:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+     e89:	8b 75 0c             	mov    0xc(%ebp),%esi
+     e8c:	0f b6 1e             	movzbl (%esi),%ebx
+     e8f:	84 db                	test   %bl,%bl
+     e91:	0f 84 b3 00 00 00    	je     f4a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+     e97:	8d 45 10             	lea    0x10(%ebp),%eax
+     e9a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+     e9d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+     e9f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     ea2:	eb 2f                	jmp    ed3 <printf+0x53>
+     ea4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+     ea8:	83 f8 25             	cmp    $0x25,%eax
+     eab:	0f 84 a7 00 00 00    	je     f58 <printf+0xd8>
+  write(fd, &c, 1);
+     eb1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+     eb4:	83 ec 04             	sub    $0x4,%esp
+     eb7:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+     eba:	6a 01                	push   $0x1
+     ebc:	50                   	push   %eax
+     ebd:	ff 75 08             	pushl  0x8(%ebp)
+     ec0:	e8 6d fe ff ff       	call   d32 <write>
+     ec5:	83 c4 10             	add    $0x10,%esp
+     ec8:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+     ecb:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+     ecf:	84 db                	test   %bl,%bl
+     ed1:	74 77                	je     f4a <printf+0xca>
+    if(state == 0){
+     ed3:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+     ed5:	0f be cb             	movsbl %bl,%ecx
+     ed8:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+     edb:	74 cb                	je     ea8 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+     edd:	83 ff 25             	cmp    $0x25,%edi
+     ee0:	75 e6                	jne    ec8 <printf+0x48>
+      if(c == 'd'){
+     ee2:	83 f8 64             	cmp    $0x64,%eax
+     ee5:	0f 84 05 01 00 00    	je     ff0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+     eeb:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+     ef1:	83 f9 70             	cmp    $0x70,%ecx
+     ef4:	74 72                	je     f68 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+     ef6:	83 f8 73             	cmp    $0x73,%eax
+     ef9:	0f 84 99 00 00 00    	je     f98 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+     eff:	83 f8 63             	cmp    $0x63,%eax
+     f02:	0f 84 08 01 00 00    	je     1010 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+     f08:	83 f8 25             	cmp    $0x25,%eax
+     f0b:	0f 84 ef 00 00 00    	je     1000 <printf+0x180>
+  write(fd, &c, 1);
+     f11:	8d 45 e7             	lea    -0x19(%ebp),%eax
+     f14:	83 ec 04             	sub    $0x4,%esp
+     f17:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+     f1b:	6a 01                	push   $0x1
+     f1d:	50                   	push   %eax
+     f1e:	ff 75 08             	pushl  0x8(%ebp)
+     f21:	e8 0c fe ff ff       	call   d32 <write>
+     f26:	83 c4 0c             	add    $0xc,%esp
+     f29:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+     f2c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+     f2f:	6a 01                	push   $0x1
+     f31:	50                   	push   %eax
+     f32:	ff 75 08             	pushl  0x8(%ebp)
+     f35:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+     f38:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+     f3a:	e8 f3 fd ff ff       	call   d32 <write>
+  for(i = 0; fmt[i]; i++){
+     f3f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+     f43:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+     f46:	84 db                	test   %bl,%bl
+     f48:	75 89                	jne    ed3 <printf+0x53>
+    }
+  }
+}
+     f4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     f4d:	5b                   	pop    %ebx
+     f4e:	5e                   	pop    %esi
+     f4f:	5f                   	pop    %edi
+     f50:	5d                   	pop    %ebp
+     f51:	c3                   	ret    
+     f52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+     f58:	bf 25 00 00 00       	mov    $0x25,%edi
+     f5d:	e9 66 ff ff ff       	jmp    ec8 <printf+0x48>
+     f62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+     f68:	83 ec 0c             	sub    $0xc,%esp
+     f6b:	b9 10 00 00 00       	mov    $0x10,%ecx
+     f70:	6a 00                	push   $0x0
+     f72:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+     f75:	8b 45 08             	mov    0x8(%ebp),%eax
+     f78:	8b 17                	mov    (%edi),%edx
+     f7a:	e8 61 fe ff ff       	call   de0 <printint>
+        ap++;
+     f7f:	89 f8                	mov    %edi,%eax
+     f81:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+     f84:	31 ff                	xor    %edi,%edi
+        ap++;
+     f86:	83 c0 04             	add    $0x4,%eax
+     f89:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     f8c:	e9 37 ff ff ff       	jmp    ec8 <printf+0x48>
+     f91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+     f98:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     f9b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+     f9d:	83 c0 04             	add    $0x4,%eax
+     fa0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+     fa3:	85 c9                	test   %ecx,%ecx
+     fa5:	0f 84 8e 00 00 00    	je     1039 <printf+0x1b9>
+        while(*s != 0){
+     fab:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+     fae:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+     fb0:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+     fb2:	84 c0                	test   %al,%al
+     fb4:	0f 84 0e ff ff ff    	je     ec8 <printf+0x48>
+     fba:	89 75 d0             	mov    %esi,-0x30(%ebp)
+     fbd:	89 de                	mov    %ebx,%esi
+     fbf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     fc2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+     fc5:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+     fc8:	83 ec 04             	sub    $0x4,%esp
+          s++;
+     fcb:	83 c6 01             	add    $0x1,%esi
+     fce:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+     fd1:	6a 01                	push   $0x1
+     fd3:	57                   	push   %edi
+     fd4:	53                   	push   %ebx
+     fd5:	e8 58 fd ff ff       	call   d32 <write>
+        while(*s != 0){
+     fda:	0f b6 06             	movzbl (%esi),%eax
+     fdd:	83 c4 10             	add    $0x10,%esp
+     fe0:	84 c0                	test   %al,%al
+     fe2:	75 e4                	jne    fc8 <printf+0x148>
+     fe4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+     fe7:	31 ff                	xor    %edi,%edi
+     fe9:	e9 da fe ff ff       	jmp    ec8 <printf+0x48>
+     fee:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+     ff0:	83 ec 0c             	sub    $0xc,%esp
+     ff3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+     ff8:	6a 01                	push   $0x1
+     ffa:	e9 73 ff ff ff       	jmp    f72 <printf+0xf2>
+     fff:	90                   	nop
+  write(fd, &c, 1);
+    1000:	83 ec 04             	sub    $0x4,%esp
+    1003:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+    1006:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    1009:	6a 01                	push   $0x1
+    100b:	e9 21 ff ff ff       	jmp    f31 <printf+0xb1>
+        putc(fd, *ap);
+    1010:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+    1013:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    1016:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+    1018:	6a 01                	push   $0x1
+        ap++;
+    101a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+    101d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+    1020:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+    1023:	50                   	push   %eax
+    1024:	ff 75 08             	pushl  0x8(%ebp)
+    1027:	e8 06 fd ff ff       	call   d32 <write>
+        ap++;
+    102c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+    102f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    1032:	31 ff                	xor    %edi,%edi
+    1034:	e9 8f fe ff ff       	jmp    ec8 <printf+0x48>
+          s = "(null)";
+    1039:	bb c0 12 00 00       	mov    $0x12c0,%ebx
+        while(*s != 0){
+    103e:	b8 28 00 00 00       	mov    $0x28,%eax
+    1043:	e9 72 ff ff ff       	jmp    fba <printf+0x13a>
+    1048:	66 90                	xchg   %ax,%ax
+    104a:	66 90                	xchg   %ax,%ax
+    104c:	66 90                	xchg   %ax,%ax
+    104e:	66 90                	xchg   %ax,%ax
+
+00001050 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    1050:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    1051:	a1 04 19 00 00       	mov    0x1904,%eax
+{
+    1056:	89 e5                	mov    %esp,%ebp
+    1058:	57                   	push   %edi
+    1059:	56                   	push   %esi
+    105a:	53                   	push   %ebx
+    105b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+    105e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+    1061:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    1068:	39 c8                	cmp    %ecx,%eax
+    106a:	8b 10                	mov    (%eax),%edx
+    106c:	73 32                	jae    10a0 <free+0x50>
+    106e:	39 d1                	cmp    %edx,%ecx
+    1070:	72 04                	jb     1076 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    1072:	39 d0                	cmp    %edx,%eax
+    1074:	72 32                	jb     10a8 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    1076:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    1079:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    107c:	39 fa                	cmp    %edi,%edx
+    107e:	74 30                	je     10b0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    1080:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    1083:	8b 50 04             	mov    0x4(%eax),%edx
+    1086:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    1089:	39 f1                	cmp    %esi,%ecx
+    108b:	74 3a                	je     10c7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    108d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+    108f:	a3 04 19 00 00       	mov    %eax,0x1904
+}
+    1094:	5b                   	pop    %ebx
+    1095:	5e                   	pop    %esi
+    1096:	5f                   	pop    %edi
+    1097:	5d                   	pop    %ebp
+    1098:	c3                   	ret    
+    1099:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    10a0:	39 d0                	cmp    %edx,%eax
+    10a2:	72 04                	jb     10a8 <free+0x58>
+    10a4:	39 d1                	cmp    %edx,%ecx
+    10a6:	72 ce                	jb     1076 <free+0x26>
+{
+    10a8:	89 d0                	mov    %edx,%eax
+    10aa:	eb bc                	jmp    1068 <free+0x18>
+    10ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+    10b0:	03 72 04             	add    0x4(%edx),%esi
+    10b3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    10b6:	8b 10                	mov    (%eax),%edx
+    10b8:	8b 12                	mov    (%edx),%edx
+    10ba:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    10bd:	8b 50 04             	mov    0x4(%eax),%edx
+    10c0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    10c3:	39 f1                	cmp    %esi,%ecx
+    10c5:	75 c6                	jne    108d <free+0x3d>
+    p->s.size += bp->s.size;
+    10c7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+    10ca:	a3 04 19 00 00       	mov    %eax,0x1904
+    p->s.size += bp->s.size;
+    10cf:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    10d2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    10d5:	89 10                	mov    %edx,(%eax)
+}
+    10d7:	5b                   	pop    %ebx
+    10d8:	5e                   	pop    %esi
+    10d9:	5f                   	pop    %edi
+    10da:	5d                   	pop    %ebp
+    10db:	c3                   	ret    
+    10dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000010e0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    10e0:	55                   	push   %ebp
+    10e1:	89 e5                	mov    %esp,%ebp
+    10e3:	57                   	push   %edi
+    10e4:	56                   	push   %esi
+    10e5:	53                   	push   %ebx
+    10e6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    10e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    10ec:	8b 15 04 19 00 00    	mov    0x1904,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    10f2:	8d 78 07             	lea    0x7(%eax),%edi
+    10f5:	c1 ef 03             	shr    $0x3,%edi
+    10f8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+    10fb:	85 d2                	test   %edx,%edx
+    10fd:	0f 84 9d 00 00 00    	je     11a0 <malloc+0xc0>
+    1103:	8b 02                	mov    (%edx),%eax
+    1105:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+    1108:	39 cf                	cmp    %ecx,%edi
+    110a:	76 6c                	jbe    1178 <malloc+0x98>
+    110c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+    1112:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    1117:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    111a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+    1121:	eb 0e                	jmp    1131 <malloc+0x51>
+    1123:	90                   	nop
+    1124:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1128:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+    112a:	8b 48 04             	mov    0x4(%eax),%ecx
+    112d:	39 f9                	cmp    %edi,%ecx
+    112f:	73 47                	jae    1178 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    1131:	39 05 04 19 00 00    	cmp    %eax,0x1904
+    1137:	89 c2                	mov    %eax,%edx
+    1139:	75 ed                	jne    1128 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+    113b:	83 ec 0c             	sub    $0xc,%esp
+    113e:	56                   	push   %esi
+    113f:	e8 56 fc ff ff       	call   d9a <sbrk>
+  if(p == (char*)-1)
+    1144:	83 c4 10             	add    $0x10,%esp
+    1147:	83 f8 ff             	cmp    $0xffffffff,%eax
+    114a:	74 1c                	je     1168 <malloc+0x88>
+  hp->s.size = nu;
+    114c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    114f:	83 ec 0c             	sub    $0xc,%esp
+    1152:	83 c0 08             	add    $0x8,%eax
+    1155:	50                   	push   %eax
+    1156:	e8 f5 fe ff ff       	call   1050 <free>
+  return freep;
+    115b:	8b 15 04 19 00 00    	mov    0x1904,%edx
+      if((p = morecore(nunits)) == 0)
+    1161:	83 c4 10             	add    $0x10,%esp
+    1164:	85 d2                	test   %edx,%edx
+    1166:	75 c0                	jne    1128 <malloc+0x48>
+        return 0;
+  }
+}
+    1168:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    116b:	31 c0                	xor    %eax,%eax
+}
+    116d:	5b                   	pop    %ebx
+    116e:	5e                   	pop    %esi
+    116f:	5f                   	pop    %edi
+    1170:	5d                   	pop    %ebp
+    1171:	c3                   	ret    
+    1172:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+    1178:	39 cf                	cmp    %ecx,%edi
+    117a:	74 54                	je     11d0 <malloc+0xf0>
+        p->s.size -= nunits;
+    117c:	29 f9                	sub    %edi,%ecx
+    117e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+    1181:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+    1184:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+    1187:	89 15 04 19 00 00    	mov    %edx,0x1904
+}
+    118d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    1190:	83 c0 08             	add    $0x8,%eax
+}
+    1193:	5b                   	pop    %ebx
+    1194:	5e                   	pop    %esi
+    1195:	5f                   	pop    %edi
+    1196:	5d                   	pop    %ebp
+    1197:	c3                   	ret    
+    1198:	90                   	nop
+    1199:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    11a0:	c7 05 04 19 00 00 08 	movl   $0x1908,0x1904
+    11a7:	19 00 00 
+    11aa:	c7 05 08 19 00 00 08 	movl   $0x1908,0x1908
+    11b1:	19 00 00 
+    base.s.size = 0;
+    11b4:	b8 08 19 00 00       	mov    $0x1908,%eax
+    11b9:	c7 05 0c 19 00 00 00 	movl   $0x0,0x190c
+    11c0:	00 00 00 
+    11c3:	e9 44 ff ff ff       	jmp    110c <malloc+0x2c>
+    11c8:	90                   	nop
+    11c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+    11d0:	8b 08                	mov    (%eax),%ecx
+    11d2:	89 0a                	mov    %ecx,(%edx)
+    11d4:	eb b1                	jmp    1187 <malloc+0xa7>
diff -ruN src-old/sh.d src/sh.d
--- src-old/sh.d	1970-01-01 00:00:00.000000000 +0000
+++ src/sh.d	2023-04-19 02:18:56.812270142 +0000
@@ -0,0 +1 @@
+sh.o: sh.c /usr/include/stdc-predef.h types.h user.h fcntl.h
Binary files src-old/sh.o and src/sh.o differ
diff -ruN src-old/sh.sym src/sh.sym
--- src-old/sh.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/sh.sym	2023-04-19 02:18:56.852274872 +0000
@@ -0,0 +1,83 @@
+00000000 .text
+000011d8 .rodata
+000012dc .eh_frame
+00001884 .data
+000018a0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 sh.c
+000018a0 buf.1090
+00000000 ulib.c
+00000000 printf.c
+00000de0 printint
+000012c8 digits.1052
+00000000 umalloc.c
+00001904 freep
+00001908 base
+00000ac0 strcpy
+00000e80 printf
+00000ce0 memmove
+00000dca munmap
+00000d5a mknod
+00000330 execcmd
+00000bd0 gets
+00000d92 getpid
+00000800 parsepipe
+00000a50 parsecmd
+00000430 backcmd
+000005d0 peek
+00000640 parseredirs
+00000460 gettoken
+000010e0 malloc
+00000da2 sleep
+0000188c whitespace
+00000dba kmfree
+00000310 fork1
+00000dc2 mmap
+000009a0 nulterminate
+00000d22 pipe
+00000100 getcmd
+00000d32 write
+00000d6a fstat
+00000d42 kill
+00000d82 chdir
+00000870 parseline
+00000170 runcmd
+00000910 parseblock
+00000d4a exec
+00000d1a wait
+00001884 symbols
+00000d2a read
+000006f0 parseexec
+00000d62 unlink
+00000150 panic
+00000d0a fork
+00000d9a sbrk
+00000daa uptime
+00001892 __bss_start
+00000b70 memset
+00000000 main
+00000af0 strcmp
+00000d8a dup
+000003b0 pipecmd
+00000360 redircmd
+00000c50 stat
+00001892 _edata
+00001910 _end
+00000d72 link
+00000db2 kmalloc
+00000d12 exit
+00000ca0 atoi
+00000b40 strlen
+00000d52 open
+00000b90 strchr
+00000d7a mkdir
+00000d3a close
+000003f0 listcmd
+00001050 free
diff -ruN src-old/sleeplock.d src/sleeplock.d
--- src-old/sleeplock.d	1970-01-01 00:00:00.000000000 +0000
+++ src/sleeplock.d	2023-04-19 02:18:54.672016620 +0000
@@ -0,0 +1,2 @@
+sleeplock.o: sleeplock.c /usr/include/stdc-predef.h types.h defs.h \
+ param.h x86.h memlayout.h mmu.h proc.h spinlock.h sleeplock.h
Binary files src-old/sleeplock.o and src/sleeplock.o differ
diff -ruN src-old/spinlock.d src/spinlock.d
--- src-old/spinlock.d	1970-01-01 00:00:00.000000000 +0000
+++ src/spinlock.d	2023-04-19 02:18:54.708020894 +0000
@@ -0,0 +1,2 @@
+spinlock.o: spinlock.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ x86.h memlayout.h mmu.h proc.h spinlock.h
Binary files src-old/spinlock.o and src/spinlock.o differ
Binary files src-old/_stressfs and src/_stressfs differ
diff -ruN src-old/stressfs.asm src/stressfs.asm
--- src-old/stressfs.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/stressfs.asm	2023-04-19 02:18:56.904281023 +0000
@@ -0,0 +1,1287 @@
+
+_stressfs:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "fs.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+  int fd, i;
+  char path[] = "stressfs0";
+   7:	b8 30 00 00 00       	mov    $0x30,%eax
+{
+   c:	ff 71 fc             	pushl  -0x4(%ecx)
+   f:	55                   	push   %ebp
+  10:	89 e5                	mov    %esp,%ebp
+  12:	57                   	push   %edi
+  13:	56                   	push   %esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  memset(data, 'a', sizeof(data));
+  16:	8d b5 e8 fd ff ff    	lea    -0x218(%ebp),%esi
+
+  for(i = 0; i < 4; i++)
+  1c:	31 db                	xor    %ebx,%ebx
+{
+  1e:	81 ec 20 02 00 00    	sub    $0x220,%esp
+  char path[] = "stressfs0";
+  24:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
+  2b:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
+  32:	74 72 65 
+  printf(1, "stressfs starting\n");
+  35:	68 58 08 00 00       	push   $0x858
+  3a:	6a 01                	push   $0x1
+  char path[] = "stressfs0";
+  3c:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
+  43:	73 66 73 
+  printf(1, "stressfs starting\n");
+  46:	e8 b5 04 00 00       	call   500 <printf>
+  memset(data, 'a', sizeof(data));
+  4b:	83 c4 0c             	add    $0xc,%esp
+  4e:	68 00 02 00 00       	push   $0x200
+  53:	6a 61                	push   $0x61
+  55:	56                   	push   %esi
+  56:	e8 95 01 00 00       	call   1f0 <memset>
+  5b:	83 c4 10             	add    $0x10,%esp
+    if(fork() > 0)
+  5e:	e8 27 03 00 00       	call   38a <fork>
+  63:	85 c0                	test   %eax,%eax
+  65:	0f 8f bf 00 00 00    	jg     12a <main+0x12a>
+  for(i = 0; i < 4; i++)
+  6b:	83 c3 01             	add    $0x1,%ebx
+  6e:	83 fb 04             	cmp    $0x4,%ebx
+  71:	75 eb                	jne    5e <main+0x5e>
+  73:	bf 04 00 00 00       	mov    $0x4,%edi
+      break;
+
+  printf(1, "write %d\n", i);
+  78:	83 ec 04             	sub    $0x4,%esp
+  7b:	53                   	push   %ebx
+  7c:	68 6b 08 00 00       	push   $0x86b
+
+  path[8] += i;
+  fd = open(path, O_CREATE | O_RDWR);
+  81:	bb 14 00 00 00       	mov    $0x14,%ebx
+  printf(1, "write %d\n", i);
+  86:	6a 01                	push   $0x1
+  88:	e8 73 04 00 00       	call   500 <printf>
+  path[8] += i;
+  8d:	89 f8                	mov    %edi,%eax
+  8f:	00 85 e6 fd ff ff    	add    %al,-0x21a(%ebp)
+  fd = open(path, O_CREATE | O_RDWR);
+  95:	5f                   	pop    %edi
+  96:	58                   	pop    %eax
+  97:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  9d:	68 02 02 00 00       	push   $0x202
+  a2:	50                   	push   %eax
+  a3:	e8 2a 03 00 00       	call   3d2 <open>
+  a8:	83 c4 10             	add    $0x10,%esp
+  ab:	89 c7                	mov    %eax,%edi
+  ad:	8d 76 00             	lea    0x0(%esi),%esi
+  for(i = 0; i < 20; i++)
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  b0:	83 ec 04             	sub    $0x4,%esp
+  b3:	68 00 02 00 00       	push   $0x200
+  b8:	56                   	push   %esi
+  b9:	57                   	push   %edi
+  ba:	e8 f3 02 00 00       	call   3b2 <write>
+  for(i = 0; i < 20; i++)
+  bf:	83 c4 10             	add    $0x10,%esp
+  c2:	83 eb 01             	sub    $0x1,%ebx
+  c5:	75 e9                	jne    b0 <main+0xb0>
+  close(fd);
+  c7:	83 ec 0c             	sub    $0xc,%esp
+  ca:	57                   	push   %edi
+  cb:	e8 ea 02 00 00       	call   3ba <close>
+
+  printf(1, "read\n");
+  d0:	58                   	pop    %eax
+  d1:	5a                   	pop    %edx
+  d2:	68 75 08 00 00       	push   $0x875
+  d7:	6a 01                	push   $0x1
+  d9:	e8 22 04 00 00       	call   500 <printf>
+
+  fd = open(path, O_RDONLY);
+  de:	59                   	pop    %ecx
+  df:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  e5:	5b                   	pop    %ebx
+  e6:	6a 00                	push   $0x0
+  e8:	50                   	push   %eax
+  e9:	bb 14 00 00 00       	mov    $0x14,%ebx
+  ee:	e8 df 02 00 00       	call   3d2 <open>
+  f3:	83 c4 10             	add    $0x10,%esp
+  f6:	89 c7                	mov    %eax,%edi
+  f8:	90                   	nop
+  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for (i = 0; i < 20; i++)
+    read(fd, data, sizeof(data));
+ 100:	83 ec 04             	sub    $0x4,%esp
+ 103:	68 00 02 00 00       	push   $0x200
+ 108:	56                   	push   %esi
+ 109:	57                   	push   %edi
+ 10a:	e8 9b 02 00 00       	call   3aa <read>
+  for (i = 0; i < 20; i++)
+ 10f:	83 c4 10             	add    $0x10,%esp
+ 112:	83 eb 01             	sub    $0x1,%ebx
+ 115:	75 e9                	jne    100 <main+0x100>
+  close(fd);
+ 117:	83 ec 0c             	sub    $0xc,%esp
+ 11a:	57                   	push   %edi
+ 11b:	e8 9a 02 00 00       	call   3ba <close>
+
+  wait();
+ 120:	e8 75 02 00 00       	call   39a <wait>
+
+  exit();
+ 125:	e8 68 02 00 00       	call   392 <exit>
+ 12a:	89 df                	mov    %ebx,%edi
+ 12c:	e9 47 ff ff ff       	jmp    78 <main+0x78>
+ 131:	66 90                	xchg   %ax,%ax
+ 133:	66 90                	xchg   %ax,%ax
+ 135:	66 90                	xchg   %ax,%ax
+ 137:	66 90                	xchg   %ax,%ax
+ 139:	66 90                	xchg   %ax,%ax
+ 13b:	66 90                	xchg   %ax,%ax
+ 13d:	66 90                	xchg   %ax,%ax
+ 13f:	90                   	nop
+
+00000140 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	53                   	push   %ebx
+ 144:	8b 45 08             	mov    0x8(%ebp),%eax
+ 147:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 14a:	89 c2                	mov    %eax,%edx
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 150:	83 c1 01             	add    $0x1,%ecx
+ 153:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 157:	83 c2 01             	add    $0x1,%edx
+ 15a:	84 db                	test   %bl,%bl
+ 15c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 15f:	75 ef                	jne    150 <strcpy+0x10>
+    ;
+  return os;
+}
+ 161:	5b                   	pop    %ebx
+ 162:	5d                   	pop    %ebp
+ 163:	c3                   	ret    
+ 164:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 16a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000170 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	53                   	push   %ebx
+ 174:	8b 55 08             	mov    0x8(%ebp),%edx
+ 177:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 17a:	0f b6 02             	movzbl (%edx),%eax
+ 17d:	0f b6 19             	movzbl (%ecx),%ebx
+ 180:	84 c0                	test   %al,%al
+ 182:	75 1c                	jne    1a0 <strcmp+0x30>
+ 184:	eb 2a                	jmp    1b0 <strcmp+0x40>
+ 186:	8d 76 00             	lea    0x0(%esi),%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 190:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 193:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 196:	83 c1 01             	add    $0x1,%ecx
+ 199:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 19c:	84 c0                	test   %al,%al
+ 19e:	74 10                	je     1b0 <strcmp+0x40>
+ 1a0:	38 d8                	cmp    %bl,%al
+ 1a2:	74 ec                	je     190 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1a4:	29 d8                	sub    %ebx,%eax
+}
+ 1a6:	5b                   	pop    %ebx
+ 1a7:	5d                   	pop    %ebp
+ 1a8:	c3                   	ret    
+ 1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1b0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1b2:	29 d8                	sub    %ebx,%eax
+}
+ 1b4:	5b                   	pop    %ebx
+ 1b5:	5d                   	pop    %ebp
+ 1b6:	c3                   	ret    
+ 1b7:	89 f6                	mov    %esi,%esi
+ 1b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1c6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 1c9:	74 15                	je     1e0 <strlen+0x20>
+ 1cb:	31 d2                	xor    %edx,%edx
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1d0:	83 c2 01             	add    $0x1,%edx
+ 1d3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1d7:	89 d0                	mov    %edx,%eax
+ 1d9:	75 f5                	jne    1d0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1db:	5d                   	pop    %ebp
+ 1dc:	c3                   	ret    
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 1e0:	31 c0                	xor    %eax,%eax
+}
+ 1e2:	5d                   	pop    %ebp
+ 1e3:	c3                   	ret    
+ 1e4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1ea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000001f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	57                   	push   %edi
+ 1f4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1fd:	89 d7                	mov    %edx,%edi
+ 1ff:	fc                   	cld    
+ 200:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 202:	89 d0                	mov    %edx,%eax
+ 204:	5f                   	pop    %edi
+ 205:	5d                   	pop    %ebp
+ 206:	c3                   	ret    
+ 207:	89 f6                	mov    %esi,%esi
+ 209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000210 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 45 08             	mov    0x8(%ebp),%eax
+ 217:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 21a:	0f b6 10             	movzbl (%eax),%edx
+ 21d:	84 d2                	test   %dl,%dl
+ 21f:	74 1d                	je     23e <strchr+0x2e>
+    if(*s == c)
+ 221:	38 d3                	cmp    %dl,%bl
+ 223:	89 d9                	mov    %ebx,%ecx
+ 225:	75 0d                	jne    234 <strchr+0x24>
+ 227:	eb 17                	jmp    240 <strchr+0x30>
+ 229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 230:	38 ca                	cmp    %cl,%dl
+ 232:	74 0c                	je     240 <strchr+0x30>
+  for(; *s; s++)
+ 234:	83 c0 01             	add    $0x1,%eax
+ 237:	0f b6 10             	movzbl (%eax),%edx
+ 23a:	84 d2                	test   %dl,%dl
+ 23c:	75 f2                	jne    230 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 23e:	31 c0                	xor    %eax,%eax
+}
+ 240:	5b                   	pop    %ebx
+ 241:	5d                   	pop    %ebp
+ 242:	c3                   	ret    
+ 243:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000250 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	57                   	push   %edi
+ 254:	56                   	push   %esi
+ 255:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 256:	31 f6                	xor    %esi,%esi
+ 258:	89 f3                	mov    %esi,%ebx
+{
+ 25a:	83 ec 1c             	sub    $0x1c,%esp
+ 25d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 260:	eb 2f                	jmp    291 <gets+0x41>
+ 262:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 268:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 26b:	83 ec 04             	sub    $0x4,%esp
+ 26e:	6a 01                	push   $0x1
+ 270:	50                   	push   %eax
+ 271:	6a 00                	push   $0x0
+ 273:	e8 32 01 00 00       	call   3aa <read>
+    if(cc < 1)
+ 278:	83 c4 10             	add    $0x10,%esp
+ 27b:	85 c0                	test   %eax,%eax
+ 27d:	7e 1c                	jle    29b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 27f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 283:	83 c7 01             	add    $0x1,%edi
+ 286:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 289:	3c 0a                	cmp    $0xa,%al
+ 28b:	74 23                	je     2b0 <gets+0x60>
+ 28d:	3c 0d                	cmp    $0xd,%al
+ 28f:	74 1f                	je     2b0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 291:	83 c3 01             	add    $0x1,%ebx
+ 294:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 297:	89 fe                	mov    %edi,%esi
+ 299:	7c cd                	jl     268 <gets+0x18>
+ 29b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 29d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2a0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2a6:	5b                   	pop    %ebx
+ 2a7:	5e                   	pop    %esi
+ 2a8:	5f                   	pop    %edi
+ 2a9:	5d                   	pop    %ebp
+ 2aa:	c3                   	ret    
+ 2ab:	90                   	nop
+ 2ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2b0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2b3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2b6:	01 de                	add    %ebx,%esi
+ 2b8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2ba:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2c0:	5b                   	pop    %ebx
+ 2c1:	5e                   	pop    %esi
+ 2c2:	5f                   	pop    %edi
+ 2c3:	5d                   	pop    %ebp
+ 2c4:	c3                   	ret    
+ 2c5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2d0:	55                   	push   %ebp
+ 2d1:	89 e5                	mov    %esp,%ebp
+ 2d3:	56                   	push   %esi
+ 2d4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2d5:	83 ec 08             	sub    $0x8,%esp
+ 2d8:	6a 00                	push   $0x0
+ 2da:	ff 75 08             	pushl  0x8(%ebp)
+ 2dd:	e8 f0 00 00 00       	call   3d2 <open>
+  if(fd < 0)
+ 2e2:	83 c4 10             	add    $0x10,%esp
+ 2e5:	85 c0                	test   %eax,%eax
+ 2e7:	78 27                	js     310 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2e9:	83 ec 08             	sub    $0x8,%esp
+ 2ec:	ff 75 0c             	pushl  0xc(%ebp)
+ 2ef:	89 c3                	mov    %eax,%ebx
+ 2f1:	50                   	push   %eax
+ 2f2:	e8 f3 00 00 00       	call   3ea <fstat>
+  close(fd);
+ 2f7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2fa:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2fc:	e8 b9 00 00 00       	call   3ba <close>
+  return r;
+ 301:	83 c4 10             	add    $0x10,%esp
+}
+ 304:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 307:	89 f0                	mov    %esi,%eax
+ 309:	5b                   	pop    %ebx
+ 30a:	5e                   	pop    %esi
+ 30b:	5d                   	pop    %ebp
+ 30c:	c3                   	ret    
+ 30d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 310:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 315:	eb ed                	jmp    304 <stat+0x34>
+ 317:	89 f6                	mov    %esi,%esi
+ 319:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000320 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 320:	55                   	push   %ebp
+ 321:	89 e5                	mov    %esp,%ebp
+ 323:	53                   	push   %ebx
+ 324:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 327:	0f be 11             	movsbl (%ecx),%edx
+ 32a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 32d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 32f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 334:	77 1f                	ja     355 <atoi+0x35>
+ 336:	8d 76 00             	lea    0x0(%esi),%esi
+ 339:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 340:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 343:	83 c1 01             	add    $0x1,%ecx
+ 346:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 34a:	0f be 11             	movsbl (%ecx),%edx
+ 34d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 350:	80 fb 09             	cmp    $0x9,%bl
+ 353:	76 eb                	jbe    340 <atoi+0x20>
+  return n;
+}
+ 355:	5b                   	pop    %ebx
+ 356:	5d                   	pop    %ebp
+ 357:	c3                   	ret    
+ 358:	90                   	nop
+ 359:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000360 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	56                   	push   %esi
+ 364:	53                   	push   %ebx
+ 365:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 368:	8b 45 08             	mov    0x8(%ebp),%eax
+ 36b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 36e:	85 db                	test   %ebx,%ebx
+ 370:	7e 14                	jle    386 <memmove+0x26>
+ 372:	31 d2                	xor    %edx,%edx
+ 374:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 378:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 37c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 37f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 382:	39 d3                	cmp    %edx,%ebx
+ 384:	75 f2                	jne    378 <memmove+0x18>
+  return vdst;
+}
+ 386:	5b                   	pop    %ebx
+ 387:	5e                   	pop    %esi
+ 388:	5d                   	pop    %ebp
+ 389:	c3                   	ret    
+
+0000038a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 38a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <exit>:
+SYSCALL(exit)
+ 392:	b8 02 00 00 00       	mov    $0x2,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <wait>:
+SYSCALL(wait)
+ 39a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <pipe>:
+SYSCALL(pipe)
+ 3a2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <read>:
+SYSCALL(read)
+ 3aa:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <write>:
+SYSCALL(write)
+ 3b2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <close>:
+SYSCALL(close)
+ 3ba:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <kill>:
+SYSCALL(kill)
+ 3c2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <exec>:
+SYSCALL(exec)
+ 3ca:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <open>:
+SYSCALL(open)
+ 3d2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <mknod>:
+SYSCALL(mknod)
+ 3da:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <unlink>:
+SYSCALL(unlink)
+ 3e2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <fstat>:
+SYSCALL(fstat)
+ 3ea:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <link>:
+SYSCALL(link)
+ 3f2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <mkdir>:
+SYSCALL(mkdir)
+ 3fa:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <chdir>:
+SYSCALL(chdir)
+ 402:	b8 09 00 00 00       	mov    $0x9,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <dup>:
+SYSCALL(dup)
+ 40a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <getpid>:
+SYSCALL(getpid)
+ 412:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+
+0000041a <sbrk>:
+SYSCALL(sbrk)
+ 41a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+
+00000422 <sleep>:
+SYSCALL(sleep)
+ 422:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 427:	cd 40                	int    $0x40
+ 429:	c3                   	ret    
+
+0000042a <uptime>:
+SYSCALL(uptime)
+ 42a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 42f:	cd 40                	int    $0x40
+ 431:	c3                   	ret    
+
+00000432 <kmalloc>:
+SYSCALL(kmalloc)
+ 432:	b8 16 00 00 00       	mov    $0x16,%eax
+ 437:	cd 40                	int    $0x40
+ 439:	c3                   	ret    
+
+0000043a <kmfree>:
+SYSCALL(kmfree) 
+ 43a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 43f:	cd 40                	int    $0x40
+ 441:	c3                   	ret    
+
+00000442 <mmap>:
+SYSCALL(mmap)
+ 442:	b8 18 00 00 00       	mov    $0x18,%eax
+ 447:	cd 40                	int    $0x40
+ 449:	c3                   	ret    
+
+0000044a <munmap>:
+ 44a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 44f:	cd 40                	int    $0x40
+ 451:	c3                   	ret    
+ 452:	66 90                	xchg   %ax,%ax
+ 454:	66 90                	xchg   %ax,%ax
+ 456:	66 90                	xchg   %ax,%ax
+ 458:	66 90                	xchg   %ax,%ax
+ 45a:	66 90                	xchg   %ax,%ax
+ 45c:	66 90                	xchg   %ax,%ax
+ 45e:	66 90                	xchg   %ax,%ax
+
+00000460 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 460:	55                   	push   %ebp
+ 461:	89 e5                	mov    %esp,%ebp
+ 463:	57                   	push   %edi
+ 464:	56                   	push   %esi
+ 465:	53                   	push   %ebx
+ 466:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 469:	85 d2                	test   %edx,%edx
+{
+ 46b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 46e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 470:	79 76                	jns    4e8 <printint+0x88>
+ 472:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 476:	74 70                	je     4e8 <printint+0x88>
+    x = -xx;
+ 478:	f7 d8                	neg    %eax
+    neg = 1;
+ 47a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 481:	31 f6                	xor    %esi,%esi
+ 483:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 486:	eb 0a                	jmp    492 <printint+0x32>
+ 488:	90                   	nop
+ 489:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 490:	89 fe                	mov    %edi,%esi
+ 492:	31 d2                	xor    %edx,%edx
+ 494:	8d 7e 01             	lea    0x1(%esi),%edi
+ 497:	f7 f1                	div    %ecx
+ 499:	0f b6 92 84 08 00 00 	movzbl 0x884(%edx),%edx
+  }while((x /= base) != 0);
+ 4a0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 4a2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 4a5:	75 e9                	jne    490 <printint+0x30>
+  if(neg)
+ 4a7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 4aa:	85 c0                	test   %eax,%eax
+ 4ac:	74 08                	je     4b6 <printint+0x56>
+    buf[i++] = '-';
+ 4ae:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 4b3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 4b6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 4ba:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 4bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 4c0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 4c3:	83 ec 04             	sub    $0x4,%esp
+ 4c6:	83 ee 01             	sub    $0x1,%esi
+ 4c9:	6a 01                	push   $0x1
+ 4cb:	53                   	push   %ebx
+ 4cc:	57                   	push   %edi
+ 4cd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 4d0:	e8 dd fe ff ff       	call   3b2 <write>
+
+  while(--i >= 0)
+ 4d5:	83 c4 10             	add    $0x10,%esp
+ 4d8:	39 de                	cmp    %ebx,%esi
+ 4da:	75 e4                	jne    4c0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 4dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4df:	5b                   	pop    %ebx
+ 4e0:	5e                   	pop    %esi
+ 4e1:	5f                   	pop    %edi
+ 4e2:	5d                   	pop    %ebp
+ 4e3:	c3                   	ret    
+ 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4e8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 4ef:	eb 90                	jmp    481 <printint+0x21>
+ 4f1:	eb 0d                	jmp    500 <printf>
+ 4f3:	90                   	nop
+ 4f4:	90                   	nop
+ 4f5:	90                   	nop
+ 4f6:	90                   	nop
+ 4f7:	90                   	nop
+ 4f8:	90                   	nop
+ 4f9:	90                   	nop
+ 4fa:	90                   	nop
+ 4fb:	90                   	nop
+ 4fc:	90                   	nop
+ 4fd:	90                   	nop
+ 4fe:	90                   	nop
+ 4ff:	90                   	nop
+
+00000500 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 500:	55                   	push   %ebp
+ 501:	89 e5                	mov    %esp,%ebp
+ 503:	57                   	push   %edi
+ 504:	56                   	push   %esi
+ 505:	53                   	push   %ebx
+ 506:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 509:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 50c:	0f b6 1e             	movzbl (%esi),%ebx
+ 50f:	84 db                	test   %bl,%bl
+ 511:	0f 84 b3 00 00 00    	je     5ca <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 517:	8d 45 10             	lea    0x10(%ebp),%eax
+ 51a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 51d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 51f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 522:	eb 2f                	jmp    553 <printf+0x53>
+ 524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 528:	83 f8 25             	cmp    $0x25,%eax
+ 52b:	0f 84 a7 00 00 00    	je     5d8 <printf+0xd8>
+  write(fd, &c, 1);
+ 531:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 534:	83 ec 04             	sub    $0x4,%esp
+ 537:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 53a:	6a 01                	push   $0x1
+ 53c:	50                   	push   %eax
+ 53d:	ff 75 08             	pushl  0x8(%ebp)
+ 540:	e8 6d fe ff ff       	call   3b2 <write>
+ 545:	83 c4 10             	add    $0x10,%esp
+ 548:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 54b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 54f:	84 db                	test   %bl,%bl
+ 551:	74 77                	je     5ca <printf+0xca>
+    if(state == 0){
+ 553:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 555:	0f be cb             	movsbl %bl,%ecx
+ 558:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 55b:	74 cb                	je     528 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 55d:	83 ff 25             	cmp    $0x25,%edi
+ 560:	75 e6                	jne    548 <printf+0x48>
+      if(c == 'd'){
+ 562:	83 f8 64             	cmp    $0x64,%eax
+ 565:	0f 84 05 01 00 00    	je     670 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 56b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 571:	83 f9 70             	cmp    $0x70,%ecx
+ 574:	74 72                	je     5e8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 576:	83 f8 73             	cmp    $0x73,%eax
+ 579:	0f 84 99 00 00 00    	je     618 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 57f:	83 f8 63             	cmp    $0x63,%eax
+ 582:	0f 84 08 01 00 00    	je     690 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 588:	83 f8 25             	cmp    $0x25,%eax
+ 58b:	0f 84 ef 00 00 00    	je     680 <printf+0x180>
+  write(fd, &c, 1);
+ 591:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 594:	83 ec 04             	sub    $0x4,%esp
+ 597:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 59b:	6a 01                	push   $0x1
+ 59d:	50                   	push   %eax
+ 59e:	ff 75 08             	pushl  0x8(%ebp)
+ 5a1:	e8 0c fe ff ff       	call   3b2 <write>
+ 5a6:	83 c4 0c             	add    $0xc,%esp
+ 5a9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 5ac:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 5af:	6a 01                	push   $0x1
+ 5b1:	50                   	push   %eax
+ 5b2:	ff 75 08             	pushl  0x8(%ebp)
+ 5b5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5b8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 5ba:	e8 f3 fd ff ff       	call   3b2 <write>
+  for(i = 0; fmt[i]; i++){
+ 5bf:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 5c3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 5c6:	84 db                	test   %bl,%bl
+ 5c8:	75 89                	jne    553 <printf+0x53>
+    }
+  }
+}
+ 5ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5cd:	5b                   	pop    %ebx
+ 5ce:	5e                   	pop    %esi
+ 5cf:	5f                   	pop    %edi
+ 5d0:	5d                   	pop    %ebp
+ 5d1:	c3                   	ret    
+ 5d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 5d8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 5dd:	e9 66 ff ff ff       	jmp    548 <printf+0x48>
+ 5e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 5e8:	83 ec 0c             	sub    $0xc,%esp
+ 5eb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5f0:	6a 00                	push   $0x0
+ 5f2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 5f5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5f8:	8b 17                	mov    (%edi),%edx
+ 5fa:	e8 61 fe ff ff       	call   460 <printint>
+        ap++;
+ 5ff:	89 f8                	mov    %edi,%eax
+ 601:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 604:	31 ff                	xor    %edi,%edi
+        ap++;
+ 606:	83 c0 04             	add    $0x4,%eax
+ 609:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 60c:	e9 37 ff ff ff       	jmp    548 <printf+0x48>
+ 611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 618:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 61b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 61d:	83 c0 04             	add    $0x4,%eax
+ 620:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 623:	85 c9                	test   %ecx,%ecx
+ 625:	0f 84 8e 00 00 00    	je     6b9 <printf+0x1b9>
+        while(*s != 0){
+ 62b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 62e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 630:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 632:	84 c0                	test   %al,%al
+ 634:	0f 84 0e ff ff ff    	je     548 <printf+0x48>
+ 63a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 63d:	89 de                	mov    %ebx,%esi
+ 63f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 642:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 645:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 648:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 64b:	83 c6 01             	add    $0x1,%esi
+ 64e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 651:	6a 01                	push   $0x1
+ 653:	57                   	push   %edi
+ 654:	53                   	push   %ebx
+ 655:	e8 58 fd ff ff       	call   3b2 <write>
+        while(*s != 0){
+ 65a:	0f b6 06             	movzbl (%esi),%eax
+ 65d:	83 c4 10             	add    $0x10,%esp
+ 660:	84 c0                	test   %al,%al
+ 662:	75 e4                	jne    648 <printf+0x148>
+ 664:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 667:	31 ff                	xor    %edi,%edi
+ 669:	e9 da fe ff ff       	jmp    548 <printf+0x48>
+ 66e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 670:	83 ec 0c             	sub    $0xc,%esp
+ 673:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 678:	6a 01                	push   $0x1
+ 67a:	e9 73 ff ff ff       	jmp    5f2 <printf+0xf2>
+ 67f:	90                   	nop
+  write(fd, &c, 1);
+ 680:	83 ec 04             	sub    $0x4,%esp
+ 683:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 686:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 689:	6a 01                	push   $0x1
+ 68b:	e9 21 ff ff ff       	jmp    5b1 <printf+0xb1>
+        putc(fd, *ap);
+ 690:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 693:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 696:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 698:	6a 01                	push   $0x1
+        ap++;
+ 69a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 69d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 6a0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 6a3:	50                   	push   %eax
+ 6a4:	ff 75 08             	pushl  0x8(%ebp)
+ 6a7:	e8 06 fd ff ff       	call   3b2 <write>
+        ap++;
+ 6ac:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 6af:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6b2:	31 ff                	xor    %edi,%edi
+ 6b4:	e9 8f fe ff ff       	jmp    548 <printf+0x48>
+          s = "(null)";
+ 6b9:	bb 7b 08 00 00       	mov    $0x87b,%ebx
+        while(*s != 0){
+ 6be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6c3:	e9 72 ff ff ff       	jmp    63a <printf+0x13a>
+ 6c8:	66 90                	xchg   %ax,%ax
+ 6ca:	66 90                	xchg   %ax,%ax
+ 6cc:	66 90                	xchg   %ax,%ax
+ 6ce:	66 90                	xchg   %ax,%ax
+
+000006d0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6d0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6d1:	a1 34 0b 00 00       	mov    0xb34,%eax
+{
+ 6d6:	89 e5                	mov    %esp,%ebp
+ 6d8:	57                   	push   %edi
+ 6d9:	56                   	push   %esi
+ 6da:	53                   	push   %ebx
+ 6db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 6de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6e8:	39 c8                	cmp    %ecx,%eax
+ 6ea:	8b 10                	mov    (%eax),%edx
+ 6ec:	73 32                	jae    720 <free+0x50>
+ 6ee:	39 d1                	cmp    %edx,%ecx
+ 6f0:	72 04                	jb     6f6 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6f2:	39 d0                	cmp    %edx,%eax
+ 6f4:	72 32                	jb     728 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6f6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6f9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6fc:	39 fa                	cmp    %edi,%edx
+ 6fe:	74 30                	je     730 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 700:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 703:	8b 50 04             	mov    0x4(%eax),%edx
+ 706:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 709:	39 f1                	cmp    %esi,%ecx
+ 70b:	74 3a                	je     747 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 70d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 70f:	a3 34 0b 00 00       	mov    %eax,0xb34
+}
+ 714:	5b                   	pop    %ebx
+ 715:	5e                   	pop    %esi
+ 716:	5f                   	pop    %edi
+ 717:	5d                   	pop    %ebp
+ 718:	c3                   	ret    
+ 719:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 720:	39 d0                	cmp    %edx,%eax
+ 722:	72 04                	jb     728 <free+0x58>
+ 724:	39 d1                	cmp    %edx,%ecx
+ 726:	72 ce                	jb     6f6 <free+0x26>
+{
+ 728:	89 d0                	mov    %edx,%eax
+ 72a:	eb bc                	jmp    6e8 <free+0x18>
+ 72c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 730:	03 72 04             	add    0x4(%edx),%esi
+ 733:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 736:	8b 10                	mov    (%eax),%edx
+ 738:	8b 12                	mov    (%edx),%edx
+ 73a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 73d:	8b 50 04             	mov    0x4(%eax),%edx
+ 740:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 743:	39 f1                	cmp    %esi,%ecx
+ 745:	75 c6                	jne    70d <free+0x3d>
+    p->s.size += bp->s.size;
+ 747:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 74a:	a3 34 0b 00 00       	mov    %eax,0xb34
+    p->s.size += bp->s.size;
+ 74f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 752:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 755:	89 10                	mov    %edx,(%eax)
+}
+ 757:	5b                   	pop    %ebx
+ 758:	5e                   	pop    %esi
+ 759:	5f                   	pop    %edi
+ 75a:	5d                   	pop    %ebp
+ 75b:	c3                   	ret    
+ 75c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000760 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 760:	55                   	push   %ebp
+ 761:	89 e5                	mov    %esp,%ebp
+ 763:	57                   	push   %edi
+ 764:	56                   	push   %esi
+ 765:	53                   	push   %ebx
+ 766:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 769:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 76c:	8b 15 34 0b 00 00    	mov    0xb34,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 772:	8d 78 07             	lea    0x7(%eax),%edi
+ 775:	c1 ef 03             	shr    $0x3,%edi
+ 778:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 77b:	85 d2                	test   %edx,%edx
+ 77d:	0f 84 9d 00 00 00    	je     820 <malloc+0xc0>
+ 783:	8b 02                	mov    (%edx),%eax
+ 785:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 788:	39 cf                	cmp    %ecx,%edi
+ 78a:	76 6c                	jbe    7f8 <malloc+0x98>
+ 78c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 792:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 797:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 79a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 7a1:	eb 0e                	jmp    7b1 <malloc+0x51>
+ 7a3:	90                   	nop
+ 7a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 7aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7ad:	39 f9                	cmp    %edi,%ecx
+ 7af:	73 47                	jae    7f8 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7b1:	39 05 34 0b 00 00    	cmp    %eax,0xb34
+ 7b7:	89 c2                	mov    %eax,%edx
+ 7b9:	75 ed                	jne    7a8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 7bb:	83 ec 0c             	sub    $0xc,%esp
+ 7be:	56                   	push   %esi
+ 7bf:	e8 56 fc ff ff       	call   41a <sbrk>
+  if(p == (char*)-1)
+ 7c4:	83 c4 10             	add    $0x10,%esp
+ 7c7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7ca:	74 1c                	je     7e8 <malloc+0x88>
+  hp->s.size = nu;
+ 7cc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7cf:	83 ec 0c             	sub    $0xc,%esp
+ 7d2:	83 c0 08             	add    $0x8,%eax
+ 7d5:	50                   	push   %eax
+ 7d6:	e8 f5 fe ff ff       	call   6d0 <free>
+  return freep;
+ 7db:	8b 15 34 0b 00 00    	mov    0xb34,%edx
+      if((p = morecore(nunits)) == 0)
+ 7e1:	83 c4 10             	add    $0x10,%esp
+ 7e4:	85 d2                	test   %edx,%edx
+ 7e6:	75 c0                	jne    7a8 <malloc+0x48>
+        return 0;
+  }
+}
+ 7e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7eb:	31 c0                	xor    %eax,%eax
+}
+ 7ed:	5b                   	pop    %ebx
+ 7ee:	5e                   	pop    %esi
+ 7ef:	5f                   	pop    %edi
+ 7f0:	5d                   	pop    %ebp
+ 7f1:	c3                   	ret    
+ 7f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 7f8:	39 cf                	cmp    %ecx,%edi
+ 7fa:	74 54                	je     850 <malloc+0xf0>
+        p->s.size -= nunits;
+ 7fc:	29 f9                	sub    %edi,%ecx
+ 7fe:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 801:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 804:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 807:	89 15 34 0b 00 00    	mov    %edx,0xb34
+}
+ 80d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 810:	83 c0 08             	add    $0x8,%eax
+}
+ 813:	5b                   	pop    %ebx
+ 814:	5e                   	pop    %esi
+ 815:	5f                   	pop    %edi
+ 816:	5d                   	pop    %ebp
+ 817:	c3                   	ret    
+ 818:	90                   	nop
+ 819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 820:	c7 05 34 0b 00 00 38 	movl   $0xb38,0xb34
+ 827:	0b 00 00 
+ 82a:	c7 05 38 0b 00 00 38 	movl   $0xb38,0xb38
+ 831:	0b 00 00 
+    base.s.size = 0;
+ 834:	b8 38 0b 00 00       	mov    $0xb38,%eax
+ 839:	c7 05 3c 0b 00 00 00 	movl   $0x0,0xb3c
+ 840:	00 00 00 
+ 843:	e9 44 ff ff ff       	jmp    78c <malloc+0x2c>
+ 848:	90                   	nop
+ 849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 850:	8b 08                	mov    (%eax),%ecx
+ 852:	89 0a                	mov    %ecx,(%edx)
+ 854:	eb b1                	jmp    807 <malloc+0xa7>
diff -ruN src-old/stressfs.d src/stressfs.d
--- src-old/stressfs.d	1970-01-01 00:00:00.000000000 +0000
+++ src/stressfs.d	2023-04-19 02:18:56.876277710 +0000
@@ -0,0 +1,2 @@
+stressfs.o: stressfs.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ fs.h fcntl.h
Binary files src-old/stressfs.o and src/stressfs.o differ
diff -ruN src-old/stressfs.sym src/stressfs.sym
--- src-old/stressfs.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/stressfs.sym	2023-04-19 02:18:56.908281495 +0000
@@ -0,0 +1,61 @@
+00000000 .text
+00000858 .rodata
+00000898 .eh_frame
+00000b34 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 stressfs.c
+00000000 ulib.c
+00000000 printf.c
+00000460 printint
+00000884 digits.1052
+00000000 umalloc.c
+00000b34 freep
+00000b38 base
+00000140 strcpy
+00000500 printf
+00000360 memmove
+0000044a munmap
+000003da mknod
+00000250 gets
+00000412 getpid
+00000760 malloc
+00000422 sleep
+0000043a kmfree
+00000442 mmap
+000003a2 pipe
+000003b2 write
+000003ea fstat
+000003c2 kill
+00000402 chdir
+000003ca exec
+0000039a wait
+000003aa read
+000003e2 unlink
+0000038a fork
+0000041a sbrk
+0000042a uptime
+00000b34 __bss_start
+000001f0 memset
+00000000 main
+00000170 strcmp
+0000040a dup
+000002d0 stat
+00000b34 _edata
+00000b40 _end
+000003f2 link
+00000432 kmalloc
+00000392 exit
+00000320 atoi
+000001c0 strlen
+000003d2 open
+00000210 strchr
+000003fa mkdir
+000003ba close
+000006d0 free
diff -ruN src-old/string.d src/string.d
--- src-old/string.d	1970-01-01 00:00:00.000000000 +0000
+++ src/string.d	2023-04-19 02:18:54.784029920 +0000
@@ -0,0 +1 @@
+string.o: string.c /usr/include/stdc-predef.h types.h x86.h
Binary files src-old/string.o and src/string.o differ
Binary files src-old/swtch.o and src/swtch.o differ
diff -ruN src-old/syscall.c src/syscall.c
--- src-old/syscall.c	2023-04-19 02:17:15.986994100 +0000
+++ src/syscall.c	2023-04-19 02:17:16.022999393 +0000
@@ -103,6 +103,10 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_kmalloc(void);
+extern int sys_kmfree(void);
+extern int sys_mmap(void);    
+extern int sys_munmap(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +130,11 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_kmalloc] sys_kmalloc,
+[SYS_kmfree]  sys_kmfree,
+[SYS_mmap]    sys_mmap,
+[SYS_munmap]  sys_munmap,
+
 };
 
 void
diff -ruN src-old/syscall.d src/syscall.d
--- src-old/syscall.d	1970-01-01 00:00:00.000000000 +0000
+++ src/syscall.d	2023-04-19 02:18:54.852037995 +0000
@@ -0,0 +1,2 @@
+syscall.o: syscall.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h syscall.h
diff -ruN src-old/syscall.h src/syscall.h
--- src-old/syscall.h	2023-04-19 02:17:15.986994100 +0000
+++ src/syscall.h	2023-04-19 02:17:16.026999981 +0000
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_kmalloc 22
+#define SYS_kmfree  23 
+#define SYS_mmap    24  
+#define SYS_munmap  25  
\ No newline at end of file
Binary files src-old/syscall.o and src/syscall.o differ
diff -ruN src-old/sysfile.d src/sysfile.d
--- src-old/sysfile.d	1970-01-01 00:00:00.000000000 +0000
+++ src/sysfile.d	2023-04-19 02:18:54.972052248 +0000
@@ -0,0 +1,2 @@
+sysfile.o: sysfile.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ stat.h mmu.h proc.h fs.h spinlock.h sleeplock.h file.h fcntl.h
Binary files src-old/sysfile.o and src/sysfile.o differ
diff -ruN src-old/sysproc.c src/sysproc.c
--- src-old/sysproc.c	2023-04-19 02:17:15.994995277 +0000
+++ src/sysproc.c	2023-04-19 02:17:16.026999981 +0000
@@ -89,3 +89,84 @@
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_kmalloc(void)
+{
+  int nbytes;
+
+  if(argint(0, &nbytes) < 0)
+    return -1;
+
+  return (int)kmalloc((uint)nbytes);
+}
+
+int
+sys_kmfree(void)
+{
+  int addr;
+
+  if(argint(0, &addr) < 0)
+    return -1;
+
+  kmfree((void*)addr);
+
+  return 0;
+}
+
+int
+sys_mmap(void)
+{
+  int addr;
+  int length;
+  int prot;
+  int flags;
+  int fd;
+  int offset;
+
+  if(argint(0, &addr) < 0)
+  {
+    return -1;
+  }
+  if(argint(1, &length) < 0)
+  {
+    return -1;
+  }
+  if(argint(2, &prot) < 0)
+  {
+    return -1;
+  }
+  if(argint(3, &flags) < 0)
+  {
+    return -1;
+  }
+  if(argint(4, &fd) < 0)
+  {
+    return -1;
+  }
+  if(argint(5, &offset) < 0)
+  {
+    return -1;
+  }
+
+  return (int)mmap((void*)addr, (uint)length, (uint)prot,
+                    (uint)flags, (uint)fd, (uint)offset);
+}
+
+int
+sys_munmap(void)
+{
+  int addr;
+  int length;
+
+  if(argint(0, &addr) < 0)
+  {
+    return -1;
+  }
+  if(argint(1, &length) < 0)
+  {
+    return -1;
+  }
+
+  return munmap((void*)addr, (uint)length);
+}
\ No newline at end of file
diff -ruN src-old/sysproc.d src/sysproc.d
--- src-old/sysproc.d	1970-01-01 00:00:00.000000000 +0000
+++ src/sysproc.d	2023-04-19 02:18:55.028058891 +0000
@@ -0,0 +1,2 @@
+sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
+ date.h param.h memlayout.h mmu.h proc.h
Binary files src-old/sysproc.o and src/sysproc.o differ
Binary files src-old/_test_1 and src/_test_1 differ
diff -ruN src-old/test_1.asm src/test_1.asm
--- src-old/test_1.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/test_1.asm	2023-04-19 02:18:56.220200115 +0000
@@ -0,0 +1,1195 @@
+
+_test_1:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "memlayout.h"
+
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	bb f4 01 00 00       	mov    $0x1f4,%ebx
+  13:	51                   	push   %ecx
+  14:	eb 1b                	jmp    31 <main+0x31>
+  16:	8d 76 00             	lea    0x0(%esi),%esi
+  19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    {
+      printf(1, "XV6_TEST_OUTPUT : kmalloc failed to allocate memory\n");
+      exit();
+    }
+
+    kmfree(addr);
+  20:	83 ec 0c             	sub    $0xc,%esp
+  23:	50                   	push   %eax
+  24:	e8 41 03 00 00       	call   36a <kmfree>
+  for(i=1;i<=500;i++)
+  29:	83 c4 10             	add    $0x10,%esp
+  2c:	83 eb 01             	sub    $0x1,%ebx
+  2f:	74 28                	je     59 <main+0x59>
+    void* addr = kmalloc(2000);
+  31:	83 ec 0c             	sub    $0xc,%esp
+  34:	68 d0 07 00 00       	push   $0x7d0
+  39:	e8 24 03 00 00       	call   362 <kmalloc>
+    if(addr == 0)
+  3e:	83 c4 10             	add    $0x10,%esp
+  41:	85 c0                	test   %eax,%eax
+  43:	75 db                	jne    20 <main+0x20>
+      printf(1, "XV6_TEST_OUTPUT : kmalloc failed to allocate memory\n");
+  45:	83 ec 08             	sub    $0x8,%esp
+  48:	68 88 07 00 00       	push   $0x788
+  4d:	6a 01                	push   $0x1
+  4f:	e8 dc 03 00 00       	call   430 <printf>
+      exit();
+  54:	e8 69 02 00 00       	call   2c2 <exit>
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : kmalloc  and kmfree good.\n");
+  59:	50                   	push   %eax
+  5a:	50                   	push   %eax
+  5b:	68 c0 07 00 00       	push   $0x7c0
+  60:	6a 01                	push   $0x1
+  62:	e8 c9 03 00 00       	call   430 <printf>
+
+  exit();
+  67:	e8 56 02 00 00       	call   2c2 <exit>
+  6c:	66 90                	xchg   %ax,%ax
+  6e:	66 90                	xchg   %ax,%ax
+
+00000070 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  70:	55                   	push   %ebp
+  71:	89 e5                	mov    %esp,%ebp
+  73:	53                   	push   %ebx
+  74:	8b 45 08             	mov    0x8(%ebp),%eax
+  77:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  7a:	89 c2                	mov    %eax,%edx
+  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  80:	83 c1 01             	add    $0x1,%ecx
+  83:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  87:	83 c2 01             	add    $0x1,%edx
+  8a:	84 db                	test   %bl,%bl
+  8c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  8f:	75 ef                	jne    80 <strcpy+0x10>
+    ;
+  return os;
+}
+  91:	5b                   	pop    %ebx
+  92:	5d                   	pop    %ebp
+  93:	c3                   	ret    
+  94:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  9a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	53                   	push   %ebx
+  a4:	8b 55 08             	mov    0x8(%ebp),%edx
+  a7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  aa:	0f b6 02             	movzbl (%edx),%eax
+  ad:	0f b6 19             	movzbl (%ecx),%ebx
+  b0:	84 c0                	test   %al,%al
+  b2:	75 1c                	jne    d0 <strcmp+0x30>
+  b4:	eb 2a                	jmp    e0 <strcmp+0x40>
+  b6:	8d 76 00             	lea    0x0(%esi),%esi
+  b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  c0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  c3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  c6:	83 c1 01             	add    $0x1,%ecx
+  c9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  cc:	84 c0                	test   %al,%al
+  ce:	74 10                	je     e0 <strcmp+0x40>
+  d0:	38 d8                	cmp    %bl,%al
+  d2:	74 ec                	je     c0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  d4:	29 d8                	sub    %ebx,%eax
+}
+  d6:	5b                   	pop    %ebx
+  d7:	5d                   	pop    %ebp
+  d8:	c3                   	ret    
+  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  e0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  e2:	29 d8                	sub    %ebx,%eax
+}
+  e4:	5b                   	pop    %ebx
+  e5:	5d                   	pop    %ebp
+  e6:	c3                   	ret    
+  e7:	89 f6                	mov    %esi,%esi
+  e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000000f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  f6:	80 39 00             	cmpb   $0x0,(%ecx)
+  f9:	74 15                	je     110 <strlen+0x20>
+  fb:	31 d2                	xor    %edx,%edx
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 100:	83 c2 01             	add    $0x1,%edx
+ 103:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 107:	89 d0                	mov    %edx,%eax
+ 109:	75 f5                	jne    100 <strlen+0x10>
+    ;
+  return n;
+}
+ 10b:	5d                   	pop    %ebp
+ 10c:	c3                   	ret    
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 110:	31 c0                	xor    %eax,%eax
+}
+ 112:	5d                   	pop    %ebp
+ 113:	c3                   	ret    
+ 114:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 11a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000120 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	57                   	push   %edi
+ 124:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 127:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 12a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 12d:	89 d7                	mov    %edx,%edi
+ 12f:	fc                   	cld    
+ 130:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 132:	89 d0                	mov    %edx,%eax
+ 134:	5f                   	pop    %edi
+ 135:	5d                   	pop    %ebp
+ 136:	c3                   	ret    
+ 137:	89 f6                	mov    %esi,%esi
+ 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000140 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	53                   	push   %ebx
+ 144:	8b 45 08             	mov    0x8(%ebp),%eax
+ 147:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 14a:	0f b6 10             	movzbl (%eax),%edx
+ 14d:	84 d2                	test   %dl,%dl
+ 14f:	74 1d                	je     16e <strchr+0x2e>
+    if(*s == c)
+ 151:	38 d3                	cmp    %dl,%bl
+ 153:	89 d9                	mov    %ebx,%ecx
+ 155:	75 0d                	jne    164 <strchr+0x24>
+ 157:	eb 17                	jmp    170 <strchr+0x30>
+ 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 160:	38 ca                	cmp    %cl,%dl
+ 162:	74 0c                	je     170 <strchr+0x30>
+  for(; *s; s++)
+ 164:	83 c0 01             	add    $0x1,%eax
+ 167:	0f b6 10             	movzbl (%eax),%edx
+ 16a:	84 d2                	test   %dl,%dl
+ 16c:	75 f2                	jne    160 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 16e:	31 c0                	xor    %eax,%eax
+}
+ 170:	5b                   	pop    %ebx
+ 171:	5d                   	pop    %ebp
+ 172:	c3                   	ret    
+ 173:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 179:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000180 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	57                   	push   %edi
+ 184:	56                   	push   %esi
+ 185:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 186:	31 f6                	xor    %esi,%esi
+ 188:	89 f3                	mov    %esi,%ebx
+{
+ 18a:	83 ec 1c             	sub    $0x1c,%esp
+ 18d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 190:	eb 2f                	jmp    1c1 <gets+0x41>
+ 192:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 198:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 19b:	83 ec 04             	sub    $0x4,%esp
+ 19e:	6a 01                	push   $0x1
+ 1a0:	50                   	push   %eax
+ 1a1:	6a 00                	push   $0x0
+ 1a3:	e8 32 01 00 00       	call   2da <read>
+    if(cc < 1)
+ 1a8:	83 c4 10             	add    $0x10,%esp
+ 1ab:	85 c0                	test   %eax,%eax
+ 1ad:	7e 1c                	jle    1cb <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 1af:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1b3:	83 c7 01             	add    $0x1,%edi
+ 1b6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1b9:	3c 0a                	cmp    $0xa,%al
+ 1bb:	74 23                	je     1e0 <gets+0x60>
+ 1bd:	3c 0d                	cmp    $0xd,%al
+ 1bf:	74 1f                	je     1e0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1c1:	83 c3 01             	add    $0x1,%ebx
+ 1c4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1c7:	89 fe                	mov    %edi,%esi
+ 1c9:	7c cd                	jl     198 <gets+0x18>
+ 1cb:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1d0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1d6:	5b                   	pop    %ebx
+ 1d7:	5e                   	pop    %esi
+ 1d8:	5f                   	pop    %edi
+ 1d9:	5d                   	pop    %ebp
+ 1da:	c3                   	ret    
+ 1db:	90                   	nop
+ 1dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1e0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1e3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e6:	01 de                	add    %ebx,%esi
+ 1e8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1ea:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ed:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1f0:	5b                   	pop    %ebx
+ 1f1:	5e                   	pop    %esi
+ 1f2:	5f                   	pop    %edi
+ 1f3:	5d                   	pop    %ebp
+ 1f4:	c3                   	ret    
+ 1f5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000200 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	56                   	push   %esi
+ 204:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 205:	83 ec 08             	sub    $0x8,%esp
+ 208:	6a 00                	push   $0x0
+ 20a:	ff 75 08             	pushl  0x8(%ebp)
+ 20d:	e8 f0 00 00 00       	call   302 <open>
+  if(fd < 0)
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	85 c0                	test   %eax,%eax
+ 217:	78 27                	js     240 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 219:	83 ec 08             	sub    $0x8,%esp
+ 21c:	ff 75 0c             	pushl  0xc(%ebp)
+ 21f:	89 c3                	mov    %eax,%ebx
+ 221:	50                   	push   %eax
+ 222:	e8 f3 00 00 00       	call   31a <fstat>
+  close(fd);
+ 227:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 22a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 22c:	e8 b9 00 00 00       	call   2ea <close>
+  return r;
+ 231:	83 c4 10             	add    $0x10,%esp
+}
+ 234:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 237:	89 f0                	mov    %esi,%eax
+ 239:	5b                   	pop    %ebx
+ 23a:	5e                   	pop    %esi
+ 23b:	5d                   	pop    %ebp
+ 23c:	c3                   	ret    
+ 23d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 240:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 245:	eb ed                	jmp    234 <stat+0x34>
+ 247:	89 f6                	mov    %esi,%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000250 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	53                   	push   %ebx
+ 254:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 257:	0f be 11             	movsbl (%ecx),%edx
+ 25a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 25d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 25f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 264:	77 1f                	ja     285 <atoi+0x35>
+ 266:	8d 76 00             	lea    0x0(%esi),%esi
+ 269:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 270:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 273:	83 c1 01             	add    $0x1,%ecx
+ 276:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 27a:	0f be 11             	movsbl (%ecx),%edx
+ 27d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 280:	80 fb 09             	cmp    $0x9,%bl
+ 283:	76 eb                	jbe    270 <atoi+0x20>
+  return n;
+}
+ 285:	5b                   	pop    %ebx
+ 286:	5d                   	pop    %ebp
+ 287:	c3                   	ret    
+ 288:	90                   	nop
+ 289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000290 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	56                   	push   %esi
+ 294:	53                   	push   %ebx
+ 295:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 298:	8b 45 08             	mov    0x8(%ebp),%eax
+ 29b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 29e:	85 db                	test   %ebx,%ebx
+ 2a0:	7e 14                	jle    2b6 <memmove+0x26>
+ 2a2:	31 d2                	xor    %edx,%edx
+ 2a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 2a8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 2ac:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 2af:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 2b2:	39 d3                	cmp    %edx,%ebx
+ 2b4:	75 f2                	jne    2a8 <memmove+0x18>
+  return vdst;
+}
+ 2b6:	5b                   	pop    %ebx
+ 2b7:	5e                   	pop    %esi
+ 2b8:	5d                   	pop    %ebp
+ 2b9:	c3                   	ret    
+
+000002ba <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ba:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <exit>:
+SYSCALL(exit)
+ 2c2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <wait>:
+SYSCALL(wait)
+ 2ca:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <pipe>:
+SYSCALL(pipe)
+ 2d2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <read>:
+SYSCALL(read)
+ 2da:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <write>:
+SYSCALL(write)
+ 2e2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <close>:
+SYSCALL(close)
+ 2ea:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <kill>:
+SYSCALL(kill)
+ 2f2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <exec>:
+SYSCALL(exec)
+ 2fa:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <open>:
+SYSCALL(open)
+ 302:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <mknod>:
+SYSCALL(mknod)
+ 30a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <unlink>:
+SYSCALL(unlink)
+ 312:	b8 12 00 00 00       	mov    $0x12,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <fstat>:
+SYSCALL(fstat)
+ 31a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <link>:
+SYSCALL(link)
+ 322:	b8 13 00 00 00       	mov    $0x13,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <mkdir>:
+SYSCALL(mkdir)
+ 32a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <chdir>:
+SYSCALL(chdir)
+ 332:	b8 09 00 00 00       	mov    $0x9,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <dup>:
+SYSCALL(dup)
+ 33a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <getpid>:
+SYSCALL(getpid)
+ 342:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <sbrk>:
+SYSCALL(sbrk)
+ 34a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <sleep>:
+SYSCALL(sleep)
+ 352:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <uptime>:
+SYSCALL(uptime)
+ 35a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <kmalloc>:
+SYSCALL(kmalloc)
+ 362:	b8 16 00 00 00       	mov    $0x16,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <kmfree>:
+SYSCALL(kmfree) 
+ 36a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <mmap>:
+SYSCALL(mmap)
+ 372:	b8 18 00 00 00       	mov    $0x18,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <munmap>:
+ 37a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+ 382:	66 90                	xchg   %ax,%ax
+ 384:	66 90                	xchg   %ax,%ax
+ 386:	66 90                	xchg   %ax,%ax
+ 388:	66 90                	xchg   %ax,%ax
+ 38a:	66 90                	xchg   %ax,%ax
+ 38c:	66 90                	xchg   %ax,%ax
+ 38e:	66 90                	xchg   %ax,%ax
+
+00000390 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 390:	55                   	push   %ebp
+ 391:	89 e5                	mov    %esp,%ebp
+ 393:	57                   	push   %edi
+ 394:	56                   	push   %esi
+ 395:	53                   	push   %ebx
+ 396:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 399:	85 d2                	test   %edx,%edx
+{
+ 39b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 39e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 3a0:	79 76                	jns    418 <printint+0x88>
+ 3a2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3a6:	74 70                	je     418 <printint+0x88>
+    x = -xx;
+ 3a8:	f7 d8                	neg    %eax
+    neg = 1;
+ 3aa:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3b1:	31 f6                	xor    %esi,%esi
+ 3b3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3b6:	eb 0a                	jmp    3c2 <printint+0x32>
+ 3b8:	90                   	nop
+ 3b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3c0:	89 fe                	mov    %edi,%esi
+ 3c2:	31 d2                	xor    %edx,%edx
+ 3c4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 3c7:	f7 f1                	div    %ecx
+ 3c9:	0f b6 92 f8 07 00 00 	movzbl 0x7f8(%edx),%edx
+  }while((x /= base) != 0);
+ 3d0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 3d2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 3d5:	75 e9                	jne    3c0 <printint+0x30>
+  if(neg)
+ 3d7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3da:	85 c0                	test   %eax,%eax
+ 3dc:	74 08                	je     3e6 <printint+0x56>
+    buf[i++] = '-';
+ 3de:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3e3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3e6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3ea:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 3f0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 3f3:	83 ec 04             	sub    $0x4,%esp
+ 3f6:	83 ee 01             	sub    $0x1,%esi
+ 3f9:	6a 01                	push   $0x1
+ 3fb:	53                   	push   %ebx
+ 3fc:	57                   	push   %edi
+ 3fd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 400:	e8 dd fe ff ff       	call   2e2 <write>
+
+  while(--i >= 0)
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 418:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 41f:	eb 90                	jmp    3b1 <printint+0x21>
+ 421:	eb 0d                	jmp    430 <printf>
+ 423:	90                   	nop
+ 424:	90                   	nop
+ 425:	90                   	nop
+ 426:	90                   	nop
+ 427:	90                   	nop
+ 428:	90                   	nop
+ 429:	90                   	nop
+ 42a:	90                   	nop
+ 42b:	90                   	nop
+ 42c:	90                   	nop
+ 42d:	90                   	nop
+ 42e:	90                   	nop
+ 42f:	90                   	nop
+
+00000430 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 439:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 43c:	0f b6 1e             	movzbl (%esi),%ebx
+ 43f:	84 db                	test   %bl,%bl
+ 441:	0f 84 b3 00 00 00    	je     4fa <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 447:	8d 45 10             	lea    0x10(%ebp),%eax
+ 44a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 44d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 44f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 452:	eb 2f                	jmp    483 <printf+0x53>
+ 454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 458:	83 f8 25             	cmp    $0x25,%eax
+ 45b:	0f 84 a7 00 00 00    	je     508 <printf+0xd8>
+  write(fd, &c, 1);
+ 461:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 464:	83 ec 04             	sub    $0x4,%esp
+ 467:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 46a:	6a 01                	push   $0x1
+ 46c:	50                   	push   %eax
+ 46d:	ff 75 08             	pushl  0x8(%ebp)
+ 470:	e8 6d fe ff ff       	call   2e2 <write>
+ 475:	83 c4 10             	add    $0x10,%esp
+ 478:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 47b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 47f:	84 db                	test   %bl,%bl
+ 481:	74 77                	je     4fa <printf+0xca>
+    if(state == 0){
+ 483:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 485:	0f be cb             	movsbl %bl,%ecx
+ 488:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 48b:	74 cb                	je     458 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 48d:	83 ff 25             	cmp    $0x25,%edi
+ 490:	75 e6                	jne    478 <printf+0x48>
+      if(c == 'd'){
+ 492:	83 f8 64             	cmp    $0x64,%eax
+ 495:	0f 84 05 01 00 00    	je     5a0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 49b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4a1:	83 f9 70             	cmp    $0x70,%ecx
+ 4a4:	74 72                	je     518 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4a6:	83 f8 73             	cmp    $0x73,%eax
+ 4a9:	0f 84 99 00 00 00    	je     548 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4af:	83 f8 63             	cmp    $0x63,%eax
+ 4b2:	0f 84 08 01 00 00    	je     5c0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4b8:	83 f8 25             	cmp    $0x25,%eax
+ 4bb:	0f 84 ef 00 00 00    	je     5b0 <printf+0x180>
+  write(fd, &c, 1);
+ 4c1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4c4:	83 ec 04             	sub    $0x4,%esp
+ 4c7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4cb:	6a 01                	push   $0x1
+ 4cd:	50                   	push   %eax
+ 4ce:	ff 75 08             	pushl  0x8(%ebp)
+ 4d1:	e8 0c fe ff ff       	call   2e2 <write>
+ 4d6:	83 c4 0c             	add    $0xc,%esp
+ 4d9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4dc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4df:	6a 01                	push   $0x1
+ 4e1:	50                   	push   %eax
+ 4e2:	ff 75 08             	pushl  0x8(%ebp)
+ 4e5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4e8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 4ea:	e8 f3 fd ff ff       	call   2e2 <write>
+  for(i = 0; fmt[i]; i++){
+ 4ef:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 4f3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4f6:	84 db                	test   %bl,%bl
+ 4f8:	75 89                	jne    483 <printf+0x53>
+    }
+  }
+}
+ 4fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4fd:	5b                   	pop    %ebx
+ 4fe:	5e                   	pop    %esi
+ 4ff:	5f                   	pop    %edi
+ 500:	5d                   	pop    %ebp
+ 501:	c3                   	ret    
+ 502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 508:	bf 25 00 00 00       	mov    $0x25,%edi
+ 50d:	e9 66 ff ff ff       	jmp    478 <printf+0x48>
+ 512:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 518:	83 ec 0c             	sub    $0xc,%esp
+ 51b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 520:	6a 00                	push   $0x0
+ 522:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 525:	8b 45 08             	mov    0x8(%ebp),%eax
+ 528:	8b 17                	mov    (%edi),%edx
+ 52a:	e8 61 fe ff ff       	call   390 <printint>
+        ap++;
+ 52f:	89 f8                	mov    %edi,%eax
+ 531:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 534:	31 ff                	xor    %edi,%edi
+        ap++;
+ 536:	83 c0 04             	add    $0x4,%eax
+ 539:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 53c:	e9 37 ff ff ff       	jmp    478 <printf+0x48>
+ 541:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 548:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 54b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 54d:	83 c0 04             	add    $0x4,%eax
+ 550:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 553:	85 c9                	test   %ecx,%ecx
+ 555:	0f 84 8e 00 00 00    	je     5e9 <printf+0x1b9>
+        while(*s != 0){
+ 55b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 55e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 560:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 562:	84 c0                	test   %al,%al
+ 564:	0f 84 0e ff ff ff    	je     478 <printf+0x48>
+ 56a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 56d:	89 de                	mov    %ebx,%esi
+ 56f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 572:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 575:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 578:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 57b:	83 c6 01             	add    $0x1,%esi
+ 57e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 581:	6a 01                	push   $0x1
+ 583:	57                   	push   %edi
+ 584:	53                   	push   %ebx
+ 585:	e8 58 fd ff ff       	call   2e2 <write>
+        while(*s != 0){
+ 58a:	0f b6 06             	movzbl (%esi),%eax
+ 58d:	83 c4 10             	add    $0x10,%esp
+ 590:	84 c0                	test   %al,%al
+ 592:	75 e4                	jne    578 <printf+0x148>
+ 594:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 597:	31 ff                	xor    %edi,%edi
+ 599:	e9 da fe ff ff       	jmp    478 <printf+0x48>
+ 59e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 5a0:	83 ec 0c             	sub    $0xc,%esp
+ 5a3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5a8:	6a 01                	push   $0x1
+ 5aa:	e9 73 ff ff ff       	jmp    522 <printf+0xf2>
+ 5af:	90                   	nop
+  write(fd, &c, 1);
+ 5b0:	83 ec 04             	sub    $0x4,%esp
+ 5b3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5b6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5b9:	6a 01                	push   $0x1
+ 5bb:	e9 21 ff ff ff       	jmp    4e1 <printf+0xb1>
+        putc(fd, *ap);
+ 5c0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 5c3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5c6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 5c8:	6a 01                	push   $0x1
+        ap++;
+ 5ca:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 5cd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 5d0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5d3:	50                   	push   %eax
+ 5d4:	ff 75 08             	pushl  0x8(%ebp)
+ 5d7:	e8 06 fd ff ff       	call   2e2 <write>
+        ap++;
+ 5dc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 5df:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5e2:	31 ff                	xor    %edi,%edi
+ 5e4:	e9 8f fe ff ff       	jmp    478 <printf+0x48>
+          s = "(null)";
+ 5e9:	bb f0 07 00 00       	mov    $0x7f0,%ebx
+        while(*s != 0){
+ 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5f3:	e9 72 ff ff ff       	jmp    56a <printf+0x13a>
+ 5f8:	66 90                	xchg   %ax,%ax
+ 5fa:	66 90                	xchg   %ax,%ax
+ 5fc:	66 90                	xchg   %ax,%ax
+ 5fe:	66 90                	xchg   %ax,%ax
+
+00000600 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 600:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 601:	a1 a0 0a 00 00       	mov    0xaa0,%eax
+{
+ 606:	89 e5                	mov    %esp,%ebp
+ 608:	57                   	push   %edi
+ 609:	56                   	push   %esi
+ 60a:	53                   	push   %ebx
+ 60b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 60e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 618:	39 c8                	cmp    %ecx,%eax
+ 61a:	8b 10                	mov    (%eax),%edx
+ 61c:	73 32                	jae    650 <free+0x50>
+ 61e:	39 d1                	cmp    %edx,%ecx
+ 620:	72 04                	jb     626 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 622:	39 d0                	cmp    %edx,%eax
+ 624:	72 32                	jb     658 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 626:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 629:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62c:	39 fa                	cmp    %edi,%edx
+ 62e:	74 30                	je     660 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 630:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 633:	8b 50 04             	mov    0x4(%eax),%edx
+ 636:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 639:	39 f1                	cmp    %esi,%ecx
+ 63b:	74 3a                	je     677 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 63d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 63f:	a3 a0 0a 00 00       	mov    %eax,0xaa0
+}
+ 644:	5b                   	pop    %ebx
+ 645:	5e                   	pop    %esi
+ 646:	5f                   	pop    %edi
+ 647:	5d                   	pop    %ebp
+ 648:	c3                   	ret    
+ 649:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 650:	39 d0                	cmp    %edx,%eax
+ 652:	72 04                	jb     658 <free+0x58>
+ 654:	39 d1                	cmp    %edx,%ecx
+ 656:	72 ce                	jb     626 <free+0x26>
+{
+ 658:	89 d0                	mov    %edx,%eax
+ 65a:	eb bc                	jmp    618 <free+0x18>
+ 65c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 660:	03 72 04             	add    0x4(%edx),%esi
+ 663:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 666:	8b 10                	mov    (%eax),%edx
+ 668:	8b 12                	mov    (%edx),%edx
+ 66a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 66d:	8b 50 04             	mov    0x4(%eax),%edx
+ 670:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 673:	39 f1                	cmp    %esi,%ecx
+ 675:	75 c6                	jne    63d <free+0x3d>
+    p->s.size += bp->s.size;
+ 677:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 67a:	a3 a0 0a 00 00       	mov    %eax,0xaa0
+    p->s.size += bp->s.size;
+ 67f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 682:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 685:	89 10                	mov    %edx,(%eax)
+}
+ 687:	5b                   	pop    %ebx
+ 688:	5e                   	pop    %esi
+ 689:	5f                   	pop    %edi
+ 68a:	5d                   	pop    %ebp
+ 68b:	c3                   	ret    
+ 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000690 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 690:	55                   	push   %ebp
+ 691:	89 e5                	mov    %esp,%ebp
+ 693:	57                   	push   %edi
+ 694:	56                   	push   %esi
+ 695:	53                   	push   %ebx
+ 696:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 699:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 69c:	8b 15 a0 0a 00 00    	mov    0xaa0,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6a2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6a5:	c1 ef 03             	shr    $0x3,%edi
+ 6a8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6ab:	85 d2                	test   %edx,%edx
+ 6ad:	0f 84 9d 00 00 00    	je     750 <malloc+0xc0>
+ 6b3:	8b 02                	mov    (%edx),%eax
+ 6b5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 6b8:	39 cf                	cmp    %ecx,%edi
+ 6ba:	76 6c                	jbe    728 <malloc+0x98>
+ 6bc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6c2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6c7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ca:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 6d1:	eb 0e                	jmp    6e1 <malloc+0x51>
+ 6d3:	90                   	nop
+ 6d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6da:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dd:	39 f9                	cmp    %edi,%ecx
+ 6df:	73 47                	jae    728 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6e1:	39 05 a0 0a 00 00    	cmp    %eax,0xaa0
+ 6e7:	89 c2                	mov    %eax,%edx
+ 6e9:	75 ed                	jne    6d8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6eb:	83 ec 0c             	sub    $0xc,%esp
+ 6ee:	56                   	push   %esi
+ 6ef:	e8 56 fc ff ff       	call   34a <sbrk>
+  if(p == (char*)-1)
+ 6f4:	83 c4 10             	add    $0x10,%esp
+ 6f7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6fa:	74 1c                	je     718 <malloc+0x88>
+  hp->s.size = nu;
+ 6fc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6ff:	83 ec 0c             	sub    $0xc,%esp
+ 702:	83 c0 08             	add    $0x8,%eax
+ 705:	50                   	push   %eax
+ 706:	e8 f5 fe ff ff       	call   600 <free>
+  return freep;
+ 70b:	8b 15 a0 0a 00 00    	mov    0xaa0,%edx
+      if((p = morecore(nunits)) == 0)
+ 711:	83 c4 10             	add    $0x10,%esp
+ 714:	85 d2                	test   %edx,%edx
+ 716:	75 c0                	jne    6d8 <malloc+0x48>
+        return 0;
+  }
+}
+ 718:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 71b:	31 c0                	xor    %eax,%eax
+}
+ 71d:	5b                   	pop    %ebx
+ 71e:	5e                   	pop    %esi
+ 71f:	5f                   	pop    %edi
+ 720:	5d                   	pop    %ebp
+ 721:	c3                   	ret    
+ 722:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 728:	39 cf                	cmp    %ecx,%edi
+ 72a:	74 54                	je     780 <malloc+0xf0>
+        p->s.size -= nunits;
+ 72c:	29 f9                	sub    %edi,%ecx
+ 72e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 731:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 734:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 737:	89 15 a0 0a 00 00    	mov    %edx,0xaa0
+}
+ 73d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 740:	83 c0 08             	add    $0x8,%eax
+}
+ 743:	5b                   	pop    %ebx
+ 744:	5e                   	pop    %esi
+ 745:	5f                   	pop    %edi
+ 746:	5d                   	pop    %ebp
+ 747:	c3                   	ret    
+ 748:	90                   	nop
+ 749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 750:	c7 05 a0 0a 00 00 a4 	movl   $0xaa4,0xaa0
+ 757:	0a 00 00 
+ 75a:	c7 05 a4 0a 00 00 a4 	movl   $0xaa4,0xaa4
+ 761:	0a 00 00 
+    base.s.size = 0;
+ 764:	b8 a4 0a 00 00       	mov    $0xaa4,%eax
+ 769:	c7 05 a8 0a 00 00 00 	movl   $0x0,0xaa8
+ 770:	00 00 00 
+ 773:	e9 44 ff ff ff       	jmp    6bc <malloc+0x2c>
+ 778:	90                   	nop
+ 779:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 780:	8b 08                	mov    (%eax),%ecx
+ 782:	89 0a                	mov    %ecx,(%edx)
+ 784:	eb b1                	jmp    737 <malloc+0xa7>
diff -ruN src-old/test_1.c src/test_1.c
--- src-old/test_1.c	1970-01-01 00:00:00.000000000 +0000
+++ src/test_1.c	2023-04-19 02:18:53.355860186 +0000
@@ -0,0 +1,32 @@
+#include "param.h"
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  for(i=1;i<=500;i++)
+  {
+    void* addr = kmalloc(2000);
+
+    if(addr == 0)
+    {
+      printf(1, "XV6_TEST_OUTPUT : kmalloc failed to allocate memory\n");
+      exit();
+    }
+
+    kmfree(addr);
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : kmalloc  and kmfree good.\n");
+
+  exit();
+}
diff -ruN src-old/test_1.d src/test_1.d
--- src-old/test_1.d	1970-01-01 00:00:00.000000000 +0000
+++ src/test_1.d	2023-04-19 02:18:56.200197750 +0000
@@ -0,0 +1,2 @@
+test_1.o: test_1.c /usr/include/stdc-predef.h param.h types.h stat.h \
+ user.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files src-old/test_1.o and src/test_1.o differ
diff -ruN src-old/test_1.sym src/test_1.sym
--- src-old/test_1.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/test_1.sym	2023-04-19 02:18:56.228201062 +0000
@@ -0,0 +1,61 @@
+00000000 .text
+00000788 .rodata
+0000080c .eh_frame
+00000aa0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test_1.c
+00000000 ulib.c
+00000000 printf.c
+00000390 printint
+000007f8 digits.1052
+00000000 umalloc.c
+00000aa0 freep
+00000aa4 base
+00000070 strcpy
+00000430 printf
+00000290 memmove
+0000037a munmap
+0000030a mknod
+00000180 gets
+00000342 getpid
+00000690 malloc
+00000352 sleep
+0000036a kmfree
+00000372 mmap
+000002d2 pipe
+000002e2 write
+0000031a fstat
+000002f2 kill
+00000332 chdir
+000002fa exec
+000002ca wait
+000002da read
+00000312 unlink
+000002ba fork
+0000034a sbrk
+0000035a uptime
+00000aa0 __bss_start
+00000120 memset
+00000000 main
+000000a0 strcmp
+0000033a dup
+00000200 stat
+00000aa0 _edata
+00000aac _end
+00000322 link
+00000362 kmalloc
+000002c2 exit
+00000250 atoi
+000000f0 strlen
+00000302 open
+00000140 strchr
+0000032a mkdir
+000002ea close
+00000600 free
Binary files src-old/_test_2 and src/_test_2 differ
diff -ruN src-old/test_2.asm src/test_2.asm
--- src-old/test_2.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/test_2.asm	2023-04-19 02:18:56.284207686 +0000
@@ -0,0 +1,1383 @@
+
+_test_2:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "XV6_TEST_OUTPUT : munmap good\n");
+  return;
+}
+
+int main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  test();
+  11:	e8 6a 00 00 00       	call   80 <test>
+  exit();
+  16:	e8 47 04 00 00       	call   462 <exit>
+  1b:	66 90                	xchg   %ax,%ax
+  1d:	66 90                	xchg   %ax,%ax
+  1f:	90                   	nop
+
+00000020 <memcmp>:
+{
+  20:	55                   	push   %ebp
+  21:	89 e5                	mov    %esp,%ebp
+  23:	57                   	push   %edi
+  24:	56                   	push   %esi
+  25:	53                   	push   %ebx
+  26:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  29:	8b 75 08             	mov    0x8(%ebp),%esi
+  2c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  while (n-- > 0)
+  2f:	85 db                	test   %ebx,%ebx
+  31:	74 29                	je     5c <memcmp+0x3c>
+    if (*s1 != *s2)
+  33:	0f b6 16             	movzbl (%esi),%edx
+  36:	0f b6 0f             	movzbl (%edi),%ecx
+  39:	38 d1                	cmp    %dl,%cl
+  3b:	75 2b                	jne    68 <memcmp+0x48>
+  3d:	b8 01 00 00 00       	mov    $0x1,%eax
+  42:	eb 14                	jmp    58 <memcmp+0x38>
+  44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  48:	0f b6 14 06          	movzbl (%esi,%eax,1),%edx
+  4c:	83 c0 01             	add    $0x1,%eax
+  4f:	0f b6 4c 07 ff       	movzbl -0x1(%edi,%eax,1),%ecx
+  54:	38 ca                	cmp    %cl,%dl
+  56:	75 10                	jne    68 <memcmp+0x48>
+  while (n-- > 0)
+  58:	39 d8                	cmp    %ebx,%eax
+  5a:	75 ec                	jne    48 <memcmp+0x28>
+}
+  5c:	5b                   	pop    %ebx
+  return 0;
+  5d:	31 c0                	xor    %eax,%eax
+}
+  5f:	5e                   	pop    %esi
+  60:	5f                   	pop    %edi
+  61:	5d                   	pop    %ebp
+  62:	c3                   	ret    
+  63:	90                   	nop
+  64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      return *s1 - *s2;
+  68:	0f b6 c2             	movzbl %dl,%eax
+}
+  6b:	5b                   	pop    %ebx
+      return *s1 - *s2;
+  6c:	29 c8                	sub    %ecx,%eax
+}
+  6e:	5e                   	pop    %esi
+  6f:	5f                   	pop    %edi
+  70:	5d                   	pop    %ebp
+  71:	c3                   	ret    
+  72:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000080 <test>:
+{
+  80:	55                   	push   %ebp
+  81:	89 e5                	mov    %esp,%ebp
+  83:	56                   	push   %esi
+  84:	53                   	push   %ebx
+  res = mmap(res, size, 0 /*prot*/, 0 /*flags*/, -1 /*fd*/, 0 /*offset*/);
+  85:	83 ec 08             	sub    $0x8,%esp
+  88:	6a 00                	push   $0x0
+  8a:	6a ff                	push   $0xffffffff
+  8c:	6a 00                	push   $0x0
+  8e:	6a 00                	push   $0x0
+  90:	6a 0a                	push   $0xa
+  92:	6a 00                	push   $0x0
+  94:	e8 79 04 00 00       	call   512 <mmap>
+  if (res <= 0)
+  99:	83 c4 20             	add    $0x20,%esp
+  9c:	85 c0                	test   %eax,%eax
+  9e:	0f 84 2c 01 00 00    	je     1d0 <test+0x150>
+  printf(1, "XV6_TEST_OUTPUT : mmap good\n");
+  a4:	83 ec 08             	sub    $0x8,%esp
+  a7:	89 c6                	mov    %eax,%esi
+  a9:	68 64 0a 00 00       	push   $0xa64
+  ae:	6a 01                	push   $0x1
+  b0:	e8 1b 05 00 00       	call   5d0 <printf>
+  zeroes = malloc(size);
+  b5:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  bc:	e8 6f 07 00 00       	call   830 <malloc>
+  memset(zeroes, 0, size);
+  c1:	83 c4 0c             	add    $0xc,%esp
+  zeroes = malloc(size);
+  c4:	89 c3                	mov    %eax,%ebx
+  memset(zeroes, 0, size);
+  c6:	6a 0a                	push   $0xa
+  c8:	6a 00                	push   $0x0
+  ca:	50                   	push   %eax
+  cb:	e8 f0 01 00 00       	call   2c0 <memset>
+    if (*s1 != *s2)
+  d0:	0f b6 16             	movzbl (%esi),%edx
+  d3:	0f b6 0b             	movzbl (%ebx),%ecx
+  d6:	83 c4 10             	add    $0x10,%esp
+  d9:	38 d1                	cmp    %dl,%cl
+  db:	0f 85 af 00 00 00    	jne    190 <test+0x110>
+  e1:	b8 01 00 00 00       	mov    $0x1,%eax
+  e6:	8d 76 00             	lea    0x0(%esi),%esi
+  e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  f0:	0f b6 14 06          	movzbl (%esi,%eax,1),%edx
+  f4:	0f b6 0c 03          	movzbl (%ebx,%eax,1),%ecx
+  f8:	38 ca                	cmp    %cl,%dl
+  fa:	0f 85 90 00 00 00    	jne    190 <test+0x110>
+ 100:	83 c0 01             	add    $0x1,%eax
+  while (n-- > 0)
+ 103:	83 f8 0a             	cmp    $0xa,%eax
+ 106:	75 e8                	jne    f0 <test+0x70>
+  printf(1, "XV6_TEST_OUTPUT : Ret of memcmp %d\n", ret);
+ 108:	83 ec 04             	sub    $0x4,%esp
+ 10b:	6a 00                	push   $0x0
+ 10d:	68 48 09 00 00       	push   $0x948
+ 112:	6a 01                	push   $0x1
+ 114:	e8 b7 04 00 00       	call   5d0 <printf>
+ 119:	83 c4 10             	add    $0x10,%esp
+  printf(1, "XV6_TEST_OUTPUT : mmap() has correctly cleared the newly mapped anonymous memory region\n");
+ 11c:	83 ec 08             	sub    $0x8,%esp
+ 11f:	68 c4 09 00 00       	push   $0x9c4
+ 124:	6a 01                	push   $0x1
+ 126:	e8 a5 04 00 00       	call   5d0 <printf>
+  printf(1, "given size here size: %d\n", size);
+ 12b:	83 c4 0c             	add    $0xc,%esp
+ 12e:	6a 0a                	push   $0xa
+ 130:	68 81 0a 00 00       	push   $0xa81
+ 135:	6a 01                	push   $0x1
+ 137:	e8 94 04 00 00       	call   5d0 <printf>
+  int rv = munmap(res, size);
+ 13c:	58                   	pop    %eax
+ 13d:	5a                   	pop    %edx
+ 13e:	6a 0a                	push   $0xa
+ 140:	56                   	push   %esi
+ 141:	e8 d4 03 00 00       	call   51a <munmap>
+  printf(1, "given size here size: %d\n", size);
+ 146:	83 c4 0c             	add    $0xc,%esp
+  int rv = munmap(res, size);
+ 149:	89 c3                	mov    %eax,%ebx
+  printf(1, "given size here size: %d\n", size);
+ 14b:	6a 0a                	push   $0xa
+ 14d:	68 81 0a 00 00       	push   $0xa81
+ 152:	6a 01                	push   $0x1
+ 154:	e8 77 04 00 00       	call   5d0 <printf>
+  printf(1, "size: %d\n", rv);
+ 159:	83 c4 0c             	add    $0xc,%esp
+ 15c:	53                   	push   %ebx
+ 15d:	68 91 0a 00 00       	push   $0xa91
+ 162:	6a 01                	push   $0x1
+ 164:	e8 67 04 00 00       	call   5d0 <printf>
+  if (rv < 0)
+ 169:	83 c4 10             	add    $0x10,%esp
+ 16c:	85 db                	test   %ebx,%ebx
+ 16e:	0f 88 7c 00 00 00    	js     1f0 <test+0x170>
+  printf(1, "XV6_TEST_OUTPUT : munmap good\n");
+ 174:	83 ec 08             	sub    $0x8,%esp
+ 177:	68 44 0a 00 00       	push   $0xa44
+ 17c:	6a 01                	push   $0x1
+ 17e:	e8 4d 04 00 00       	call   5d0 <printf>
+  return;
+ 183:	83 c4 10             	add    $0x10,%esp
+}
+ 186:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 189:	5b                   	pop    %ebx
+ 18a:	5e                   	pop    %esi
+ 18b:	5d                   	pop    %ebp
+ 18c:	c3                   	ret    
+ 18d:	8d 76 00             	lea    0x0(%esi),%esi
+      return *s1 - *s2;
+ 190:	0f b6 da             	movzbl %dl,%ebx
+  printf(1, "XV6_TEST_OUTPUT : Ret of memcmp %d\n", ret);
+ 193:	83 ec 04             	sub    $0x4,%esp
+      return *s1 - *s2;
+ 196:	29 cb                	sub    %ecx,%ebx
+  printf(1, "XV6_TEST_OUTPUT : Ret of memcmp %d\n", ret);
+ 198:	53                   	push   %ebx
+ 199:	68 48 09 00 00       	push   $0x948
+ 19e:	6a 01                	push   $0x1
+ 1a0:	e8 2b 04 00 00       	call   5d0 <printf>
+  if (ret != 0)
+ 1a5:	83 c4 10             	add    $0x10,%esp
+ 1a8:	85 db                	test   %ebx,%ebx
+ 1aa:	0f 84 6c ff ff ff    	je     11c <test+0x9c>
+    printf(1, "XV6_TEST_OUTPUT : mmap() should zero out the  newly mapped anonymous memory region.!!\n");
+ 1b0:	83 ec 08             	sub    $0x8,%esp
+ 1b3:	68 6c 09 00 00       	push   $0x96c
+ 1b8:	6a 01                	push   $0x1
+ 1ba:	e8 11 04 00 00       	call   5d0 <printf>
+    return;
+ 1bf:	83 c4 10             	add    $0x10,%esp
+}
+ 1c2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1c5:	5b                   	pop    %ebx
+ 1c6:	5e                   	pop    %esi
+ 1c7:	5d                   	pop    %ebp
+ 1c8:	c3                   	ret    
+ 1c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+ 1d0:	83 ec 08             	sub    $0x8,%esp
+ 1d3:	68 28 09 00 00       	push   $0x928
+ 1d8:	6a 01                	push   $0x1
+ 1da:	e8 f1 03 00 00       	call   5d0 <printf>
+    return;
+ 1df:	83 c4 10             	add    $0x10,%esp
+}
+ 1e2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1e5:	5b                   	pop    %ebx
+ 1e6:	5e                   	pop    %esi
+ 1e7:	5d                   	pop    %ebp
+ 1e8:	c3                   	ret    
+ 1e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+ 1f0:	83 ec 08             	sub    $0x8,%esp
+ 1f3:	68 20 0a 00 00       	push   $0xa20
+ 1f8:	6a 01                	push   $0x1
+ 1fa:	e8 d1 03 00 00       	call   5d0 <printf>
+    return;
+ 1ff:	83 c4 10             	add    $0x10,%esp
+}
+ 202:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 205:	5b                   	pop    %ebx
+ 206:	5e                   	pop    %esi
+ 207:	5d                   	pop    %ebp
+ 208:	c3                   	ret    
+ 209:	66 90                	xchg   %ax,%ax
+ 20b:	66 90                	xchg   %ax,%ax
+ 20d:	66 90                	xchg   %ax,%ax
+ 20f:	90                   	nop
+
+00000210 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 45 08             	mov    0x8(%ebp),%eax
+ 217:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 21a:	89 c2                	mov    %eax,%edx
+ 21c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 220:	83 c1 01             	add    $0x1,%ecx
+ 223:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 227:	83 c2 01             	add    $0x1,%edx
+ 22a:	84 db                	test   %bl,%bl
+ 22c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 22f:	75 ef                	jne    220 <strcpy+0x10>
+    ;
+  return os;
+}
+ 231:	5b                   	pop    %ebx
+ 232:	5d                   	pop    %ebp
+ 233:	c3                   	ret    
+ 234:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 23a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000240 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	53                   	push   %ebx
+ 244:	8b 55 08             	mov    0x8(%ebp),%edx
+ 247:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 24a:	0f b6 02             	movzbl (%edx),%eax
+ 24d:	0f b6 19             	movzbl (%ecx),%ebx
+ 250:	84 c0                	test   %al,%al
+ 252:	75 1c                	jne    270 <strcmp+0x30>
+ 254:	eb 2a                	jmp    280 <strcmp+0x40>
+ 256:	8d 76 00             	lea    0x0(%esi),%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 260:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 263:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 266:	83 c1 01             	add    $0x1,%ecx
+ 269:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 26c:	84 c0                	test   %al,%al
+ 26e:	74 10                	je     280 <strcmp+0x40>
+ 270:	38 d8                	cmp    %bl,%al
+ 272:	74 ec                	je     260 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 274:	29 d8                	sub    %ebx,%eax
+}
+ 276:	5b                   	pop    %ebx
+ 277:	5d                   	pop    %ebp
+ 278:	c3                   	ret    
+ 279:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 280:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 282:	29 d8                	sub    %ebx,%eax
+}
+ 284:	5b                   	pop    %ebx
+ 285:	5d                   	pop    %ebp
+ 286:	c3                   	ret    
+ 287:	89 f6                	mov    %esi,%esi
+ 289:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000290 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 296:	80 39 00             	cmpb   $0x0,(%ecx)
+ 299:	74 15                	je     2b0 <strlen+0x20>
+ 29b:	31 d2                	xor    %edx,%edx
+ 29d:	8d 76 00             	lea    0x0(%esi),%esi
+ 2a0:	83 c2 01             	add    $0x1,%edx
+ 2a3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 2a7:	89 d0                	mov    %edx,%eax
+ 2a9:	75 f5                	jne    2a0 <strlen+0x10>
+    ;
+  return n;
+}
+ 2ab:	5d                   	pop    %ebp
+ 2ac:	c3                   	ret    
+ 2ad:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 2b0:	31 c0                	xor    %eax,%eax
+}
+ 2b2:	5d                   	pop    %ebp
+ 2b3:	c3                   	ret    
+ 2b4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 2ba:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000002c0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 2c0:	55                   	push   %ebp
+ 2c1:	89 e5                	mov    %esp,%ebp
+ 2c3:	57                   	push   %edi
+ 2c4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 2c7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 2ca:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 2cd:	89 d7                	mov    %edx,%edi
+ 2cf:	fc                   	cld    
+ 2d0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 2d2:	89 d0                	mov    %edx,%eax
+ 2d4:	5f                   	pop    %edi
+ 2d5:	5d                   	pop    %ebp
+ 2d6:	c3                   	ret    
+ 2d7:	89 f6                	mov    %esi,%esi
+ 2d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002e0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 2e0:	55                   	push   %ebp
+ 2e1:	89 e5                	mov    %esp,%ebp
+ 2e3:	53                   	push   %ebx
+ 2e4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2e7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 2ea:	0f b6 10             	movzbl (%eax),%edx
+ 2ed:	84 d2                	test   %dl,%dl
+ 2ef:	74 1d                	je     30e <strchr+0x2e>
+    if(*s == c)
+ 2f1:	38 d3                	cmp    %dl,%bl
+ 2f3:	89 d9                	mov    %ebx,%ecx
+ 2f5:	75 0d                	jne    304 <strchr+0x24>
+ 2f7:	eb 17                	jmp    310 <strchr+0x30>
+ 2f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 300:	38 ca                	cmp    %cl,%dl
+ 302:	74 0c                	je     310 <strchr+0x30>
+  for(; *s; s++)
+ 304:	83 c0 01             	add    $0x1,%eax
+ 307:	0f b6 10             	movzbl (%eax),%edx
+ 30a:	84 d2                	test   %dl,%dl
+ 30c:	75 f2                	jne    300 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 30e:	31 c0                	xor    %eax,%eax
+}
+ 310:	5b                   	pop    %ebx
+ 311:	5d                   	pop    %ebp
+ 312:	c3                   	ret    
+ 313:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 319:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000320 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 320:	55                   	push   %ebp
+ 321:	89 e5                	mov    %esp,%ebp
+ 323:	57                   	push   %edi
+ 324:	56                   	push   %esi
+ 325:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 326:	31 f6                	xor    %esi,%esi
+ 328:	89 f3                	mov    %esi,%ebx
+{
+ 32a:	83 ec 1c             	sub    $0x1c,%esp
+ 32d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 330:	eb 2f                	jmp    361 <gets+0x41>
+ 332:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 338:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 33b:	83 ec 04             	sub    $0x4,%esp
+ 33e:	6a 01                	push   $0x1
+ 340:	50                   	push   %eax
+ 341:	6a 00                	push   $0x0
+ 343:	e8 32 01 00 00       	call   47a <read>
+    if(cc < 1)
+ 348:	83 c4 10             	add    $0x10,%esp
+ 34b:	85 c0                	test   %eax,%eax
+ 34d:	7e 1c                	jle    36b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 34f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 353:	83 c7 01             	add    $0x1,%edi
+ 356:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 359:	3c 0a                	cmp    $0xa,%al
+ 35b:	74 23                	je     380 <gets+0x60>
+ 35d:	3c 0d                	cmp    $0xd,%al
+ 35f:	74 1f                	je     380 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 361:	83 c3 01             	add    $0x1,%ebx
+ 364:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 367:	89 fe                	mov    %edi,%esi
+ 369:	7c cd                	jl     338 <gets+0x18>
+ 36b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 36d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 370:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 373:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 376:	5b                   	pop    %ebx
+ 377:	5e                   	pop    %esi
+ 378:	5f                   	pop    %edi
+ 379:	5d                   	pop    %ebp
+ 37a:	c3                   	ret    
+ 37b:	90                   	nop
+ 37c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 380:	8b 75 08             	mov    0x8(%ebp),%esi
+ 383:	8b 45 08             	mov    0x8(%ebp),%eax
+ 386:	01 de                	add    %ebx,%esi
+ 388:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 38a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 38d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 390:	5b                   	pop    %ebx
+ 391:	5e                   	pop    %esi
+ 392:	5f                   	pop    %edi
+ 393:	5d                   	pop    %ebp
+ 394:	c3                   	ret    
+ 395:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 399:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000003a0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	56                   	push   %esi
+ 3a4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 3a5:	83 ec 08             	sub    $0x8,%esp
+ 3a8:	6a 00                	push   $0x0
+ 3aa:	ff 75 08             	pushl  0x8(%ebp)
+ 3ad:	e8 f0 00 00 00       	call   4a2 <open>
+  if(fd < 0)
+ 3b2:	83 c4 10             	add    $0x10,%esp
+ 3b5:	85 c0                	test   %eax,%eax
+ 3b7:	78 27                	js     3e0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 3b9:	83 ec 08             	sub    $0x8,%esp
+ 3bc:	ff 75 0c             	pushl  0xc(%ebp)
+ 3bf:	89 c3                	mov    %eax,%ebx
+ 3c1:	50                   	push   %eax
+ 3c2:	e8 f3 00 00 00       	call   4ba <fstat>
+  close(fd);
+ 3c7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 3ca:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 3cc:	e8 b9 00 00 00       	call   48a <close>
+  return r;
+ 3d1:	83 c4 10             	add    $0x10,%esp
+}
+ 3d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 3d7:	89 f0                	mov    %esi,%eax
+ 3d9:	5b                   	pop    %ebx
+ 3da:	5e                   	pop    %esi
+ 3db:	5d                   	pop    %ebp
+ 3dc:	c3                   	ret    
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 3e0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 3e5:	eb ed                	jmp    3d4 <stat+0x34>
+ 3e7:	89 f6                	mov    %esi,%esi
+ 3e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000003f0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	53                   	push   %ebx
+ 3f4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 3f7:	0f be 11             	movsbl (%ecx),%edx
+ 3fa:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 3fd:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 3ff:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 404:	77 1f                	ja     425 <atoi+0x35>
+ 406:	8d 76 00             	lea    0x0(%esi),%esi
+ 409:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 410:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 413:	83 c1 01             	add    $0x1,%ecx
+ 416:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 41a:	0f be 11             	movsbl (%ecx),%edx
+ 41d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 420:	80 fb 09             	cmp    $0x9,%bl
+ 423:	76 eb                	jbe    410 <atoi+0x20>
+  return n;
+}
+ 425:	5b                   	pop    %ebx
+ 426:	5d                   	pop    %ebp
+ 427:	c3                   	ret    
+ 428:	90                   	nop
+ 429:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000430 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	56                   	push   %esi
+ 434:	53                   	push   %ebx
+ 435:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 438:	8b 45 08             	mov    0x8(%ebp),%eax
+ 43b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 43e:	85 db                	test   %ebx,%ebx
+ 440:	7e 14                	jle    456 <memmove+0x26>
+ 442:	31 d2                	xor    %edx,%edx
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 448:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 44c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 44f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 452:	39 d3                	cmp    %edx,%ebx
+ 454:	75 f2                	jne    448 <memmove+0x18>
+  return vdst;
+}
+ 456:	5b                   	pop    %ebx
+ 457:	5e                   	pop    %esi
+ 458:	5d                   	pop    %ebp
+ 459:	c3                   	ret    
+
+0000045a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 45a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 45f:	cd 40                	int    $0x40
+ 461:	c3                   	ret    
+
+00000462 <exit>:
+SYSCALL(exit)
+ 462:	b8 02 00 00 00       	mov    $0x2,%eax
+ 467:	cd 40                	int    $0x40
+ 469:	c3                   	ret    
+
+0000046a <wait>:
+SYSCALL(wait)
+ 46a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 46f:	cd 40                	int    $0x40
+ 471:	c3                   	ret    
+
+00000472 <pipe>:
+SYSCALL(pipe)
+ 472:	b8 04 00 00 00       	mov    $0x4,%eax
+ 477:	cd 40                	int    $0x40
+ 479:	c3                   	ret    
+
+0000047a <read>:
+SYSCALL(read)
+ 47a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 47f:	cd 40                	int    $0x40
+ 481:	c3                   	ret    
+
+00000482 <write>:
+SYSCALL(write)
+ 482:	b8 10 00 00 00       	mov    $0x10,%eax
+ 487:	cd 40                	int    $0x40
+ 489:	c3                   	ret    
+
+0000048a <close>:
+SYSCALL(close)
+ 48a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 48f:	cd 40                	int    $0x40
+ 491:	c3                   	ret    
+
+00000492 <kill>:
+SYSCALL(kill)
+ 492:	b8 06 00 00 00       	mov    $0x6,%eax
+ 497:	cd 40                	int    $0x40
+ 499:	c3                   	ret    
+
+0000049a <exec>:
+SYSCALL(exec)
+ 49a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 49f:	cd 40                	int    $0x40
+ 4a1:	c3                   	ret    
+
+000004a2 <open>:
+SYSCALL(open)
+ 4a2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 4a7:	cd 40                	int    $0x40
+ 4a9:	c3                   	ret    
+
+000004aa <mknod>:
+SYSCALL(mknod)
+ 4aa:	b8 11 00 00 00       	mov    $0x11,%eax
+ 4af:	cd 40                	int    $0x40
+ 4b1:	c3                   	ret    
+
+000004b2 <unlink>:
+SYSCALL(unlink)
+ 4b2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 4b7:	cd 40                	int    $0x40
+ 4b9:	c3                   	ret    
+
+000004ba <fstat>:
+SYSCALL(fstat)
+ 4ba:	b8 08 00 00 00       	mov    $0x8,%eax
+ 4bf:	cd 40                	int    $0x40
+ 4c1:	c3                   	ret    
+
+000004c2 <link>:
+SYSCALL(link)
+ 4c2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 4c7:	cd 40                	int    $0x40
+ 4c9:	c3                   	ret    
+
+000004ca <mkdir>:
+SYSCALL(mkdir)
+ 4ca:	b8 14 00 00 00       	mov    $0x14,%eax
+ 4cf:	cd 40                	int    $0x40
+ 4d1:	c3                   	ret    
+
+000004d2 <chdir>:
+SYSCALL(chdir)
+ 4d2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 4d7:	cd 40                	int    $0x40
+ 4d9:	c3                   	ret    
+
+000004da <dup>:
+SYSCALL(dup)
+ 4da:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 4df:	cd 40                	int    $0x40
+ 4e1:	c3                   	ret    
+
+000004e2 <getpid>:
+SYSCALL(getpid)
+ 4e2:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 4e7:	cd 40                	int    $0x40
+ 4e9:	c3                   	ret    
+
+000004ea <sbrk>:
+SYSCALL(sbrk)
+ 4ea:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 4ef:	cd 40                	int    $0x40
+ 4f1:	c3                   	ret    
+
+000004f2 <sleep>:
+SYSCALL(sleep)
+ 4f2:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 4f7:	cd 40                	int    $0x40
+ 4f9:	c3                   	ret    
+
+000004fa <uptime>:
+SYSCALL(uptime)
+ 4fa:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 4ff:	cd 40                	int    $0x40
+ 501:	c3                   	ret    
+
+00000502 <kmalloc>:
+SYSCALL(kmalloc)
+ 502:	b8 16 00 00 00       	mov    $0x16,%eax
+ 507:	cd 40                	int    $0x40
+ 509:	c3                   	ret    
+
+0000050a <kmfree>:
+SYSCALL(kmfree) 
+ 50a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 50f:	cd 40                	int    $0x40
+ 511:	c3                   	ret    
+
+00000512 <mmap>:
+SYSCALL(mmap)
+ 512:	b8 18 00 00 00       	mov    $0x18,%eax
+ 517:	cd 40                	int    $0x40
+ 519:	c3                   	ret    
+
+0000051a <munmap>:
+ 51a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 51f:	cd 40                	int    $0x40
+ 521:	c3                   	ret    
+ 522:	66 90                	xchg   %ax,%ax
+ 524:	66 90                	xchg   %ax,%ax
+ 526:	66 90                	xchg   %ax,%ax
+ 528:	66 90                	xchg   %ax,%ax
+ 52a:	66 90                	xchg   %ax,%ax
+ 52c:	66 90                	xchg   %ax,%ax
+ 52e:	66 90                	xchg   %ax,%ax
+
+00000530 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 530:	55                   	push   %ebp
+ 531:	89 e5                	mov    %esp,%ebp
+ 533:	57                   	push   %edi
+ 534:	56                   	push   %esi
+ 535:	53                   	push   %ebx
+ 536:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 539:	85 d2                	test   %edx,%edx
+{
+ 53b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 53e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 540:	79 76                	jns    5b8 <printint+0x88>
+ 542:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 546:	74 70                	je     5b8 <printint+0x88>
+    x = -xx;
+ 548:	f7 d8                	neg    %eax
+    neg = 1;
+ 54a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 551:	31 f6                	xor    %esi,%esi
+ 553:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 556:	eb 0a                	jmp    562 <printint+0x32>
+ 558:	90                   	nop
+ 559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 560:	89 fe                	mov    %edi,%esi
+ 562:	31 d2                	xor    %edx,%edx
+ 564:	8d 7e 01             	lea    0x1(%esi),%edi
+ 567:	f7 f1                	div    %ecx
+ 569:	0f b6 92 a4 0a 00 00 	movzbl 0xaa4(%edx),%edx
+  }while((x /= base) != 0);
+ 570:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 572:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 575:	75 e9                	jne    560 <printint+0x30>
+  if(neg)
+ 577:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 57a:	85 c0                	test   %eax,%eax
+ 57c:	74 08                	je     586 <printint+0x56>
+    buf[i++] = '-';
+ 57e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 583:	8d 7e 02             	lea    0x2(%esi),%edi
+ 586:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 58a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
+ 590:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 593:	83 ec 04             	sub    $0x4,%esp
+ 596:	83 ee 01             	sub    $0x1,%esi
+ 599:	6a 01                	push   $0x1
+ 59b:	53                   	push   %ebx
+ 59c:	57                   	push   %edi
+ 59d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 5a0:	e8 dd fe ff ff       	call   482 <write>
+
+  while(--i >= 0)
+ 5a5:	83 c4 10             	add    $0x10,%esp
+ 5a8:	39 de                	cmp    %ebx,%esi
+ 5aa:	75 e4                	jne    590 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 5ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5af:	5b                   	pop    %ebx
+ 5b0:	5e                   	pop    %esi
+ 5b1:	5f                   	pop    %edi
+ 5b2:	5d                   	pop    %ebp
+ 5b3:	c3                   	ret    
+ 5b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 5b8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 5bf:	eb 90                	jmp    551 <printint+0x21>
+ 5c1:	eb 0d                	jmp    5d0 <printf>
+ 5c3:	90                   	nop
+ 5c4:	90                   	nop
+ 5c5:	90                   	nop
+ 5c6:	90                   	nop
+ 5c7:	90                   	nop
+ 5c8:	90                   	nop
+ 5c9:	90                   	nop
+ 5ca:	90                   	nop
+ 5cb:	90                   	nop
+ 5cc:	90                   	nop
+ 5cd:	90                   	nop
+ 5ce:	90                   	nop
+ 5cf:	90                   	nop
+
+000005d0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 5d0:	55                   	push   %ebp
+ 5d1:	89 e5                	mov    %esp,%ebp
+ 5d3:	57                   	push   %edi
+ 5d4:	56                   	push   %esi
+ 5d5:	53                   	push   %ebx
+ 5d6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 5d9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 5dc:	0f b6 1e             	movzbl (%esi),%ebx
+ 5df:	84 db                	test   %bl,%bl
+ 5e1:	0f 84 b3 00 00 00    	je     69a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 5e7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 5ea:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 5ed:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 5ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 5f2:	eb 2f                	jmp    623 <printf+0x53>
+ 5f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 5f8:	83 f8 25             	cmp    $0x25,%eax
+ 5fb:	0f 84 a7 00 00 00    	je     6a8 <printf+0xd8>
+  write(fd, &c, 1);
+ 601:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 604:	83 ec 04             	sub    $0x4,%esp
+ 607:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 60a:	6a 01                	push   $0x1
+ 60c:	50                   	push   %eax
+ 60d:	ff 75 08             	pushl  0x8(%ebp)
+ 610:	e8 6d fe ff ff       	call   482 <write>
+ 615:	83 c4 10             	add    $0x10,%esp
+ 618:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 61b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 61f:	84 db                	test   %bl,%bl
+ 621:	74 77                	je     69a <printf+0xca>
+    if(state == 0){
+ 623:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 625:	0f be cb             	movsbl %bl,%ecx
+ 628:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 62b:	74 cb                	je     5f8 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 62d:	83 ff 25             	cmp    $0x25,%edi
+ 630:	75 e6                	jne    618 <printf+0x48>
+      if(c == 'd'){
+ 632:	83 f8 64             	cmp    $0x64,%eax
+ 635:	0f 84 05 01 00 00    	je     740 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 63b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 641:	83 f9 70             	cmp    $0x70,%ecx
+ 644:	74 72                	je     6b8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 646:	83 f8 73             	cmp    $0x73,%eax
+ 649:	0f 84 99 00 00 00    	je     6e8 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 64f:	83 f8 63             	cmp    $0x63,%eax
+ 652:	0f 84 08 01 00 00    	je     760 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 658:	83 f8 25             	cmp    $0x25,%eax
+ 65b:	0f 84 ef 00 00 00    	je     750 <printf+0x180>
+  write(fd, &c, 1);
+ 661:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 664:	83 ec 04             	sub    $0x4,%esp
+ 667:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 66b:	6a 01                	push   $0x1
+ 66d:	50                   	push   %eax
+ 66e:	ff 75 08             	pushl  0x8(%ebp)
+ 671:	e8 0c fe ff ff       	call   482 <write>
+ 676:	83 c4 0c             	add    $0xc,%esp
+ 679:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 67c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 67f:	6a 01                	push   $0x1
+ 681:	50                   	push   %eax
+ 682:	ff 75 08             	pushl  0x8(%ebp)
+ 685:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 688:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 68a:	e8 f3 fd ff ff       	call   482 <write>
+  for(i = 0; fmt[i]; i++){
+ 68f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 693:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 696:	84 db                	test   %bl,%bl
+ 698:	75 89                	jne    623 <printf+0x53>
+    }
+  }
+}
+ 69a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 69d:	5b                   	pop    %ebx
+ 69e:	5e                   	pop    %esi
+ 69f:	5f                   	pop    %edi
+ 6a0:	5d                   	pop    %ebp
+ 6a1:	c3                   	ret    
+ 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 6a8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 6ad:	e9 66 ff ff ff       	jmp    618 <printf+0x48>
+ 6b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 6b8:	83 ec 0c             	sub    $0xc,%esp
+ 6bb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 6c0:	6a 00                	push   $0x0
+ 6c2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 6c5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6c8:	8b 17                	mov    (%edi),%edx
+ 6ca:	e8 61 fe ff ff       	call   530 <printint>
+        ap++;
+ 6cf:	89 f8                	mov    %edi,%eax
+ 6d1:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6d4:	31 ff                	xor    %edi,%edi
+        ap++;
+ 6d6:	83 c0 04             	add    $0x4,%eax
+ 6d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 6dc:	e9 37 ff ff ff       	jmp    618 <printf+0x48>
+ 6e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 6e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 6eb:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 6ed:	83 c0 04             	add    $0x4,%eax
+ 6f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 6f3:	85 c9                	test   %ecx,%ecx
+ 6f5:	0f 84 8e 00 00 00    	je     789 <printf+0x1b9>
+        while(*s != 0){
+ 6fb:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 6fe:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 700:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 702:	84 c0                	test   %al,%al
+ 704:	0f 84 0e ff ff ff    	je     618 <printf+0x48>
+ 70a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 70d:	89 de                	mov    %ebx,%esi
+ 70f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 712:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 715:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 718:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 71b:	83 c6 01             	add    $0x1,%esi
+ 71e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 721:	6a 01                	push   $0x1
+ 723:	57                   	push   %edi
+ 724:	53                   	push   %ebx
+ 725:	e8 58 fd ff ff       	call   482 <write>
+        while(*s != 0){
+ 72a:	0f b6 06             	movzbl (%esi),%eax
+ 72d:	83 c4 10             	add    $0x10,%esp
+ 730:	84 c0                	test   %al,%al
+ 732:	75 e4                	jne    718 <printf+0x148>
+ 734:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 737:	31 ff                	xor    %edi,%edi
+ 739:	e9 da fe ff ff       	jmp    618 <printf+0x48>
+ 73e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 740:	83 ec 0c             	sub    $0xc,%esp
+ 743:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 748:	6a 01                	push   $0x1
+ 74a:	e9 73 ff ff ff       	jmp    6c2 <printf+0xf2>
+ 74f:	90                   	nop
+  write(fd, &c, 1);
+ 750:	83 ec 04             	sub    $0x4,%esp
+ 753:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 756:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 759:	6a 01                	push   $0x1
+ 75b:	e9 21 ff ff ff       	jmp    681 <printf+0xb1>
+        putc(fd, *ap);
+ 760:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 763:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 766:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 768:	6a 01                	push   $0x1
+        ap++;
+ 76a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 76d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 770:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 773:	50                   	push   %eax
+ 774:	ff 75 08             	pushl  0x8(%ebp)
+ 777:	e8 06 fd ff ff       	call   482 <write>
+        ap++;
+ 77c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 77f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 782:	31 ff                	xor    %edi,%edi
+ 784:	e9 8f fe ff ff       	jmp    618 <printf+0x48>
+          s = "(null)";
+ 789:	bb 9b 0a 00 00       	mov    $0xa9b,%ebx
+        while(*s != 0){
+ 78e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 793:	e9 72 ff ff ff       	jmp    70a <printf+0x13a>
+ 798:	66 90                	xchg   %ax,%ax
+ 79a:	66 90                	xchg   %ax,%ax
+ 79c:	66 90                	xchg   %ax,%ax
+ 79e:	66 90                	xchg   %ax,%ax
+
+000007a0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 7a0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 7a1:	a1 d4 0d 00 00       	mov    0xdd4,%eax
+{
+ 7a6:	89 e5                	mov    %esp,%ebp
+ 7a8:	57                   	push   %edi
+ 7a9:	56                   	push   %esi
+ 7aa:	53                   	push   %ebx
+ 7ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 7ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 7b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 7b8:	39 c8                	cmp    %ecx,%eax
+ 7ba:	8b 10                	mov    (%eax),%edx
+ 7bc:	73 32                	jae    7f0 <free+0x50>
+ 7be:	39 d1                	cmp    %edx,%ecx
+ 7c0:	72 04                	jb     7c6 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7c2:	39 d0                	cmp    %edx,%eax
+ 7c4:	72 32                	jb     7f8 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 7c6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 7c9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 7cc:	39 fa                	cmp    %edi,%edx
+ 7ce:	74 30                	je     800 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 7d0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 7d3:	8b 50 04             	mov    0x4(%eax),%edx
+ 7d6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 7d9:	39 f1                	cmp    %esi,%ecx
+ 7db:	74 3a                	je     817 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 7dd:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 7df:	a3 d4 0d 00 00       	mov    %eax,0xdd4
+}
+ 7e4:	5b                   	pop    %ebx
+ 7e5:	5e                   	pop    %esi
+ 7e6:	5f                   	pop    %edi
+ 7e7:	5d                   	pop    %ebp
+ 7e8:	c3                   	ret    
+ 7e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7f0:	39 d0                	cmp    %edx,%eax
+ 7f2:	72 04                	jb     7f8 <free+0x58>
+ 7f4:	39 d1                	cmp    %edx,%ecx
+ 7f6:	72 ce                	jb     7c6 <free+0x26>
+{
+ 7f8:	89 d0                	mov    %edx,%eax
+ 7fa:	eb bc                	jmp    7b8 <free+0x18>
+ 7fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 800:	03 72 04             	add    0x4(%edx),%esi
+ 803:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 806:	8b 10                	mov    (%eax),%edx
+ 808:	8b 12                	mov    (%edx),%edx
+ 80a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 80d:	8b 50 04             	mov    0x4(%eax),%edx
+ 810:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 813:	39 f1                	cmp    %esi,%ecx
+ 815:	75 c6                	jne    7dd <free+0x3d>
+    p->s.size += bp->s.size;
+ 817:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 81a:	a3 d4 0d 00 00       	mov    %eax,0xdd4
+    p->s.size += bp->s.size;
+ 81f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 822:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 825:	89 10                	mov    %edx,(%eax)
+}
+ 827:	5b                   	pop    %ebx
+ 828:	5e                   	pop    %esi
+ 829:	5f                   	pop    %edi
+ 82a:	5d                   	pop    %ebp
+ 82b:	c3                   	ret    
+ 82c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000830 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 830:	55                   	push   %ebp
+ 831:	89 e5                	mov    %esp,%ebp
+ 833:	57                   	push   %edi
+ 834:	56                   	push   %esi
+ 835:	53                   	push   %ebx
+ 836:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 839:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 83c:	8b 15 d4 0d 00 00    	mov    0xdd4,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 842:	8d 78 07             	lea    0x7(%eax),%edi
+ 845:	c1 ef 03             	shr    $0x3,%edi
+ 848:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 84b:	85 d2                	test   %edx,%edx
+ 84d:	0f 84 9d 00 00 00    	je     8f0 <malloc+0xc0>
+ 853:	8b 02                	mov    (%edx),%eax
+ 855:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 858:	39 cf                	cmp    %ecx,%edi
+ 85a:	76 6c                	jbe    8c8 <malloc+0x98>
+ 85c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 862:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 867:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 86a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 871:	eb 0e                	jmp    881 <malloc+0x51>
+ 873:	90                   	nop
+ 874:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 878:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 87a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 87d:	39 f9                	cmp    %edi,%ecx
+ 87f:	73 47                	jae    8c8 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 881:	39 05 d4 0d 00 00    	cmp    %eax,0xdd4
+ 887:	89 c2                	mov    %eax,%edx
+ 889:	75 ed                	jne    878 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 88b:	83 ec 0c             	sub    $0xc,%esp
+ 88e:	56                   	push   %esi
+ 88f:	e8 56 fc ff ff       	call   4ea <sbrk>
+  if(p == (char*)-1)
+ 894:	83 c4 10             	add    $0x10,%esp
+ 897:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 89a:	74 1c                	je     8b8 <malloc+0x88>
+  hp->s.size = nu;
+ 89c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 89f:	83 ec 0c             	sub    $0xc,%esp
+ 8a2:	83 c0 08             	add    $0x8,%eax
+ 8a5:	50                   	push   %eax
+ 8a6:	e8 f5 fe ff ff       	call   7a0 <free>
+  return freep;
+ 8ab:	8b 15 d4 0d 00 00    	mov    0xdd4,%edx
+      if((p = morecore(nunits)) == 0)
+ 8b1:	83 c4 10             	add    $0x10,%esp
+ 8b4:	85 d2                	test   %edx,%edx
+ 8b6:	75 c0                	jne    878 <malloc+0x48>
+        return 0;
+  }
+}
+ 8b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 8bb:	31 c0                	xor    %eax,%eax
+}
+ 8bd:	5b                   	pop    %ebx
+ 8be:	5e                   	pop    %esi
+ 8bf:	5f                   	pop    %edi
+ 8c0:	5d                   	pop    %ebp
+ 8c1:	c3                   	ret    
+ 8c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 8c8:	39 cf                	cmp    %ecx,%edi
+ 8ca:	74 54                	je     920 <malloc+0xf0>
+        p->s.size -= nunits;
+ 8cc:	29 f9                	sub    %edi,%ecx
+ 8ce:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 8d1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 8d4:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 8d7:	89 15 d4 0d 00 00    	mov    %edx,0xdd4
+}
+ 8dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 8e0:	83 c0 08             	add    $0x8,%eax
+}
+ 8e3:	5b                   	pop    %ebx
+ 8e4:	5e                   	pop    %esi
+ 8e5:	5f                   	pop    %edi
+ 8e6:	5d                   	pop    %ebp
+ 8e7:	c3                   	ret    
+ 8e8:	90                   	nop
+ 8e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 8f0:	c7 05 d4 0d 00 00 d8 	movl   $0xdd8,0xdd4
+ 8f7:	0d 00 00 
+ 8fa:	c7 05 d8 0d 00 00 d8 	movl   $0xdd8,0xdd8
+ 901:	0d 00 00 
+    base.s.size = 0;
+ 904:	b8 d8 0d 00 00       	mov    $0xdd8,%eax
+ 909:	c7 05 dc 0d 00 00 00 	movl   $0x0,0xddc
+ 910:	00 00 00 
+ 913:	e9 44 ff ff ff       	jmp    85c <malloc+0x2c>
+ 918:	90                   	nop
+ 919:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 920:	8b 08                	mov    (%eax),%ecx
+ 922:	89 0a                	mov    %ecx,(%edx)
+ 924:	eb b1                	jmp    8d7 <malloc+0xa7>
diff -ruN src-old/test_2.c src/test_2.c
--- src-old/test_2.c	1970-01-01 00:00:00.000000000 +0000
+++ src/test_2.c	2023-04-19 02:18:53.359860661 +0000
@@ -0,0 +1,76 @@
+#include "param.h"
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+
+/*Test simple mmap and munmap.
+Test mmap has zeroed the newly mapped anonymous region.*/
+int memcmp(const void *v1, const void *v2, uint n)
+{
+  const uchar *s1, *s2;
+
+  s1 = v1;
+  s2 = v2;
+  while (n-- > 0)
+  {
+    if (*s1 != *s2)
+      return *s1 - *s2;
+
+    s1++, s2++;
+  }
+
+  return 0;
+}
+
+void test()
+{
+  int size = 10;
+  void *zeroes;
+
+  void *res = 0;
+  res = mmap(res, size, 0 /*prot*/, 0 /*flags*/, -1 /*fd*/, 0 /*offset*/);
+  if (res <= 0)
+  {
+    printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+    return;
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : mmap good\n");
+
+  zeroes = malloc(size);
+  memset(zeroes, 0, size);
+
+  int ret = memcmp(res, zeroes, size);
+  printf(1, "XV6_TEST_OUTPUT : Ret of memcmp %d\n", ret);
+
+  if (ret != 0)
+  {
+    printf(1, "XV6_TEST_OUTPUT : mmap() should zero out the  newly mapped anonymous memory region.!!\n");
+    return;
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : mmap() has correctly cleared the newly mapped anonymous memory region\n");
+  printf(1, "given size here size: %d\n", size);
+  int rv = munmap(res, size);
+  printf(1, "given size here size: %d\n", size);
+  printf(1, "size: %d\n", rv);
+  if (rv < 0)
+  {
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    return;
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : munmap good\n");
+  return;
+}
+
+int main(int argc, char *argv[])
+{
+  test();
+  exit();
+}
diff -ruN src-old/test_2.d src/test_2.d
--- src-old/test_2.d	1970-01-01 00:00:00.000000000 +0000
+++ src/test_2.d	2023-04-19 02:18:56.264205320 +0000
@@ -0,0 +1,2 @@
+test_2.o: test_2.c /usr/include/stdc-predef.h param.h types.h stat.h \
+ user.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files src-old/test_2.o and src/test_2.o differ
diff -ruN src-old/test_2.sym src/test_2.sym
--- src-old/test_2.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/test_2.sym	2023-04-19 02:18:56.288208158 +0000
@@ -0,0 +1,63 @@
+00000000 .text
+00000928 .rodata
+00000ab8 .eh_frame
+00000dd4 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test_2.c
+00000000 ulib.c
+00000000 printf.c
+00000530 printint
+00000aa4 digits.1052
+00000000 umalloc.c
+00000dd4 freep
+00000dd8 base
+00000210 strcpy
+000005d0 printf
+00000430 memmove
+0000051a munmap
+000004aa mknod
+00000320 gets
+000004e2 getpid
+00000830 malloc
+000004f2 sleep
+0000050a kmfree
+00000512 mmap
+00000472 pipe
+00000482 write
+000004ba fstat
+00000492 kill
+000004d2 chdir
+0000049a exec
+0000046a wait
+00000080 test
+0000047a read
+000004b2 unlink
+00000020 memcmp
+0000045a fork
+000004ea sbrk
+000004fa uptime
+00000dd4 __bss_start
+000002c0 memset
+00000000 main
+00000240 strcmp
+000004da dup
+000003a0 stat
+00000dd4 _edata
+00000de0 _end
+000004c2 link
+00000502 kmalloc
+00000462 exit
+000003f0 atoi
+00000290 strlen
+000004a2 open
+000002e0 strchr
+000004ca mkdir
+0000048a close
+000007a0 free
Binary files src-old/_test_3 and src/_test_3 differ
diff -ruN src-old/test_3.asm src/test_3.asm
--- src-old/test_3.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/test_3.asm	2023-04-19 02:18:56.368217622 +0000
@@ -0,0 +1,1315 @@
+
+_test_3:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return;
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  test();
+  11:	e8 6a 00 00 00       	call   80 <test>
+  exit();
+  16:	e8 a7 03 00 00       	call   3c2 <exit>
+  1b:	66 90                	xchg   %ax,%ax
+  1d:	66 90                	xchg   %ax,%ax
+  1f:	90                   	nop
+
+00000020 <memcmp>:
+{
+  20:	55                   	push   %ebp
+  21:	89 e5                	mov    %esp,%ebp
+  23:	57                   	push   %edi
+  24:	56                   	push   %esi
+  25:	53                   	push   %ebx
+  26:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  29:	8b 75 08             	mov    0x8(%ebp),%esi
+  2c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  while(n-- > 0)
+  2f:	85 db                	test   %ebx,%ebx
+  31:	74 29                	je     5c <memcmp+0x3c>
+    if(*s1 != *s2)
+  33:	0f b6 16             	movzbl (%esi),%edx
+  36:	0f b6 0f             	movzbl (%edi),%ecx
+  39:	38 d1                	cmp    %dl,%cl
+  3b:	75 2b                	jne    68 <memcmp+0x48>
+  3d:	b8 01 00 00 00       	mov    $0x1,%eax
+  42:	eb 14                	jmp    58 <memcmp+0x38>
+  44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  48:	0f b6 14 06          	movzbl (%esi,%eax,1),%edx
+  4c:	83 c0 01             	add    $0x1,%eax
+  4f:	0f b6 4c 07 ff       	movzbl -0x1(%edi,%eax,1),%ecx
+  54:	38 ca                	cmp    %cl,%dl
+  56:	75 10                	jne    68 <memcmp+0x48>
+  while(n-- > 0)
+  58:	39 d8                	cmp    %ebx,%eax
+  5a:	75 ec                	jne    48 <memcmp+0x28>
+}
+  5c:	5b                   	pop    %ebx
+  return 0;
+  5d:	31 c0                	xor    %eax,%eax
+}
+  5f:	5e                   	pop    %esi
+  60:	5f                   	pop    %edi
+  61:	5d                   	pop    %ebp
+  62:	c3                   	ret    
+  63:	90                   	nop
+  64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     return *s1 - *s2;
+  68:	0f b6 c2             	movzbl %dl,%eax
+}
+  6b:	5b                   	pop    %ebx
+     return *s1 - *s2;
+  6c:	29 c8                	sub    %ecx,%eax
+}
+  6e:	5e                   	pop    %esi
+  6f:	5f                   	pop    %edi
+  70:	5d                   	pop    %ebp
+  71:	c3                   	ret    
+  72:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000080 <test>:
+void test() {
+  80:	55                   	push   %ebp
+  81:	89 e5                	mov    %esp,%ebp
+  83:	53                   	push   %ebx
+  84:	83 ec 0c             	sub    $0xc,%esp
+  char* str = mmap(addr, size,  0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  87:	6a 00                	push   $0x0
+  89:	6a ff                	push   $0xffffffff
+  8b:	6a 00                	push   $0x0
+  8d:	6a 00                	push   $0x0
+  8f:	6a 0a                	push   $0xa
+  91:	68 00 40 00 00       	push   $0x4000
+  96:	e8 d7 03 00 00       	call   472 <mmap>
+  if (str<=0)
+  9b:	83 c4 20             	add    $0x20,%esp
+  9e:	85 c0                	test   %eax,%eax
+  a0:	0f 84 aa 00 00 00    	je     150 <test+0xd0>
+  printf(1, "XV6_TEST_OUTPUT : mmap good\n");
+  a6:	83 ec 08             	sub    $0x8,%esp
+  a9:	89 c3                	mov    %eax,%ebx
+  ab:	68 54 09 00 00       	push   $0x954
+  b0:	6a 01                	push   $0x1
+  b2:	e8 79 04 00 00       	call   530 <printf>
+  printf(1, "XV6_TEST_OUTPUT : Strlen Before modification: %d\n", strlen((char*)str));
+  b7:	89 1c 24             	mov    %ebx,(%esp)
+  ba:	e8 31 01 00 00       	call   1f0 <strlen>
+  bf:	83 c4 0c             	add    $0xc,%esp
+  c2:	50                   	push   %eax
+  c3:	68 a8 08 00 00       	push   $0x8a8
+  c8:	6a 01                	push   $0x1
+  ca:	e8 61 04 00 00       	call   530 <printf>
+  strcpy(str, "012345");
+  cf:	58                   	pop    %eax
+  d0:	5a                   	pop    %edx
+  d1:	68 71 09 00 00       	push   $0x971
+  d6:	53                   	push   %ebx
+  d7:	e8 94 00 00 00       	call   170 <strcpy>
+  printf(1, "XV6_TEST_OUTPUT : str = %s\n", (char*)str);
+  dc:	83 c4 0c             	add    $0xc,%esp
+  df:	53                   	push   %ebx
+  e0:	68 78 09 00 00       	push   $0x978
+  e5:	6a 01                	push   $0x1
+  e7:	e8 44 04 00 00       	call   530 <printf>
+  printf(1, "XV6_TEST_OUTPUT : Strlen After modification: %d\n", strlen((char*)str));
+  ec:	89 1c 24             	mov    %ebx,(%esp)
+  ef:	e8 fc 00 00 00       	call   1f0 <strlen>
+  f4:	83 c4 0c             	add    $0xc,%esp
+  f7:	50                   	push   %eax
+  f8:	68 dc 08 00 00       	push   $0x8dc
+  fd:	6a 01                	push   $0x1
+  ff:	e8 2c 04 00 00       	call   530 <printf>
+  int rv = munmap(str, size);
+ 104:	59                   	pop    %ecx
+ 105:	58                   	pop    %eax
+ 106:	6a 0a                	push   $0xa
+ 108:	53                   	push   %ebx
+ 109:	e8 6c 03 00 00       	call   47a <munmap>
+  if (rv < 0) {
+ 10e:	83 c4 10             	add    $0x10,%esp
+ 111:	85 c0                	test   %eax,%eax
+ 113:	78 1b                	js     130 <test+0xb0>
+  printf(1, "XV6_TEST_OUTPUT : munmap good\n");
+ 115:	83 ec 08             	sub    $0x8,%esp
+ 118:	68 34 09 00 00       	push   $0x934
+ 11d:	6a 01                	push   $0x1
+ 11f:	e8 0c 04 00 00       	call   530 <printf>
+  return;
+ 124:	83 c4 10             	add    $0x10,%esp
+}
+ 127:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 12a:	c9                   	leave  
+ 12b:	c3                   	ret    
+ 12c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+ 130:	83 ec 08             	sub    $0x8,%esp
+ 133:	68 10 09 00 00       	push   $0x910
+ 138:	6a 01                	push   $0x1
+ 13a:	e8 f1 03 00 00       	call   530 <printf>
+    return;
+ 13f:	83 c4 10             	add    $0x10,%esp
+}
+ 142:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 145:	c9                   	leave  
+ 146:	c3                   	ret    
+ 147:	89 f6                	mov    %esi,%esi
+ 149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+ 150:	83 ec 08             	sub    $0x8,%esp
+ 153:	68 88 08 00 00       	push   $0x888
+ 158:	6a 01                	push   $0x1
+ 15a:	e8 d1 03 00 00       	call   530 <printf>
+    return;
+ 15f:	83 c4 10             	add    $0x10,%esp
+}
+ 162:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 165:	c9                   	leave  
+ 166:	c3                   	ret    
+ 167:	66 90                	xchg   %ax,%ax
+ 169:	66 90                	xchg   %ax,%ax
+ 16b:	66 90                	xchg   %ax,%ax
+ 16d:	66 90                	xchg   %ax,%ax
+ 16f:	90                   	nop
+
+00000170 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	53                   	push   %ebx
+ 174:	8b 45 08             	mov    0x8(%ebp),%eax
+ 177:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 17a:	89 c2                	mov    %eax,%edx
+ 17c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 180:	83 c1 01             	add    $0x1,%ecx
+ 183:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 187:	83 c2 01             	add    $0x1,%edx
+ 18a:	84 db                	test   %bl,%bl
+ 18c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 18f:	75 ef                	jne    180 <strcpy+0x10>
+    ;
+  return os;
+}
+ 191:	5b                   	pop    %ebx
+ 192:	5d                   	pop    %ebp
+ 193:	c3                   	ret    
+ 194:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 19a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000001a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1a0:	55                   	push   %ebp
+ 1a1:	89 e5                	mov    %esp,%ebp
+ 1a3:	53                   	push   %ebx
+ 1a4:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1a7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 1aa:	0f b6 02             	movzbl (%edx),%eax
+ 1ad:	0f b6 19             	movzbl (%ecx),%ebx
+ 1b0:	84 c0                	test   %al,%al
+ 1b2:	75 1c                	jne    1d0 <strcmp+0x30>
+ 1b4:	eb 2a                	jmp    1e0 <strcmp+0x40>
+ 1b6:	8d 76 00             	lea    0x0(%esi),%esi
+ 1b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 1c0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1c3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 1c6:	83 c1 01             	add    $0x1,%ecx
+ 1c9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 1cc:	84 c0                	test   %al,%al
+ 1ce:	74 10                	je     1e0 <strcmp+0x40>
+ 1d0:	38 d8                	cmp    %bl,%al
+ 1d2:	74 ec                	je     1c0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1d4:	29 d8                	sub    %ebx,%eax
+}
+ 1d6:	5b                   	pop    %ebx
+ 1d7:	5d                   	pop    %ebp
+ 1d8:	c3                   	ret    
+ 1d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1e0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1e2:	29 d8                	sub    %ebx,%eax
+}
+ 1e4:	5b                   	pop    %ebx
+ 1e5:	5d                   	pop    %ebp
+ 1e6:	c3                   	ret    
+ 1e7:	89 f6                	mov    %esi,%esi
+ 1e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1f6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 1f9:	74 15                	je     210 <strlen+0x20>
+ 1fb:	31 d2                	xor    %edx,%edx
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 200:	83 c2 01             	add    $0x1,%edx
+ 203:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 207:	89 d0                	mov    %edx,%eax
+ 209:	75 f5                	jne    200 <strlen+0x10>
+    ;
+  return n;
+}
+ 20b:	5d                   	pop    %ebp
+ 20c:	c3                   	ret    
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 210:	31 c0                	xor    %eax,%eax
+}
+ 212:	5d                   	pop    %ebp
+ 213:	c3                   	ret    
+ 214:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 21a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000220 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	57                   	push   %edi
+ 224:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 227:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 22a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 22d:	89 d7                	mov    %edx,%edi
+ 22f:	fc                   	cld    
+ 230:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 232:	89 d0                	mov    %edx,%eax
+ 234:	5f                   	pop    %edi
+ 235:	5d                   	pop    %ebp
+ 236:	c3                   	ret    
+ 237:	89 f6                	mov    %esi,%esi
+ 239:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000240 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	53                   	push   %ebx
+ 244:	8b 45 08             	mov    0x8(%ebp),%eax
+ 247:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 24a:	0f b6 10             	movzbl (%eax),%edx
+ 24d:	84 d2                	test   %dl,%dl
+ 24f:	74 1d                	je     26e <strchr+0x2e>
+    if(*s == c)
+ 251:	38 d3                	cmp    %dl,%bl
+ 253:	89 d9                	mov    %ebx,%ecx
+ 255:	75 0d                	jne    264 <strchr+0x24>
+ 257:	eb 17                	jmp    270 <strchr+0x30>
+ 259:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 260:	38 ca                	cmp    %cl,%dl
+ 262:	74 0c                	je     270 <strchr+0x30>
+  for(; *s; s++)
+ 264:	83 c0 01             	add    $0x1,%eax
+ 267:	0f b6 10             	movzbl (%eax),%edx
+ 26a:	84 d2                	test   %dl,%dl
+ 26c:	75 f2                	jne    260 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 26e:	31 c0                	xor    %eax,%eax
+}
+ 270:	5b                   	pop    %ebx
+ 271:	5d                   	pop    %ebp
+ 272:	c3                   	ret    
+ 273:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 279:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000280 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	57                   	push   %edi
+ 284:	56                   	push   %esi
+ 285:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 286:	31 f6                	xor    %esi,%esi
+ 288:	89 f3                	mov    %esi,%ebx
+{
+ 28a:	83 ec 1c             	sub    $0x1c,%esp
+ 28d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 290:	eb 2f                	jmp    2c1 <gets+0x41>
+ 292:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 298:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 29b:	83 ec 04             	sub    $0x4,%esp
+ 29e:	6a 01                	push   $0x1
+ 2a0:	50                   	push   %eax
+ 2a1:	6a 00                	push   $0x0
+ 2a3:	e8 32 01 00 00       	call   3da <read>
+    if(cc < 1)
+ 2a8:	83 c4 10             	add    $0x10,%esp
+ 2ab:	85 c0                	test   %eax,%eax
+ 2ad:	7e 1c                	jle    2cb <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 2af:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2b3:	83 c7 01             	add    $0x1,%edi
+ 2b6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2b9:	3c 0a                	cmp    $0xa,%al
+ 2bb:	74 23                	je     2e0 <gets+0x60>
+ 2bd:	3c 0d                	cmp    $0xd,%al
+ 2bf:	74 1f                	je     2e0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 2c1:	83 c3 01             	add    $0x1,%ebx
+ 2c4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2c7:	89 fe                	mov    %edi,%esi
+ 2c9:	7c cd                	jl     298 <gets+0x18>
+ 2cb:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2d0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d6:	5b                   	pop    %ebx
+ 2d7:	5e                   	pop    %esi
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+ 2db:	90                   	nop
+ 2dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2e0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2e3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2e6:	01 de                	add    %ebx,%esi
+ 2e8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2ea:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2ed:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2f0:	5b                   	pop    %ebx
+ 2f1:	5e                   	pop    %esi
+ 2f2:	5f                   	pop    %edi
+ 2f3:	5d                   	pop    %ebp
+ 2f4:	c3                   	ret    
+ 2f5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000300 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 300:	55                   	push   %ebp
+ 301:	89 e5                	mov    %esp,%ebp
+ 303:	56                   	push   %esi
+ 304:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 305:	83 ec 08             	sub    $0x8,%esp
+ 308:	6a 00                	push   $0x0
+ 30a:	ff 75 08             	pushl  0x8(%ebp)
+ 30d:	e8 f0 00 00 00       	call   402 <open>
+  if(fd < 0)
+ 312:	83 c4 10             	add    $0x10,%esp
+ 315:	85 c0                	test   %eax,%eax
+ 317:	78 27                	js     340 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 319:	83 ec 08             	sub    $0x8,%esp
+ 31c:	ff 75 0c             	pushl  0xc(%ebp)
+ 31f:	89 c3                	mov    %eax,%ebx
+ 321:	50                   	push   %eax
+ 322:	e8 f3 00 00 00       	call   41a <fstat>
+  close(fd);
+ 327:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 32a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 32c:	e8 b9 00 00 00       	call   3ea <close>
+  return r;
+ 331:	83 c4 10             	add    $0x10,%esp
+}
+ 334:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 337:	89 f0                	mov    %esi,%eax
+ 339:	5b                   	pop    %ebx
+ 33a:	5e                   	pop    %esi
+ 33b:	5d                   	pop    %ebp
+ 33c:	c3                   	ret    
+ 33d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 340:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 345:	eb ed                	jmp    334 <stat+0x34>
+ 347:	89 f6                	mov    %esi,%esi
+ 349:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000350 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 350:	55                   	push   %ebp
+ 351:	89 e5                	mov    %esp,%ebp
+ 353:	53                   	push   %ebx
+ 354:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 357:	0f be 11             	movsbl (%ecx),%edx
+ 35a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 35d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 35f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 364:	77 1f                	ja     385 <atoi+0x35>
+ 366:	8d 76 00             	lea    0x0(%esi),%esi
+ 369:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 370:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 373:	83 c1 01             	add    $0x1,%ecx
+ 376:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 37a:	0f be 11             	movsbl (%ecx),%edx
+ 37d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 380:	80 fb 09             	cmp    $0x9,%bl
+ 383:	76 eb                	jbe    370 <atoi+0x20>
+  return n;
+}
+ 385:	5b                   	pop    %ebx
+ 386:	5d                   	pop    %ebp
+ 387:	c3                   	ret    
+ 388:	90                   	nop
+ 389:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000390 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 390:	55                   	push   %ebp
+ 391:	89 e5                	mov    %esp,%ebp
+ 393:	56                   	push   %esi
+ 394:	53                   	push   %ebx
+ 395:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 398:	8b 45 08             	mov    0x8(%ebp),%eax
+ 39b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 39e:	85 db                	test   %ebx,%ebx
+ 3a0:	7e 14                	jle    3b6 <memmove+0x26>
+ 3a2:	31 d2                	xor    %edx,%edx
+ 3a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 3a8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 3ac:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 3af:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 3b2:	39 d3                	cmp    %edx,%ebx
+ 3b4:	75 f2                	jne    3a8 <memmove+0x18>
+  return vdst;
+}
+ 3b6:	5b                   	pop    %ebx
+ 3b7:	5e                   	pop    %esi
+ 3b8:	5d                   	pop    %ebp
+ 3b9:	c3                   	ret    
+
+000003ba <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3ba:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <exit>:
+SYSCALL(exit)
+ 3c2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <wait>:
+SYSCALL(wait)
+ 3ca:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <pipe>:
+SYSCALL(pipe)
+ 3d2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <read>:
+SYSCALL(read)
+ 3da:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <write>:
+SYSCALL(write)
+ 3e2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <close>:
+SYSCALL(close)
+ 3ea:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <kill>:
+SYSCALL(kill)
+ 3f2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <exec>:
+SYSCALL(exec)
+ 3fa:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <open>:
+SYSCALL(open)
+ 402:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <mknod>:
+SYSCALL(mknod)
+ 40a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <unlink>:
+SYSCALL(unlink)
+ 412:	b8 12 00 00 00       	mov    $0x12,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+
+0000041a <fstat>:
+SYSCALL(fstat)
+ 41a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+
+00000422 <link>:
+SYSCALL(link)
+ 422:	b8 13 00 00 00       	mov    $0x13,%eax
+ 427:	cd 40                	int    $0x40
+ 429:	c3                   	ret    
+
+0000042a <mkdir>:
+SYSCALL(mkdir)
+ 42a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 42f:	cd 40                	int    $0x40
+ 431:	c3                   	ret    
+
+00000432 <chdir>:
+SYSCALL(chdir)
+ 432:	b8 09 00 00 00       	mov    $0x9,%eax
+ 437:	cd 40                	int    $0x40
+ 439:	c3                   	ret    
+
+0000043a <dup>:
+SYSCALL(dup)
+ 43a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 43f:	cd 40                	int    $0x40
+ 441:	c3                   	ret    
+
+00000442 <getpid>:
+SYSCALL(getpid)
+ 442:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 447:	cd 40                	int    $0x40
+ 449:	c3                   	ret    
+
+0000044a <sbrk>:
+SYSCALL(sbrk)
+ 44a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 44f:	cd 40                	int    $0x40
+ 451:	c3                   	ret    
+
+00000452 <sleep>:
+SYSCALL(sleep)
+ 452:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 457:	cd 40                	int    $0x40
+ 459:	c3                   	ret    
+
+0000045a <uptime>:
+SYSCALL(uptime)
+ 45a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 45f:	cd 40                	int    $0x40
+ 461:	c3                   	ret    
+
+00000462 <kmalloc>:
+SYSCALL(kmalloc)
+ 462:	b8 16 00 00 00       	mov    $0x16,%eax
+ 467:	cd 40                	int    $0x40
+ 469:	c3                   	ret    
+
+0000046a <kmfree>:
+SYSCALL(kmfree) 
+ 46a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 46f:	cd 40                	int    $0x40
+ 471:	c3                   	ret    
+
+00000472 <mmap>:
+SYSCALL(mmap)
+ 472:	b8 18 00 00 00       	mov    $0x18,%eax
+ 477:	cd 40                	int    $0x40
+ 479:	c3                   	ret    
+
+0000047a <munmap>:
+ 47a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 47f:	cd 40                	int    $0x40
+ 481:	c3                   	ret    
+ 482:	66 90                	xchg   %ax,%ax
+ 484:	66 90                	xchg   %ax,%ax
+ 486:	66 90                	xchg   %ax,%ax
+ 488:	66 90                	xchg   %ax,%ax
+ 48a:	66 90                	xchg   %ax,%ax
+ 48c:	66 90                	xchg   %ax,%ax
+ 48e:	66 90                	xchg   %ax,%ax
+
+00000490 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 490:	55                   	push   %ebp
+ 491:	89 e5                	mov    %esp,%ebp
+ 493:	57                   	push   %edi
+ 494:	56                   	push   %esi
+ 495:	53                   	push   %ebx
+ 496:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 499:	85 d2                	test   %edx,%edx
+{
+ 49b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 49e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 4a0:	79 76                	jns    518 <printint+0x88>
+ 4a2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 4a6:	74 70                	je     518 <printint+0x88>
+    x = -xx;
+ 4a8:	f7 d8                	neg    %eax
+    neg = 1;
+ 4aa:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 4b1:	31 f6                	xor    %esi,%esi
+ 4b3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 4b6:	eb 0a                	jmp    4c2 <printint+0x32>
+ 4b8:	90                   	nop
+ 4b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4c0:	89 fe                	mov    %edi,%esi
+ 4c2:	31 d2                	xor    %edx,%edx
+ 4c4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 4c7:	f7 f1                	div    %ecx
+ 4c9:	0f b6 92 9c 09 00 00 	movzbl 0x99c(%edx),%edx
+  }while((x /= base) != 0);
+ 4d0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 4d2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 4d5:	75 e9                	jne    4c0 <printint+0x30>
+  if(neg)
+ 4d7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 4da:	85 c0                	test   %eax,%eax
+ 4dc:	74 08                	je     4e6 <printint+0x56>
+    buf[i++] = '-';
+ 4de:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 4e3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 4e6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 4ea:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 4f0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 4f3:	83 ec 04             	sub    $0x4,%esp
+ 4f6:	83 ee 01             	sub    $0x1,%esi
+ 4f9:	6a 01                	push   $0x1
+ 4fb:	53                   	push   %ebx
+ 4fc:	57                   	push   %edi
+ 4fd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 500:	e8 dd fe ff ff       	call   3e2 <write>
+
+  while(--i >= 0)
+ 505:	83 c4 10             	add    $0x10,%esp
+ 508:	39 de                	cmp    %ebx,%esi
+ 50a:	75 e4                	jne    4f0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 50c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 50f:	5b                   	pop    %ebx
+ 510:	5e                   	pop    %esi
+ 511:	5f                   	pop    %edi
+ 512:	5d                   	pop    %ebp
+ 513:	c3                   	ret    
+ 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 518:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 51f:	eb 90                	jmp    4b1 <printint+0x21>
+ 521:	eb 0d                	jmp    530 <printf>
+ 523:	90                   	nop
+ 524:	90                   	nop
+ 525:	90                   	nop
+ 526:	90                   	nop
+ 527:	90                   	nop
+ 528:	90                   	nop
+ 529:	90                   	nop
+ 52a:	90                   	nop
+ 52b:	90                   	nop
+ 52c:	90                   	nop
+ 52d:	90                   	nop
+ 52e:	90                   	nop
+ 52f:	90                   	nop
+
+00000530 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 530:	55                   	push   %ebp
+ 531:	89 e5                	mov    %esp,%ebp
+ 533:	57                   	push   %edi
+ 534:	56                   	push   %esi
+ 535:	53                   	push   %ebx
+ 536:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 539:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 53c:	0f b6 1e             	movzbl (%esi),%ebx
+ 53f:	84 db                	test   %bl,%bl
+ 541:	0f 84 b3 00 00 00    	je     5fa <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 547:	8d 45 10             	lea    0x10(%ebp),%eax
+ 54a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 54d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 54f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 552:	eb 2f                	jmp    583 <printf+0x53>
+ 554:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 558:	83 f8 25             	cmp    $0x25,%eax
+ 55b:	0f 84 a7 00 00 00    	je     608 <printf+0xd8>
+  write(fd, &c, 1);
+ 561:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 564:	83 ec 04             	sub    $0x4,%esp
+ 567:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 56a:	6a 01                	push   $0x1
+ 56c:	50                   	push   %eax
+ 56d:	ff 75 08             	pushl  0x8(%ebp)
+ 570:	e8 6d fe ff ff       	call   3e2 <write>
+ 575:	83 c4 10             	add    $0x10,%esp
+ 578:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 57b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 57f:	84 db                	test   %bl,%bl
+ 581:	74 77                	je     5fa <printf+0xca>
+    if(state == 0){
+ 583:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 585:	0f be cb             	movsbl %bl,%ecx
+ 588:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 58b:	74 cb                	je     558 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 58d:	83 ff 25             	cmp    $0x25,%edi
+ 590:	75 e6                	jne    578 <printf+0x48>
+      if(c == 'd'){
+ 592:	83 f8 64             	cmp    $0x64,%eax
+ 595:	0f 84 05 01 00 00    	je     6a0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 59b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 5a1:	83 f9 70             	cmp    $0x70,%ecx
+ 5a4:	74 72                	je     618 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 5a6:	83 f8 73             	cmp    $0x73,%eax
+ 5a9:	0f 84 99 00 00 00    	je     648 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 5af:	83 f8 63             	cmp    $0x63,%eax
+ 5b2:	0f 84 08 01 00 00    	je     6c0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 5b8:	83 f8 25             	cmp    $0x25,%eax
+ 5bb:	0f 84 ef 00 00 00    	je     6b0 <printf+0x180>
+  write(fd, &c, 1);
+ 5c1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 5c4:	83 ec 04             	sub    $0x4,%esp
+ 5c7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5cb:	6a 01                	push   $0x1
+ 5cd:	50                   	push   %eax
+ 5ce:	ff 75 08             	pushl  0x8(%ebp)
+ 5d1:	e8 0c fe ff ff       	call   3e2 <write>
+ 5d6:	83 c4 0c             	add    $0xc,%esp
+ 5d9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 5dc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 5df:	6a 01                	push   $0x1
+ 5e1:	50                   	push   %eax
+ 5e2:	ff 75 08             	pushl  0x8(%ebp)
+ 5e5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5e8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 5ea:	e8 f3 fd ff ff       	call   3e2 <write>
+  for(i = 0; fmt[i]; i++){
+ 5ef:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 5f3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 5f6:	84 db                	test   %bl,%bl
+ 5f8:	75 89                	jne    583 <printf+0x53>
+    }
+  }
+}
+ 5fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5fd:	5b                   	pop    %ebx
+ 5fe:	5e                   	pop    %esi
+ 5ff:	5f                   	pop    %edi
+ 600:	5d                   	pop    %ebp
+ 601:	c3                   	ret    
+ 602:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 608:	bf 25 00 00 00       	mov    $0x25,%edi
+ 60d:	e9 66 ff ff ff       	jmp    578 <printf+0x48>
+ 612:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 618:	83 ec 0c             	sub    $0xc,%esp
+ 61b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 620:	6a 00                	push   $0x0
+ 622:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 625:	8b 45 08             	mov    0x8(%ebp),%eax
+ 628:	8b 17                	mov    (%edi),%edx
+ 62a:	e8 61 fe ff ff       	call   490 <printint>
+        ap++;
+ 62f:	89 f8                	mov    %edi,%eax
+ 631:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 634:	31 ff                	xor    %edi,%edi
+        ap++;
+ 636:	83 c0 04             	add    $0x4,%eax
+ 639:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 63c:	e9 37 ff ff ff       	jmp    578 <printf+0x48>
+ 641:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 648:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 64b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 64d:	83 c0 04             	add    $0x4,%eax
+ 650:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 653:	85 c9                	test   %ecx,%ecx
+ 655:	0f 84 8e 00 00 00    	je     6e9 <printf+0x1b9>
+        while(*s != 0){
+ 65b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 65e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 660:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 662:	84 c0                	test   %al,%al
+ 664:	0f 84 0e ff ff ff    	je     578 <printf+0x48>
+ 66a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 66d:	89 de                	mov    %ebx,%esi
+ 66f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 672:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 675:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 678:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 67b:	83 c6 01             	add    $0x1,%esi
+ 67e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 681:	6a 01                	push   $0x1
+ 683:	57                   	push   %edi
+ 684:	53                   	push   %ebx
+ 685:	e8 58 fd ff ff       	call   3e2 <write>
+        while(*s != 0){
+ 68a:	0f b6 06             	movzbl (%esi),%eax
+ 68d:	83 c4 10             	add    $0x10,%esp
+ 690:	84 c0                	test   %al,%al
+ 692:	75 e4                	jne    678 <printf+0x148>
+ 694:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 697:	31 ff                	xor    %edi,%edi
+ 699:	e9 da fe ff ff       	jmp    578 <printf+0x48>
+ 69e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 6a0:	83 ec 0c             	sub    $0xc,%esp
+ 6a3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 6a8:	6a 01                	push   $0x1
+ 6aa:	e9 73 ff ff ff       	jmp    622 <printf+0xf2>
+ 6af:	90                   	nop
+  write(fd, &c, 1);
+ 6b0:	83 ec 04             	sub    $0x4,%esp
+ 6b3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 6b6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 6b9:	6a 01                	push   $0x1
+ 6bb:	e9 21 ff ff ff       	jmp    5e1 <printf+0xb1>
+        putc(fd, *ap);
+ 6c0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 6c3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 6c6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 6c8:	6a 01                	push   $0x1
+        ap++;
+ 6ca:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 6cd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 6d0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 6d3:	50                   	push   %eax
+ 6d4:	ff 75 08             	pushl  0x8(%ebp)
+ 6d7:	e8 06 fd ff ff       	call   3e2 <write>
+        ap++;
+ 6dc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 6df:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6e2:	31 ff                	xor    %edi,%edi
+ 6e4:	e9 8f fe ff ff       	jmp    578 <printf+0x48>
+          s = "(null)";
+ 6e9:	bb 94 09 00 00       	mov    $0x994,%ebx
+        while(*s != 0){
+ 6ee:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6f3:	e9 72 ff ff ff       	jmp    66a <printf+0x13a>
+ 6f8:	66 90                	xchg   %ax,%ax
+ 6fa:	66 90                	xchg   %ax,%ax
+ 6fc:	66 90                	xchg   %ax,%ax
+ 6fe:	66 90                	xchg   %ax,%ax
+
+00000700 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 700:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 701:	a1 b4 0c 00 00       	mov    0xcb4,%eax
+{
+ 706:	89 e5                	mov    %esp,%ebp
+ 708:	57                   	push   %edi
+ 709:	56                   	push   %esi
+ 70a:	53                   	push   %ebx
+ 70b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 70e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 718:	39 c8                	cmp    %ecx,%eax
+ 71a:	8b 10                	mov    (%eax),%edx
+ 71c:	73 32                	jae    750 <free+0x50>
+ 71e:	39 d1                	cmp    %edx,%ecx
+ 720:	72 04                	jb     726 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 722:	39 d0                	cmp    %edx,%eax
+ 724:	72 32                	jb     758 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 726:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 729:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 72c:	39 fa                	cmp    %edi,%edx
+ 72e:	74 30                	je     760 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 730:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 733:	8b 50 04             	mov    0x4(%eax),%edx
+ 736:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 739:	39 f1                	cmp    %esi,%ecx
+ 73b:	74 3a                	je     777 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 73d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 73f:	a3 b4 0c 00 00       	mov    %eax,0xcb4
+}
+ 744:	5b                   	pop    %ebx
+ 745:	5e                   	pop    %esi
+ 746:	5f                   	pop    %edi
+ 747:	5d                   	pop    %ebp
+ 748:	c3                   	ret    
+ 749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 750:	39 d0                	cmp    %edx,%eax
+ 752:	72 04                	jb     758 <free+0x58>
+ 754:	39 d1                	cmp    %edx,%ecx
+ 756:	72 ce                	jb     726 <free+0x26>
+{
+ 758:	89 d0                	mov    %edx,%eax
+ 75a:	eb bc                	jmp    718 <free+0x18>
+ 75c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 760:	03 72 04             	add    0x4(%edx),%esi
+ 763:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 766:	8b 10                	mov    (%eax),%edx
+ 768:	8b 12                	mov    (%edx),%edx
+ 76a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 76d:	8b 50 04             	mov    0x4(%eax),%edx
+ 770:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 773:	39 f1                	cmp    %esi,%ecx
+ 775:	75 c6                	jne    73d <free+0x3d>
+    p->s.size += bp->s.size;
+ 777:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 77a:	a3 b4 0c 00 00       	mov    %eax,0xcb4
+    p->s.size += bp->s.size;
+ 77f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 782:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 785:	89 10                	mov    %edx,(%eax)
+}
+ 787:	5b                   	pop    %ebx
+ 788:	5e                   	pop    %esi
+ 789:	5f                   	pop    %edi
+ 78a:	5d                   	pop    %ebp
+ 78b:	c3                   	ret    
+ 78c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000790 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 790:	55                   	push   %ebp
+ 791:	89 e5                	mov    %esp,%ebp
+ 793:	57                   	push   %edi
+ 794:	56                   	push   %esi
+ 795:	53                   	push   %ebx
+ 796:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 799:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 79c:	8b 15 b4 0c 00 00    	mov    0xcb4,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7a2:	8d 78 07             	lea    0x7(%eax),%edi
+ 7a5:	c1 ef 03             	shr    $0x3,%edi
+ 7a8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 7ab:	85 d2                	test   %edx,%edx
+ 7ad:	0f 84 9d 00 00 00    	je     850 <malloc+0xc0>
+ 7b3:	8b 02                	mov    (%edx),%eax
+ 7b5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 7b8:	39 cf                	cmp    %ecx,%edi
+ 7ba:	76 6c                	jbe    828 <malloc+0x98>
+ 7bc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 7c2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7c7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 7ca:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 7d1:	eb 0e                	jmp    7e1 <malloc+0x51>
+ 7d3:	90                   	nop
+ 7d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7d8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 7da:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7dd:	39 f9                	cmp    %edi,%ecx
+ 7df:	73 47                	jae    828 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7e1:	39 05 b4 0c 00 00    	cmp    %eax,0xcb4
+ 7e7:	89 c2                	mov    %eax,%edx
+ 7e9:	75 ed                	jne    7d8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 7eb:	83 ec 0c             	sub    $0xc,%esp
+ 7ee:	56                   	push   %esi
+ 7ef:	e8 56 fc ff ff       	call   44a <sbrk>
+  if(p == (char*)-1)
+ 7f4:	83 c4 10             	add    $0x10,%esp
+ 7f7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7fa:	74 1c                	je     818 <malloc+0x88>
+  hp->s.size = nu;
+ 7fc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7ff:	83 ec 0c             	sub    $0xc,%esp
+ 802:	83 c0 08             	add    $0x8,%eax
+ 805:	50                   	push   %eax
+ 806:	e8 f5 fe ff ff       	call   700 <free>
+  return freep;
+ 80b:	8b 15 b4 0c 00 00    	mov    0xcb4,%edx
+      if((p = morecore(nunits)) == 0)
+ 811:	83 c4 10             	add    $0x10,%esp
+ 814:	85 d2                	test   %edx,%edx
+ 816:	75 c0                	jne    7d8 <malloc+0x48>
+        return 0;
+  }
+}
+ 818:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 81b:	31 c0                	xor    %eax,%eax
+}
+ 81d:	5b                   	pop    %ebx
+ 81e:	5e                   	pop    %esi
+ 81f:	5f                   	pop    %edi
+ 820:	5d                   	pop    %ebp
+ 821:	c3                   	ret    
+ 822:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 828:	39 cf                	cmp    %ecx,%edi
+ 82a:	74 54                	je     880 <malloc+0xf0>
+        p->s.size -= nunits;
+ 82c:	29 f9                	sub    %edi,%ecx
+ 82e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 831:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 834:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 837:	89 15 b4 0c 00 00    	mov    %edx,0xcb4
+}
+ 83d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 840:	83 c0 08             	add    $0x8,%eax
+}
+ 843:	5b                   	pop    %ebx
+ 844:	5e                   	pop    %esi
+ 845:	5f                   	pop    %edi
+ 846:	5d                   	pop    %ebp
+ 847:	c3                   	ret    
+ 848:	90                   	nop
+ 849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 850:	c7 05 b4 0c 00 00 b8 	movl   $0xcb8,0xcb4
+ 857:	0c 00 00 
+ 85a:	c7 05 b8 0c 00 00 b8 	movl   $0xcb8,0xcb8
+ 861:	0c 00 00 
+    base.s.size = 0;
+ 864:	b8 b8 0c 00 00       	mov    $0xcb8,%eax
+ 869:	c7 05 bc 0c 00 00 00 	movl   $0x0,0xcbc
+ 870:	00 00 00 
+ 873:	e9 44 ff ff ff       	jmp    7bc <malloc+0x2c>
+ 878:	90                   	nop
+ 879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 880:	8b 08                	mov    (%eax),%ecx
+ 882:	89 0a                	mov    %ecx,(%edx)
+ 884:	eb b1                	jmp    837 <malloc+0xa7>
diff -ruN src-old/test_3.c src/test_3.c
--- src-old/test_3.c	1970-01-01 00:00:00.000000000 +0000
+++ src/test_3.c	2023-04-19 02:18:53.359860661 +0000
@@ -0,0 +1,66 @@
+#include "param.h"
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+
+/* Test modification to memory mapped by mmap.*/
+int
+memcmp(const void *v1, const void *v2, uint n)
+{
+  const uchar *s1, *s2;
+  
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0)
+  {
+    if(*s1 != *s2)
+     return *s1 - *s2;
+
+    s1++, s2++;
+  }
+
+  return 0;
+}
+
+void test() {
+  int size =  10;  /* we need 10 bytes */
+ 
+  char *addr = (char*)0x4000;
+  char* str = mmap(addr, size,  0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+
+  if (str<=0)
+  {
+    printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+    return;
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : mmap good\n");
+
+  printf(1, "XV6_TEST_OUTPUT : Strlen Before modification: %d\n", strlen((char*)str));
+
+  strcpy(str, "012345");
+
+  printf(1, "XV6_TEST_OUTPUT : str = %s\n", (char*)str);
+  printf(1, "XV6_TEST_OUTPUT : Strlen After modification: %d\n", strlen((char*)str));
+
+  int rv = munmap(str, size);
+  if (rv < 0) {
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    return;
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : munmap good\n");
+  return;
+}
+
+int
+main(int argc, char *argv[])
+{
+  test();
+  exit();
+}
diff -ruN src-old/test_3.d src/test_3.d
--- src-old/test_3.d	1970-01-01 00:00:00.000000000 +0000
+++ src/test_3.d	2023-04-19 02:18:56.340214310 +0000
@@ -0,0 +1,2 @@
+test_3.o: test_3.c /usr/include/stdc-predef.h param.h types.h stat.h \
+ user.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files src-old/test_3.o and src/test_3.o differ
diff -ruN src-old/test_3.sym src/test_3.sym
--- src-old/test_3.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/test_3.sym	2023-04-19 02:18:56.376218568 +0000
@@ -0,0 +1,63 @@
+00000000 .text
+00000888 .rodata
+000009b0 .eh_frame
+00000cb4 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test_3.c
+00000000 ulib.c
+00000000 printf.c
+00000490 printint
+0000099c digits.1052
+00000000 umalloc.c
+00000cb4 freep
+00000cb8 base
+00000170 strcpy
+00000530 printf
+00000390 memmove
+0000047a munmap
+0000040a mknod
+00000280 gets
+00000442 getpid
+00000790 malloc
+00000452 sleep
+0000046a kmfree
+00000472 mmap
+000003d2 pipe
+000003e2 write
+0000041a fstat
+000003f2 kill
+00000432 chdir
+000003fa exec
+000003ca wait
+00000080 test
+000003da read
+00000412 unlink
+00000020 memcmp
+000003ba fork
+0000044a sbrk
+0000045a uptime
+00000cb4 __bss_start
+00000220 memset
+00000000 main
+000001a0 strcmp
+0000043a dup
+00000300 stat
+00000cb4 _edata
+00000cc0 _end
+00000422 link
+00000462 kmalloc
+000003c2 exit
+00000350 atoi
+000001f0 strlen
+00000402 open
+00000240 strchr
+0000042a mkdir
+000003ea close
+00000700 free
Binary files src-old/_test_4 and src/_test_4 differ
diff -ruN src-old/test_4.asm src/test_4.asm
--- src-old/test_4.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/test_4.asm	2023-04-19 02:18:56.428224719 +0000
@@ -0,0 +1,1236 @@
+
+_test_4:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return;
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  int i;
+
+  for(i=1;i<=2;i++)
+  {
+    test();
+  11:	e8 0a 00 00 00       	call   20 <test>
+  16:	e8 05 00 00 00       	call   20 <test>
+  }
+  
+  exit();
+  1b:	e8 f2 02 00 00       	call   312 <exit>
+
+00000020 <test>:
+void test() {
+  20:	55                   	push   %ebp
+  21:	89 e5                	mov    %esp,%ebp
+  23:	53                   	push   %ebx
+  24:	83 ec 0c             	sub    $0xc,%esp
+  char* str = mmap(addr, size,  0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  27:	6a 00                	push   $0x0
+  29:	6a ff                	push   $0xffffffff
+  2b:	6a 00                	push   $0x0
+  2d:	6a 00                	push   $0x0
+  2f:	6a 0a                	push   $0xa
+  31:	68 00 40 00 00       	push   $0x4000
+  36:	e8 87 03 00 00       	call   3c2 <mmap>
+  if (str<=0)
+  3b:	83 c4 20             	add    $0x20,%esp
+  3e:	85 c0                	test   %eax,%eax
+  40:	74 3e                	je     80 <test+0x60>
+  strcpy(str, "012345");
+  42:	83 ec 08             	sub    $0x8,%esp
+  45:	89 c3                	mov    %eax,%ebx
+  47:	68 1c 08 00 00       	push   $0x81c
+  4c:	50                   	push   %eax
+  4d:	e8 6e 00 00 00       	call   c0 <strcpy>
+  printf(1, "XV6_TEST_OUTPUT : str = %s\n", (char*)str);
+  52:	83 c4 0c             	add    $0xc,%esp
+  55:	53                   	push   %ebx
+  56:	68 23 08 00 00       	push   $0x823
+  5b:	6a 01                	push   $0x1
+  5d:	e8 1e 04 00 00       	call   480 <printf>
+  int rv = munmap(str, size);
+  62:	58                   	pop    %eax
+  63:	5a                   	pop    %edx
+  64:	6a 0a                	push   $0xa
+  66:	53                   	push   %ebx
+  67:	e8 5e 03 00 00       	call   3ca <munmap>
+  if (rv < 0) {
+  6c:	83 c4 10             	add    $0x10,%esp
+  6f:	85 c0                	test   %eax,%eax
+  71:	78 2d                	js     a0 <test+0x80>
+}
+  73:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  76:	c9                   	leave  
+  77:	c3                   	ret    
+  78:	90                   	nop
+  79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+  80:	83 ec 08             	sub    $0x8,%esp
+  83:	68 d8 07 00 00       	push   $0x7d8
+  88:	6a 01                	push   $0x1
+  8a:	e8 f1 03 00 00       	call   480 <printf>
+    return;
+  8f:	83 c4 10             	add    $0x10,%esp
+}
+  92:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  95:	c9                   	leave  
+  96:	c3                   	ret    
+  97:	89 f6                	mov    %esi,%esi
+  99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+  a0:	83 ec 08             	sub    $0x8,%esp
+  a3:	68 f8 07 00 00       	push   $0x7f8
+  a8:	6a 01                	push   $0x1
+  aa:	e8 d1 03 00 00       	call   480 <printf>
+  af:	83 c4 10             	add    $0x10,%esp
+}
+  b2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  b5:	c9                   	leave  
+  b6:	c3                   	ret    
+  b7:	66 90                	xchg   %ax,%ax
+  b9:	66 90                	xchg   %ax,%ax
+  bb:	66 90                	xchg   %ax,%ax
+  bd:	66 90                	xchg   %ax,%ax
+  bf:	90                   	nop
+
+000000c0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  c0:	55                   	push   %ebp
+  c1:	89 e5                	mov    %esp,%ebp
+  c3:	53                   	push   %ebx
+  c4:	8b 45 08             	mov    0x8(%ebp),%eax
+  c7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  ca:	89 c2                	mov    %eax,%edx
+  cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  d0:	83 c1 01             	add    $0x1,%ecx
+  d3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  d7:	83 c2 01             	add    $0x1,%edx
+  da:	84 db                	test   %bl,%bl
+  dc:	88 5a ff             	mov    %bl,-0x1(%edx)
+  df:	75 ef                	jne    d0 <strcpy+0x10>
+    ;
+  return os;
+}
+  e1:	5b                   	pop    %ebx
+  e2:	5d                   	pop    %ebp
+  e3:	c3                   	ret    
+  e4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  ea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000f0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	53                   	push   %ebx
+  f4:	8b 55 08             	mov    0x8(%ebp),%edx
+  f7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  fa:	0f b6 02             	movzbl (%edx),%eax
+  fd:	0f b6 19             	movzbl (%ecx),%ebx
+ 100:	84 c0                	test   %al,%al
+ 102:	75 1c                	jne    120 <strcmp+0x30>
+ 104:	eb 2a                	jmp    130 <strcmp+0x40>
+ 106:	8d 76 00             	lea    0x0(%esi),%esi
+ 109:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 110:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 113:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 116:	83 c1 01             	add    $0x1,%ecx
+ 119:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 11c:	84 c0                	test   %al,%al
+ 11e:	74 10                	je     130 <strcmp+0x40>
+ 120:	38 d8                	cmp    %bl,%al
+ 122:	74 ec                	je     110 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 124:	29 d8                	sub    %ebx,%eax
+}
+ 126:	5b                   	pop    %ebx
+ 127:	5d                   	pop    %ebp
+ 128:	c3                   	ret    
+ 129:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 130:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 132:	29 d8                	sub    %ebx,%eax
+}
+ 134:	5b                   	pop    %ebx
+ 135:	5d                   	pop    %ebp
+ 136:	c3                   	ret    
+ 137:	89 f6                	mov    %esi,%esi
+ 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000140 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 146:	80 39 00             	cmpb   $0x0,(%ecx)
+ 149:	74 15                	je     160 <strlen+0x20>
+ 14b:	31 d2                	xor    %edx,%edx
+ 14d:	8d 76 00             	lea    0x0(%esi),%esi
+ 150:	83 c2 01             	add    $0x1,%edx
+ 153:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 157:	89 d0                	mov    %edx,%eax
+ 159:	75 f5                	jne    150 <strlen+0x10>
+    ;
+  return n;
+}
+ 15b:	5d                   	pop    %ebp
+ 15c:	c3                   	ret    
+ 15d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 160:	31 c0                	xor    %eax,%eax
+}
+ 162:	5d                   	pop    %ebp
+ 163:	c3                   	ret    
+ 164:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 16a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000170 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	57                   	push   %edi
+ 174:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 177:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 17a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 17d:	89 d7                	mov    %edx,%edi
+ 17f:	fc                   	cld    
+ 180:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 182:	89 d0                	mov    %edx,%eax
+ 184:	5f                   	pop    %edi
+ 185:	5d                   	pop    %ebp
+ 186:	c3                   	ret    
+ 187:	89 f6                	mov    %esi,%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000190 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	53                   	push   %ebx
+ 194:	8b 45 08             	mov    0x8(%ebp),%eax
+ 197:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 19a:	0f b6 10             	movzbl (%eax),%edx
+ 19d:	84 d2                	test   %dl,%dl
+ 19f:	74 1d                	je     1be <strchr+0x2e>
+    if(*s == c)
+ 1a1:	38 d3                	cmp    %dl,%bl
+ 1a3:	89 d9                	mov    %ebx,%ecx
+ 1a5:	75 0d                	jne    1b4 <strchr+0x24>
+ 1a7:	eb 17                	jmp    1c0 <strchr+0x30>
+ 1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1b0:	38 ca                	cmp    %cl,%dl
+ 1b2:	74 0c                	je     1c0 <strchr+0x30>
+  for(; *s; s++)
+ 1b4:	83 c0 01             	add    $0x1,%eax
+ 1b7:	0f b6 10             	movzbl (%eax),%edx
+ 1ba:	84 d2                	test   %dl,%dl
+ 1bc:	75 f2                	jne    1b0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 1be:	31 c0                	xor    %eax,%eax
+}
+ 1c0:	5b                   	pop    %ebx
+ 1c1:	5d                   	pop    %ebp
+ 1c2:	c3                   	ret    
+ 1c3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001d0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	57                   	push   %edi
+ 1d4:	56                   	push   %esi
+ 1d5:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1d6:	31 f6                	xor    %esi,%esi
+ 1d8:	89 f3                	mov    %esi,%ebx
+{
+ 1da:	83 ec 1c             	sub    $0x1c,%esp
+ 1dd:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1e0:	eb 2f                	jmp    211 <gets+0x41>
+ 1e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1e8:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1eb:	83 ec 04             	sub    $0x4,%esp
+ 1ee:	6a 01                	push   $0x1
+ 1f0:	50                   	push   %eax
+ 1f1:	6a 00                	push   $0x0
+ 1f3:	e8 32 01 00 00       	call   32a <read>
+    if(cc < 1)
+ 1f8:	83 c4 10             	add    $0x10,%esp
+ 1fb:	85 c0                	test   %eax,%eax
+ 1fd:	7e 1c                	jle    21b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 1ff:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 203:	83 c7 01             	add    $0x1,%edi
+ 206:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 209:	3c 0a                	cmp    $0xa,%al
+ 20b:	74 23                	je     230 <gets+0x60>
+ 20d:	3c 0d                	cmp    $0xd,%al
+ 20f:	74 1f                	je     230 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 211:	83 c3 01             	add    $0x1,%ebx
+ 214:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 217:	89 fe                	mov    %edi,%esi
+ 219:	7c cd                	jl     1e8 <gets+0x18>
+ 21b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 21d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 220:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 223:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 226:	5b                   	pop    %ebx
+ 227:	5e                   	pop    %esi
+ 228:	5f                   	pop    %edi
+ 229:	5d                   	pop    %ebp
+ 22a:	c3                   	ret    
+ 22b:	90                   	nop
+ 22c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 230:	8b 75 08             	mov    0x8(%ebp),%esi
+ 233:	8b 45 08             	mov    0x8(%ebp),%eax
+ 236:	01 de                	add    %ebx,%esi
+ 238:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 23a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 23d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 240:	5b                   	pop    %ebx
+ 241:	5e                   	pop    %esi
+ 242:	5f                   	pop    %edi
+ 243:	5d                   	pop    %ebp
+ 244:	c3                   	ret    
+ 245:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000250 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	56                   	push   %esi
+ 254:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 255:	83 ec 08             	sub    $0x8,%esp
+ 258:	6a 00                	push   $0x0
+ 25a:	ff 75 08             	pushl  0x8(%ebp)
+ 25d:	e8 f0 00 00 00       	call   352 <open>
+  if(fd < 0)
+ 262:	83 c4 10             	add    $0x10,%esp
+ 265:	85 c0                	test   %eax,%eax
+ 267:	78 27                	js     290 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 269:	83 ec 08             	sub    $0x8,%esp
+ 26c:	ff 75 0c             	pushl  0xc(%ebp)
+ 26f:	89 c3                	mov    %eax,%ebx
+ 271:	50                   	push   %eax
+ 272:	e8 f3 00 00 00       	call   36a <fstat>
+  close(fd);
+ 277:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 27a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 27c:	e8 b9 00 00 00       	call   33a <close>
+  return r;
+ 281:	83 c4 10             	add    $0x10,%esp
+}
+ 284:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 287:	89 f0                	mov    %esi,%eax
+ 289:	5b                   	pop    %ebx
+ 28a:	5e                   	pop    %esi
+ 28b:	5d                   	pop    %ebp
+ 28c:	c3                   	ret    
+ 28d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 290:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 295:	eb ed                	jmp    284 <stat+0x34>
+ 297:	89 f6                	mov    %esi,%esi
+ 299:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002a0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	53                   	push   %ebx
+ 2a4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2a7:	0f be 11             	movsbl (%ecx),%edx
+ 2aa:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 2ad:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 2af:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 2b4:	77 1f                	ja     2d5 <atoi+0x35>
+ 2b6:	8d 76 00             	lea    0x0(%esi),%esi
+ 2b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 2c0:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 2c3:	83 c1 01             	add    $0x1,%ecx
+ 2c6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 2ca:	0f be 11             	movsbl (%ecx),%edx
+ 2cd:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 2d0:	80 fb 09             	cmp    $0x9,%bl
+ 2d3:	76 eb                	jbe    2c0 <atoi+0x20>
+  return n;
+}
+ 2d5:	5b                   	pop    %ebx
+ 2d6:	5d                   	pop    %ebp
+ 2d7:	c3                   	ret    
+ 2d8:	90                   	nop
+ 2d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000002e0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2e0:	55                   	push   %ebp
+ 2e1:	89 e5                	mov    %esp,%ebp
+ 2e3:	56                   	push   %esi
+ 2e4:	53                   	push   %ebx
+ 2e5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 2e8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2eb:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2ee:	85 db                	test   %ebx,%ebx
+ 2f0:	7e 14                	jle    306 <memmove+0x26>
+ 2f2:	31 d2                	xor    %edx,%edx
+ 2f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 2f8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 2fc:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 2ff:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 302:	39 d3                	cmp    %edx,%ebx
+ 304:	75 f2                	jne    2f8 <memmove+0x18>
+  return vdst;
+}
+ 306:	5b                   	pop    %ebx
+ 307:	5e                   	pop    %esi
+ 308:	5d                   	pop    %ebp
+ 309:	c3                   	ret    
+
+0000030a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 30a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <exit>:
+SYSCALL(exit)
+ 312:	b8 02 00 00 00       	mov    $0x2,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <wait>:
+SYSCALL(wait)
+ 31a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <pipe>:
+SYSCALL(pipe)
+ 322:	b8 04 00 00 00       	mov    $0x4,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <read>:
+SYSCALL(read)
+ 32a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <write>:
+SYSCALL(write)
+ 332:	b8 10 00 00 00       	mov    $0x10,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <close>:
+SYSCALL(close)
+ 33a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <kill>:
+SYSCALL(kill)
+ 342:	b8 06 00 00 00       	mov    $0x6,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <exec>:
+SYSCALL(exec)
+ 34a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <open>:
+SYSCALL(open)
+ 352:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <mknod>:
+SYSCALL(mknod)
+ 35a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <unlink>:
+SYSCALL(unlink)
+ 362:	b8 12 00 00 00       	mov    $0x12,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <fstat>:
+SYSCALL(fstat)
+ 36a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <link>:
+SYSCALL(link)
+ 372:	b8 13 00 00 00       	mov    $0x13,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <mkdir>:
+SYSCALL(mkdir)
+ 37a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <chdir>:
+SYSCALL(chdir)
+ 382:	b8 09 00 00 00       	mov    $0x9,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <dup>:
+SYSCALL(dup)
+ 38a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <getpid>:
+SYSCALL(getpid)
+ 392:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <sbrk>:
+SYSCALL(sbrk)
+ 39a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <sleep>:
+SYSCALL(sleep)
+ 3a2:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <uptime>:
+SYSCALL(uptime)
+ 3aa:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <kmalloc>:
+SYSCALL(kmalloc)
+ 3b2:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <kmfree>:
+SYSCALL(kmfree) 
+ 3ba:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <mmap>:
+SYSCALL(mmap)
+ 3c2:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <munmap>:
+ 3ca:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+ 3d2:	66 90                	xchg   %ax,%ax
+ 3d4:	66 90                	xchg   %ax,%ax
+ 3d6:	66 90                	xchg   %ax,%ax
+ 3d8:	66 90                	xchg   %ax,%ax
+ 3da:	66 90                	xchg   %ax,%ax
+ 3dc:	66 90                	xchg   %ax,%ax
+ 3de:	66 90                	xchg   %ax,%ax
+
+000003e0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3e0:	55                   	push   %ebp
+ 3e1:	89 e5                	mov    %esp,%ebp
+ 3e3:	57                   	push   %edi
+ 3e4:	56                   	push   %esi
+ 3e5:	53                   	push   %ebx
+ 3e6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3e9:	85 d2                	test   %edx,%edx
+{
+ 3eb:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 3ee:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 3f0:	79 76                	jns    468 <printint+0x88>
+ 3f2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3f6:	74 70                	je     468 <printint+0x88>
+    x = -xx;
+ 3f8:	f7 d8                	neg    %eax
+    neg = 1;
+ 3fa:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 401:	31 f6                	xor    %esi,%esi
+ 403:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 406:	eb 0a                	jmp    412 <printint+0x32>
+ 408:	90                   	nop
+ 409:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 410:	89 fe                	mov    %edi,%esi
+ 412:	31 d2                	xor    %edx,%edx
+ 414:	8d 7e 01             	lea    0x1(%esi),%edi
+ 417:	f7 f1                	div    %ecx
+ 419:	0f b6 92 48 08 00 00 	movzbl 0x848(%edx),%edx
+  }while((x /= base) != 0);
+ 420:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 422:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 425:	75 e9                	jne    410 <printint+0x30>
+  if(neg)
+ 427:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 42a:	85 c0                	test   %eax,%eax
+ 42c:	74 08                	je     436 <printint+0x56>
+    buf[i++] = '-';
+ 42e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 433:	8d 7e 02             	lea    0x2(%esi),%edi
+ 436:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 43a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 43d:	8d 76 00             	lea    0x0(%esi),%esi
+ 440:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 443:	83 ec 04             	sub    $0x4,%esp
+ 446:	83 ee 01             	sub    $0x1,%esi
+ 449:	6a 01                	push   $0x1
+ 44b:	53                   	push   %ebx
+ 44c:	57                   	push   %edi
+ 44d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 450:	e8 dd fe ff ff       	call   332 <write>
+
+  while(--i >= 0)
+ 455:	83 c4 10             	add    $0x10,%esp
+ 458:	39 de                	cmp    %ebx,%esi
+ 45a:	75 e4                	jne    440 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 45c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 45f:	5b                   	pop    %ebx
+ 460:	5e                   	pop    %esi
+ 461:	5f                   	pop    %edi
+ 462:	5d                   	pop    %ebp
+ 463:	c3                   	ret    
+ 464:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 468:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 46f:	eb 90                	jmp    401 <printint+0x21>
+ 471:	eb 0d                	jmp    480 <printf>
+ 473:	90                   	nop
+ 474:	90                   	nop
+ 475:	90                   	nop
+ 476:	90                   	nop
+ 477:	90                   	nop
+ 478:	90                   	nop
+ 479:	90                   	nop
+ 47a:	90                   	nop
+ 47b:	90                   	nop
+ 47c:	90                   	nop
+ 47d:	90                   	nop
+ 47e:	90                   	nop
+ 47f:	90                   	nop
+
+00000480 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 480:	55                   	push   %ebp
+ 481:	89 e5                	mov    %esp,%ebp
+ 483:	57                   	push   %edi
+ 484:	56                   	push   %esi
+ 485:	53                   	push   %ebx
+ 486:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 489:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 48c:	0f b6 1e             	movzbl (%esi),%ebx
+ 48f:	84 db                	test   %bl,%bl
+ 491:	0f 84 b3 00 00 00    	je     54a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 497:	8d 45 10             	lea    0x10(%ebp),%eax
+ 49a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 49d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 49f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4a2:	eb 2f                	jmp    4d3 <printf+0x53>
+ 4a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	0f 84 a7 00 00 00    	je     558 <printf+0xd8>
+  write(fd, &c, 1);
+ 4b1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 4b4:	83 ec 04             	sub    $0x4,%esp
+ 4b7:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 4ba:	6a 01                	push   $0x1
+ 4bc:	50                   	push   %eax
+ 4bd:	ff 75 08             	pushl  0x8(%ebp)
+ 4c0:	e8 6d fe ff ff       	call   332 <write>
+ 4c5:	83 c4 10             	add    $0x10,%esp
+ 4c8:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 4cb:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4cf:	84 db                	test   %bl,%bl
+ 4d1:	74 77                	je     54a <printf+0xca>
+    if(state == 0){
+ 4d3:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 4d5:	0f be cb             	movsbl %bl,%ecx
+ 4d8:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4db:	74 cb                	je     4a8 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 4dd:	83 ff 25             	cmp    $0x25,%edi
+ 4e0:	75 e6                	jne    4c8 <printf+0x48>
+      if(c == 'd'){
+ 4e2:	83 f8 64             	cmp    $0x64,%eax
+ 4e5:	0f 84 05 01 00 00    	je     5f0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4eb:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4f1:	83 f9 70             	cmp    $0x70,%ecx
+ 4f4:	74 72                	je     568 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4f6:	83 f8 73             	cmp    $0x73,%eax
+ 4f9:	0f 84 99 00 00 00    	je     598 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ff:	83 f8 63             	cmp    $0x63,%eax
+ 502:	0f 84 08 01 00 00    	je     610 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 508:	83 f8 25             	cmp    $0x25,%eax
+ 50b:	0f 84 ef 00 00 00    	je     600 <printf+0x180>
+  write(fd, &c, 1);
+ 511:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 514:	83 ec 04             	sub    $0x4,%esp
+ 517:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 51b:	6a 01                	push   $0x1
+ 51d:	50                   	push   %eax
+ 51e:	ff 75 08             	pushl  0x8(%ebp)
+ 521:	e8 0c fe ff ff       	call   332 <write>
+ 526:	83 c4 0c             	add    $0xc,%esp
+ 529:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 52c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 52f:	6a 01                	push   $0x1
+ 531:	50                   	push   %eax
+ 532:	ff 75 08             	pushl  0x8(%ebp)
+ 535:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 538:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 53a:	e8 f3 fd ff ff       	call   332 <write>
+  for(i = 0; fmt[i]; i++){
+ 53f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 543:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 546:	84 db                	test   %bl,%bl
+ 548:	75 89                	jne    4d3 <printf+0x53>
+    }
+  }
+}
+ 54a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 54d:	5b                   	pop    %ebx
+ 54e:	5e                   	pop    %esi
+ 54f:	5f                   	pop    %edi
+ 550:	5d                   	pop    %ebp
+ 551:	c3                   	ret    
+ 552:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 558:	bf 25 00 00 00       	mov    $0x25,%edi
+ 55d:	e9 66 ff ff ff       	jmp    4c8 <printf+0x48>
+ 562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 568:	83 ec 0c             	sub    $0xc,%esp
+ 56b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 570:	6a 00                	push   $0x0
+ 572:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 575:	8b 45 08             	mov    0x8(%ebp),%eax
+ 578:	8b 17                	mov    (%edi),%edx
+ 57a:	e8 61 fe ff ff       	call   3e0 <printint>
+        ap++;
+ 57f:	89 f8                	mov    %edi,%eax
+ 581:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 584:	31 ff                	xor    %edi,%edi
+        ap++;
+ 586:	83 c0 04             	add    $0x4,%eax
+ 589:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 58c:	e9 37 ff ff ff       	jmp    4c8 <printf+0x48>
+ 591:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 598:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 59b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 59d:	83 c0 04             	add    $0x4,%eax
+ 5a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 5a3:	85 c9                	test   %ecx,%ecx
+ 5a5:	0f 84 8e 00 00 00    	je     639 <printf+0x1b9>
+        while(*s != 0){
+ 5ab:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 5ae:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 5b0:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 5b2:	84 c0                	test   %al,%al
+ 5b4:	0f 84 0e ff ff ff    	je     4c8 <printf+0x48>
+ 5ba:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 5bd:	89 de                	mov    %ebx,%esi
+ 5bf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5c2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 5c5:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 5c8:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5cb:	83 c6 01             	add    $0x1,%esi
+ 5ce:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 5d1:	6a 01                	push   $0x1
+ 5d3:	57                   	push   %edi
+ 5d4:	53                   	push   %ebx
+ 5d5:	e8 58 fd ff ff       	call   332 <write>
+        while(*s != 0){
+ 5da:	0f b6 06             	movzbl (%esi),%eax
+ 5dd:	83 c4 10             	add    $0x10,%esp
+ 5e0:	84 c0                	test   %al,%al
+ 5e2:	75 e4                	jne    5c8 <printf+0x148>
+ 5e4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 5e7:	31 ff                	xor    %edi,%edi
+ 5e9:	e9 da fe ff ff       	jmp    4c8 <printf+0x48>
+ 5ee:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 5f0:	83 ec 0c             	sub    $0xc,%esp
+ 5f3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5f8:	6a 01                	push   $0x1
+ 5fa:	e9 73 ff ff ff       	jmp    572 <printf+0xf2>
+ 5ff:	90                   	nop
+  write(fd, &c, 1);
+ 600:	83 ec 04             	sub    $0x4,%esp
+ 603:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 606:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 609:	6a 01                	push   $0x1
+ 60b:	e9 21 ff ff ff       	jmp    531 <printf+0xb1>
+        putc(fd, *ap);
+ 610:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 613:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 616:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 618:	6a 01                	push   $0x1
+        ap++;
+ 61a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 61d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 620:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 623:	50                   	push   %eax
+ 624:	ff 75 08             	pushl  0x8(%ebp)
+ 627:	e8 06 fd ff ff       	call   332 <write>
+        ap++;
+ 62c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 62f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 632:	31 ff                	xor    %edi,%edi
+ 634:	e9 8f fe ff ff       	jmp    4c8 <printf+0x48>
+          s = "(null)";
+ 639:	bb 3f 08 00 00       	mov    $0x83f,%ebx
+        while(*s != 0){
+ 63e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 643:	e9 72 ff ff ff       	jmp    5ba <printf+0x13a>
+ 648:	66 90                	xchg   %ax,%ax
+ 64a:	66 90                	xchg   %ax,%ax
+ 64c:	66 90                	xchg   %ax,%ax
+ 64e:	66 90                	xchg   %ax,%ax
+
+00000650 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 650:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 651:	a1 24 0b 00 00       	mov    0xb24,%eax
+{
+ 656:	89 e5                	mov    %esp,%ebp
+ 658:	57                   	push   %edi
+ 659:	56                   	push   %esi
+ 65a:	53                   	push   %ebx
+ 65b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 65e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 661:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 668:	39 c8                	cmp    %ecx,%eax
+ 66a:	8b 10                	mov    (%eax),%edx
+ 66c:	73 32                	jae    6a0 <free+0x50>
+ 66e:	39 d1                	cmp    %edx,%ecx
+ 670:	72 04                	jb     676 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 672:	39 d0                	cmp    %edx,%eax
+ 674:	72 32                	jb     6a8 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 676:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 679:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 67c:	39 fa                	cmp    %edi,%edx
+ 67e:	74 30                	je     6b0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 680:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 683:	8b 50 04             	mov    0x4(%eax),%edx
+ 686:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 689:	39 f1                	cmp    %esi,%ecx
+ 68b:	74 3a                	je     6c7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 68d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 68f:	a3 24 0b 00 00       	mov    %eax,0xb24
+}
+ 694:	5b                   	pop    %ebx
+ 695:	5e                   	pop    %esi
+ 696:	5f                   	pop    %edi
+ 697:	5d                   	pop    %ebp
+ 698:	c3                   	ret    
+ 699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6a0:	39 d0                	cmp    %edx,%eax
+ 6a2:	72 04                	jb     6a8 <free+0x58>
+ 6a4:	39 d1                	cmp    %edx,%ecx
+ 6a6:	72 ce                	jb     676 <free+0x26>
+{
+ 6a8:	89 d0                	mov    %edx,%eax
+ 6aa:	eb bc                	jmp    668 <free+0x18>
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 6b0:	03 72 04             	add    0x4(%edx),%esi
+ 6b3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6b6:	8b 10                	mov    (%eax),%edx
+ 6b8:	8b 12                	mov    (%edx),%edx
+ 6ba:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6bd:	8b 50 04             	mov    0x4(%eax),%edx
+ 6c0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6c3:	39 f1                	cmp    %esi,%ecx
+ 6c5:	75 c6                	jne    68d <free+0x3d>
+    p->s.size += bp->s.size;
+ 6c7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6ca:	a3 24 0b 00 00       	mov    %eax,0xb24
+    p->s.size += bp->s.size;
+ 6cf:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6d2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6d5:	89 10                	mov    %edx,(%eax)
+}
+ 6d7:	5b                   	pop    %ebx
+ 6d8:	5e                   	pop    %esi
+ 6d9:	5f                   	pop    %edi
+ 6da:	5d                   	pop    %ebp
+ 6db:	c3                   	ret    
+ 6dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006e0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6e0:	55                   	push   %ebp
+ 6e1:	89 e5                	mov    %esp,%ebp
+ 6e3:	57                   	push   %edi
+ 6e4:	56                   	push   %esi
+ 6e5:	53                   	push   %ebx
+ 6e6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6ec:	8b 15 24 0b 00 00    	mov    0xb24,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6f2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6f5:	c1 ef 03             	shr    $0x3,%edi
+ 6f8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6fb:	85 d2                	test   %edx,%edx
+ 6fd:	0f 84 9d 00 00 00    	je     7a0 <malloc+0xc0>
+ 703:	8b 02                	mov    (%edx),%eax
+ 705:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 708:	39 cf                	cmp    %ecx,%edi
+ 70a:	76 6c                	jbe    778 <malloc+0x98>
+ 70c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 712:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 717:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 71a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 721:	eb 0e                	jmp    731 <malloc+0x51>
+ 723:	90                   	nop
+ 724:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 728:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 72a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 72d:	39 f9                	cmp    %edi,%ecx
+ 72f:	73 47                	jae    778 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 731:	39 05 24 0b 00 00    	cmp    %eax,0xb24
+ 737:	89 c2                	mov    %eax,%edx
+ 739:	75 ed                	jne    728 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 73b:	83 ec 0c             	sub    $0xc,%esp
+ 73e:	56                   	push   %esi
+ 73f:	e8 56 fc ff ff       	call   39a <sbrk>
+  if(p == (char*)-1)
+ 744:	83 c4 10             	add    $0x10,%esp
+ 747:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 74a:	74 1c                	je     768 <malloc+0x88>
+  hp->s.size = nu;
+ 74c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 74f:	83 ec 0c             	sub    $0xc,%esp
+ 752:	83 c0 08             	add    $0x8,%eax
+ 755:	50                   	push   %eax
+ 756:	e8 f5 fe ff ff       	call   650 <free>
+  return freep;
+ 75b:	8b 15 24 0b 00 00    	mov    0xb24,%edx
+      if((p = morecore(nunits)) == 0)
+ 761:	83 c4 10             	add    $0x10,%esp
+ 764:	85 d2                	test   %edx,%edx
+ 766:	75 c0                	jne    728 <malloc+0x48>
+        return 0;
+  }
+}
+ 768:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 76b:	31 c0                	xor    %eax,%eax
+}
+ 76d:	5b                   	pop    %ebx
+ 76e:	5e                   	pop    %esi
+ 76f:	5f                   	pop    %edi
+ 770:	5d                   	pop    %ebp
+ 771:	c3                   	ret    
+ 772:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 778:	39 cf                	cmp    %ecx,%edi
+ 77a:	74 54                	je     7d0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 77c:	29 f9                	sub    %edi,%ecx
+ 77e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 781:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 784:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 787:	89 15 24 0b 00 00    	mov    %edx,0xb24
+}
+ 78d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 790:	83 c0 08             	add    $0x8,%eax
+}
+ 793:	5b                   	pop    %ebx
+ 794:	5e                   	pop    %esi
+ 795:	5f                   	pop    %edi
+ 796:	5d                   	pop    %ebp
+ 797:	c3                   	ret    
+ 798:	90                   	nop
+ 799:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 7a0:	c7 05 24 0b 00 00 28 	movl   $0xb28,0xb24
+ 7a7:	0b 00 00 
+ 7aa:	c7 05 28 0b 00 00 28 	movl   $0xb28,0xb28
+ 7b1:	0b 00 00 
+    base.s.size = 0;
+ 7b4:	b8 28 0b 00 00       	mov    $0xb28,%eax
+ 7b9:	c7 05 2c 0b 00 00 00 	movl   $0x0,0xb2c
+ 7c0:	00 00 00 
+ 7c3:	e9 44 ff ff ff       	jmp    70c <malloc+0x2c>
+ 7c8:	90                   	nop
+ 7c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7d0:	8b 08                	mov    (%eax),%ecx
+ 7d2:	89 0a                	mov    %ecx,(%edx)
+ 7d4:	eb b1                	jmp    787 <malloc+0xa7>
diff -ruN src-old/test_4.c src/test_4.c
--- src-old/test_4.c	1970-01-01 00:00:00.000000000 +0000
+++ src/test_4.c	2023-04-19 02:18:53.363861137 +0000
@@ -0,0 +1,48 @@
+#include "param.h"
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+
+/*Stress test : Testing modification to anonymous memory mapped by mmap in a loop.*/
+void test() {
+  int size =  10;  /* we need 10 bytes */
+ 
+  char *addr = (char*)0x4000;
+  char* str = mmap(addr, size,  0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+
+  if (str<=0)
+  {
+    printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+    return;
+  }
+
+  strcpy(str, "012345");
+
+  printf(1, "XV6_TEST_OUTPUT : str = %s\n", (char*)str);
+
+  int rv = munmap(str, size);
+  if (rv < 0) {
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    return;
+  }
+
+  return;
+}
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+
+  for(i=1;i<=2;i++)
+  {
+    test();
+  }
+  
+  exit();
+}
diff -ruN src-old/test_4.d src/test_4.d
--- src-old/test_4.d	1970-01-01 00:00:00.000000000 +0000
+++ src/test_4.d	2023-04-19 02:18:56.404221880 +0000
@@ -0,0 +1,2 @@
+test_4.o: test_4.c /usr/include/stdc-predef.h param.h types.h stat.h \
+ user.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files src-old/test_4.o and src/test_4.o differ
diff -ruN src-old/test_4.sym src/test_4.sym
--- src-old/test_4.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/test_4.sym	2023-04-19 02:18:56.436225665 +0000
@@ -0,0 +1,62 @@
+00000000 .text
+000007d8 .rodata
+0000085c .eh_frame
+00000b24 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test_4.c
+00000000 ulib.c
+00000000 printf.c
+000003e0 printint
+00000848 digits.1052
+00000000 umalloc.c
+00000b24 freep
+00000b28 base
+000000c0 strcpy
+00000480 printf
+000002e0 memmove
+000003ca munmap
+0000035a mknod
+000001d0 gets
+00000392 getpid
+000006e0 malloc
+000003a2 sleep
+000003ba kmfree
+000003c2 mmap
+00000322 pipe
+00000332 write
+0000036a fstat
+00000342 kill
+00000382 chdir
+0000034a exec
+0000031a wait
+00000020 test
+0000032a read
+00000362 unlink
+0000030a fork
+0000039a sbrk
+000003aa uptime
+00000b24 __bss_start
+00000170 memset
+00000000 main
+000000f0 strcmp
+0000038a dup
+00000250 stat
+00000b24 _edata
+00000b30 _end
+00000372 link
+000003b2 kmalloc
+00000312 exit
+000002a0 atoi
+00000140 strlen
+00000352 open
+00000190 strchr
+0000037a mkdir
+0000033a close
+00000650 free
Binary files src-old/_test_5 and src/_test_5 differ
diff -ruN src-old/test_5.asm src/test_5.asm
--- src-old/test_5.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/test_5.asm	2023-04-19 02:18:56.484231343 +0000
@@ -0,0 +1,1324 @@
+
+_test_5:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+
+/*Testing whether address returned by anonymous mmap is page aligned.*/
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	83 ec 20             	sub    $0x20,%esp
+  int size = 200;
+  char *r1 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  14:	6a 00                	push   $0x0
+  16:	6a ff                	push   $0xffffffff
+  18:	6a 00                	push   $0x0
+  1a:	6a 00                	push   $0x0
+  1c:	68 c8 00 00 00       	push   $0xc8
+  21:	6a 00                	push   $0x0
+  23:	e8 2a 04 00 00       	call   452 <mmap>
+
+  char *r2 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  28:	83 c4 18             	add    $0x18,%esp
+  char *r1 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  2b:	89 c3                	mov    %eax,%ebx
+  char *r2 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  2d:	6a 00                	push   $0x0
+  2f:	6a ff                	push   $0xffffffff
+  31:	6a 00                	push   $0x0
+  33:	6a 00                	push   $0x0
+  35:	68 c8 00 00 00       	push   $0xc8
+  3a:	6a 00                	push   $0x0
+  3c:	e8 11 04 00 00       	call   452 <mmap>
+
+  char *r3 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  41:	83 c4 18             	add    $0x18,%esp
+  char *r2 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  44:	89 c6                	mov    %eax,%esi
+  char *r3 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  46:	6a 00                	push   $0x0
+  48:	6a ff                	push   $0xffffffff
+  4a:	6a 00                	push   $0x0
+  4c:	6a 00                	push   $0x0
+  4e:	68 c8 00 00 00       	push   $0xc8
+  53:	6a 00                	push   $0x0
+  55:	e8 f8 03 00 00       	call   452 <mmap>
+
+  int rem1 = ((int)r1 % PGSIZE);
+  5a:	89 da                	mov    %ebx,%edx
+  char *r3 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  5c:	89 c7                	mov    %eax,%edi
+  int rem2 = ((int)r2 % PGSIZE);
+  int rem3 = ((int)r3 % PGSIZE);
+
+  printf(1, "XV6_TEST_OUTPUT : rem1 = %d rem2 = %d rem3 = %d\n",rem1,rem2,rem3);
+  5e:	83 c4 14             	add    $0x14,%esp
+  int rem1 = ((int)r1 % PGSIZE);
+  61:	c1 fa 1f             	sar    $0x1f,%edx
+  64:	c1 ea 14             	shr    $0x14,%edx
+  67:	8d 04 13             	lea    (%ebx,%edx,1),%eax
+  6a:	25 ff 0f 00 00       	and    $0xfff,%eax
+  6f:	29 d0                	sub    %edx,%eax
+  int rem2 = ((int)r2 % PGSIZE);
+  71:	89 f2                	mov    %esi,%edx
+  73:	c1 fa 1f             	sar    $0x1f,%edx
+  printf(1, "XV6_TEST_OUTPUT : rem1 = %d rem2 = %d rem3 = %d\n",rem1,rem2,rem3);
+  76:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  int rem2 = ((int)r2 % PGSIZE);
+  79:	c1 ea 14             	shr    $0x14,%edx
+  7c:	8d 0c 16             	lea    (%esi,%edx,1),%ecx
+  7f:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
+  85:	29 d1                	sub    %edx,%ecx
+  int rem3 = ((int)r3 % PGSIZE);
+  87:	89 fa                	mov    %edi,%edx
+  89:	c1 fa 1f             	sar    $0x1f,%edx
+  int rem2 = ((int)r2 % PGSIZE);
+  8c:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+  int rem3 = ((int)r3 % PGSIZE);
+  8f:	c1 ea 14             	shr    $0x14,%edx
+  92:	8d 0c 17             	lea    (%edi,%edx,1),%ecx
+  95:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
+  9b:	29 d1                	sub    %edx,%ecx
+  printf(1, "XV6_TEST_OUTPUT : rem1 = %d rem2 = %d rem3 = %d\n",rem1,rem2,rem3);
+  9d:	51                   	push   %ecx
+  9e:	ff 75 e4             	pushl  -0x1c(%ebp)
+  a1:	50                   	push   %eax
+  a2:	68 68 08 00 00       	push   $0x868
+  a7:	6a 01                	push   $0x1
+  a9:	89 4d dc             	mov    %ecx,-0x24(%ebp)
+  ac:	e8 5f 04 00 00       	call   510 <printf>
+
+  if(rem1 != 0 || rem2 != 0 || rem3 != 0)
+  b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  b4:	0b 45 e4             	or     -0x1c(%ebp),%eax
+  b7:	83 c4 20             	add    $0x20,%esp
+  ba:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+  bd:	09 c8                	or     %ecx,%eax
+  bf:	74 13                	je     d4 <main+0xd4>
+  {
+    printf(1, "XV6_TEST_OUTPUT : Address returned by mmap should be page aligned\n");
+  c1:	51                   	push   %ecx
+  c2:	51                   	push   %ecx
+  c3:	68 9c 08 00 00       	push   $0x89c
+  c8:	6a 01                	push   $0x1
+  ca:	e8 41 04 00 00       	call   510 <printf>
+    exit();
+  cf:	e8 ce 02 00 00       	call   3a2 <exit>
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : mmap good --> address returned is page aligned\n");
+  d4:	50                   	push   %eax
+  d5:	50                   	push   %eax
+  d6:	68 e0 08 00 00       	push   $0x8e0
+  db:	6a 01                	push   $0x1
+  dd:	e8 2e 04 00 00       	call   510 <printf>
+
+  int rv1 = munmap(r1, size);
+  e2:	58                   	pop    %eax
+  e3:	5a                   	pop    %edx
+  e4:	68 c8 00 00 00       	push   $0xc8
+  e9:	53                   	push   %ebx
+  ea:	e8 6b 03 00 00       	call   45a <munmap>
+  if (rv1 < 0) {
+  ef:	83 c4 10             	add    $0x10,%esp
+  f2:	85 c0                	test   %eax,%eax
+  f4:	78 3b                	js     131 <main+0x131>
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    exit();
+  }
+
+  int rv2 = munmap(r2, size);
+  f6:	51                   	push   %ecx
+  f7:	51                   	push   %ecx
+  f8:	68 c8 00 00 00       	push   $0xc8
+  fd:	56                   	push   %esi
+  fe:	e8 57 03 00 00       	call   45a <munmap>
+  if (rv2 < 0) {
+ 103:	83 c4 10             	add    $0x10,%esp
+ 106:	85 c0                	test   %eax,%eax
+ 108:	78 27                	js     131 <main+0x131>
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    exit();
+  }
+
+
+  int rv3 = munmap(r3, size);
+ 10a:	52                   	push   %edx
+ 10b:	52                   	push   %edx
+ 10c:	68 c8 00 00 00       	push   $0xc8
+ 111:	57                   	push   %edi
+ 112:	e8 43 03 00 00       	call   45a <munmap>
+  if (rv3 < 0) {
+ 117:	83 c4 10             	add    $0x10,%esp
+ 11a:	85 c0                	test   %eax,%eax
+ 11c:	78 13                	js     131 <main+0x131>
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    exit();
+  }
+  
+  printf(1, "XV6_TEST_OUTPUT : munmap good\n");
+ 11e:	50                   	push   %eax
+ 11f:	50                   	push   %eax
+ 120:	68 48 09 00 00       	push   $0x948
+ 125:	6a 01                	push   $0x1
+ 127:	e8 e4 03 00 00       	call   510 <printf>
+
+  exit();
+ 12c:	e8 71 02 00 00       	call   3a2 <exit>
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+ 131:	53                   	push   %ebx
+ 132:	53                   	push   %ebx
+ 133:	68 24 09 00 00       	push   $0x924
+ 138:	6a 01                	push   $0x1
+ 13a:	e8 d1 03 00 00       	call   510 <printf>
+    exit();
+ 13f:	e8 5e 02 00 00       	call   3a2 <exit>
+ 144:	66 90                	xchg   %ax,%ax
+ 146:	66 90                	xchg   %ax,%ax
+ 148:	66 90                	xchg   %ax,%ax
+ 14a:	66 90                	xchg   %ax,%ax
+ 14c:	66 90                	xchg   %ax,%ax
+ 14e:	66 90                	xchg   %ax,%ax
+
+00000150 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 15a:	89 c2                	mov    %eax,%edx
+ 15c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 160:	83 c1 01             	add    $0x1,%ecx
+ 163:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 167:	83 c2 01             	add    $0x1,%edx
+ 16a:	84 db                	test   %bl,%bl
+ 16c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 16f:	75 ef                	jne    160 <strcpy+0x10>
+    ;
+  return os;
+}
+ 171:	5b                   	pop    %ebx
+ 172:	5d                   	pop    %ebp
+ 173:	c3                   	ret    
+ 174:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 17a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000180 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	53                   	push   %ebx
+ 184:	8b 55 08             	mov    0x8(%ebp),%edx
+ 187:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 18a:	0f b6 02             	movzbl (%edx),%eax
+ 18d:	0f b6 19             	movzbl (%ecx),%ebx
+ 190:	84 c0                	test   %al,%al
+ 192:	75 1c                	jne    1b0 <strcmp+0x30>
+ 194:	eb 2a                	jmp    1c0 <strcmp+0x40>
+ 196:	8d 76 00             	lea    0x0(%esi),%esi
+ 199:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 1a0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1a3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 1a6:	83 c1 01             	add    $0x1,%ecx
+ 1a9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 1ac:	84 c0                	test   %al,%al
+ 1ae:	74 10                	je     1c0 <strcmp+0x40>
+ 1b0:	38 d8                	cmp    %bl,%al
+ 1b2:	74 ec                	je     1a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1b4:	29 d8                	sub    %ebx,%eax
+}
+ 1b6:	5b                   	pop    %ebx
+ 1b7:	5d                   	pop    %ebp
+ 1b8:	c3                   	ret    
+ 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1c2:	29 d8                	sub    %ebx,%eax
+}
+ 1c4:	5b                   	pop    %ebx
+ 1c5:	5d                   	pop    %ebp
+ 1c6:	c3                   	ret    
+ 1c7:	89 f6                	mov    %esi,%esi
+ 1c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1d6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 1d9:	74 15                	je     1f0 <strlen+0x20>
+ 1db:	31 d2                	xor    %edx,%edx
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1e0:	83 c2 01             	add    $0x1,%edx
+ 1e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1e7:	89 d0                	mov    %edx,%eax
+ 1e9:	75 f5                	jne    1e0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1eb:	5d                   	pop    %ebp
+ 1ec:	c3                   	ret    
+ 1ed:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 1f0:	31 c0                	xor    %eax,%eax
+}
+ 1f2:	5d                   	pop    %ebp
+ 1f3:	c3                   	ret    
+ 1f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000200 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	57                   	push   %edi
+ 204:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 207:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 20a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 20d:	89 d7                	mov    %edx,%edi
+ 20f:	fc                   	cld    
+ 210:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 212:	89 d0                	mov    %edx,%eax
+ 214:	5f                   	pop    %edi
+ 215:	5d                   	pop    %ebp
+ 216:	c3                   	ret    
+ 217:	89 f6                	mov    %esi,%esi
+ 219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000220 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	53                   	push   %ebx
+ 224:	8b 45 08             	mov    0x8(%ebp),%eax
+ 227:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 22a:	0f b6 10             	movzbl (%eax),%edx
+ 22d:	84 d2                	test   %dl,%dl
+ 22f:	74 1d                	je     24e <strchr+0x2e>
+    if(*s == c)
+ 231:	38 d3                	cmp    %dl,%bl
+ 233:	89 d9                	mov    %ebx,%ecx
+ 235:	75 0d                	jne    244 <strchr+0x24>
+ 237:	eb 17                	jmp    250 <strchr+0x30>
+ 239:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 240:	38 ca                	cmp    %cl,%dl
+ 242:	74 0c                	je     250 <strchr+0x30>
+  for(; *s; s++)
+ 244:	83 c0 01             	add    $0x1,%eax
+ 247:	0f b6 10             	movzbl (%eax),%edx
+ 24a:	84 d2                	test   %dl,%dl
+ 24c:	75 f2                	jne    240 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 24e:	31 c0                	xor    %eax,%eax
+}
+ 250:	5b                   	pop    %ebx
+ 251:	5d                   	pop    %ebp
+ 252:	c3                   	ret    
+ 253:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000260 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	57                   	push   %edi
+ 264:	56                   	push   %esi
+ 265:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 266:	31 f6                	xor    %esi,%esi
+ 268:	89 f3                	mov    %esi,%ebx
+{
+ 26a:	83 ec 1c             	sub    $0x1c,%esp
+ 26d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 270:	eb 2f                	jmp    2a1 <gets+0x41>
+ 272:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 278:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 27b:	83 ec 04             	sub    $0x4,%esp
+ 27e:	6a 01                	push   $0x1
+ 280:	50                   	push   %eax
+ 281:	6a 00                	push   $0x0
+ 283:	e8 32 01 00 00       	call   3ba <read>
+    if(cc < 1)
+ 288:	83 c4 10             	add    $0x10,%esp
+ 28b:	85 c0                	test   %eax,%eax
+ 28d:	7e 1c                	jle    2ab <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 28f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 293:	83 c7 01             	add    $0x1,%edi
+ 296:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 299:	3c 0a                	cmp    $0xa,%al
+ 29b:	74 23                	je     2c0 <gets+0x60>
+ 29d:	3c 0d                	cmp    $0xd,%al
+ 29f:	74 1f                	je     2c0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 2a1:	83 c3 01             	add    $0x1,%ebx
+ 2a4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2a7:	89 fe                	mov    %edi,%esi
+ 2a9:	7c cd                	jl     278 <gets+0x18>
+ 2ab:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2b0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2b6:	5b                   	pop    %ebx
+ 2b7:	5e                   	pop    %esi
+ 2b8:	5f                   	pop    %edi
+ 2b9:	5d                   	pop    %ebp
+ 2ba:	c3                   	ret    
+ 2bb:	90                   	nop
+ 2bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2c0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2c3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2c6:	01 de                	add    %ebx,%esi
+ 2c8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2ca:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d0:	5b                   	pop    %ebx
+ 2d1:	5e                   	pop    %esi
+ 2d2:	5f                   	pop    %edi
+ 2d3:	5d                   	pop    %ebp
+ 2d4:	c3                   	ret    
+ 2d5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2e0:	55                   	push   %ebp
+ 2e1:	89 e5                	mov    %esp,%ebp
+ 2e3:	56                   	push   %esi
+ 2e4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2e5:	83 ec 08             	sub    $0x8,%esp
+ 2e8:	6a 00                	push   $0x0
+ 2ea:	ff 75 08             	pushl  0x8(%ebp)
+ 2ed:	e8 f0 00 00 00       	call   3e2 <open>
+  if(fd < 0)
+ 2f2:	83 c4 10             	add    $0x10,%esp
+ 2f5:	85 c0                	test   %eax,%eax
+ 2f7:	78 27                	js     320 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2f9:	83 ec 08             	sub    $0x8,%esp
+ 2fc:	ff 75 0c             	pushl  0xc(%ebp)
+ 2ff:	89 c3                	mov    %eax,%ebx
+ 301:	50                   	push   %eax
+ 302:	e8 f3 00 00 00       	call   3fa <fstat>
+  close(fd);
+ 307:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 30a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 30c:	e8 b9 00 00 00       	call   3ca <close>
+  return r;
+ 311:	83 c4 10             	add    $0x10,%esp
+}
+ 314:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 317:	89 f0                	mov    %esi,%eax
+ 319:	5b                   	pop    %ebx
+ 31a:	5e                   	pop    %esi
+ 31b:	5d                   	pop    %ebp
+ 31c:	c3                   	ret    
+ 31d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 320:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 325:	eb ed                	jmp    314 <stat+0x34>
+ 327:	89 f6                	mov    %esi,%esi
+ 329:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000330 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	53                   	push   %ebx
+ 334:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 337:	0f be 11             	movsbl (%ecx),%edx
+ 33a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 33d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 33f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 344:	77 1f                	ja     365 <atoi+0x35>
+ 346:	8d 76 00             	lea    0x0(%esi),%esi
+ 349:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 350:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 353:	83 c1 01             	add    $0x1,%ecx
+ 356:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 35a:	0f be 11             	movsbl (%ecx),%edx
+ 35d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 360:	80 fb 09             	cmp    $0x9,%bl
+ 363:	76 eb                	jbe    350 <atoi+0x20>
+  return n;
+}
+ 365:	5b                   	pop    %ebx
+ 366:	5d                   	pop    %ebp
+ 367:	c3                   	ret    
+ 368:	90                   	nop
+ 369:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000370 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	56                   	push   %esi
+ 374:	53                   	push   %ebx
+ 375:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 378:	8b 45 08             	mov    0x8(%ebp),%eax
+ 37b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 37e:	85 db                	test   %ebx,%ebx
+ 380:	7e 14                	jle    396 <memmove+0x26>
+ 382:	31 d2                	xor    %edx,%edx
+ 384:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 388:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 38c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 38f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 392:	39 d3                	cmp    %edx,%ebx
+ 394:	75 f2                	jne    388 <memmove+0x18>
+  return vdst;
+}
+ 396:	5b                   	pop    %ebx
+ 397:	5e                   	pop    %esi
+ 398:	5d                   	pop    %ebp
+ 399:	c3                   	ret    
+
+0000039a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 39a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <exit>:
+SYSCALL(exit)
+ 3a2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <wait>:
+SYSCALL(wait)
+ 3aa:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <pipe>:
+SYSCALL(pipe)
+ 3b2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <read>:
+SYSCALL(read)
+ 3ba:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <write>:
+SYSCALL(write)
+ 3c2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <close>:
+SYSCALL(close)
+ 3ca:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <kill>:
+SYSCALL(kill)
+ 3d2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <exec>:
+SYSCALL(exec)
+ 3da:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <open>:
+SYSCALL(open)
+ 3e2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <mknod>:
+SYSCALL(mknod)
+ 3ea:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <unlink>:
+SYSCALL(unlink)
+ 3f2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <fstat>:
+SYSCALL(fstat)
+ 3fa:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <link>:
+SYSCALL(link)
+ 402:	b8 13 00 00 00       	mov    $0x13,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <mkdir>:
+SYSCALL(mkdir)
+ 40a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <chdir>:
+SYSCALL(chdir)
+ 412:	b8 09 00 00 00       	mov    $0x9,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+
+0000041a <dup>:
+SYSCALL(dup)
+ 41a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+
+00000422 <getpid>:
+SYSCALL(getpid)
+ 422:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 427:	cd 40                	int    $0x40
+ 429:	c3                   	ret    
+
+0000042a <sbrk>:
+SYSCALL(sbrk)
+ 42a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 42f:	cd 40                	int    $0x40
+ 431:	c3                   	ret    
+
+00000432 <sleep>:
+SYSCALL(sleep)
+ 432:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 437:	cd 40                	int    $0x40
+ 439:	c3                   	ret    
+
+0000043a <uptime>:
+SYSCALL(uptime)
+ 43a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 43f:	cd 40                	int    $0x40
+ 441:	c3                   	ret    
+
+00000442 <kmalloc>:
+SYSCALL(kmalloc)
+ 442:	b8 16 00 00 00       	mov    $0x16,%eax
+ 447:	cd 40                	int    $0x40
+ 449:	c3                   	ret    
+
+0000044a <kmfree>:
+SYSCALL(kmfree) 
+ 44a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 44f:	cd 40                	int    $0x40
+ 451:	c3                   	ret    
+
+00000452 <mmap>:
+SYSCALL(mmap)
+ 452:	b8 18 00 00 00       	mov    $0x18,%eax
+ 457:	cd 40                	int    $0x40
+ 459:	c3                   	ret    
+
+0000045a <munmap>:
+ 45a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 45f:	cd 40                	int    $0x40
+ 461:	c3                   	ret    
+ 462:	66 90                	xchg   %ax,%ax
+ 464:	66 90                	xchg   %ax,%ax
+ 466:	66 90                	xchg   %ax,%ax
+ 468:	66 90                	xchg   %ax,%ax
+ 46a:	66 90                	xchg   %ax,%ax
+ 46c:	66 90                	xchg   %ax,%ax
+ 46e:	66 90                	xchg   %ax,%ax
+
+00000470 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 470:	55                   	push   %ebp
+ 471:	89 e5                	mov    %esp,%ebp
+ 473:	57                   	push   %edi
+ 474:	56                   	push   %esi
+ 475:	53                   	push   %ebx
+ 476:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 479:	85 d2                	test   %edx,%edx
+{
+ 47b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 47e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 480:	79 76                	jns    4f8 <printint+0x88>
+ 482:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 486:	74 70                	je     4f8 <printint+0x88>
+    x = -xx;
+ 488:	f7 d8                	neg    %eax
+    neg = 1;
+ 48a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 491:	31 f6                	xor    %esi,%esi
+ 493:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 496:	eb 0a                	jmp    4a2 <printint+0x32>
+ 498:	90                   	nop
+ 499:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4a0:	89 fe                	mov    %edi,%esi
+ 4a2:	31 d2                	xor    %edx,%edx
+ 4a4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 4a7:	f7 f1                	div    %ecx
+ 4a9:	0f b6 92 70 09 00 00 	movzbl 0x970(%edx),%edx
+  }while((x /= base) != 0);
+ 4b0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 4b2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 4b5:	75 e9                	jne    4a0 <printint+0x30>
+  if(neg)
+ 4b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 4ba:	85 c0                	test   %eax,%eax
+ 4bc:	74 08                	je     4c6 <printint+0x56>
+    buf[i++] = '-';
+ 4be:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 4c3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 4c6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 4ca:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 4cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 4d0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 4d3:	83 ec 04             	sub    $0x4,%esp
+ 4d6:	83 ee 01             	sub    $0x1,%esi
+ 4d9:	6a 01                	push   $0x1
+ 4db:	53                   	push   %ebx
+ 4dc:	57                   	push   %edi
+ 4dd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 4e0:	e8 dd fe ff ff       	call   3c2 <write>
+
+  while(--i >= 0)
+ 4e5:	83 c4 10             	add    $0x10,%esp
+ 4e8:	39 de                	cmp    %ebx,%esi
+ 4ea:	75 e4                	jne    4d0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 4ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ef:	5b                   	pop    %ebx
+ 4f0:	5e                   	pop    %esi
+ 4f1:	5f                   	pop    %edi
+ 4f2:	5d                   	pop    %ebp
+ 4f3:	c3                   	ret    
+ 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4f8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 4ff:	eb 90                	jmp    491 <printint+0x21>
+ 501:	eb 0d                	jmp    510 <printf>
+ 503:	90                   	nop
+ 504:	90                   	nop
+ 505:	90                   	nop
+ 506:	90                   	nop
+ 507:	90                   	nop
+ 508:	90                   	nop
+ 509:	90                   	nop
+ 50a:	90                   	nop
+ 50b:	90                   	nop
+ 50c:	90                   	nop
+ 50d:	90                   	nop
+ 50e:	90                   	nop
+ 50f:	90                   	nop
+
+00000510 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 510:	55                   	push   %ebp
+ 511:	89 e5                	mov    %esp,%ebp
+ 513:	57                   	push   %edi
+ 514:	56                   	push   %esi
+ 515:	53                   	push   %ebx
+ 516:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 519:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 51c:	0f b6 1e             	movzbl (%esi),%ebx
+ 51f:	84 db                	test   %bl,%bl
+ 521:	0f 84 b3 00 00 00    	je     5da <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 527:	8d 45 10             	lea    0x10(%ebp),%eax
+ 52a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 52d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 52f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 532:	eb 2f                	jmp    563 <printf+0x53>
+ 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 538:	83 f8 25             	cmp    $0x25,%eax
+ 53b:	0f 84 a7 00 00 00    	je     5e8 <printf+0xd8>
+  write(fd, &c, 1);
+ 541:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 544:	83 ec 04             	sub    $0x4,%esp
+ 547:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 54a:	6a 01                	push   $0x1
+ 54c:	50                   	push   %eax
+ 54d:	ff 75 08             	pushl  0x8(%ebp)
+ 550:	e8 6d fe ff ff       	call   3c2 <write>
+ 555:	83 c4 10             	add    $0x10,%esp
+ 558:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 55b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 55f:	84 db                	test   %bl,%bl
+ 561:	74 77                	je     5da <printf+0xca>
+    if(state == 0){
+ 563:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 565:	0f be cb             	movsbl %bl,%ecx
+ 568:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 56b:	74 cb                	je     538 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 56d:	83 ff 25             	cmp    $0x25,%edi
+ 570:	75 e6                	jne    558 <printf+0x48>
+      if(c == 'd'){
+ 572:	83 f8 64             	cmp    $0x64,%eax
+ 575:	0f 84 05 01 00 00    	je     680 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 57b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 581:	83 f9 70             	cmp    $0x70,%ecx
+ 584:	74 72                	je     5f8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 586:	83 f8 73             	cmp    $0x73,%eax
+ 589:	0f 84 99 00 00 00    	je     628 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 58f:	83 f8 63             	cmp    $0x63,%eax
+ 592:	0f 84 08 01 00 00    	je     6a0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 598:	83 f8 25             	cmp    $0x25,%eax
+ 59b:	0f 84 ef 00 00 00    	je     690 <printf+0x180>
+  write(fd, &c, 1);
+ 5a1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 5a4:	83 ec 04             	sub    $0x4,%esp
+ 5a7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5ab:	6a 01                	push   $0x1
+ 5ad:	50                   	push   %eax
+ 5ae:	ff 75 08             	pushl  0x8(%ebp)
+ 5b1:	e8 0c fe ff ff       	call   3c2 <write>
+ 5b6:	83 c4 0c             	add    $0xc,%esp
+ 5b9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 5bc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 5bf:	6a 01                	push   $0x1
+ 5c1:	50                   	push   %eax
+ 5c2:	ff 75 08             	pushl  0x8(%ebp)
+ 5c5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5c8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 5ca:	e8 f3 fd ff ff       	call   3c2 <write>
+  for(i = 0; fmt[i]; i++){
+ 5cf:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 5d3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 5d6:	84 db                	test   %bl,%bl
+ 5d8:	75 89                	jne    563 <printf+0x53>
+    }
+  }
+}
+ 5da:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5dd:	5b                   	pop    %ebx
+ 5de:	5e                   	pop    %esi
+ 5df:	5f                   	pop    %edi
+ 5e0:	5d                   	pop    %ebp
+ 5e1:	c3                   	ret    
+ 5e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 5e8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 5ed:	e9 66 ff ff ff       	jmp    558 <printf+0x48>
+ 5f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 5f8:	83 ec 0c             	sub    $0xc,%esp
+ 5fb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 600:	6a 00                	push   $0x0
+ 602:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 605:	8b 45 08             	mov    0x8(%ebp),%eax
+ 608:	8b 17                	mov    (%edi),%edx
+ 60a:	e8 61 fe ff ff       	call   470 <printint>
+        ap++;
+ 60f:	89 f8                	mov    %edi,%eax
+ 611:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 614:	31 ff                	xor    %edi,%edi
+        ap++;
+ 616:	83 c0 04             	add    $0x4,%eax
+ 619:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 61c:	e9 37 ff ff ff       	jmp    558 <printf+0x48>
+ 621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 628:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 62b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 62d:	83 c0 04             	add    $0x4,%eax
+ 630:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 633:	85 c9                	test   %ecx,%ecx
+ 635:	0f 84 8e 00 00 00    	je     6c9 <printf+0x1b9>
+        while(*s != 0){
+ 63b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 63e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 640:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 642:	84 c0                	test   %al,%al
+ 644:	0f 84 0e ff ff ff    	je     558 <printf+0x48>
+ 64a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 64d:	89 de                	mov    %ebx,%esi
+ 64f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 652:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 655:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 658:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 65b:	83 c6 01             	add    $0x1,%esi
+ 65e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 661:	6a 01                	push   $0x1
+ 663:	57                   	push   %edi
+ 664:	53                   	push   %ebx
+ 665:	e8 58 fd ff ff       	call   3c2 <write>
+        while(*s != 0){
+ 66a:	0f b6 06             	movzbl (%esi),%eax
+ 66d:	83 c4 10             	add    $0x10,%esp
+ 670:	84 c0                	test   %al,%al
+ 672:	75 e4                	jne    658 <printf+0x148>
+ 674:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 677:	31 ff                	xor    %edi,%edi
+ 679:	e9 da fe ff ff       	jmp    558 <printf+0x48>
+ 67e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 680:	83 ec 0c             	sub    $0xc,%esp
+ 683:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 688:	6a 01                	push   $0x1
+ 68a:	e9 73 ff ff ff       	jmp    602 <printf+0xf2>
+ 68f:	90                   	nop
+  write(fd, &c, 1);
+ 690:	83 ec 04             	sub    $0x4,%esp
+ 693:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 696:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 699:	6a 01                	push   $0x1
+ 69b:	e9 21 ff ff ff       	jmp    5c1 <printf+0xb1>
+        putc(fd, *ap);
+ 6a0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 6a3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 6a6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 6a8:	6a 01                	push   $0x1
+        ap++;
+ 6aa:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 6ad:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 6b0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 6b3:	50                   	push   %eax
+ 6b4:	ff 75 08             	pushl  0x8(%ebp)
+ 6b7:	e8 06 fd ff ff       	call   3c2 <write>
+        ap++;
+ 6bc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 6bf:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6c2:	31 ff                	xor    %edi,%edi
+ 6c4:	e9 8f fe ff ff       	jmp    558 <printf+0x48>
+          s = "(null)";
+ 6c9:	bb 68 09 00 00       	mov    $0x968,%ebx
+        while(*s != 0){
+ 6ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6d3:	e9 72 ff ff ff       	jmp    64a <printf+0x13a>
+ 6d8:	66 90                	xchg   %ax,%ax
+ 6da:	66 90                	xchg   %ax,%ax
+ 6dc:	66 90                	xchg   %ax,%ax
+ 6de:	66 90                	xchg   %ax,%ax
+
+000006e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6e0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6e1:	a1 20 0c 00 00       	mov    0xc20,%eax
+{
+ 6e6:	89 e5                	mov    %esp,%ebp
+ 6e8:	57                   	push   %edi
+ 6e9:	56                   	push   %esi
+ 6ea:	53                   	push   %ebx
+ 6eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 6ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6f8:	39 c8                	cmp    %ecx,%eax
+ 6fa:	8b 10                	mov    (%eax),%edx
+ 6fc:	73 32                	jae    730 <free+0x50>
+ 6fe:	39 d1                	cmp    %edx,%ecx
+ 700:	72 04                	jb     706 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 702:	39 d0                	cmp    %edx,%eax
+ 704:	72 32                	jb     738 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 706:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 709:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 70c:	39 fa                	cmp    %edi,%edx
+ 70e:	74 30                	je     740 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 710:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 713:	8b 50 04             	mov    0x4(%eax),%edx
+ 716:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 719:	39 f1                	cmp    %esi,%ecx
+ 71b:	74 3a                	je     757 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 71d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 71f:	a3 20 0c 00 00       	mov    %eax,0xc20
+}
+ 724:	5b                   	pop    %ebx
+ 725:	5e                   	pop    %esi
+ 726:	5f                   	pop    %edi
+ 727:	5d                   	pop    %ebp
+ 728:	c3                   	ret    
+ 729:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 730:	39 d0                	cmp    %edx,%eax
+ 732:	72 04                	jb     738 <free+0x58>
+ 734:	39 d1                	cmp    %edx,%ecx
+ 736:	72 ce                	jb     706 <free+0x26>
+{
+ 738:	89 d0                	mov    %edx,%eax
+ 73a:	eb bc                	jmp    6f8 <free+0x18>
+ 73c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 740:	03 72 04             	add    0x4(%edx),%esi
+ 743:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 746:	8b 10                	mov    (%eax),%edx
+ 748:	8b 12                	mov    (%edx),%edx
+ 74a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 74d:	8b 50 04             	mov    0x4(%eax),%edx
+ 750:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 753:	39 f1                	cmp    %esi,%ecx
+ 755:	75 c6                	jne    71d <free+0x3d>
+    p->s.size += bp->s.size;
+ 757:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 75a:	a3 20 0c 00 00       	mov    %eax,0xc20
+    p->s.size += bp->s.size;
+ 75f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 762:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 765:	89 10                	mov    %edx,(%eax)
+}
+ 767:	5b                   	pop    %ebx
+ 768:	5e                   	pop    %esi
+ 769:	5f                   	pop    %edi
+ 76a:	5d                   	pop    %ebp
+ 76b:	c3                   	ret    
+ 76c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000770 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 770:	55                   	push   %ebp
+ 771:	89 e5                	mov    %esp,%ebp
+ 773:	57                   	push   %edi
+ 774:	56                   	push   %esi
+ 775:	53                   	push   %ebx
+ 776:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 779:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 77c:	8b 15 20 0c 00 00    	mov    0xc20,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 782:	8d 78 07             	lea    0x7(%eax),%edi
+ 785:	c1 ef 03             	shr    $0x3,%edi
+ 788:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 78b:	85 d2                	test   %edx,%edx
+ 78d:	0f 84 9d 00 00 00    	je     830 <malloc+0xc0>
+ 793:	8b 02                	mov    (%edx),%eax
+ 795:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 798:	39 cf                	cmp    %ecx,%edi
+ 79a:	76 6c                	jbe    808 <malloc+0x98>
+ 79c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 7a2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7a7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 7aa:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 7b1:	eb 0e                	jmp    7c1 <malloc+0x51>
+ 7b3:	90                   	nop
+ 7b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7b8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 7ba:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7bd:	39 f9                	cmp    %edi,%ecx
+ 7bf:	73 47                	jae    808 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7c1:	39 05 20 0c 00 00    	cmp    %eax,0xc20
+ 7c7:	89 c2                	mov    %eax,%edx
+ 7c9:	75 ed                	jne    7b8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 7cb:	83 ec 0c             	sub    $0xc,%esp
+ 7ce:	56                   	push   %esi
+ 7cf:	e8 56 fc ff ff       	call   42a <sbrk>
+  if(p == (char*)-1)
+ 7d4:	83 c4 10             	add    $0x10,%esp
+ 7d7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7da:	74 1c                	je     7f8 <malloc+0x88>
+  hp->s.size = nu;
+ 7dc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7df:	83 ec 0c             	sub    $0xc,%esp
+ 7e2:	83 c0 08             	add    $0x8,%eax
+ 7e5:	50                   	push   %eax
+ 7e6:	e8 f5 fe ff ff       	call   6e0 <free>
+  return freep;
+ 7eb:	8b 15 20 0c 00 00    	mov    0xc20,%edx
+      if((p = morecore(nunits)) == 0)
+ 7f1:	83 c4 10             	add    $0x10,%esp
+ 7f4:	85 d2                	test   %edx,%edx
+ 7f6:	75 c0                	jne    7b8 <malloc+0x48>
+        return 0;
+  }
+}
+ 7f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7fb:	31 c0                	xor    %eax,%eax
+}
+ 7fd:	5b                   	pop    %ebx
+ 7fe:	5e                   	pop    %esi
+ 7ff:	5f                   	pop    %edi
+ 800:	5d                   	pop    %ebp
+ 801:	c3                   	ret    
+ 802:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 808:	39 cf                	cmp    %ecx,%edi
+ 80a:	74 54                	je     860 <malloc+0xf0>
+        p->s.size -= nunits;
+ 80c:	29 f9                	sub    %edi,%ecx
+ 80e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 811:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 814:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 817:	89 15 20 0c 00 00    	mov    %edx,0xc20
+}
+ 81d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 820:	83 c0 08             	add    $0x8,%eax
+}
+ 823:	5b                   	pop    %ebx
+ 824:	5e                   	pop    %esi
+ 825:	5f                   	pop    %edi
+ 826:	5d                   	pop    %ebp
+ 827:	c3                   	ret    
+ 828:	90                   	nop
+ 829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 830:	c7 05 20 0c 00 00 24 	movl   $0xc24,0xc20
+ 837:	0c 00 00 
+ 83a:	c7 05 24 0c 00 00 24 	movl   $0xc24,0xc24
+ 841:	0c 00 00 
+    base.s.size = 0;
+ 844:	b8 24 0c 00 00       	mov    $0xc24,%eax
+ 849:	c7 05 28 0c 00 00 00 	movl   $0x0,0xc28
+ 850:	00 00 00 
+ 853:	e9 44 ff ff ff       	jmp    79c <malloc+0x2c>
+ 858:	90                   	nop
+ 859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 860:	8b 08                	mov    (%eax),%ecx
+ 862:	89 0a                	mov    %ecx,(%edx)
+ 864:	eb b1                	jmp    817 <malloc+0xa7>
diff -ruN src-old/test_5.c src/test_5.c
--- src-old/test_5.c	1970-01-01 00:00:00.000000000 +0000
+++ src/test_5.c	2023-04-19 02:18:53.367861613 +0000
@@ -0,0 +1,60 @@
+#include "param.h"
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+#include "mmu.h"
+
+
+/*Testing whether address returned by anonymous mmap is page aligned.*/
+int
+main(int argc, char *argv[])
+{
+  int size = 200;
+  char *r1 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+
+  char *r2 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+
+  char *r3 = mmap(0, size, 0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+
+  int rem1 = ((int)r1 % PGSIZE);
+  int rem2 = ((int)r2 % PGSIZE);
+  int rem3 = ((int)r3 % PGSIZE);
+
+  printf(1, "XV6_TEST_OUTPUT : rem1 = %d rem2 = %d rem3 = %d\n",rem1,rem2,rem3);
+
+  if(rem1 != 0 || rem2 != 0 || rem3 != 0)
+  {
+    printf(1, "XV6_TEST_OUTPUT : Address returned by mmap should be page aligned\n");
+    exit();
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : mmap good --> address returned is page aligned\n");
+
+  int rv1 = munmap(r1, size);
+  if (rv1 < 0) {
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    exit();
+  }
+
+  int rv2 = munmap(r2, size);
+  if (rv2 < 0) {
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    exit();
+  }
+
+
+  int rv3 = munmap(r3, size);
+  if (rv3 < 0) {
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    exit();
+  }
+  
+  printf(1, "XV6_TEST_OUTPUT : munmap good\n");
+
+  exit();
+}
diff -ruN src-old/test_5.d src/test_5.d
--- src-old/test_5.d	1970-01-01 00:00:00.000000000 +0000
+++ src/test_5.d	2023-04-19 02:18:56.468229450 +0000
@@ -0,0 +1,2 @@
+test_5.o: test_5.c /usr/include/stdc-predef.h param.h types.h stat.h \
+ user.h fs.h fcntl.h syscall.h traps.h memlayout.h mmu.h
Binary files src-old/test_5.o and src/test_5.o differ
diff -ruN src-old/test_5.sym src/test_5.sym
--- src-old/test_5.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/test_5.sym	2023-04-19 02:18:56.492232289 +0000
@@ -0,0 +1,61 @@
+00000000 .text
+00000868 .rodata
+00000984 .eh_frame
+00000c20 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test_5.c
+00000000 ulib.c
+00000000 printf.c
+00000470 printint
+00000970 digits.1052
+00000000 umalloc.c
+00000c20 freep
+00000c24 base
+00000150 strcpy
+00000510 printf
+00000370 memmove
+0000045a munmap
+000003ea mknod
+00000260 gets
+00000422 getpid
+00000770 malloc
+00000432 sleep
+0000044a kmfree
+00000452 mmap
+000003b2 pipe
+000003c2 write
+000003fa fstat
+000003d2 kill
+00000412 chdir
+000003da exec
+000003aa wait
+000003ba read
+000003f2 unlink
+0000039a fork
+0000042a sbrk
+0000043a uptime
+00000c20 __bss_start
+00000200 memset
+00000000 main
+00000180 strcmp
+0000041a dup
+000002e0 stat
+00000c20 _edata
+00000c2c _end
+00000402 link
+00000442 kmalloc
+000003a2 exit
+00000330 atoi
+000001d0 strlen
+000003e2 open
+00000220 strchr
+0000040a mkdir
+000003ca close
+000006e0 free
Binary files src-old/_test_6 and src/_test_6 differ
diff -ruN src-old/test_6.asm src/test_6.asm
--- src-old/test_6.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/test_6.asm	2023-04-19 02:18:56.544238440 +0000
@@ -0,0 +1,1228 @@
+
+_test_6:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+
+/*Stress Testing allocating large sized memory using anonymous mmap in a loop..*/
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	56                   	push   %esi
+   e:	53                   	push   %ebx
+   f:	51                   	push   %ecx
+  10:	be 64 00 00 00       	mov    $0x64,%esi
+  15:	83 ec 0c             	sub    $0xc,%esp
+  18:	eb 47                	jmp    61 <main+0x61>
+  1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    {
+      printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+      exit();
+    }
+    
+    memset(r, 'a', modifySize);
+  20:	83 ec 04             	sub    $0x4,%esp
+  23:	68 d0 07 00 00       	push   $0x7d0
+  28:	6a 61                	push   $0x61
+  2a:	50                   	push   %eax
+  2b:	e8 30 01 00 00       	call   160 <memset>
+    printf(1, "XV6_TEST_OUTPUT : strlen(r) = %d\n", strlen(r));
+  30:	89 1c 24             	mov    %ebx,(%esp)
+  33:	e8 f8 00 00 00       	call   130 <strlen>
+  38:	83 c4 0c             	add    $0xc,%esp
+  3b:	50                   	push   %eax
+  3c:	68 e8 07 00 00       	push   $0x7e8
+  41:	6a 01                	push   $0x1
+  43:	e8 28 04 00 00       	call   470 <printf>
+
+    int rv = munmap(r, size);
+  48:	5a                   	pop    %edx
+  49:	59                   	pop    %ecx
+  4a:	68 34 08 00 00       	push   $0x834
+  4f:	53                   	push   %ebx
+  50:	e8 65 03 00 00       	call   3ba <munmap>
+    if (rv < 0) 
+  55:	83 c4 10             	add    $0x10,%esp
+  58:	85 c0                	test   %eax,%eax
+  5a:	78 3b                	js     97 <main+0x97>
+  for(i = 0;i<100;i++)
+  5c:	83 ee 01             	sub    $0x1,%esi
+  5f:	74 49                	je     aa <main+0xaa>
+    char* r = mmap(addr, size,  0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  61:	83 ec 08             	sub    $0x8,%esp
+  64:	6a 00                	push   $0x0
+  66:	6a ff                	push   $0xffffffff
+  68:	6a 00                	push   $0x0
+  6a:	6a 00                	push   $0x0
+  6c:	68 34 08 00 00       	push   $0x834
+  71:	68 00 40 00 00       	push   $0x4000
+  76:	e8 37 03 00 00       	call   3b2 <mmap>
+    if (r<=0)
+  7b:	83 c4 20             	add    $0x20,%esp
+  7e:	85 c0                	test   %eax,%eax
+    char* r = mmap(addr, size,  0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+  80:	89 c3                	mov    %eax,%ebx
+    if (r<=0)
+  82:	75 9c                	jne    20 <main+0x20>
+      printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+  84:	53                   	push   %ebx
+  85:	53                   	push   %ebx
+  86:	68 c8 07 00 00       	push   $0x7c8
+  8b:	6a 01                	push   $0x1
+  8d:	e8 de 03 00 00       	call   470 <printf>
+      exit();
+  92:	e8 6b 02 00 00       	call   302 <exit>
+    {
+      printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+  97:	50                   	push   %eax
+  98:	50                   	push   %eax
+  99:	68 0c 08 00 00       	push   $0x80c
+  9e:	6a 01                	push   $0x1
+  a0:	e8 cb 03 00 00       	call   470 <printf>
+      exit();
+  a5:	e8 58 02 00 00       	call   302 <exit>
+    }
+
+  }
+
+  exit();
+  aa:	e8 53 02 00 00       	call   302 <exit>
+  af:	90                   	nop
+
+000000b0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	53                   	push   %ebx
+  b4:	8b 45 08             	mov    0x8(%ebp),%eax
+  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  ba:	89 c2                	mov    %eax,%edx
+  bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  c0:	83 c1 01             	add    $0x1,%ecx
+  c3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  c7:	83 c2 01             	add    $0x1,%edx
+  ca:	84 db                	test   %bl,%bl
+  cc:	88 5a ff             	mov    %bl,-0x1(%edx)
+  cf:	75 ef                	jne    c0 <strcpy+0x10>
+    ;
+  return os;
+}
+  d1:	5b                   	pop    %ebx
+  d2:	5d                   	pop    %ebp
+  d3:	c3                   	ret    
+  d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000e0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	53                   	push   %ebx
+  e4:	8b 55 08             	mov    0x8(%ebp),%edx
+  e7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  ea:	0f b6 02             	movzbl (%edx),%eax
+  ed:	0f b6 19             	movzbl (%ecx),%ebx
+  f0:	84 c0                	test   %al,%al
+  f2:	75 1c                	jne    110 <strcmp+0x30>
+  f4:	eb 2a                	jmp    120 <strcmp+0x40>
+  f6:	8d 76 00             	lea    0x0(%esi),%esi
+  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 100:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 103:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 106:	83 c1 01             	add    $0x1,%ecx
+ 109:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 10c:	84 c0                	test   %al,%al
+ 10e:	74 10                	je     120 <strcmp+0x40>
+ 110:	38 d8                	cmp    %bl,%al
+ 112:	74 ec                	je     100 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 114:	29 d8                	sub    %ebx,%eax
+}
+ 116:	5b                   	pop    %ebx
+ 117:	5d                   	pop    %ebp
+ 118:	c3                   	ret    
+ 119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 120:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 122:	29 d8                	sub    %ebx,%eax
+}
+ 124:	5b                   	pop    %ebx
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	89 f6                	mov    %esi,%esi
+ 129:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000130 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 136:	80 39 00             	cmpb   $0x0,(%ecx)
+ 139:	74 15                	je     150 <strlen+0x20>
+ 13b:	31 d2                	xor    %edx,%edx
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+ 140:	83 c2 01             	add    $0x1,%edx
+ 143:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 147:	89 d0                	mov    %edx,%eax
+ 149:	75 f5                	jne    140 <strlen+0x10>
+    ;
+  return n;
+}
+ 14b:	5d                   	pop    %ebp
+ 14c:	c3                   	ret    
+ 14d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 150:	31 c0                	xor    %eax,%eax
+}
+ 152:	5d                   	pop    %ebp
+ 153:	c3                   	ret    
+ 154:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 15a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000160 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 160:	55                   	push   %ebp
+ 161:	89 e5                	mov    %esp,%ebp
+ 163:	57                   	push   %edi
+ 164:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 167:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 16a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 16d:	89 d7                	mov    %edx,%edi
+ 16f:	fc                   	cld    
+ 170:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 172:	89 d0                	mov    %edx,%eax
+ 174:	5f                   	pop    %edi
+ 175:	5d                   	pop    %ebp
+ 176:	c3                   	ret    
+ 177:	89 f6                	mov    %esi,%esi
+ 179:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000180 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	53                   	push   %ebx
+ 184:	8b 45 08             	mov    0x8(%ebp),%eax
+ 187:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 18a:	0f b6 10             	movzbl (%eax),%edx
+ 18d:	84 d2                	test   %dl,%dl
+ 18f:	74 1d                	je     1ae <strchr+0x2e>
+    if(*s == c)
+ 191:	38 d3                	cmp    %dl,%bl
+ 193:	89 d9                	mov    %ebx,%ecx
+ 195:	75 0d                	jne    1a4 <strchr+0x24>
+ 197:	eb 17                	jmp    1b0 <strchr+0x30>
+ 199:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1a0:	38 ca                	cmp    %cl,%dl
+ 1a2:	74 0c                	je     1b0 <strchr+0x30>
+  for(; *s; s++)
+ 1a4:	83 c0 01             	add    $0x1,%eax
+ 1a7:	0f b6 10             	movzbl (%eax),%edx
+ 1aa:	84 d2                	test   %dl,%dl
+ 1ac:	75 f2                	jne    1a0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 1ae:	31 c0                	xor    %eax,%eax
+}
+ 1b0:	5b                   	pop    %ebx
+ 1b1:	5d                   	pop    %ebp
+ 1b2:	c3                   	ret    
+ 1b3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001c0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	57                   	push   %edi
+ 1c4:	56                   	push   %esi
+ 1c5:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1c6:	31 f6                	xor    %esi,%esi
+ 1c8:	89 f3                	mov    %esi,%ebx
+{
+ 1ca:	83 ec 1c             	sub    $0x1c,%esp
+ 1cd:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1d0:	eb 2f                	jmp    201 <gets+0x41>
+ 1d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1d8:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1db:	83 ec 04             	sub    $0x4,%esp
+ 1de:	6a 01                	push   $0x1
+ 1e0:	50                   	push   %eax
+ 1e1:	6a 00                	push   $0x0
+ 1e3:	e8 32 01 00 00       	call   31a <read>
+    if(cc < 1)
+ 1e8:	83 c4 10             	add    $0x10,%esp
+ 1eb:	85 c0                	test   %eax,%eax
+ 1ed:	7e 1c                	jle    20b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 1ef:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1f3:	83 c7 01             	add    $0x1,%edi
+ 1f6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1f9:	3c 0a                	cmp    $0xa,%al
+ 1fb:	74 23                	je     220 <gets+0x60>
+ 1fd:	3c 0d                	cmp    $0xd,%al
+ 1ff:	74 1f                	je     220 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 201:	83 c3 01             	add    $0x1,%ebx
+ 204:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 207:	89 fe                	mov    %edi,%esi
+ 209:	7c cd                	jl     1d8 <gets+0x18>
+ 20b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 20d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 210:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 213:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 216:	5b                   	pop    %ebx
+ 217:	5e                   	pop    %esi
+ 218:	5f                   	pop    %edi
+ 219:	5d                   	pop    %ebp
+ 21a:	c3                   	ret    
+ 21b:	90                   	nop
+ 21c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 220:	8b 75 08             	mov    0x8(%ebp),%esi
+ 223:	8b 45 08             	mov    0x8(%ebp),%eax
+ 226:	01 de                	add    %ebx,%esi
+ 228:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 22a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 22d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 230:	5b                   	pop    %ebx
+ 231:	5e                   	pop    %esi
+ 232:	5f                   	pop    %edi
+ 233:	5d                   	pop    %ebp
+ 234:	c3                   	ret    
+ 235:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 239:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000240 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	56                   	push   %esi
+ 244:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 245:	83 ec 08             	sub    $0x8,%esp
+ 248:	6a 00                	push   $0x0
+ 24a:	ff 75 08             	pushl  0x8(%ebp)
+ 24d:	e8 f0 00 00 00       	call   342 <open>
+  if(fd < 0)
+ 252:	83 c4 10             	add    $0x10,%esp
+ 255:	85 c0                	test   %eax,%eax
+ 257:	78 27                	js     280 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 259:	83 ec 08             	sub    $0x8,%esp
+ 25c:	ff 75 0c             	pushl  0xc(%ebp)
+ 25f:	89 c3                	mov    %eax,%ebx
+ 261:	50                   	push   %eax
+ 262:	e8 f3 00 00 00       	call   35a <fstat>
+  close(fd);
+ 267:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 26a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 26c:	e8 b9 00 00 00       	call   32a <close>
+  return r;
+ 271:	83 c4 10             	add    $0x10,%esp
+}
+ 274:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 277:	89 f0                	mov    %esi,%eax
+ 279:	5b                   	pop    %ebx
+ 27a:	5e                   	pop    %esi
+ 27b:	5d                   	pop    %ebp
+ 27c:	c3                   	ret    
+ 27d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 280:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 285:	eb ed                	jmp    274 <stat+0x34>
+ 287:	89 f6                	mov    %esi,%esi
+ 289:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000290 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	53                   	push   %ebx
+ 294:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 297:	0f be 11             	movsbl (%ecx),%edx
+ 29a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 29d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 29f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 2a4:	77 1f                	ja     2c5 <atoi+0x35>
+ 2a6:	8d 76 00             	lea    0x0(%esi),%esi
+ 2a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 2b0:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 2b3:	83 c1 01             	add    $0x1,%ecx
+ 2b6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 2ba:	0f be 11             	movsbl (%ecx),%edx
+ 2bd:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 2c0:	80 fb 09             	cmp    $0x9,%bl
+ 2c3:	76 eb                	jbe    2b0 <atoi+0x20>
+  return n;
+}
+ 2c5:	5b                   	pop    %ebx
+ 2c6:	5d                   	pop    %ebp
+ 2c7:	c3                   	ret    
+ 2c8:	90                   	nop
+ 2c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000002d0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2d0:	55                   	push   %ebp
+ 2d1:	89 e5                	mov    %esp,%ebp
+ 2d3:	56                   	push   %esi
+ 2d4:	53                   	push   %ebx
+ 2d5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 2d8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2db:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2de:	85 db                	test   %ebx,%ebx
+ 2e0:	7e 14                	jle    2f6 <memmove+0x26>
+ 2e2:	31 d2                	xor    %edx,%edx
+ 2e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 2e8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 2ec:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 2ef:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 2f2:	39 d3                	cmp    %edx,%ebx
+ 2f4:	75 f2                	jne    2e8 <memmove+0x18>
+  return vdst;
+}
+ 2f6:	5b                   	pop    %ebx
+ 2f7:	5e                   	pop    %esi
+ 2f8:	5d                   	pop    %ebp
+ 2f9:	c3                   	ret    
+
+000002fa <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2fa:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <exit>:
+SYSCALL(exit)
+ 302:	b8 02 00 00 00       	mov    $0x2,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <wait>:
+SYSCALL(wait)
+ 30a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <pipe>:
+SYSCALL(pipe)
+ 312:	b8 04 00 00 00       	mov    $0x4,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <read>:
+SYSCALL(read)
+ 31a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <write>:
+SYSCALL(write)
+ 322:	b8 10 00 00 00       	mov    $0x10,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <close>:
+SYSCALL(close)
+ 32a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <kill>:
+SYSCALL(kill)
+ 332:	b8 06 00 00 00       	mov    $0x6,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <exec>:
+SYSCALL(exec)
+ 33a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <open>:
+SYSCALL(open)
+ 342:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <mknod>:
+SYSCALL(mknod)
+ 34a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <unlink>:
+SYSCALL(unlink)
+ 352:	b8 12 00 00 00       	mov    $0x12,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <fstat>:
+SYSCALL(fstat)
+ 35a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <link>:
+SYSCALL(link)
+ 362:	b8 13 00 00 00       	mov    $0x13,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <mkdir>:
+SYSCALL(mkdir)
+ 36a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <chdir>:
+SYSCALL(chdir)
+ 372:	b8 09 00 00 00       	mov    $0x9,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <dup>:
+SYSCALL(dup)
+ 37a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <getpid>:
+SYSCALL(getpid)
+ 382:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <sbrk>:
+SYSCALL(sbrk)
+ 38a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <sleep>:
+SYSCALL(sleep)
+ 392:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <uptime>:
+SYSCALL(uptime)
+ 39a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <kmalloc>:
+SYSCALL(kmalloc)
+ 3a2:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <kmfree>:
+SYSCALL(kmfree) 
+ 3aa:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <mmap>:
+SYSCALL(mmap)
+ 3b2:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <munmap>:
+ 3ba:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+ 3c2:	66 90                	xchg   %ax,%ax
+ 3c4:	66 90                	xchg   %ax,%ax
+ 3c6:	66 90                	xchg   %ax,%ax
+ 3c8:	66 90                	xchg   %ax,%ax
+ 3ca:	66 90                	xchg   %ax,%ax
+ 3cc:	66 90                	xchg   %ax,%ax
+ 3ce:	66 90                	xchg   %ax,%ax
+
+000003d0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3d0:	55                   	push   %ebp
+ 3d1:	89 e5                	mov    %esp,%ebp
+ 3d3:	57                   	push   %edi
+ 3d4:	56                   	push   %esi
+ 3d5:	53                   	push   %ebx
+ 3d6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3d9:	85 d2                	test   %edx,%edx
+{
+ 3db:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 3de:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 3e0:	79 76                	jns    458 <printint+0x88>
+ 3e2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3e6:	74 70                	je     458 <printint+0x88>
+    x = -xx;
+ 3e8:	f7 d8                	neg    %eax
+    neg = 1;
+ 3ea:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3f1:	31 f6                	xor    %esi,%esi
+ 3f3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3f6:	eb 0a                	jmp    402 <printint+0x32>
+ 3f8:	90                   	nop
+ 3f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 400:	89 fe                	mov    %edi,%esi
+ 402:	31 d2                	xor    %edx,%edx
+ 404:	8d 7e 01             	lea    0x1(%esi),%edi
+ 407:	f7 f1                	div    %ecx
+ 409:	0f b6 92 38 08 00 00 	movzbl 0x838(%edx),%edx
+  }while((x /= base) != 0);
+ 410:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 412:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 415:	75 e9                	jne    400 <printint+0x30>
+  if(neg)
+ 417:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 41a:	85 c0                	test   %eax,%eax
+ 41c:	74 08                	je     426 <printint+0x56>
+    buf[i++] = '-';
+ 41e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 423:	8d 7e 02             	lea    0x2(%esi),%edi
+ 426:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 42a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 42d:	8d 76 00             	lea    0x0(%esi),%esi
+ 430:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 433:	83 ec 04             	sub    $0x4,%esp
+ 436:	83 ee 01             	sub    $0x1,%esi
+ 439:	6a 01                	push   $0x1
+ 43b:	53                   	push   %ebx
+ 43c:	57                   	push   %edi
+ 43d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 440:	e8 dd fe ff ff       	call   322 <write>
+
+  while(--i >= 0)
+ 445:	83 c4 10             	add    $0x10,%esp
+ 448:	39 de                	cmp    %ebx,%esi
+ 44a:	75 e4                	jne    430 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 44c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 44f:	5b                   	pop    %ebx
+ 450:	5e                   	pop    %esi
+ 451:	5f                   	pop    %edi
+ 452:	5d                   	pop    %ebp
+ 453:	c3                   	ret    
+ 454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 458:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 45f:	eb 90                	jmp    3f1 <printint+0x21>
+ 461:	eb 0d                	jmp    470 <printf>
+ 463:	90                   	nop
+ 464:	90                   	nop
+ 465:	90                   	nop
+ 466:	90                   	nop
+ 467:	90                   	nop
+ 468:	90                   	nop
+ 469:	90                   	nop
+ 46a:	90                   	nop
+ 46b:	90                   	nop
+ 46c:	90                   	nop
+ 46d:	90                   	nop
+ 46e:	90                   	nop
+ 46f:	90                   	nop
+
+00000470 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 470:	55                   	push   %ebp
+ 471:	89 e5                	mov    %esp,%ebp
+ 473:	57                   	push   %edi
+ 474:	56                   	push   %esi
+ 475:	53                   	push   %ebx
+ 476:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 479:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 47c:	0f b6 1e             	movzbl (%esi),%ebx
+ 47f:	84 db                	test   %bl,%bl
+ 481:	0f 84 b3 00 00 00    	je     53a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 487:	8d 45 10             	lea    0x10(%ebp),%eax
+ 48a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 48d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 48f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 492:	eb 2f                	jmp    4c3 <printf+0x53>
+ 494:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	0f 84 a7 00 00 00    	je     548 <printf+0xd8>
+  write(fd, &c, 1);
+ 4a1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 4a4:	83 ec 04             	sub    $0x4,%esp
+ 4a7:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 4aa:	6a 01                	push   $0x1
+ 4ac:	50                   	push   %eax
+ 4ad:	ff 75 08             	pushl  0x8(%ebp)
+ 4b0:	e8 6d fe ff ff       	call   322 <write>
+ 4b5:	83 c4 10             	add    $0x10,%esp
+ 4b8:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 4bb:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4bf:	84 db                	test   %bl,%bl
+ 4c1:	74 77                	je     53a <printf+0xca>
+    if(state == 0){
+ 4c3:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 4c5:	0f be cb             	movsbl %bl,%ecx
+ 4c8:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4cb:	74 cb                	je     498 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 4cd:	83 ff 25             	cmp    $0x25,%edi
+ 4d0:	75 e6                	jne    4b8 <printf+0x48>
+      if(c == 'd'){
+ 4d2:	83 f8 64             	cmp    $0x64,%eax
+ 4d5:	0f 84 05 01 00 00    	je     5e0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4db:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4e1:	83 f9 70             	cmp    $0x70,%ecx
+ 4e4:	74 72                	je     558 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4e6:	83 f8 73             	cmp    $0x73,%eax
+ 4e9:	0f 84 99 00 00 00    	je     588 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ef:	83 f8 63             	cmp    $0x63,%eax
+ 4f2:	0f 84 08 01 00 00    	je     600 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4f8:	83 f8 25             	cmp    $0x25,%eax
+ 4fb:	0f 84 ef 00 00 00    	je     5f0 <printf+0x180>
+  write(fd, &c, 1);
+ 501:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 504:	83 ec 04             	sub    $0x4,%esp
+ 507:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 50b:	6a 01                	push   $0x1
+ 50d:	50                   	push   %eax
+ 50e:	ff 75 08             	pushl  0x8(%ebp)
+ 511:	e8 0c fe ff ff       	call   322 <write>
+ 516:	83 c4 0c             	add    $0xc,%esp
+ 519:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 51c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 51f:	6a 01                	push   $0x1
+ 521:	50                   	push   %eax
+ 522:	ff 75 08             	pushl  0x8(%ebp)
+ 525:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 528:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 52a:	e8 f3 fd ff ff       	call   322 <write>
+  for(i = 0; fmt[i]; i++){
+ 52f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 533:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 536:	84 db                	test   %bl,%bl
+ 538:	75 89                	jne    4c3 <printf+0x53>
+    }
+  }
+}
+ 53a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 53d:	5b                   	pop    %ebx
+ 53e:	5e                   	pop    %esi
+ 53f:	5f                   	pop    %edi
+ 540:	5d                   	pop    %ebp
+ 541:	c3                   	ret    
+ 542:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 548:	bf 25 00 00 00       	mov    $0x25,%edi
+ 54d:	e9 66 ff ff ff       	jmp    4b8 <printf+0x48>
+ 552:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 558:	83 ec 0c             	sub    $0xc,%esp
+ 55b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 560:	6a 00                	push   $0x0
+ 562:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 565:	8b 45 08             	mov    0x8(%ebp),%eax
+ 568:	8b 17                	mov    (%edi),%edx
+ 56a:	e8 61 fe ff ff       	call   3d0 <printint>
+        ap++;
+ 56f:	89 f8                	mov    %edi,%eax
+ 571:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 574:	31 ff                	xor    %edi,%edi
+        ap++;
+ 576:	83 c0 04             	add    $0x4,%eax
+ 579:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 57c:	e9 37 ff ff ff       	jmp    4b8 <printf+0x48>
+ 581:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 588:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 58b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 58d:	83 c0 04             	add    $0x4,%eax
+ 590:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 593:	85 c9                	test   %ecx,%ecx
+ 595:	0f 84 8e 00 00 00    	je     629 <printf+0x1b9>
+        while(*s != 0){
+ 59b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 59e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 5a0:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 5a2:	84 c0                	test   %al,%al
+ 5a4:	0f 84 0e ff ff ff    	je     4b8 <printf+0x48>
+ 5aa:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 5ad:	89 de                	mov    %ebx,%esi
+ 5af:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5b2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 5b5:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 5b8:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5bb:	83 c6 01             	add    $0x1,%esi
+ 5be:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 5c1:	6a 01                	push   $0x1
+ 5c3:	57                   	push   %edi
+ 5c4:	53                   	push   %ebx
+ 5c5:	e8 58 fd ff ff       	call   322 <write>
+        while(*s != 0){
+ 5ca:	0f b6 06             	movzbl (%esi),%eax
+ 5cd:	83 c4 10             	add    $0x10,%esp
+ 5d0:	84 c0                	test   %al,%al
+ 5d2:	75 e4                	jne    5b8 <printf+0x148>
+ 5d4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 5d7:	31 ff                	xor    %edi,%edi
+ 5d9:	e9 da fe ff ff       	jmp    4b8 <printf+0x48>
+ 5de:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 5e0:	83 ec 0c             	sub    $0xc,%esp
+ 5e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5e8:	6a 01                	push   $0x1
+ 5ea:	e9 73 ff ff ff       	jmp    562 <printf+0xf2>
+ 5ef:	90                   	nop
+  write(fd, &c, 1);
+ 5f0:	83 ec 04             	sub    $0x4,%esp
+ 5f3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5f6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5f9:	6a 01                	push   $0x1
+ 5fb:	e9 21 ff ff ff       	jmp    521 <printf+0xb1>
+        putc(fd, *ap);
+ 600:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 603:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 606:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 608:	6a 01                	push   $0x1
+        ap++;
+ 60a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 60d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 610:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 613:	50                   	push   %eax
+ 614:	ff 75 08             	pushl  0x8(%ebp)
+ 617:	e8 06 fd ff ff       	call   322 <write>
+        ap++;
+ 61c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 61f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 622:	31 ff                	xor    %edi,%edi
+ 624:	e9 8f fe ff ff       	jmp    4b8 <printf+0x48>
+          s = "(null)";
+ 629:	bb 30 08 00 00       	mov    $0x830,%ebx
+        while(*s != 0){
+ 62e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 633:	e9 72 ff ff ff       	jmp    5aa <printf+0x13a>
+ 638:	66 90                	xchg   %ax,%ax
+ 63a:	66 90                	xchg   %ax,%ax
+ 63c:	66 90                	xchg   %ax,%ax
+ 63e:	66 90                	xchg   %ax,%ax
+
+00000640 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 640:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 641:	a1 e4 0a 00 00       	mov    0xae4,%eax
+{
+ 646:	89 e5                	mov    %esp,%ebp
+ 648:	57                   	push   %edi
+ 649:	56                   	push   %esi
+ 64a:	53                   	push   %ebx
+ 64b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 64e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 658:	39 c8                	cmp    %ecx,%eax
+ 65a:	8b 10                	mov    (%eax),%edx
+ 65c:	73 32                	jae    690 <free+0x50>
+ 65e:	39 d1                	cmp    %edx,%ecx
+ 660:	72 04                	jb     666 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 662:	39 d0                	cmp    %edx,%eax
+ 664:	72 32                	jb     698 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 666:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 669:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 66c:	39 fa                	cmp    %edi,%edx
+ 66e:	74 30                	je     6a0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 670:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 673:	8b 50 04             	mov    0x4(%eax),%edx
+ 676:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 679:	39 f1                	cmp    %esi,%ecx
+ 67b:	74 3a                	je     6b7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 67d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 67f:	a3 e4 0a 00 00       	mov    %eax,0xae4
+}
+ 684:	5b                   	pop    %ebx
+ 685:	5e                   	pop    %esi
+ 686:	5f                   	pop    %edi
+ 687:	5d                   	pop    %ebp
+ 688:	c3                   	ret    
+ 689:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 690:	39 d0                	cmp    %edx,%eax
+ 692:	72 04                	jb     698 <free+0x58>
+ 694:	39 d1                	cmp    %edx,%ecx
+ 696:	72 ce                	jb     666 <free+0x26>
+{
+ 698:	89 d0                	mov    %edx,%eax
+ 69a:	eb bc                	jmp    658 <free+0x18>
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 6a0:	03 72 04             	add    0x4(%edx),%esi
+ 6a3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6a6:	8b 10                	mov    (%eax),%edx
+ 6a8:	8b 12                	mov    (%edx),%edx
+ 6aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6ad:	8b 50 04             	mov    0x4(%eax),%edx
+ 6b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6b3:	39 f1                	cmp    %esi,%ecx
+ 6b5:	75 c6                	jne    67d <free+0x3d>
+    p->s.size += bp->s.size;
+ 6b7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6ba:	a3 e4 0a 00 00       	mov    %eax,0xae4
+    p->s.size += bp->s.size;
+ 6bf:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6c2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6c5:	89 10                	mov    %edx,(%eax)
+}
+ 6c7:	5b                   	pop    %ebx
+ 6c8:	5e                   	pop    %esi
+ 6c9:	5f                   	pop    %edi
+ 6ca:	5d                   	pop    %ebp
+ 6cb:	c3                   	ret    
+ 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006d0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6d0:	55                   	push   %ebp
+ 6d1:	89 e5                	mov    %esp,%ebp
+ 6d3:	57                   	push   %edi
+ 6d4:	56                   	push   %esi
+ 6d5:	53                   	push   %ebx
+ 6d6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6dc:	8b 15 e4 0a 00 00    	mov    0xae4,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6e2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6e5:	c1 ef 03             	shr    $0x3,%edi
+ 6e8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6eb:	85 d2                	test   %edx,%edx
+ 6ed:	0f 84 9d 00 00 00    	je     790 <malloc+0xc0>
+ 6f3:	8b 02                	mov    (%edx),%eax
+ 6f5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 6f8:	39 cf                	cmp    %ecx,%edi
+ 6fa:	76 6c                	jbe    768 <malloc+0x98>
+ 6fc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 702:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 707:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 70a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 711:	eb 0e                	jmp    721 <malloc+0x51>
+ 713:	90                   	nop
+ 714:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 718:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 71a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 71d:	39 f9                	cmp    %edi,%ecx
+ 71f:	73 47                	jae    768 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 721:	39 05 e4 0a 00 00    	cmp    %eax,0xae4
+ 727:	89 c2                	mov    %eax,%edx
+ 729:	75 ed                	jne    718 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 72b:	83 ec 0c             	sub    $0xc,%esp
+ 72e:	56                   	push   %esi
+ 72f:	e8 56 fc ff ff       	call   38a <sbrk>
+  if(p == (char*)-1)
+ 734:	83 c4 10             	add    $0x10,%esp
+ 737:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 73a:	74 1c                	je     758 <malloc+0x88>
+  hp->s.size = nu;
+ 73c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 73f:	83 ec 0c             	sub    $0xc,%esp
+ 742:	83 c0 08             	add    $0x8,%eax
+ 745:	50                   	push   %eax
+ 746:	e8 f5 fe ff ff       	call   640 <free>
+  return freep;
+ 74b:	8b 15 e4 0a 00 00    	mov    0xae4,%edx
+      if((p = morecore(nunits)) == 0)
+ 751:	83 c4 10             	add    $0x10,%esp
+ 754:	85 d2                	test   %edx,%edx
+ 756:	75 c0                	jne    718 <malloc+0x48>
+        return 0;
+  }
+}
+ 758:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 75b:	31 c0                	xor    %eax,%eax
+}
+ 75d:	5b                   	pop    %ebx
+ 75e:	5e                   	pop    %esi
+ 75f:	5f                   	pop    %edi
+ 760:	5d                   	pop    %ebp
+ 761:	c3                   	ret    
+ 762:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 768:	39 cf                	cmp    %ecx,%edi
+ 76a:	74 54                	je     7c0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 76c:	29 f9                	sub    %edi,%ecx
+ 76e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 771:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 774:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 777:	89 15 e4 0a 00 00    	mov    %edx,0xae4
+}
+ 77d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 780:	83 c0 08             	add    $0x8,%eax
+}
+ 783:	5b                   	pop    %ebx
+ 784:	5e                   	pop    %esi
+ 785:	5f                   	pop    %edi
+ 786:	5d                   	pop    %ebp
+ 787:	c3                   	ret    
+ 788:	90                   	nop
+ 789:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 790:	c7 05 e4 0a 00 00 e8 	movl   $0xae8,0xae4
+ 797:	0a 00 00 
+ 79a:	c7 05 e8 0a 00 00 e8 	movl   $0xae8,0xae8
+ 7a1:	0a 00 00 
+    base.s.size = 0;
+ 7a4:	b8 e8 0a 00 00       	mov    $0xae8,%eax
+ 7a9:	c7 05 ec 0a 00 00 00 	movl   $0x0,0xaec
+ 7b0:	00 00 00 
+ 7b3:	e9 44 ff ff ff       	jmp    6fc <malloc+0x2c>
+ 7b8:	90                   	nop
+ 7b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7c0:	8b 08                	mov    (%eax),%ecx
+ 7c2:	89 0a                	mov    %ecx,(%edx)
+ 7c4:	eb b1                	jmp    777 <malloc+0xa7>
diff -ruN src-old/test_6.c src/test_6.c
--- src-old/test_6.c	1970-01-01 00:00:00.000000000 +0000
+++ src/test_6.c	2023-04-19 02:18:53.367861613 +0000
@@ -0,0 +1,45 @@
+#include "param.h"
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+#include "mmu.h"
+
+
+/*Stress Testing allocating large sized memory using anonymous mmap in a loop..*/
+int
+main(int argc, char *argv[])
+{
+  int i;
+  for(i = 0;i<100;i++)
+  {
+    int size =  2100;
+    int modifySize = 2000;
+ 
+    char *addr = (char*)0x4000;
+    char* r = mmap(addr, size,  0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+
+    if (r<=0)
+    {
+      printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+      exit();
+    }
+    
+    memset(r, 'a', modifySize);
+    printf(1, "XV6_TEST_OUTPUT : strlen(r) = %d\n", strlen(r));
+
+    int rv = munmap(r, size);
+    if (rv < 0) 
+    {
+      printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+      exit();
+    }
+
+  }
+
+  exit();
+}
diff -ruN src-old/test_6.d src/test_6.d
--- src-old/test_6.d	1970-01-01 00:00:00.000000000 +0000
+++ src/test_6.d	2023-04-19 02:18:56.508234182 +0000
@@ -0,0 +1,2 @@
+test_6.o: test_6.c /usr/include/stdc-predef.h param.h types.h stat.h \
+ user.h fs.h fcntl.h syscall.h traps.h memlayout.h mmu.h
Binary files src-old/test_6.o and src/test_6.o differ
diff -ruN src-old/test_6.sym src/test_6.sym
--- src-old/test_6.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/test_6.sym	2023-04-19 02:18:56.548238913 +0000
@@ -0,0 +1,61 @@
+00000000 .text
+000007c8 .rodata
+0000084c .eh_frame
+00000ae4 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test_6.c
+00000000 ulib.c
+00000000 printf.c
+000003d0 printint
+00000838 digits.1052
+00000000 umalloc.c
+00000ae4 freep
+00000ae8 base
+000000b0 strcpy
+00000470 printf
+000002d0 memmove
+000003ba munmap
+0000034a mknod
+000001c0 gets
+00000382 getpid
+000006d0 malloc
+00000392 sleep
+000003aa kmfree
+000003b2 mmap
+00000312 pipe
+00000322 write
+0000035a fstat
+00000332 kill
+00000372 chdir
+0000033a exec
+0000030a wait
+0000031a read
+00000352 unlink
+000002fa fork
+0000038a sbrk
+0000039a uptime
+00000ae4 __bss_start
+00000160 memset
+00000000 main
+000000e0 strcmp
+0000037a dup
+00000240 stat
+00000ae4 _edata
+00000af0 _end
+00000362 link
+000003a2 kmalloc
+00000302 exit
+00000290 atoi
+00000130 strlen
+00000342 open
+00000180 strchr
+0000036a mkdir
+0000032a close
+00000640 free
Binary files src-old/_test_7 and src/_test_7 differ
diff -ruN src-old/test_7.asm src/test_7.asm
--- src-old/test_7.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/test_7.asm	2023-04-19 02:18:56.596244591 +0000
@@ -0,0 +1,1240 @@
+
+_test_7:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+
+/*Stress Testing allocating large sized memory using anonymous mmap spanning across multiple pages..*/
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	51                   	push   %ecx
+  
+  int size =  2*PGSIZE;
+
+  char *addr = (char*)0x4000;
+  char* r = mmap(addr, size,  0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+   f:	83 ec 08             	sub    $0x8,%esp
+  12:	6a 00                	push   $0x0
+  14:	6a ff                	push   $0xffffffff
+  16:	6a 00                	push   $0x0
+  18:	6a 00                	push   $0x0
+  1a:	68 00 20 00 00       	push   $0x2000
+  1f:	68 00 40 00 00       	push   $0x4000
+  24:	e8 99 03 00 00       	call   3c2 <mmap>
+
+  if (r<=0)
+  29:	83 c4 20             	add    $0x20,%esp
+  2c:	85 c0                	test   %eax,%eax
+  2e:	74 73                	je     a3 <main+0xa3>
+  {
+    printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+    exit();
+  }
+  
+  printf(1, "XV6_TEST_OUTPUT : mmap good\n");
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	89 c3                	mov    %eax,%ebx
+  35:	68 60 08 00 00       	push   $0x860
+  3a:	6a 01                	push   $0x1
+  3c:	e8 3f 04 00 00       	call   480 <printf>
+
+  memset(r, 'a', size - 1);
+  41:	83 c4 0c             	add    $0xc,%esp
+  44:	68 ff 1f 00 00       	push   $0x1fff
+  49:	6a 61                	push   $0x61
+  4b:	53                   	push   %ebx
+  4c:	e8 1f 01 00 00       	call   170 <memset>
+  printf(1, "XV6_TEST_OUTPUT : strlen(r) = %d\n", strlen(r));
+  51:	89 1c 24             	mov    %ebx,(%esp)
+  54:	e8 e7 00 00 00       	call   140 <strlen>
+  59:	83 c4 0c             	add    $0xc,%esp
+  5c:	50                   	push   %eax
+  5d:	68 f8 07 00 00       	push   $0x7f8
+  62:	6a 01                	push   $0x1
+  64:	e8 17 04 00 00       	call   480 <printf>
+
+  int rv = munmap(r, size);
+  69:	59                   	pop    %ecx
+  6a:	58                   	pop    %eax
+  6b:	68 00 20 00 00       	push   $0x2000
+  70:	53                   	push   %ebx
+  71:	e8 54 03 00 00       	call   3ca <munmap>
+  if (rv < 0) 
+  76:	83 c4 10             	add    $0x10,%esp
+  79:	85 c0                	test   %eax,%eax
+  7b:	78 13                	js     90 <main+0x90>
+  {
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    exit();
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : munmap good\n");
+  7d:	50                   	push   %eax
+  7e:	50                   	push   %eax
+  7f:	68 40 08 00 00       	push   $0x840
+  84:	6a 01                	push   $0x1
+  86:	e8 f5 03 00 00       	call   480 <printf>
+  
+  exit();
+  8b:	e8 82 02 00 00       	call   312 <exit>
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+  90:	52                   	push   %edx
+  91:	52                   	push   %edx
+  92:	68 1c 08 00 00       	push   $0x81c
+  97:	6a 01                	push   $0x1
+  99:	e8 e2 03 00 00       	call   480 <printf>
+    exit();
+  9e:	e8 6f 02 00 00       	call   312 <exit>
+    printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+  a3:	50                   	push   %eax
+  a4:	50                   	push   %eax
+  a5:	68 d8 07 00 00       	push   $0x7d8
+  aa:	6a 01                	push   $0x1
+  ac:	e8 cf 03 00 00       	call   480 <printf>
+    exit();
+  b1:	e8 5c 02 00 00       	call   312 <exit>
+  b6:	66 90                	xchg   %ax,%ax
+  b8:	66 90                	xchg   %ax,%ax
+  ba:	66 90                	xchg   %ax,%ax
+  bc:	66 90                	xchg   %ax,%ax
+  be:	66 90                	xchg   %ax,%ax
+
+000000c0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  c0:	55                   	push   %ebp
+  c1:	89 e5                	mov    %esp,%ebp
+  c3:	53                   	push   %ebx
+  c4:	8b 45 08             	mov    0x8(%ebp),%eax
+  c7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  ca:	89 c2                	mov    %eax,%edx
+  cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  d0:	83 c1 01             	add    $0x1,%ecx
+  d3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  d7:	83 c2 01             	add    $0x1,%edx
+  da:	84 db                	test   %bl,%bl
+  dc:	88 5a ff             	mov    %bl,-0x1(%edx)
+  df:	75 ef                	jne    d0 <strcpy+0x10>
+    ;
+  return os;
+}
+  e1:	5b                   	pop    %ebx
+  e2:	5d                   	pop    %ebp
+  e3:	c3                   	ret    
+  e4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  ea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000f0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	53                   	push   %ebx
+  f4:	8b 55 08             	mov    0x8(%ebp),%edx
+  f7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  fa:	0f b6 02             	movzbl (%edx),%eax
+  fd:	0f b6 19             	movzbl (%ecx),%ebx
+ 100:	84 c0                	test   %al,%al
+ 102:	75 1c                	jne    120 <strcmp+0x30>
+ 104:	eb 2a                	jmp    130 <strcmp+0x40>
+ 106:	8d 76 00             	lea    0x0(%esi),%esi
+ 109:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 110:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 113:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 116:	83 c1 01             	add    $0x1,%ecx
+ 119:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 11c:	84 c0                	test   %al,%al
+ 11e:	74 10                	je     130 <strcmp+0x40>
+ 120:	38 d8                	cmp    %bl,%al
+ 122:	74 ec                	je     110 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 124:	29 d8                	sub    %ebx,%eax
+}
+ 126:	5b                   	pop    %ebx
+ 127:	5d                   	pop    %ebp
+ 128:	c3                   	ret    
+ 129:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 130:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 132:	29 d8                	sub    %ebx,%eax
+}
+ 134:	5b                   	pop    %ebx
+ 135:	5d                   	pop    %ebp
+ 136:	c3                   	ret    
+ 137:	89 f6                	mov    %esi,%esi
+ 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000140 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 146:	80 39 00             	cmpb   $0x0,(%ecx)
+ 149:	74 15                	je     160 <strlen+0x20>
+ 14b:	31 d2                	xor    %edx,%edx
+ 14d:	8d 76 00             	lea    0x0(%esi),%esi
+ 150:	83 c2 01             	add    $0x1,%edx
+ 153:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 157:	89 d0                	mov    %edx,%eax
+ 159:	75 f5                	jne    150 <strlen+0x10>
+    ;
+  return n;
+}
+ 15b:	5d                   	pop    %ebp
+ 15c:	c3                   	ret    
+ 15d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 160:	31 c0                	xor    %eax,%eax
+}
+ 162:	5d                   	pop    %ebp
+ 163:	c3                   	ret    
+ 164:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 16a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000170 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	57                   	push   %edi
+ 174:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 177:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 17a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 17d:	89 d7                	mov    %edx,%edi
+ 17f:	fc                   	cld    
+ 180:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 182:	89 d0                	mov    %edx,%eax
+ 184:	5f                   	pop    %edi
+ 185:	5d                   	pop    %ebp
+ 186:	c3                   	ret    
+ 187:	89 f6                	mov    %esi,%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000190 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	53                   	push   %ebx
+ 194:	8b 45 08             	mov    0x8(%ebp),%eax
+ 197:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 19a:	0f b6 10             	movzbl (%eax),%edx
+ 19d:	84 d2                	test   %dl,%dl
+ 19f:	74 1d                	je     1be <strchr+0x2e>
+    if(*s == c)
+ 1a1:	38 d3                	cmp    %dl,%bl
+ 1a3:	89 d9                	mov    %ebx,%ecx
+ 1a5:	75 0d                	jne    1b4 <strchr+0x24>
+ 1a7:	eb 17                	jmp    1c0 <strchr+0x30>
+ 1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1b0:	38 ca                	cmp    %cl,%dl
+ 1b2:	74 0c                	je     1c0 <strchr+0x30>
+  for(; *s; s++)
+ 1b4:	83 c0 01             	add    $0x1,%eax
+ 1b7:	0f b6 10             	movzbl (%eax),%edx
+ 1ba:	84 d2                	test   %dl,%dl
+ 1bc:	75 f2                	jne    1b0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 1be:	31 c0                	xor    %eax,%eax
+}
+ 1c0:	5b                   	pop    %ebx
+ 1c1:	5d                   	pop    %ebp
+ 1c2:	c3                   	ret    
+ 1c3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001d0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	57                   	push   %edi
+ 1d4:	56                   	push   %esi
+ 1d5:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1d6:	31 f6                	xor    %esi,%esi
+ 1d8:	89 f3                	mov    %esi,%ebx
+{
+ 1da:	83 ec 1c             	sub    $0x1c,%esp
+ 1dd:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1e0:	eb 2f                	jmp    211 <gets+0x41>
+ 1e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1e8:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1eb:	83 ec 04             	sub    $0x4,%esp
+ 1ee:	6a 01                	push   $0x1
+ 1f0:	50                   	push   %eax
+ 1f1:	6a 00                	push   $0x0
+ 1f3:	e8 32 01 00 00       	call   32a <read>
+    if(cc < 1)
+ 1f8:	83 c4 10             	add    $0x10,%esp
+ 1fb:	85 c0                	test   %eax,%eax
+ 1fd:	7e 1c                	jle    21b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 1ff:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 203:	83 c7 01             	add    $0x1,%edi
+ 206:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 209:	3c 0a                	cmp    $0xa,%al
+ 20b:	74 23                	je     230 <gets+0x60>
+ 20d:	3c 0d                	cmp    $0xd,%al
+ 20f:	74 1f                	je     230 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 211:	83 c3 01             	add    $0x1,%ebx
+ 214:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 217:	89 fe                	mov    %edi,%esi
+ 219:	7c cd                	jl     1e8 <gets+0x18>
+ 21b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 21d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 220:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 223:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 226:	5b                   	pop    %ebx
+ 227:	5e                   	pop    %esi
+ 228:	5f                   	pop    %edi
+ 229:	5d                   	pop    %ebp
+ 22a:	c3                   	ret    
+ 22b:	90                   	nop
+ 22c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 230:	8b 75 08             	mov    0x8(%ebp),%esi
+ 233:	8b 45 08             	mov    0x8(%ebp),%eax
+ 236:	01 de                	add    %ebx,%esi
+ 238:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 23a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 23d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 240:	5b                   	pop    %ebx
+ 241:	5e                   	pop    %esi
+ 242:	5f                   	pop    %edi
+ 243:	5d                   	pop    %ebp
+ 244:	c3                   	ret    
+ 245:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000250 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	56                   	push   %esi
+ 254:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 255:	83 ec 08             	sub    $0x8,%esp
+ 258:	6a 00                	push   $0x0
+ 25a:	ff 75 08             	pushl  0x8(%ebp)
+ 25d:	e8 f0 00 00 00       	call   352 <open>
+  if(fd < 0)
+ 262:	83 c4 10             	add    $0x10,%esp
+ 265:	85 c0                	test   %eax,%eax
+ 267:	78 27                	js     290 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 269:	83 ec 08             	sub    $0x8,%esp
+ 26c:	ff 75 0c             	pushl  0xc(%ebp)
+ 26f:	89 c3                	mov    %eax,%ebx
+ 271:	50                   	push   %eax
+ 272:	e8 f3 00 00 00       	call   36a <fstat>
+  close(fd);
+ 277:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 27a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 27c:	e8 b9 00 00 00       	call   33a <close>
+  return r;
+ 281:	83 c4 10             	add    $0x10,%esp
+}
+ 284:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 287:	89 f0                	mov    %esi,%eax
+ 289:	5b                   	pop    %ebx
+ 28a:	5e                   	pop    %esi
+ 28b:	5d                   	pop    %ebp
+ 28c:	c3                   	ret    
+ 28d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 290:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 295:	eb ed                	jmp    284 <stat+0x34>
+ 297:	89 f6                	mov    %esi,%esi
+ 299:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002a0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	53                   	push   %ebx
+ 2a4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2a7:	0f be 11             	movsbl (%ecx),%edx
+ 2aa:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 2ad:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 2af:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 2b4:	77 1f                	ja     2d5 <atoi+0x35>
+ 2b6:	8d 76 00             	lea    0x0(%esi),%esi
+ 2b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 2c0:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 2c3:	83 c1 01             	add    $0x1,%ecx
+ 2c6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 2ca:	0f be 11             	movsbl (%ecx),%edx
+ 2cd:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 2d0:	80 fb 09             	cmp    $0x9,%bl
+ 2d3:	76 eb                	jbe    2c0 <atoi+0x20>
+  return n;
+}
+ 2d5:	5b                   	pop    %ebx
+ 2d6:	5d                   	pop    %ebp
+ 2d7:	c3                   	ret    
+ 2d8:	90                   	nop
+ 2d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000002e0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2e0:	55                   	push   %ebp
+ 2e1:	89 e5                	mov    %esp,%ebp
+ 2e3:	56                   	push   %esi
+ 2e4:	53                   	push   %ebx
+ 2e5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 2e8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2eb:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2ee:	85 db                	test   %ebx,%ebx
+ 2f0:	7e 14                	jle    306 <memmove+0x26>
+ 2f2:	31 d2                	xor    %edx,%edx
+ 2f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 2f8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 2fc:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 2ff:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 302:	39 d3                	cmp    %edx,%ebx
+ 304:	75 f2                	jne    2f8 <memmove+0x18>
+  return vdst;
+}
+ 306:	5b                   	pop    %ebx
+ 307:	5e                   	pop    %esi
+ 308:	5d                   	pop    %ebp
+ 309:	c3                   	ret    
+
+0000030a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 30a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <exit>:
+SYSCALL(exit)
+ 312:	b8 02 00 00 00       	mov    $0x2,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <wait>:
+SYSCALL(wait)
+ 31a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <pipe>:
+SYSCALL(pipe)
+ 322:	b8 04 00 00 00       	mov    $0x4,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <read>:
+SYSCALL(read)
+ 32a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <write>:
+SYSCALL(write)
+ 332:	b8 10 00 00 00       	mov    $0x10,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <close>:
+SYSCALL(close)
+ 33a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <kill>:
+SYSCALL(kill)
+ 342:	b8 06 00 00 00       	mov    $0x6,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <exec>:
+SYSCALL(exec)
+ 34a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <open>:
+SYSCALL(open)
+ 352:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <mknod>:
+SYSCALL(mknod)
+ 35a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <unlink>:
+SYSCALL(unlink)
+ 362:	b8 12 00 00 00       	mov    $0x12,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <fstat>:
+SYSCALL(fstat)
+ 36a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <link>:
+SYSCALL(link)
+ 372:	b8 13 00 00 00       	mov    $0x13,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <mkdir>:
+SYSCALL(mkdir)
+ 37a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <chdir>:
+SYSCALL(chdir)
+ 382:	b8 09 00 00 00       	mov    $0x9,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <dup>:
+SYSCALL(dup)
+ 38a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <getpid>:
+SYSCALL(getpid)
+ 392:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <sbrk>:
+SYSCALL(sbrk)
+ 39a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <sleep>:
+SYSCALL(sleep)
+ 3a2:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <uptime>:
+SYSCALL(uptime)
+ 3aa:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <kmalloc>:
+SYSCALL(kmalloc)
+ 3b2:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <kmfree>:
+SYSCALL(kmfree) 
+ 3ba:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <mmap>:
+SYSCALL(mmap)
+ 3c2:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <munmap>:
+ 3ca:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+ 3d2:	66 90                	xchg   %ax,%ax
+ 3d4:	66 90                	xchg   %ax,%ax
+ 3d6:	66 90                	xchg   %ax,%ax
+ 3d8:	66 90                	xchg   %ax,%ax
+ 3da:	66 90                	xchg   %ax,%ax
+ 3dc:	66 90                	xchg   %ax,%ax
+ 3de:	66 90                	xchg   %ax,%ax
+
+000003e0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3e0:	55                   	push   %ebp
+ 3e1:	89 e5                	mov    %esp,%ebp
+ 3e3:	57                   	push   %edi
+ 3e4:	56                   	push   %esi
+ 3e5:	53                   	push   %ebx
+ 3e6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3e9:	85 d2                	test   %edx,%edx
+{
+ 3eb:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 3ee:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 3f0:	79 76                	jns    468 <printint+0x88>
+ 3f2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3f6:	74 70                	je     468 <printint+0x88>
+    x = -xx;
+ 3f8:	f7 d8                	neg    %eax
+    neg = 1;
+ 3fa:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 401:	31 f6                	xor    %esi,%esi
+ 403:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 406:	eb 0a                	jmp    412 <printint+0x32>
+ 408:	90                   	nop
+ 409:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 410:	89 fe                	mov    %edi,%esi
+ 412:	31 d2                	xor    %edx,%edx
+ 414:	8d 7e 01             	lea    0x1(%esi),%edi
+ 417:	f7 f1                	div    %ecx
+ 419:	0f b6 92 84 08 00 00 	movzbl 0x884(%edx),%edx
+  }while((x /= base) != 0);
+ 420:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 422:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 425:	75 e9                	jne    410 <printint+0x30>
+  if(neg)
+ 427:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 42a:	85 c0                	test   %eax,%eax
+ 42c:	74 08                	je     436 <printint+0x56>
+    buf[i++] = '-';
+ 42e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 433:	8d 7e 02             	lea    0x2(%esi),%edi
+ 436:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 43a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 43d:	8d 76 00             	lea    0x0(%esi),%esi
+ 440:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 443:	83 ec 04             	sub    $0x4,%esp
+ 446:	83 ee 01             	sub    $0x1,%esi
+ 449:	6a 01                	push   $0x1
+ 44b:	53                   	push   %ebx
+ 44c:	57                   	push   %edi
+ 44d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 450:	e8 dd fe ff ff       	call   332 <write>
+
+  while(--i >= 0)
+ 455:	83 c4 10             	add    $0x10,%esp
+ 458:	39 de                	cmp    %ebx,%esi
+ 45a:	75 e4                	jne    440 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 45c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 45f:	5b                   	pop    %ebx
+ 460:	5e                   	pop    %esi
+ 461:	5f                   	pop    %edi
+ 462:	5d                   	pop    %ebp
+ 463:	c3                   	ret    
+ 464:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 468:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 46f:	eb 90                	jmp    401 <printint+0x21>
+ 471:	eb 0d                	jmp    480 <printf>
+ 473:	90                   	nop
+ 474:	90                   	nop
+ 475:	90                   	nop
+ 476:	90                   	nop
+ 477:	90                   	nop
+ 478:	90                   	nop
+ 479:	90                   	nop
+ 47a:	90                   	nop
+ 47b:	90                   	nop
+ 47c:	90                   	nop
+ 47d:	90                   	nop
+ 47e:	90                   	nop
+ 47f:	90                   	nop
+
+00000480 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 480:	55                   	push   %ebp
+ 481:	89 e5                	mov    %esp,%ebp
+ 483:	57                   	push   %edi
+ 484:	56                   	push   %esi
+ 485:	53                   	push   %ebx
+ 486:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 489:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 48c:	0f b6 1e             	movzbl (%esi),%ebx
+ 48f:	84 db                	test   %bl,%bl
+ 491:	0f 84 b3 00 00 00    	je     54a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 497:	8d 45 10             	lea    0x10(%ebp),%eax
+ 49a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 49d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 49f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4a2:	eb 2f                	jmp    4d3 <printf+0x53>
+ 4a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	0f 84 a7 00 00 00    	je     558 <printf+0xd8>
+  write(fd, &c, 1);
+ 4b1:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 4b4:	83 ec 04             	sub    $0x4,%esp
+ 4b7:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 4ba:	6a 01                	push   $0x1
+ 4bc:	50                   	push   %eax
+ 4bd:	ff 75 08             	pushl  0x8(%ebp)
+ 4c0:	e8 6d fe ff ff       	call   332 <write>
+ 4c5:	83 c4 10             	add    $0x10,%esp
+ 4c8:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 4cb:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4cf:	84 db                	test   %bl,%bl
+ 4d1:	74 77                	je     54a <printf+0xca>
+    if(state == 0){
+ 4d3:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 4d5:	0f be cb             	movsbl %bl,%ecx
+ 4d8:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4db:	74 cb                	je     4a8 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 4dd:	83 ff 25             	cmp    $0x25,%edi
+ 4e0:	75 e6                	jne    4c8 <printf+0x48>
+      if(c == 'd'){
+ 4e2:	83 f8 64             	cmp    $0x64,%eax
+ 4e5:	0f 84 05 01 00 00    	je     5f0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4eb:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4f1:	83 f9 70             	cmp    $0x70,%ecx
+ 4f4:	74 72                	je     568 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4f6:	83 f8 73             	cmp    $0x73,%eax
+ 4f9:	0f 84 99 00 00 00    	je     598 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ff:	83 f8 63             	cmp    $0x63,%eax
+ 502:	0f 84 08 01 00 00    	je     610 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 508:	83 f8 25             	cmp    $0x25,%eax
+ 50b:	0f 84 ef 00 00 00    	je     600 <printf+0x180>
+  write(fd, &c, 1);
+ 511:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 514:	83 ec 04             	sub    $0x4,%esp
+ 517:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 51b:	6a 01                	push   $0x1
+ 51d:	50                   	push   %eax
+ 51e:	ff 75 08             	pushl  0x8(%ebp)
+ 521:	e8 0c fe ff ff       	call   332 <write>
+ 526:	83 c4 0c             	add    $0xc,%esp
+ 529:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 52c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 52f:	6a 01                	push   $0x1
+ 531:	50                   	push   %eax
+ 532:	ff 75 08             	pushl  0x8(%ebp)
+ 535:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 538:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 53a:	e8 f3 fd ff ff       	call   332 <write>
+  for(i = 0; fmt[i]; i++){
+ 53f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 543:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 546:	84 db                	test   %bl,%bl
+ 548:	75 89                	jne    4d3 <printf+0x53>
+    }
+  }
+}
+ 54a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 54d:	5b                   	pop    %ebx
+ 54e:	5e                   	pop    %esi
+ 54f:	5f                   	pop    %edi
+ 550:	5d                   	pop    %ebp
+ 551:	c3                   	ret    
+ 552:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 558:	bf 25 00 00 00       	mov    $0x25,%edi
+ 55d:	e9 66 ff ff ff       	jmp    4c8 <printf+0x48>
+ 562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 568:	83 ec 0c             	sub    $0xc,%esp
+ 56b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 570:	6a 00                	push   $0x0
+ 572:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 575:	8b 45 08             	mov    0x8(%ebp),%eax
+ 578:	8b 17                	mov    (%edi),%edx
+ 57a:	e8 61 fe ff ff       	call   3e0 <printint>
+        ap++;
+ 57f:	89 f8                	mov    %edi,%eax
+ 581:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 584:	31 ff                	xor    %edi,%edi
+        ap++;
+ 586:	83 c0 04             	add    $0x4,%eax
+ 589:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 58c:	e9 37 ff ff ff       	jmp    4c8 <printf+0x48>
+ 591:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 598:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 59b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 59d:	83 c0 04             	add    $0x4,%eax
+ 5a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 5a3:	85 c9                	test   %ecx,%ecx
+ 5a5:	0f 84 8e 00 00 00    	je     639 <printf+0x1b9>
+        while(*s != 0){
+ 5ab:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 5ae:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 5b0:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 5b2:	84 c0                	test   %al,%al
+ 5b4:	0f 84 0e ff ff ff    	je     4c8 <printf+0x48>
+ 5ba:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 5bd:	89 de                	mov    %ebx,%esi
+ 5bf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5c2:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 5c5:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 5c8:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5cb:	83 c6 01             	add    $0x1,%esi
+ 5ce:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 5d1:	6a 01                	push   $0x1
+ 5d3:	57                   	push   %edi
+ 5d4:	53                   	push   %ebx
+ 5d5:	e8 58 fd ff ff       	call   332 <write>
+        while(*s != 0){
+ 5da:	0f b6 06             	movzbl (%esi),%eax
+ 5dd:	83 c4 10             	add    $0x10,%esp
+ 5e0:	84 c0                	test   %al,%al
+ 5e2:	75 e4                	jne    5c8 <printf+0x148>
+ 5e4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 5e7:	31 ff                	xor    %edi,%edi
+ 5e9:	e9 da fe ff ff       	jmp    4c8 <printf+0x48>
+ 5ee:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 5f0:	83 ec 0c             	sub    $0xc,%esp
+ 5f3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5f8:	6a 01                	push   $0x1
+ 5fa:	e9 73 ff ff ff       	jmp    572 <printf+0xf2>
+ 5ff:	90                   	nop
+  write(fd, &c, 1);
+ 600:	83 ec 04             	sub    $0x4,%esp
+ 603:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 606:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 609:	6a 01                	push   $0x1
+ 60b:	e9 21 ff ff ff       	jmp    531 <printf+0xb1>
+        putc(fd, *ap);
+ 610:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 613:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 616:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 618:	6a 01                	push   $0x1
+        ap++;
+ 61a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 61d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 620:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 623:	50                   	push   %eax
+ 624:	ff 75 08             	pushl  0x8(%ebp)
+ 627:	e8 06 fd ff ff       	call   332 <write>
+        ap++;
+ 62c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 62f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 632:	31 ff                	xor    %edi,%edi
+ 634:	e9 8f fe ff ff       	jmp    4c8 <printf+0x48>
+          s = "(null)";
+ 639:	bb 7d 08 00 00       	mov    $0x87d,%ebx
+        while(*s != 0){
+ 63e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 643:	e9 72 ff ff ff       	jmp    5ba <printf+0x13a>
+ 648:	66 90                	xchg   %ax,%ax
+ 64a:	66 90                	xchg   %ax,%ax
+ 64c:	66 90                	xchg   %ax,%ax
+ 64e:	66 90                	xchg   %ax,%ax
+
+00000650 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 650:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 651:	a1 2c 0b 00 00       	mov    0xb2c,%eax
+{
+ 656:	89 e5                	mov    %esp,%ebp
+ 658:	57                   	push   %edi
+ 659:	56                   	push   %esi
+ 65a:	53                   	push   %ebx
+ 65b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 65e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 661:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 668:	39 c8                	cmp    %ecx,%eax
+ 66a:	8b 10                	mov    (%eax),%edx
+ 66c:	73 32                	jae    6a0 <free+0x50>
+ 66e:	39 d1                	cmp    %edx,%ecx
+ 670:	72 04                	jb     676 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 672:	39 d0                	cmp    %edx,%eax
+ 674:	72 32                	jb     6a8 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 676:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 679:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 67c:	39 fa                	cmp    %edi,%edx
+ 67e:	74 30                	je     6b0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 680:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 683:	8b 50 04             	mov    0x4(%eax),%edx
+ 686:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 689:	39 f1                	cmp    %esi,%ecx
+ 68b:	74 3a                	je     6c7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 68d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 68f:	a3 2c 0b 00 00       	mov    %eax,0xb2c
+}
+ 694:	5b                   	pop    %ebx
+ 695:	5e                   	pop    %esi
+ 696:	5f                   	pop    %edi
+ 697:	5d                   	pop    %ebp
+ 698:	c3                   	ret    
+ 699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6a0:	39 d0                	cmp    %edx,%eax
+ 6a2:	72 04                	jb     6a8 <free+0x58>
+ 6a4:	39 d1                	cmp    %edx,%ecx
+ 6a6:	72 ce                	jb     676 <free+0x26>
+{
+ 6a8:	89 d0                	mov    %edx,%eax
+ 6aa:	eb bc                	jmp    668 <free+0x18>
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 6b0:	03 72 04             	add    0x4(%edx),%esi
+ 6b3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6b6:	8b 10                	mov    (%eax),%edx
+ 6b8:	8b 12                	mov    (%edx),%edx
+ 6ba:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6bd:	8b 50 04             	mov    0x4(%eax),%edx
+ 6c0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6c3:	39 f1                	cmp    %esi,%ecx
+ 6c5:	75 c6                	jne    68d <free+0x3d>
+    p->s.size += bp->s.size;
+ 6c7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6ca:	a3 2c 0b 00 00       	mov    %eax,0xb2c
+    p->s.size += bp->s.size;
+ 6cf:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6d2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6d5:	89 10                	mov    %edx,(%eax)
+}
+ 6d7:	5b                   	pop    %ebx
+ 6d8:	5e                   	pop    %esi
+ 6d9:	5f                   	pop    %edi
+ 6da:	5d                   	pop    %ebp
+ 6db:	c3                   	ret    
+ 6dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006e0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6e0:	55                   	push   %ebp
+ 6e1:	89 e5                	mov    %esp,%ebp
+ 6e3:	57                   	push   %edi
+ 6e4:	56                   	push   %esi
+ 6e5:	53                   	push   %ebx
+ 6e6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6ec:	8b 15 2c 0b 00 00    	mov    0xb2c,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6f2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6f5:	c1 ef 03             	shr    $0x3,%edi
+ 6f8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6fb:	85 d2                	test   %edx,%edx
+ 6fd:	0f 84 9d 00 00 00    	je     7a0 <malloc+0xc0>
+ 703:	8b 02                	mov    (%edx),%eax
+ 705:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 708:	39 cf                	cmp    %ecx,%edi
+ 70a:	76 6c                	jbe    778 <malloc+0x98>
+ 70c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 712:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 717:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 71a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 721:	eb 0e                	jmp    731 <malloc+0x51>
+ 723:	90                   	nop
+ 724:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 728:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 72a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 72d:	39 f9                	cmp    %edi,%ecx
+ 72f:	73 47                	jae    778 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 731:	39 05 2c 0b 00 00    	cmp    %eax,0xb2c
+ 737:	89 c2                	mov    %eax,%edx
+ 739:	75 ed                	jne    728 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 73b:	83 ec 0c             	sub    $0xc,%esp
+ 73e:	56                   	push   %esi
+ 73f:	e8 56 fc ff ff       	call   39a <sbrk>
+  if(p == (char*)-1)
+ 744:	83 c4 10             	add    $0x10,%esp
+ 747:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 74a:	74 1c                	je     768 <malloc+0x88>
+  hp->s.size = nu;
+ 74c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 74f:	83 ec 0c             	sub    $0xc,%esp
+ 752:	83 c0 08             	add    $0x8,%eax
+ 755:	50                   	push   %eax
+ 756:	e8 f5 fe ff ff       	call   650 <free>
+  return freep;
+ 75b:	8b 15 2c 0b 00 00    	mov    0xb2c,%edx
+      if((p = morecore(nunits)) == 0)
+ 761:	83 c4 10             	add    $0x10,%esp
+ 764:	85 d2                	test   %edx,%edx
+ 766:	75 c0                	jne    728 <malloc+0x48>
+        return 0;
+  }
+}
+ 768:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 76b:	31 c0                	xor    %eax,%eax
+}
+ 76d:	5b                   	pop    %ebx
+ 76e:	5e                   	pop    %esi
+ 76f:	5f                   	pop    %edi
+ 770:	5d                   	pop    %ebp
+ 771:	c3                   	ret    
+ 772:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 778:	39 cf                	cmp    %ecx,%edi
+ 77a:	74 54                	je     7d0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 77c:	29 f9                	sub    %edi,%ecx
+ 77e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 781:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 784:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 787:	89 15 2c 0b 00 00    	mov    %edx,0xb2c
+}
+ 78d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 790:	83 c0 08             	add    $0x8,%eax
+}
+ 793:	5b                   	pop    %ebx
+ 794:	5e                   	pop    %esi
+ 795:	5f                   	pop    %edi
+ 796:	5d                   	pop    %ebp
+ 797:	c3                   	ret    
+ 798:	90                   	nop
+ 799:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 7a0:	c7 05 2c 0b 00 00 30 	movl   $0xb30,0xb2c
+ 7a7:	0b 00 00 
+ 7aa:	c7 05 30 0b 00 00 30 	movl   $0xb30,0xb30
+ 7b1:	0b 00 00 
+    base.s.size = 0;
+ 7b4:	b8 30 0b 00 00       	mov    $0xb30,%eax
+ 7b9:	c7 05 34 0b 00 00 00 	movl   $0x0,0xb34
+ 7c0:	00 00 00 
+ 7c3:	e9 44 ff ff ff       	jmp    70c <malloc+0x2c>
+ 7c8:	90                   	nop
+ 7c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7d0:	8b 08                	mov    (%eax),%ecx
+ 7d2:	89 0a                	mov    %ecx,(%edx)
+ 7d4:	eb b1                	jmp    787 <malloc+0xa7>
diff -ruN src-old/test_7.c src/test_7.c
--- src-old/test_7.c	1970-01-01 00:00:00.000000000 +0000
+++ src/test_7.c	2023-04-19 02:18:53.371862089 +0000
@@ -0,0 +1,44 @@
+#include "param.h"
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+#include "mmu.h"
+
+
+/*Stress Testing allocating large sized memory using anonymous mmap spanning across multiple pages..*/
+int
+main(int argc, char *argv[])
+{
+  
+  int size =  2*PGSIZE;
+
+  char *addr = (char*)0x4000;
+  char* r = mmap(addr, size,  0/*prot*/, 0/*flags*/, -1/*fd*/, 0/*offset*/);
+
+  if (r<=0)
+  {
+    printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+    exit();
+  }
+  
+  printf(1, "XV6_TEST_OUTPUT : mmap good\n");
+
+  memset(r, 'a', size - 1);
+  printf(1, "XV6_TEST_OUTPUT : strlen(r) = %d\n", strlen(r));
+
+  int rv = munmap(r, size);
+  if (rv < 0) 
+  {
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    exit();
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : munmap good\n");
+  
+  exit();
+}
diff -ruN src-old/test_7.d src/test_7.d
--- src-old/test_7.d	1970-01-01 00:00:00.000000000 +0000
+++ src/test_7.d	2023-04-19 02:18:56.572241751 +0000
@@ -0,0 +1,2 @@
+test_7.o: test_7.c /usr/include/stdc-predef.h param.h types.h stat.h \
+ user.h fs.h fcntl.h syscall.h traps.h memlayout.h mmu.h
Binary files src-old/test_7.o and src/test_7.o differ
diff -ruN src-old/test_7.sym src/test_7.sym
--- src-old/test_7.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/test_7.sym	2023-04-19 02:18:56.600245064 +0000
@@ -0,0 +1,61 @@
+00000000 .text
+000007d8 .rodata
+00000898 .eh_frame
+00000b2c .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test_7.c
+00000000 ulib.c
+00000000 printf.c
+000003e0 printint
+00000884 digits.1052
+00000000 umalloc.c
+00000b2c freep
+00000b30 base
+000000c0 strcpy
+00000480 printf
+000002e0 memmove
+000003ca munmap
+0000035a mknod
+000001d0 gets
+00000392 getpid
+000006e0 malloc
+000003a2 sleep
+000003ba kmfree
+000003c2 mmap
+00000322 pipe
+00000332 write
+0000036a fstat
+00000342 kill
+00000382 chdir
+0000034a exec
+0000031a wait
+0000032a read
+00000362 unlink
+0000030a fork
+0000039a sbrk
+000003aa uptime
+00000b2c __bss_start
+00000170 memset
+00000000 main
+000000f0 strcmp
+0000038a dup
+00000250 stat
+00000b2c _edata
+00000b38 _end
+00000372 link
+000003b2 kmalloc
+00000312 exit
+000002a0 atoi
+00000140 strlen
+00000352 open
+00000190 strchr
+0000037a mkdir
+0000033a close
+00000650 free
Binary files src-old/trapasm.o and src/trapasm.o differ
diff -ruN src-old/trap.d src/trap.d
--- src-old/trap.d	1970-01-01 00:00:00.000000000 +0000
+++ src/trap.d	2023-04-19 02:18:55.096066950 +0000
@@ -0,0 +1,2 @@
+trap.o: trap.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h
Binary files src-old/trap.o and src/trap.o differ
diff -ruN src-old/traps.h src/traps.h
--- src-old/traps.h	2023-04-19 02:17:15.994995277 +0000
+++ src/traps.h	2023-04-19 02:17:16.026999981 +0000
@@ -36,3 +36,6 @@
 #define IRQ_ERROR       19
 #define IRQ_SPURIOUS    31
 
+#define T_ERR_PGFLT_P   0x1    
+#define T_ERR_PGFLT_W   0X2    
+#define T_ERR_PGFLT_U   0x4
diff -ruN src-old/uart.d src/uart.d
--- src-old/uart.d	1970-01-01 00:00:00.000000000 +0000
+++ src/uart.d	2023-04-19 02:18:55.140072166 +0000
@@ -0,0 +1,2 @@
+uart.o: uart.c /usr/include/stdc-predef.h types.h defs.h param.h traps.h \
+ spinlock.h sleeplock.h fs.h file.h mmu.h proc.h x86.h
Binary files src-old/uart.o and src/uart.o differ
diff -ruN src-old/ulib.d src/ulib.d
--- src-old/ulib.d	1970-01-01 00:00:00.000000000 +0000
+++ src/ulib.d	2023-04-19 02:18:55.584124788 +0000
@@ -0,0 +1,2 @@
+ulib.o: ulib.c /usr/include/stdc-predef.h types.h stat.h fcntl.h user.h \
+ x86.h
Binary files src-old/ulib.o and src/ulib.o differ
diff -ruN src-old/umalloc.d src/umalloc.d
--- src-old/umalloc.d	1970-01-01 00:00:00.000000000 +0000
+++ src/umalloc.d	2023-04-19 02:18:55.692137588 +0000
@@ -0,0 +1,2 @@
+umalloc.o: umalloc.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ param.h
Binary files src-old/umalloc.o and src/umalloc.o differ
diff -ruN src-old/user.h src/user.h
--- src-old/user.h	2023-04-19 02:17:15.998995866 +0000
+++ src/user.h	2023-04-19 02:17:16.026999981 +0000
@@ -24,6 +24,11 @@
 int sleep(int);
 int uptime(void);
 
+void* kmalloc(int size);
+void kmfree(void* addr);
+void* mmap(void *addr, int length, uint prot, uint flags, uint fd, uint offset);
+int munmap(void *addr, int length);
+
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
Binary files src-old/_usertests and src/_usertests differ
diff -ruN src-old/usertests.asm src/usertests.asm
--- src-old/usertests.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/usertests.asm	2023-04-19 02:18:57.300327837 +0000
@@ -0,0 +1,6667 @@
+
+_usertests:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return randstate;
+}
+
+int
+main(int argc, char *argv[])
+{
+       0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       4:	83 e4 f0             	and    $0xfffffff0,%esp
+       7:	ff 71 fc             	pushl  -0x4(%ecx)
+       a:	55                   	push   %ebp
+       b:	89 e5                	mov    %esp,%ebp
+       d:	51                   	push   %ecx
+       e:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "usertests starting\n");
+      11:	68 56 4d 00 00       	push   $0x4d56
+      16:	6a 01                	push   $0x1
+      18:	e8 f3 39 00 00       	call   3a10 <printf>
+
+  if(open("usertests.ran", 0) >= 0){
+      1d:	59                   	pop    %ecx
+      1e:	58                   	pop    %eax
+      1f:	6a 00                	push   $0x0
+      21:	68 6a 4d 00 00       	push   $0x4d6a
+      26:	e8 b7 38 00 00       	call   38e2 <open>
+      2b:	83 c4 10             	add    $0x10,%esp
+      2e:	85 c0                	test   %eax,%eax
+      30:	78 13                	js     45 <main+0x45>
+    printf(1, "already ran user tests -- rebuild fs.img\n");
+      32:	52                   	push   %edx
+      33:	52                   	push   %edx
+      34:	68 d4 54 00 00       	push   $0x54d4
+      39:	6a 01                	push   $0x1
+      3b:	e8 d0 39 00 00       	call   3a10 <printf>
+    exit();
+      40:	e8 5d 38 00 00       	call   38a2 <exit>
+  }
+  close(open("usertests.ran", O_CREATE));
+      45:	50                   	push   %eax
+      46:	50                   	push   %eax
+      47:	68 00 02 00 00       	push   $0x200
+      4c:	68 6a 4d 00 00       	push   $0x4d6a
+      51:	e8 8c 38 00 00       	call   38e2 <open>
+      56:	89 04 24             	mov    %eax,(%esp)
+      59:	e8 6c 38 00 00       	call   38ca <close>
+
+  argptest();
+      5e:	e8 5d 35 00 00       	call   35c0 <argptest>
+  createdelete();
+      63:	e8 a8 11 00 00       	call   1210 <createdelete>
+  linkunlink();
+      68:	e8 63 1a 00 00       	call   1ad0 <linkunlink>
+  concreate();
+      6d:	e8 5e 17 00 00       	call   17d0 <concreate>
+  fourfiles();
+      72:	e8 99 0f 00 00       	call   1010 <fourfiles>
+  sharedfd();
+      77:	e8 d4 0d 00 00       	call   e50 <sharedfd>
+
+  bigargtest();
+      7c:	e8 ff 31 00 00       	call   3280 <bigargtest>
+  bigwrite();
+      81:	e8 6a 23 00 00       	call   23f0 <bigwrite>
+  bigargtest();
+      86:	e8 f5 31 00 00       	call   3280 <bigargtest>
+  bsstest();
+      8b:	e8 70 31 00 00       	call   3200 <bsstest>
+  sbrktest();
+      90:	e8 9b 2c 00 00       	call   2d30 <sbrktest>
+  validatetest();
+      95:	e8 b6 30 00 00       	call   3150 <validatetest>
+
+  opentest();
+      9a:	e8 51 03 00 00       	call   3f0 <opentest>
+  writetest();
+      9f:	e8 dc 03 00 00       	call   480 <writetest>
+  writetest1();
+      a4:	e8 b7 05 00 00       	call   660 <writetest1>
+  createtest();
+      a9:	e8 82 07 00 00       	call   830 <createtest>
+
+  openiputtest();
+      ae:	e8 3d 02 00 00       	call   2f0 <openiputtest>
+  exitiputtest();
+      b3:	e8 48 01 00 00       	call   200 <exitiputtest>
+  iputtest();
+      b8:	e8 63 00 00 00       	call   120 <iputtest>
+
+  mem();
+      bd:	e8 be 0c 00 00       	call   d80 <mem>
+  pipe1();
+      c2:	e8 49 09 00 00       	call   a10 <pipe1>
+  preempt();
+      c7:	e8 e4 0a 00 00       	call   bb0 <preempt>
+  exitwait();
+      cc:	e8 1f 0c 00 00       	call   cf0 <exitwait>
+
+  rmdot();
+      d1:	e8 0a 27 00 00       	call   27e0 <rmdot>
+  fourteen();
+      d6:	e8 c5 25 00 00       	call   26a0 <fourteen>
+  bigfile();
+      db:	e8 f0 23 00 00       	call   24d0 <bigfile>
+  subdir();
+      e0:	e8 2b 1c 00 00       	call   1d10 <subdir>
+  linktest();
+      e5:	e8 d6 14 00 00       	call   15c0 <linktest>
+  unlinkread();
+      ea:	e8 41 13 00 00       	call   1430 <unlinkread>
+  dirfile();
+      ef:	e8 6c 28 00 00       	call   2960 <dirfile>
+  iref();
+      f4:	e8 67 2a 00 00       	call   2b60 <iref>
+  forktest();
+      f9:	e8 82 2b 00 00       	call   2c80 <forktest>
+  bigdir(); // slow
+      fe:	e8 dd 1a 00 00       	call   1be0 <bigdir>
+
+  uio();
+     103:	e8 48 34 00 00       	call   3550 <uio>
+
+  exectest();
+     108:	e8 b3 08 00 00       	call   9c0 <exectest>
+
+  exit();
+     10d:	e8 90 37 00 00       	call   38a2 <exit>
+     112:	66 90                	xchg   %ax,%ax
+     114:	66 90                	xchg   %ax,%ax
+     116:	66 90                	xchg   %ax,%ax
+     118:	66 90                	xchg   %ax,%ax
+     11a:	66 90                	xchg   %ax,%ax
+     11c:	66 90                	xchg   %ax,%ax
+     11e:	66 90                	xchg   %ax,%ax
+
+00000120 <iputtest>:
+{
+     120:	55                   	push   %ebp
+     121:	89 e5                	mov    %esp,%ebp
+     123:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "iput test\n");
+     126:	68 fc 3d 00 00       	push   $0x3dfc
+     12b:	ff 35 18 5e 00 00    	pushl  0x5e18
+     131:	e8 da 38 00 00       	call   3a10 <printf>
+  if(mkdir("iputdir") < 0){
+     136:	c7 04 24 8f 3d 00 00 	movl   $0x3d8f,(%esp)
+     13d:	e8 c8 37 00 00       	call   390a <mkdir>
+     142:	83 c4 10             	add    $0x10,%esp
+     145:	85 c0                	test   %eax,%eax
+     147:	78 58                	js     1a1 <iputtest+0x81>
+  if(chdir("iputdir") < 0){
+     149:	83 ec 0c             	sub    $0xc,%esp
+     14c:	68 8f 3d 00 00       	push   $0x3d8f
+     151:	e8 bc 37 00 00       	call   3912 <chdir>
+     156:	83 c4 10             	add    $0x10,%esp
+     159:	85 c0                	test   %eax,%eax
+     15b:	0f 88 85 00 00 00    	js     1e6 <iputtest+0xc6>
+  if(unlink("../iputdir") < 0){
+     161:	83 ec 0c             	sub    $0xc,%esp
+     164:	68 8c 3d 00 00       	push   $0x3d8c
+     169:	e8 84 37 00 00       	call   38f2 <unlink>
+     16e:	83 c4 10             	add    $0x10,%esp
+     171:	85 c0                	test   %eax,%eax
+     173:	78 5a                	js     1cf <iputtest+0xaf>
+  if(chdir("/") < 0){
+     175:	83 ec 0c             	sub    $0xc,%esp
+     178:	68 b1 3d 00 00       	push   $0x3db1
+     17d:	e8 90 37 00 00       	call   3912 <chdir>
+     182:	83 c4 10             	add    $0x10,%esp
+     185:	85 c0                	test   %eax,%eax
+     187:	78 2f                	js     1b8 <iputtest+0x98>
+  printf(stdout, "iput test ok\n");
+     189:	83 ec 08             	sub    $0x8,%esp
+     18c:	68 34 3e 00 00       	push   $0x3e34
+     191:	ff 35 18 5e 00 00    	pushl  0x5e18
+     197:	e8 74 38 00 00       	call   3a10 <printf>
+}
+     19c:	83 c4 10             	add    $0x10,%esp
+     19f:	c9                   	leave  
+     1a0:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     1a1:	50                   	push   %eax
+     1a2:	50                   	push   %eax
+     1a3:	68 68 3d 00 00       	push   $0x3d68
+     1a8:	ff 35 18 5e 00 00    	pushl  0x5e18
+     1ae:	e8 5d 38 00 00       	call   3a10 <printf>
+    exit();
+     1b3:	e8 ea 36 00 00       	call   38a2 <exit>
+    printf(stdout, "chdir / failed\n");
+     1b8:	50                   	push   %eax
+     1b9:	50                   	push   %eax
+     1ba:	68 b3 3d 00 00       	push   $0x3db3
+     1bf:	ff 35 18 5e 00 00    	pushl  0x5e18
+     1c5:	e8 46 38 00 00       	call   3a10 <printf>
+    exit();
+     1ca:	e8 d3 36 00 00       	call   38a2 <exit>
+    printf(stdout, "unlink ../iputdir failed\n");
+     1cf:	52                   	push   %edx
+     1d0:	52                   	push   %edx
+     1d1:	68 97 3d 00 00       	push   $0x3d97
+     1d6:	ff 35 18 5e 00 00    	pushl  0x5e18
+     1dc:	e8 2f 38 00 00       	call   3a10 <printf>
+    exit();
+     1e1:	e8 bc 36 00 00       	call   38a2 <exit>
+    printf(stdout, "chdir iputdir failed\n");
+     1e6:	51                   	push   %ecx
+     1e7:	51                   	push   %ecx
+     1e8:	68 76 3d 00 00       	push   $0x3d76
+     1ed:	ff 35 18 5e 00 00    	pushl  0x5e18
+     1f3:	e8 18 38 00 00       	call   3a10 <printf>
+    exit();
+     1f8:	e8 a5 36 00 00       	call   38a2 <exit>
+     1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <exitiputtest>:
+{
+     200:	55                   	push   %ebp
+     201:	89 e5                	mov    %esp,%ebp
+     203:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exitiput test\n");
+     206:	68 c3 3d 00 00       	push   $0x3dc3
+     20b:	ff 35 18 5e 00 00    	pushl  0x5e18
+     211:	e8 fa 37 00 00       	call   3a10 <printf>
+  pid = fork();
+     216:	e8 7f 36 00 00       	call   389a <fork>
+  if(pid < 0){
+     21b:	83 c4 10             	add    $0x10,%esp
+     21e:	85 c0                	test   %eax,%eax
+     220:	0f 88 82 00 00 00    	js     2a8 <exitiputtest+0xa8>
+  if(pid == 0){
+     226:	75 48                	jne    270 <exitiputtest+0x70>
+    if(mkdir("iputdir") < 0){
+     228:	83 ec 0c             	sub    $0xc,%esp
+     22b:	68 8f 3d 00 00       	push   $0x3d8f
+     230:	e8 d5 36 00 00       	call   390a <mkdir>
+     235:	83 c4 10             	add    $0x10,%esp
+     238:	85 c0                	test   %eax,%eax
+     23a:	0f 88 96 00 00 00    	js     2d6 <exitiputtest+0xd6>
+    if(chdir("iputdir") < 0){
+     240:	83 ec 0c             	sub    $0xc,%esp
+     243:	68 8f 3d 00 00       	push   $0x3d8f
+     248:	e8 c5 36 00 00       	call   3912 <chdir>
+     24d:	83 c4 10             	add    $0x10,%esp
+     250:	85 c0                	test   %eax,%eax
+     252:	78 6b                	js     2bf <exitiputtest+0xbf>
+    if(unlink("../iputdir") < 0){
+     254:	83 ec 0c             	sub    $0xc,%esp
+     257:	68 8c 3d 00 00       	push   $0x3d8c
+     25c:	e8 91 36 00 00       	call   38f2 <unlink>
+     261:	83 c4 10             	add    $0x10,%esp
+     264:	85 c0                	test   %eax,%eax
+     266:	78 28                	js     290 <exitiputtest+0x90>
+    exit();
+     268:	e8 35 36 00 00       	call   38a2 <exit>
+     26d:	8d 76 00             	lea    0x0(%esi),%esi
+  wait();
+     270:	e8 35 36 00 00       	call   38aa <wait>
+  printf(stdout, "exitiput test ok\n");
+     275:	83 ec 08             	sub    $0x8,%esp
+     278:	68 e6 3d 00 00       	push   $0x3de6
+     27d:	ff 35 18 5e 00 00    	pushl  0x5e18
+     283:	e8 88 37 00 00       	call   3a10 <printf>
+}
+     288:	83 c4 10             	add    $0x10,%esp
+     28b:	c9                   	leave  
+     28c:	c3                   	ret    
+     28d:	8d 76 00             	lea    0x0(%esi),%esi
+      printf(stdout, "unlink ../iputdir failed\n");
+     290:	83 ec 08             	sub    $0x8,%esp
+     293:	68 97 3d 00 00       	push   $0x3d97
+     298:	ff 35 18 5e 00 00    	pushl  0x5e18
+     29e:	e8 6d 37 00 00       	call   3a10 <printf>
+      exit();
+     2a3:	e8 fa 35 00 00       	call   38a2 <exit>
+    printf(stdout, "fork failed\n");
+     2a8:	51                   	push   %ecx
+     2a9:	51                   	push   %ecx
+     2aa:	68 a9 4c 00 00       	push   $0x4ca9
+     2af:	ff 35 18 5e 00 00    	pushl  0x5e18
+     2b5:	e8 56 37 00 00       	call   3a10 <printf>
+    exit();
+     2ba:	e8 e3 35 00 00       	call   38a2 <exit>
+      printf(stdout, "child chdir failed\n");
+     2bf:	50                   	push   %eax
+     2c0:	50                   	push   %eax
+     2c1:	68 d2 3d 00 00       	push   $0x3dd2
+     2c6:	ff 35 18 5e 00 00    	pushl  0x5e18
+     2cc:	e8 3f 37 00 00       	call   3a10 <printf>
+      exit();
+     2d1:	e8 cc 35 00 00       	call   38a2 <exit>
+      printf(stdout, "mkdir failed\n");
+     2d6:	52                   	push   %edx
+     2d7:	52                   	push   %edx
+     2d8:	68 68 3d 00 00       	push   $0x3d68
+     2dd:	ff 35 18 5e 00 00    	pushl  0x5e18
+     2e3:	e8 28 37 00 00       	call   3a10 <printf>
+      exit();
+     2e8:	e8 b5 35 00 00       	call   38a2 <exit>
+     2ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002f0 <openiputtest>:
+{
+     2f0:	55                   	push   %ebp
+     2f1:	89 e5                	mov    %esp,%ebp
+     2f3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "openiput test\n");
+     2f6:	68 f8 3d 00 00       	push   $0x3df8
+     2fb:	ff 35 18 5e 00 00    	pushl  0x5e18
+     301:	e8 0a 37 00 00       	call   3a10 <printf>
+  if(mkdir("oidir") < 0){
+     306:	c7 04 24 07 3e 00 00 	movl   $0x3e07,(%esp)
+     30d:	e8 f8 35 00 00       	call   390a <mkdir>
+     312:	83 c4 10             	add    $0x10,%esp
+     315:	85 c0                	test   %eax,%eax
+     317:	0f 88 88 00 00 00    	js     3a5 <openiputtest+0xb5>
+  pid = fork();
+     31d:	e8 78 35 00 00       	call   389a <fork>
+  if(pid < 0){
+     322:	85 c0                	test   %eax,%eax
+     324:	0f 88 92 00 00 00    	js     3bc <openiputtest+0xcc>
+  if(pid == 0){
+     32a:	75 34                	jne    360 <openiputtest+0x70>
+    int fd = open("oidir", O_RDWR);
+     32c:	83 ec 08             	sub    $0x8,%esp
+     32f:	6a 02                	push   $0x2
+     331:	68 07 3e 00 00       	push   $0x3e07
+     336:	e8 a7 35 00 00       	call   38e2 <open>
+    if(fd >= 0){
+     33b:	83 c4 10             	add    $0x10,%esp
+     33e:	85 c0                	test   %eax,%eax
+     340:	78 5e                	js     3a0 <openiputtest+0xb0>
+      printf(stdout, "open directory for write succeeded\n");
+     342:	83 ec 08             	sub    $0x8,%esp
+     345:	68 8c 4d 00 00       	push   $0x4d8c
+     34a:	ff 35 18 5e 00 00    	pushl  0x5e18
+     350:	e8 bb 36 00 00       	call   3a10 <printf>
+      exit();
+     355:	e8 48 35 00 00       	call   38a2 <exit>
+     35a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  sleep(1);
+     360:	83 ec 0c             	sub    $0xc,%esp
+     363:	6a 01                	push   $0x1
+     365:	e8 c8 35 00 00       	call   3932 <sleep>
+  if(unlink("oidir") != 0){
+     36a:	c7 04 24 07 3e 00 00 	movl   $0x3e07,(%esp)
+     371:	e8 7c 35 00 00       	call   38f2 <unlink>
+     376:	83 c4 10             	add    $0x10,%esp
+     379:	85 c0                	test   %eax,%eax
+     37b:	75 56                	jne    3d3 <openiputtest+0xe3>
+  wait();
+     37d:	e8 28 35 00 00       	call   38aa <wait>
+  printf(stdout, "openiput test ok\n");
+     382:	83 ec 08             	sub    $0x8,%esp
+     385:	68 30 3e 00 00       	push   $0x3e30
+     38a:	ff 35 18 5e 00 00    	pushl  0x5e18
+     390:	e8 7b 36 00 00       	call   3a10 <printf>
+     395:	83 c4 10             	add    $0x10,%esp
+}
+     398:	c9                   	leave  
+     399:	c3                   	ret    
+     39a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    exit();
+     3a0:	e8 fd 34 00 00       	call   38a2 <exit>
+    printf(stdout, "mkdir oidir failed\n");
+     3a5:	51                   	push   %ecx
+     3a6:	51                   	push   %ecx
+     3a7:	68 0d 3e 00 00       	push   $0x3e0d
+     3ac:	ff 35 18 5e 00 00    	pushl  0x5e18
+     3b2:	e8 59 36 00 00       	call   3a10 <printf>
+    exit();
+     3b7:	e8 e6 34 00 00       	call   38a2 <exit>
+    printf(stdout, "fork failed\n");
+     3bc:	52                   	push   %edx
+     3bd:	52                   	push   %edx
+     3be:	68 a9 4c 00 00       	push   $0x4ca9
+     3c3:	ff 35 18 5e 00 00    	pushl  0x5e18
+     3c9:	e8 42 36 00 00       	call   3a10 <printf>
+    exit();
+     3ce:	e8 cf 34 00 00       	call   38a2 <exit>
+    printf(stdout, "unlink failed\n");
+     3d3:	50                   	push   %eax
+     3d4:	50                   	push   %eax
+     3d5:	68 21 3e 00 00       	push   $0x3e21
+     3da:	ff 35 18 5e 00 00    	pushl  0x5e18
+     3e0:	e8 2b 36 00 00       	call   3a10 <printf>
+    exit();
+     3e5:	e8 b8 34 00 00       	call   38a2 <exit>
+     3ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000003f0 <opentest>:
+{
+     3f0:	55                   	push   %ebp
+     3f1:	89 e5                	mov    %esp,%ebp
+     3f3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "open test\n");
+     3f6:	68 42 3e 00 00       	push   $0x3e42
+     3fb:	ff 35 18 5e 00 00    	pushl  0x5e18
+     401:	e8 0a 36 00 00       	call   3a10 <printf>
+  fd = open("echo", 0);
+     406:	58                   	pop    %eax
+     407:	5a                   	pop    %edx
+     408:	6a 00                	push   $0x0
+     40a:	68 4d 3e 00 00       	push   $0x3e4d
+     40f:	e8 ce 34 00 00       	call   38e2 <open>
+  if(fd < 0){
+     414:	83 c4 10             	add    $0x10,%esp
+     417:	85 c0                	test   %eax,%eax
+     419:	78 36                	js     451 <opentest+0x61>
+  close(fd);
+     41b:	83 ec 0c             	sub    $0xc,%esp
+     41e:	50                   	push   %eax
+     41f:	e8 a6 34 00 00       	call   38ca <close>
+  fd = open("doesnotexist", 0);
+     424:	5a                   	pop    %edx
+     425:	59                   	pop    %ecx
+     426:	6a 00                	push   $0x0
+     428:	68 65 3e 00 00       	push   $0x3e65
+     42d:	e8 b0 34 00 00       	call   38e2 <open>
+  if(fd >= 0){
+     432:	83 c4 10             	add    $0x10,%esp
+     435:	85 c0                	test   %eax,%eax
+     437:	79 2f                	jns    468 <opentest+0x78>
+  printf(stdout, "open test ok\n");
+     439:	83 ec 08             	sub    $0x8,%esp
+     43c:	68 90 3e 00 00       	push   $0x3e90
+     441:	ff 35 18 5e 00 00    	pushl  0x5e18
+     447:	e8 c4 35 00 00       	call   3a10 <printf>
+}
+     44c:	83 c4 10             	add    $0x10,%esp
+     44f:	c9                   	leave  
+     450:	c3                   	ret    
+    printf(stdout, "open echo failed!\n");
+     451:	50                   	push   %eax
+     452:	50                   	push   %eax
+     453:	68 52 3e 00 00       	push   $0x3e52
+     458:	ff 35 18 5e 00 00    	pushl  0x5e18
+     45e:	e8 ad 35 00 00       	call   3a10 <printf>
+    exit();
+     463:	e8 3a 34 00 00       	call   38a2 <exit>
+    printf(stdout, "open doesnotexist succeeded!\n");
+     468:	50                   	push   %eax
+     469:	50                   	push   %eax
+     46a:	68 72 3e 00 00       	push   $0x3e72
+     46f:	ff 35 18 5e 00 00    	pushl  0x5e18
+     475:	e8 96 35 00 00       	call   3a10 <printf>
+    exit();
+     47a:	e8 23 34 00 00       	call   38a2 <exit>
+     47f:	90                   	nop
+
+00000480 <writetest>:
+{
+     480:	55                   	push   %ebp
+     481:	89 e5                	mov    %esp,%ebp
+     483:	56                   	push   %esi
+     484:	53                   	push   %ebx
+  printf(stdout, "small file test\n");
+     485:	83 ec 08             	sub    $0x8,%esp
+     488:	68 9e 3e 00 00       	push   $0x3e9e
+     48d:	ff 35 18 5e 00 00    	pushl  0x5e18
+     493:	e8 78 35 00 00       	call   3a10 <printf>
+  fd = open("small", O_CREATE|O_RDWR);
+     498:	58                   	pop    %eax
+     499:	5a                   	pop    %edx
+     49a:	68 02 02 00 00       	push   $0x202
+     49f:	68 af 3e 00 00       	push   $0x3eaf
+     4a4:	e8 39 34 00 00       	call   38e2 <open>
+  if(fd >= 0){
+     4a9:	83 c4 10             	add    $0x10,%esp
+     4ac:	85 c0                	test   %eax,%eax
+     4ae:	0f 88 88 01 00 00    	js     63c <writetest+0x1bc>
+    printf(stdout, "creat small succeeded; ok\n");
+     4b4:	83 ec 08             	sub    $0x8,%esp
+     4b7:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 100; i++){
+     4b9:	31 db                	xor    %ebx,%ebx
+    printf(stdout, "creat small succeeded; ok\n");
+     4bb:	68 b5 3e 00 00       	push   $0x3eb5
+     4c0:	ff 35 18 5e 00 00    	pushl  0x5e18
+     4c6:	e8 45 35 00 00       	call   3a10 <printf>
+     4cb:	83 c4 10             	add    $0x10,%esp
+     4ce:	66 90                	xchg   %ax,%ax
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+     4d0:	83 ec 04             	sub    $0x4,%esp
+     4d3:	6a 0a                	push   $0xa
+     4d5:	68 ec 3e 00 00       	push   $0x3eec
+     4da:	56                   	push   %esi
+     4db:	e8 e2 33 00 00       	call   38c2 <write>
+     4e0:	83 c4 10             	add    $0x10,%esp
+     4e3:	83 f8 0a             	cmp    $0xa,%eax
+     4e6:	0f 85 d9 00 00 00    	jne    5c5 <writetest+0x145>
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+     4ec:	83 ec 04             	sub    $0x4,%esp
+     4ef:	6a 0a                	push   $0xa
+     4f1:	68 f7 3e 00 00       	push   $0x3ef7
+     4f6:	56                   	push   %esi
+     4f7:	e8 c6 33 00 00       	call   38c2 <write>
+     4fc:	83 c4 10             	add    $0x10,%esp
+     4ff:	83 f8 0a             	cmp    $0xa,%eax
+     502:	0f 85 d6 00 00 00    	jne    5de <writetest+0x15e>
+  for(i = 0; i < 100; i++){
+     508:	83 c3 01             	add    $0x1,%ebx
+     50b:	83 fb 64             	cmp    $0x64,%ebx
+     50e:	75 c0                	jne    4d0 <writetest+0x50>
+  printf(stdout, "writes ok\n");
+     510:	83 ec 08             	sub    $0x8,%esp
+     513:	68 02 3f 00 00       	push   $0x3f02
+     518:	ff 35 18 5e 00 00    	pushl  0x5e18
+     51e:	e8 ed 34 00 00       	call   3a10 <printf>
+  close(fd);
+     523:	89 34 24             	mov    %esi,(%esp)
+     526:	e8 9f 33 00 00       	call   38ca <close>
+  fd = open("small", O_RDONLY);
+     52b:	5b                   	pop    %ebx
+     52c:	5e                   	pop    %esi
+     52d:	6a 00                	push   $0x0
+     52f:	68 af 3e 00 00       	push   $0x3eaf
+     534:	e8 a9 33 00 00       	call   38e2 <open>
+  if(fd >= 0){
+     539:	83 c4 10             	add    $0x10,%esp
+     53c:	85 c0                	test   %eax,%eax
+  fd = open("small", O_RDONLY);
+     53e:	89 c3                	mov    %eax,%ebx
+  if(fd >= 0){
+     540:	0f 88 b1 00 00 00    	js     5f7 <writetest+0x177>
+    printf(stdout, "open small succeeded ok\n");
+     546:	83 ec 08             	sub    $0x8,%esp
+     549:	68 0d 3f 00 00       	push   $0x3f0d
+     54e:	ff 35 18 5e 00 00    	pushl  0x5e18
+     554:	e8 b7 34 00 00       	call   3a10 <printf>
+  i = read(fd, buf, 2000);
+     559:	83 c4 0c             	add    $0xc,%esp
+     55c:	68 d0 07 00 00       	push   $0x7d0
+     561:	68 00 86 00 00       	push   $0x8600
+     566:	53                   	push   %ebx
+     567:	e8 4e 33 00 00       	call   38ba <read>
+  if(i == 2000){
+     56c:	83 c4 10             	add    $0x10,%esp
+     56f:	3d d0 07 00 00       	cmp    $0x7d0,%eax
+     574:	0f 85 94 00 00 00    	jne    60e <writetest+0x18e>
+    printf(stdout, "read succeeded ok\n");
+     57a:	83 ec 08             	sub    $0x8,%esp
+     57d:	68 41 3f 00 00       	push   $0x3f41
+     582:	ff 35 18 5e 00 00    	pushl  0x5e18
+     588:	e8 83 34 00 00       	call   3a10 <printf>
+  close(fd);
+     58d:	89 1c 24             	mov    %ebx,(%esp)
+     590:	e8 35 33 00 00       	call   38ca <close>
+  if(unlink("small") < 0){
+     595:	c7 04 24 af 3e 00 00 	movl   $0x3eaf,(%esp)
+     59c:	e8 51 33 00 00       	call   38f2 <unlink>
+     5a1:	83 c4 10             	add    $0x10,%esp
+     5a4:	85 c0                	test   %eax,%eax
+     5a6:	78 7d                	js     625 <writetest+0x1a5>
+  printf(stdout, "small file test ok\n");
+     5a8:	83 ec 08             	sub    $0x8,%esp
+     5ab:	68 69 3f 00 00       	push   $0x3f69
+     5b0:	ff 35 18 5e 00 00    	pushl  0x5e18
+     5b6:	e8 55 34 00 00       	call   3a10 <printf>
+}
+     5bb:	83 c4 10             	add    $0x10,%esp
+     5be:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     5c1:	5b                   	pop    %ebx
+     5c2:	5e                   	pop    %esi
+     5c3:	5d                   	pop    %ebp
+     5c4:	c3                   	ret    
+      printf(stdout, "error: write aa %d new file failed\n", i);
+     5c5:	83 ec 04             	sub    $0x4,%esp
+     5c8:	53                   	push   %ebx
+     5c9:	68 b0 4d 00 00       	push   $0x4db0
+     5ce:	ff 35 18 5e 00 00    	pushl  0x5e18
+     5d4:	e8 37 34 00 00       	call   3a10 <printf>
+      exit();
+     5d9:	e8 c4 32 00 00       	call   38a2 <exit>
+      printf(stdout, "error: write bb %d new file failed\n", i);
+     5de:	83 ec 04             	sub    $0x4,%esp
+     5e1:	53                   	push   %ebx
+     5e2:	68 d4 4d 00 00       	push   $0x4dd4
+     5e7:	ff 35 18 5e 00 00    	pushl  0x5e18
+     5ed:	e8 1e 34 00 00       	call   3a10 <printf>
+      exit();
+     5f2:	e8 ab 32 00 00       	call   38a2 <exit>
+    printf(stdout, "error: open small failed!\n");
+     5f7:	51                   	push   %ecx
+     5f8:	51                   	push   %ecx
+     5f9:	68 26 3f 00 00       	push   $0x3f26
+     5fe:	ff 35 18 5e 00 00    	pushl  0x5e18
+     604:	e8 07 34 00 00       	call   3a10 <printf>
+    exit();
+     609:	e8 94 32 00 00       	call   38a2 <exit>
+    printf(stdout, "read failed\n");
+     60e:	52                   	push   %edx
+     60f:	52                   	push   %edx
+     610:	68 6d 42 00 00       	push   $0x426d
+     615:	ff 35 18 5e 00 00    	pushl  0x5e18
+     61b:	e8 f0 33 00 00       	call   3a10 <printf>
+    exit();
+     620:	e8 7d 32 00 00       	call   38a2 <exit>
+    printf(stdout, "unlink small failed\n");
+     625:	50                   	push   %eax
+     626:	50                   	push   %eax
+     627:	68 54 3f 00 00       	push   $0x3f54
+     62c:	ff 35 18 5e 00 00    	pushl  0x5e18
+     632:	e8 d9 33 00 00       	call   3a10 <printf>
+    exit();
+     637:	e8 66 32 00 00       	call   38a2 <exit>
+    printf(stdout, "error: creat small failed!\n");
+     63c:	50                   	push   %eax
+     63d:	50                   	push   %eax
+     63e:	68 d0 3e 00 00       	push   $0x3ed0
+     643:	ff 35 18 5e 00 00    	pushl  0x5e18
+     649:	e8 c2 33 00 00       	call   3a10 <printf>
+    exit();
+     64e:	e8 4f 32 00 00       	call   38a2 <exit>
+     653:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     659:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000660 <writetest1>:
+{
+     660:	55                   	push   %ebp
+     661:	89 e5                	mov    %esp,%ebp
+     663:	56                   	push   %esi
+     664:	53                   	push   %ebx
+  printf(stdout, "big files test\n");
+     665:	83 ec 08             	sub    $0x8,%esp
+     668:	68 7d 3f 00 00       	push   $0x3f7d
+     66d:	ff 35 18 5e 00 00    	pushl  0x5e18
+     673:	e8 98 33 00 00       	call   3a10 <printf>
+  fd = open("big", O_CREATE|O_RDWR);
+     678:	58                   	pop    %eax
+     679:	5a                   	pop    %edx
+     67a:	68 02 02 00 00       	push   $0x202
+     67f:	68 f7 3f 00 00       	push   $0x3ff7
+     684:	e8 59 32 00 00       	call   38e2 <open>
+  if(fd < 0){
+     689:	83 c4 10             	add    $0x10,%esp
+     68c:	85 c0                	test   %eax,%eax
+     68e:	0f 88 61 01 00 00    	js     7f5 <writetest1+0x195>
+     694:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < MAXFILE; i++){
+     696:	31 db                	xor    %ebx,%ebx
+     698:	90                   	nop
+     699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(write(fd, buf, 512) != 512){
+     6a0:	83 ec 04             	sub    $0x4,%esp
+    ((int*)buf)[0] = i;
+     6a3:	89 1d 00 86 00 00    	mov    %ebx,0x8600
+    if(write(fd, buf, 512) != 512){
+     6a9:	68 00 02 00 00       	push   $0x200
+     6ae:	68 00 86 00 00       	push   $0x8600
+     6b3:	56                   	push   %esi
+     6b4:	e8 09 32 00 00       	call   38c2 <write>
+     6b9:	83 c4 10             	add    $0x10,%esp
+     6bc:	3d 00 02 00 00       	cmp    $0x200,%eax
+     6c1:	0f 85 b3 00 00 00    	jne    77a <writetest1+0x11a>
+  for(i = 0; i < MAXFILE; i++){
+     6c7:	83 c3 01             	add    $0x1,%ebx
+     6ca:	81 fb 8c 00 00 00    	cmp    $0x8c,%ebx
+     6d0:	75 ce                	jne    6a0 <writetest1+0x40>
+  close(fd);
+     6d2:	83 ec 0c             	sub    $0xc,%esp
+     6d5:	56                   	push   %esi
+     6d6:	e8 ef 31 00 00       	call   38ca <close>
+  fd = open("big", O_RDONLY);
+     6db:	5b                   	pop    %ebx
+     6dc:	5e                   	pop    %esi
+     6dd:	6a 00                	push   $0x0
+     6df:	68 f7 3f 00 00       	push   $0x3ff7
+     6e4:	e8 f9 31 00 00       	call   38e2 <open>
+  if(fd < 0){
+     6e9:	83 c4 10             	add    $0x10,%esp
+     6ec:	85 c0                	test   %eax,%eax
+  fd = open("big", O_RDONLY);
+     6ee:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+     6f0:	0f 88 e8 00 00 00    	js     7de <writetest1+0x17e>
+  n = 0;
+     6f6:	31 db                	xor    %ebx,%ebx
+     6f8:	eb 1d                	jmp    717 <writetest1+0xb7>
+     6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    } else if(i != 512){
+     700:	3d 00 02 00 00       	cmp    $0x200,%eax
+     705:	0f 85 9f 00 00 00    	jne    7aa <writetest1+0x14a>
+    if(((int*)buf)[0] != n){
+     70b:	a1 00 86 00 00       	mov    0x8600,%eax
+     710:	39 d8                	cmp    %ebx,%eax
+     712:	75 7f                	jne    793 <writetest1+0x133>
+    n++;
+     714:	83 c3 01             	add    $0x1,%ebx
+    i = read(fd, buf, 512);
+     717:	83 ec 04             	sub    $0x4,%esp
+     71a:	68 00 02 00 00       	push   $0x200
+     71f:	68 00 86 00 00       	push   $0x8600
+     724:	56                   	push   %esi
+     725:	e8 90 31 00 00       	call   38ba <read>
+    if(i == 0){
+     72a:	83 c4 10             	add    $0x10,%esp
+     72d:	85 c0                	test   %eax,%eax
+     72f:	75 cf                	jne    700 <writetest1+0xa0>
+      if(n == MAXFILE - 1){
+     731:	81 fb 8b 00 00 00    	cmp    $0x8b,%ebx
+     737:	0f 84 86 00 00 00    	je     7c3 <writetest1+0x163>
+  close(fd);
+     73d:	83 ec 0c             	sub    $0xc,%esp
+     740:	56                   	push   %esi
+     741:	e8 84 31 00 00       	call   38ca <close>
+  if(unlink("big") < 0){
+     746:	c7 04 24 f7 3f 00 00 	movl   $0x3ff7,(%esp)
+     74d:	e8 a0 31 00 00       	call   38f2 <unlink>
+     752:	83 c4 10             	add    $0x10,%esp
+     755:	85 c0                	test   %eax,%eax
+     757:	0f 88 af 00 00 00    	js     80c <writetest1+0x1ac>
+  printf(stdout, "big files ok\n");
+     75d:	83 ec 08             	sub    $0x8,%esp
+     760:	68 1e 40 00 00       	push   $0x401e
+     765:	ff 35 18 5e 00 00    	pushl  0x5e18
+     76b:	e8 a0 32 00 00       	call   3a10 <printf>
+}
+     770:	83 c4 10             	add    $0x10,%esp
+     773:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     776:	5b                   	pop    %ebx
+     777:	5e                   	pop    %esi
+     778:	5d                   	pop    %ebp
+     779:	c3                   	ret    
+      printf(stdout, "error: write big file failed\n", i);
+     77a:	83 ec 04             	sub    $0x4,%esp
+     77d:	53                   	push   %ebx
+     77e:	68 a7 3f 00 00       	push   $0x3fa7
+     783:	ff 35 18 5e 00 00    	pushl  0x5e18
+     789:	e8 82 32 00 00       	call   3a10 <printf>
+      exit();
+     78e:	e8 0f 31 00 00       	call   38a2 <exit>
+      printf(stdout, "read content of block %d is %d\n",
+     793:	50                   	push   %eax
+     794:	53                   	push   %ebx
+     795:	68 f8 4d 00 00       	push   $0x4df8
+     79a:	ff 35 18 5e 00 00    	pushl  0x5e18
+     7a0:	e8 6b 32 00 00       	call   3a10 <printf>
+      exit();
+     7a5:	e8 f8 30 00 00       	call   38a2 <exit>
+      printf(stdout, "read failed %d\n", i);
+     7aa:	83 ec 04             	sub    $0x4,%esp
+     7ad:	50                   	push   %eax
+     7ae:	68 fb 3f 00 00       	push   $0x3ffb
+     7b3:	ff 35 18 5e 00 00    	pushl  0x5e18
+     7b9:	e8 52 32 00 00       	call   3a10 <printf>
+      exit();
+     7be:	e8 df 30 00 00       	call   38a2 <exit>
+        printf(stdout, "read only %d blocks from big", n);
+     7c3:	52                   	push   %edx
+     7c4:	68 8b 00 00 00       	push   $0x8b
+     7c9:	68 de 3f 00 00       	push   $0x3fde
+     7ce:	ff 35 18 5e 00 00    	pushl  0x5e18
+     7d4:	e8 37 32 00 00       	call   3a10 <printf>
+        exit();
+     7d9:	e8 c4 30 00 00       	call   38a2 <exit>
+    printf(stdout, "error: open big failed!\n");
+     7de:	51                   	push   %ecx
+     7df:	51                   	push   %ecx
+     7e0:	68 c5 3f 00 00       	push   $0x3fc5
+     7e5:	ff 35 18 5e 00 00    	pushl  0x5e18
+     7eb:	e8 20 32 00 00       	call   3a10 <printf>
+    exit();
+     7f0:	e8 ad 30 00 00       	call   38a2 <exit>
+    printf(stdout, "error: creat big failed!\n");
+     7f5:	50                   	push   %eax
+     7f6:	50                   	push   %eax
+     7f7:	68 8d 3f 00 00       	push   $0x3f8d
+     7fc:	ff 35 18 5e 00 00    	pushl  0x5e18
+     802:	e8 09 32 00 00       	call   3a10 <printf>
+    exit();
+     807:	e8 96 30 00 00       	call   38a2 <exit>
+    printf(stdout, "unlink big failed\n");
+     80c:	50                   	push   %eax
+     80d:	50                   	push   %eax
+     80e:	68 0b 40 00 00       	push   $0x400b
+     813:	ff 35 18 5e 00 00    	pushl  0x5e18
+     819:	e8 f2 31 00 00       	call   3a10 <printf>
+    exit();
+     81e:	e8 7f 30 00 00       	call   38a2 <exit>
+     823:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     829:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000830 <createtest>:
+{
+     830:	55                   	push   %ebp
+     831:	89 e5                	mov    %esp,%ebp
+     833:	53                   	push   %ebx
+  name[2] = '\0';
+     834:	bb 30 00 00 00       	mov    $0x30,%ebx
+{
+     839:	83 ec 0c             	sub    $0xc,%esp
+  printf(stdout, "many creates, followed by unlink test\n");
+     83c:	68 18 4e 00 00       	push   $0x4e18
+     841:	ff 35 18 5e 00 00    	pushl  0x5e18
+     847:	e8 c4 31 00 00       	call   3a10 <printf>
+  name[0] = 'a';
+     84c:	c6 05 00 a6 00 00 61 	movb   $0x61,0xa600
+  name[2] = '\0';
+     853:	c6 05 02 a6 00 00 00 	movb   $0x0,0xa602
+     85a:	83 c4 10             	add    $0x10,%esp
+     85d:	8d 76 00             	lea    0x0(%esi),%esi
+    fd = open(name, O_CREATE|O_RDWR);
+     860:	83 ec 08             	sub    $0x8,%esp
+    name[1] = '0' + i;
+     863:	88 1d 01 a6 00 00    	mov    %bl,0xa601
+     869:	83 c3 01             	add    $0x1,%ebx
+    fd = open(name, O_CREATE|O_RDWR);
+     86c:	68 02 02 00 00       	push   $0x202
+     871:	68 00 a6 00 00       	push   $0xa600
+     876:	e8 67 30 00 00       	call   38e2 <open>
+    close(fd);
+     87b:	89 04 24             	mov    %eax,(%esp)
+     87e:	e8 47 30 00 00       	call   38ca <close>
+  for(i = 0; i < 52; i++){
+     883:	83 c4 10             	add    $0x10,%esp
+     886:	80 fb 64             	cmp    $0x64,%bl
+     889:	75 d5                	jne    860 <createtest+0x30>
+  name[0] = 'a';
+     88b:	c6 05 00 a6 00 00 61 	movb   $0x61,0xa600
+  name[2] = '\0';
+     892:	c6 05 02 a6 00 00 00 	movb   $0x0,0xa602
+     899:	bb 30 00 00 00       	mov    $0x30,%ebx
+     89e:	66 90                	xchg   %ax,%ax
+    unlink(name);
+     8a0:	83 ec 0c             	sub    $0xc,%esp
+    name[1] = '0' + i;
+     8a3:	88 1d 01 a6 00 00    	mov    %bl,0xa601
+     8a9:	83 c3 01             	add    $0x1,%ebx
+    unlink(name);
+     8ac:	68 00 a6 00 00       	push   $0xa600
+     8b1:	e8 3c 30 00 00       	call   38f2 <unlink>
+  for(i = 0; i < 52; i++){
+     8b6:	83 c4 10             	add    $0x10,%esp
+     8b9:	80 fb 64             	cmp    $0x64,%bl
+     8bc:	75 e2                	jne    8a0 <createtest+0x70>
+  printf(stdout, "many creates, followed by unlink; ok\n");
+     8be:	83 ec 08             	sub    $0x8,%esp
+     8c1:	68 40 4e 00 00       	push   $0x4e40
+     8c6:	ff 35 18 5e 00 00    	pushl  0x5e18
+     8cc:	e8 3f 31 00 00       	call   3a10 <printf>
+}
+     8d1:	83 c4 10             	add    $0x10,%esp
+     8d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     8d7:	c9                   	leave  
+     8d8:	c3                   	ret    
+     8d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000008e0 <dirtest>:
+{
+     8e0:	55                   	push   %ebp
+     8e1:	89 e5                	mov    %esp,%ebp
+     8e3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "mkdir test\n");
+     8e6:	68 2c 40 00 00       	push   $0x402c
+     8eb:	ff 35 18 5e 00 00    	pushl  0x5e18
+     8f1:	e8 1a 31 00 00       	call   3a10 <printf>
+  if(mkdir("dir0") < 0){
+     8f6:	c7 04 24 38 40 00 00 	movl   $0x4038,(%esp)
+     8fd:	e8 08 30 00 00       	call   390a <mkdir>
+     902:	83 c4 10             	add    $0x10,%esp
+     905:	85 c0                	test   %eax,%eax
+     907:	78 58                	js     961 <dirtest+0x81>
+  if(chdir("dir0") < 0){
+     909:	83 ec 0c             	sub    $0xc,%esp
+     90c:	68 38 40 00 00       	push   $0x4038
+     911:	e8 fc 2f 00 00       	call   3912 <chdir>
+     916:	83 c4 10             	add    $0x10,%esp
+     919:	85 c0                	test   %eax,%eax
+     91b:	0f 88 85 00 00 00    	js     9a6 <dirtest+0xc6>
+  if(chdir("..") < 0){
+     921:	83 ec 0c             	sub    $0xc,%esp
+     924:	68 dd 45 00 00       	push   $0x45dd
+     929:	e8 e4 2f 00 00       	call   3912 <chdir>
+     92e:	83 c4 10             	add    $0x10,%esp
+     931:	85 c0                	test   %eax,%eax
+     933:	78 5a                	js     98f <dirtest+0xaf>
+  if(unlink("dir0") < 0){
+     935:	83 ec 0c             	sub    $0xc,%esp
+     938:	68 38 40 00 00       	push   $0x4038
+     93d:	e8 b0 2f 00 00       	call   38f2 <unlink>
+     942:	83 c4 10             	add    $0x10,%esp
+     945:	85 c0                	test   %eax,%eax
+     947:	78 2f                	js     978 <dirtest+0x98>
+  printf(stdout, "mkdir test ok\n");
+     949:	83 ec 08             	sub    $0x8,%esp
+     94c:	68 75 40 00 00       	push   $0x4075
+     951:	ff 35 18 5e 00 00    	pushl  0x5e18
+     957:	e8 b4 30 00 00       	call   3a10 <printf>
+}
+     95c:	83 c4 10             	add    $0x10,%esp
+     95f:	c9                   	leave  
+     960:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     961:	50                   	push   %eax
+     962:	50                   	push   %eax
+     963:	68 68 3d 00 00       	push   $0x3d68
+     968:	ff 35 18 5e 00 00    	pushl  0x5e18
+     96e:	e8 9d 30 00 00       	call   3a10 <printf>
+    exit();
+     973:	e8 2a 2f 00 00       	call   38a2 <exit>
+    printf(stdout, "unlink dir0 failed\n");
+     978:	50                   	push   %eax
+     979:	50                   	push   %eax
+     97a:	68 61 40 00 00       	push   $0x4061
+     97f:	ff 35 18 5e 00 00    	pushl  0x5e18
+     985:	e8 86 30 00 00       	call   3a10 <printf>
+    exit();
+     98a:	e8 13 2f 00 00       	call   38a2 <exit>
+    printf(stdout, "chdir .. failed\n");
+     98f:	52                   	push   %edx
+     990:	52                   	push   %edx
+     991:	68 50 40 00 00       	push   $0x4050
+     996:	ff 35 18 5e 00 00    	pushl  0x5e18
+     99c:	e8 6f 30 00 00       	call   3a10 <printf>
+    exit();
+     9a1:	e8 fc 2e 00 00       	call   38a2 <exit>
+    printf(stdout, "chdir dir0 failed\n");
+     9a6:	51                   	push   %ecx
+     9a7:	51                   	push   %ecx
+     9a8:	68 3d 40 00 00       	push   $0x403d
+     9ad:	ff 35 18 5e 00 00    	pushl  0x5e18
+     9b3:	e8 58 30 00 00       	call   3a10 <printf>
+    exit();
+     9b8:	e8 e5 2e 00 00       	call   38a2 <exit>
+     9bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000009c0 <exectest>:
+{
+     9c0:	55                   	push   %ebp
+     9c1:	89 e5                	mov    %esp,%ebp
+     9c3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exec test\n");
+     9c6:	68 84 40 00 00       	push   $0x4084
+     9cb:	ff 35 18 5e 00 00    	pushl  0x5e18
+     9d1:	e8 3a 30 00 00       	call   3a10 <printf>
+  if(exec("echo", echoargv) < 0){
+     9d6:	5a                   	pop    %edx
+     9d7:	59                   	pop    %ecx
+     9d8:	68 1c 5e 00 00       	push   $0x5e1c
+     9dd:	68 4d 3e 00 00       	push   $0x3e4d
+     9e2:	e8 f3 2e 00 00       	call   38da <exec>
+     9e7:	83 c4 10             	add    $0x10,%esp
+     9ea:	85 c0                	test   %eax,%eax
+     9ec:	78 02                	js     9f0 <exectest+0x30>
+}
+     9ee:	c9                   	leave  
+     9ef:	c3                   	ret    
+    printf(stdout, "exec echo failed\n");
+     9f0:	50                   	push   %eax
+     9f1:	50                   	push   %eax
+     9f2:	68 8f 40 00 00       	push   $0x408f
+     9f7:	ff 35 18 5e 00 00    	pushl  0x5e18
+     9fd:	e8 0e 30 00 00       	call   3a10 <printf>
+    exit();
+     a02:	e8 9b 2e 00 00       	call   38a2 <exit>
+     a07:	89 f6                	mov    %esi,%esi
+     a09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000a10 <pipe1>:
+{
+     a10:	55                   	push   %ebp
+     a11:	89 e5                	mov    %esp,%ebp
+     a13:	57                   	push   %edi
+     a14:	56                   	push   %esi
+     a15:	53                   	push   %ebx
+  if(pipe(fds) != 0){
+     a16:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+     a19:	83 ec 38             	sub    $0x38,%esp
+  if(pipe(fds) != 0){
+     a1c:	50                   	push   %eax
+     a1d:	e8 90 2e 00 00       	call   38b2 <pipe>
+     a22:	83 c4 10             	add    $0x10,%esp
+     a25:	85 c0                	test   %eax,%eax
+     a27:	0f 85 3e 01 00 00    	jne    b6b <pipe1+0x15b>
+     a2d:	89 c3                	mov    %eax,%ebx
+  pid = fork();
+     a2f:	e8 66 2e 00 00       	call   389a <fork>
+  if(pid == 0){
+     a34:	83 f8 00             	cmp    $0x0,%eax
+     a37:	0f 84 84 00 00 00    	je     ac1 <pipe1+0xb1>
+  } else if(pid > 0){
+     a3d:	0f 8e 3b 01 00 00    	jle    b7e <pipe1+0x16e>
+    close(fds[1]);
+     a43:	83 ec 0c             	sub    $0xc,%esp
+     a46:	ff 75 e4             	pushl  -0x1c(%ebp)
+    cc = 1;
+     a49:	bf 01 00 00 00       	mov    $0x1,%edi
+    close(fds[1]);
+     a4e:	e8 77 2e 00 00       	call   38ca <close>
+    while((n = read(fds[0], buf, cc)) > 0){
+     a53:	83 c4 10             	add    $0x10,%esp
+    total = 0;
+     a56:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+    while((n = read(fds[0], buf, cc)) > 0){
+     a5d:	83 ec 04             	sub    $0x4,%esp
+     a60:	57                   	push   %edi
+     a61:	68 00 86 00 00       	push   $0x8600
+     a66:	ff 75 e0             	pushl  -0x20(%ebp)
+     a69:	e8 4c 2e 00 00       	call   38ba <read>
+     a6e:	83 c4 10             	add    $0x10,%esp
+     a71:	85 c0                	test   %eax,%eax
+     a73:	0f 8e ab 00 00 00    	jle    b24 <pipe1+0x114>
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+     a79:	89 d9                	mov    %ebx,%ecx
+     a7b:	8d 34 18             	lea    (%eax,%ebx,1),%esi
+     a7e:	f7 d9                	neg    %ecx
+     a80:	38 9c 0b 00 86 00 00 	cmp    %bl,0x8600(%ebx,%ecx,1)
+     a87:	8d 53 01             	lea    0x1(%ebx),%edx
+     a8a:	75 1b                	jne    aa7 <pipe1+0x97>
+      for(i = 0; i < n; i++){
+     a8c:	39 f2                	cmp    %esi,%edx
+     a8e:	89 d3                	mov    %edx,%ebx
+     a90:	75 ee                	jne    a80 <pipe1+0x70>
+      cc = cc * 2;
+     a92:	01 ff                	add    %edi,%edi
+      total += n;
+     a94:	01 45 d4             	add    %eax,-0x2c(%ebp)
+     a97:	b8 00 20 00 00       	mov    $0x2000,%eax
+     a9c:	81 ff 00 20 00 00    	cmp    $0x2000,%edi
+     aa2:	0f 4f f8             	cmovg  %eax,%edi
+     aa5:	eb b6                	jmp    a5d <pipe1+0x4d>
+          printf(1, "pipe1 oops 2\n");
+     aa7:	83 ec 08             	sub    $0x8,%esp
+     aaa:	68 be 40 00 00       	push   $0x40be
+     aaf:	6a 01                	push   $0x1
+     ab1:	e8 5a 2f 00 00       	call   3a10 <printf>
+          return;
+     ab6:	83 c4 10             	add    $0x10,%esp
+}
+     ab9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     abc:	5b                   	pop    %ebx
+     abd:	5e                   	pop    %esi
+     abe:	5f                   	pop    %edi
+     abf:	5d                   	pop    %ebp
+     ac0:	c3                   	ret    
+    close(fds[0]);
+     ac1:	83 ec 0c             	sub    $0xc,%esp
+     ac4:	ff 75 e0             	pushl  -0x20(%ebp)
+     ac7:	31 db                	xor    %ebx,%ebx
+     ac9:	be 09 04 00 00       	mov    $0x409,%esi
+     ace:	e8 f7 2d 00 00       	call   38ca <close>
+     ad3:	83 c4 10             	add    $0x10,%esp
+     ad6:	89 d8                	mov    %ebx,%eax
+     ad8:	89 f2                	mov    %esi,%edx
+     ada:	f7 d8                	neg    %eax
+     adc:	29 da                	sub    %ebx,%edx
+     ade:	66 90                	xchg   %ax,%ax
+        buf[i] = seq++;
+     ae0:	88 84 03 00 86 00 00 	mov    %al,0x8600(%ebx,%eax,1)
+     ae7:	83 c0 01             	add    $0x1,%eax
+      for(i = 0; i < 1033; i++)
+     aea:	39 d0                	cmp    %edx,%eax
+     aec:	75 f2                	jne    ae0 <pipe1+0xd0>
+      if(write(fds[1], buf, 1033) != 1033){
+     aee:	83 ec 04             	sub    $0x4,%esp
+     af1:	68 09 04 00 00       	push   $0x409
+     af6:	68 00 86 00 00       	push   $0x8600
+     afb:	ff 75 e4             	pushl  -0x1c(%ebp)
+     afe:	e8 bf 2d 00 00       	call   38c2 <write>
+     b03:	83 c4 10             	add    $0x10,%esp
+     b06:	3d 09 04 00 00       	cmp    $0x409,%eax
+     b0b:	0f 85 80 00 00 00    	jne    b91 <pipe1+0x181>
+     b11:	81 eb 09 04 00 00    	sub    $0x409,%ebx
+    for(n = 0; n < 5; n++){
+     b17:	81 fb d3 eb ff ff    	cmp    $0xffffebd3,%ebx
+     b1d:	75 b7                	jne    ad6 <pipe1+0xc6>
+    exit();
+     b1f:	e8 7e 2d 00 00       	call   38a2 <exit>
+    if(total != 5 * 1033){
+     b24:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)
+     b2b:	75 29                	jne    b56 <pipe1+0x146>
+    close(fds[0]);
+     b2d:	83 ec 0c             	sub    $0xc,%esp
+     b30:	ff 75 e0             	pushl  -0x20(%ebp)
+     b33:	e8 92 2d 00 00       	call   38ca <close>
+    wait();
+     b38:	e8 6d 2d 00 00       	call   38aa <wait>
+  printf(1, "pipe1 ok\n");
+     b3d:	5a                   	pop    %edx
+     b3e:	59                   	pop    %ecx
+     b3f:	68 e3 40 00 00       	push   $0x40e3
+     b44:	6a 01                	push   $0x1
+     b46:	e8 c5 2e 00 00       	call   3a10 <printf>
+     b4b:	83 c4 10             	add    $0x10,%esp
+}
+     b4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     b51:	5b                   	pop    %ebx
+     b52:	5e                   	pop    %esi
+     b53:	5f                   	pop    %edi
+     b54:	5d                   	pop    %ebp
+     b55:	c3                   	ret    
+      printf(1, "pipe1 oops 3 total %d\n", total);
+     b56:	53                   	push   %ebx
+     b57:	ff 75 d4             	pushl  -0x2c(%ebp)
+     b5a:	68 cc 40 00 00       	push   $0x40cc
+     b5f:	6a 01                	push   $0x1
+     b61:	e8 aa 2e 00 00       	call   3a10 <printf>
+      exit();
+     b66:	e8 37 2d 00 00       	call   38a2 <exit>
+    printf(1, "pipe() failed\n");
+     b6b:	57                   	push   %edi
+     b6c:	57                   	push   %edi
+     b6d:	68 a1 40 00 00       	push   $0x40a1
+     b72:	6a 01                	push   $0x1
+     b74:	e8 97 2e 00 00       	call   3a10 <printf>
+    exit();
+     b79:	e8 24 2d 00 00       	call   38a2 <exit>
+    printf(1, "fork() failed\n");
+     b7e:	50                   	push   %eax
+     b7f:	50                   	push   %eax
+     b80:	68 ed 40 00 00       	push   $0x40ed
+     b85:	6a 01                	push   $0x1
+     b87:	e8 84 2e 00 00       	call   3a10 <printf>
+    exit();
+     b8c:	e8 11 2d 00 00       	call   38a2 <exit>
+        printf(1, "pipe1 oops 1\n");
+     b91:	56                   	push   %esi
+     b92:	56                   	push   %esi
+     b93:	68 b0 40 00 00       	push   $0x40b0
+     b98:	6a 01                	push   $0x1
+     b9a:	e8 71 2e 00 00       	call   3a10 <printf>
+        exit();
+     b9f:	e8 fe 2c 00 00       	call   38a2 <exit>
+     ba4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     baa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000bb0 <preempt>:
+{
+     bb0:	55                   	push   %ebp
+     bb1:	89 e5                	mov    %esp,%ebp
+     bb3:	57                   	push   %edi
+     bb4:	56                   	push   %esi
+     bb5:	53                   	push   %ebx
+     bb6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "preempt: ");
+     bb9:	68 fc 40 00 00       	push   $0x40fc
+     bbe:	6a 01                	push   $0x1
+     bc0:	e8 4b 2e 00 00       	call   3a10 <printf>
+  pid1 = fork();
+     bc5:	e8 d0 2c 00 00       	call   389a <fork>
+  if(pid1 == 0)
+     bca:	83 c4 10             	add    $0x10,%esp
+     bcd:	85 c0                	test   %eax,%eax
+     bcf:	75 02                	jne    bd3 <preempt+0x23>
+     bd1:	eb fe                	jmp    bd1 <preempt+0x21>
+     bd3:	89 c7                	mov    %eax,%edi
+  pid2 = fork();
+     bd5:	e8 c0 2c 00 00       	call   389a <fork>
+  if(pid2 == 0)
+     bda:	85 c0                	test   %eax,%eax
+  pid2 = fork();
+     bdc:	89 c6                	mov    %eax,%esi
+  if(pid2 == 0)
+     bde:	75 02                	jne    be2 <preempt+0x32>
+     be0:	eb fe                	jmp    be0 <preempt+0x30>
+  pipe(pfds);
+     be2:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     be5:	83 ec 0c             	sub    $0xc,%esp
+     be8:	50                   	push   %eax
+     be9:	e8 c4 2c 00 00       	call   38b2 <pipe>
+  pid3 = fork();
+     bee:	e8 a7 2c 00 00       	call   389a <fork>
+  if(pid3 == 0){
+     bf3:	83 c4 10             	add    $0x10,%esp
+     bf6:	85 c0                	test   %eax,%eax
+  pid3 = fork();
+     bf8:	89 c3                	mov    %eax,%ebx
+  if(pid3 == 0){
+     bfa:	75 46                	jne    c42 <preempt+0x92>
+    close(pfds[0]);
+     bfc:	83 ec 0c             	sub    $0xc,%esp
+     bff:	ff 75 e0             	pushl  -0x20(%ebp)
+     c02:	e8 c3 2c 00 00       	call   38ca <close>
+    if(write(pfds[1], "x", 1) != 1)
+     c07:	83 c4 0c             	add    $0xc,%esp
+     c0a:	6a 01                	push   $0x1
+     c0c:	68 c1 46 00 00       	push   $0x46c1
+     c11:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c14:	e8 a9 2c 00 00       	call   38c2 <write>
+     c19:	83 c4 10             	add    $0x10,%esp
+     c1c:	83 e8 01             	sub    $0x1,%eax
+     c1f:	74 11                	je     c32 <preempt+0x82>
+      printf(1, "preempt write error");
+     c21:	50                   	push   %eax
+     c22:	50                   	push   %eax
+     c23:	68 06 41 00 00       	push   $0x4106
+     c28:	6a 01                	push   $0x1
+     c2a:	e8 e1 2d 00 00       	call   3a10 <printf>
+     c2f:	83 c4 10             	add    $0x10,%esp
+    close(pfds[1]);
+     c32:	83 ec 0c             	sub    $0xc,%esp
+     c35:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c38:	e8 8d 2c 00 00       	call   38ca <close>
+     c3d:	83 c4 10             	add    $0x10,%esp
+     c40:	eb fe                	jmp    c40 <preempt+0x90>
+  close(pfds[1]);
+     c42:	83 ec 0c             	sub    $0xc,%esp
+     c45:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c48:	e8 7d 2c 00 00       	call   38ca <close>
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+     c4d:	83 c4 0c             	add    $0xc,%esp
+     c50:	68 00 20 00 00       	push   $0x2000
+     c55:	68 00 86 00 00       	push   $0x8600
+     c5a:	ff 75 e0             	pushl  -0x20(%ebp)
+     c5d:	e8 58 2c 00 00       	call   38ba <read>
+     c62:	83 c4 10             	add    $0x10,%esp
+     c65:	83 e8 01             	sub    $0x1,%eax
+     c68:	74 19                	je     c83 <preempt+0xd3>
+    printf(1, "preempt read error");
+     c6a:	50                   	push   %eax
+     c6b:	50                   	push   %eax
+     c6c:	68 1a 41 00 00       	push   $0x411a
+     c71:	6a 01                	push   $0x1
+     c73:	e8 98 2d 00 00       	call   3a10 <printf>
+    return;
+     c78:	83 c4 10             	add    $0x10,%esp
+}
+     c7b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     c7e:	5b                   	pop    %ebx
+     c7f:	5e                   	pop    %esi
+     c80:	5f                   	pop    %edi
+     c81:	5d                   	pop    %ebp
+     c82:	c3                   	ret    
+  close(pfds[0]);
+     c83:	83 ec 0c             	sub    $0xc,%esp
+     c86:	ff 75 e0             	pushl  -0x20(%ebp)
+     c89:	e8 3c 2c 00 00       	call   38ca <close>
+  printf(1, "kill... ");
+     c8e:	58                   	pop    %eax
+     c8f:	5a                   	pop    %edx
+     c90:	68 2d 41 00 00       	push   $0x412d
+     c95:	6a 01                	push   $0x1
+     c97:	e8 74 2d 00 00       	call   3a10 <printf>
+  kill(pid1);
+     c9c:	89 3c 24             	mov    %edi,(%esp)
+     c9f:	e8 2e 2c 00 00       	call   38d2 <kill>
+  kill(pid2);
+     ca4:	89 34 24             	mov    %esi,(%esp)
+     ca7:	e8 26 2c 00 00       	call   38d2 <kill>
+  kill(pid3);
+     cac:	89 1c 24             	mov    %ebx,(%esp)
+     caf:	e8 1e 2c 00 00       	call   38d2 <kill>
+  printf(1, "wait... ");
+     cb4:	59                   	pop    %ecx
+     cb5:	5b                   	pop    %ebx
+     cb6:	68 36 41 00 00       	push   $0x4136
+     cbb:	6a 01                	push   $0x1
+     cbd:	e8 4e 2d 00 00       	call   3a10 <printf>
+  wait();
+     cc2:	e8 e3 2b 00 00       	call   38aa <wait>
+  wait();
+     cc7:	e8 de 2b 00 00       	call   38aa <wait>
+  wait();
+     ccc:	e8 d9 2b 00 00       	call   38aa <wait>
+  printf(1, "preempt ok\n");
+     cd1:	5e                   	pop    %esi
+     cd2:	5f                   	pop    %edi
+     cd3:	68 3f 41 00 00       	push   $0x413f
+     cd8:	6a 01                	push   $0x1
+     cda:	e8 31 2d 00 00       	call   3a10 <printf>
+     cdf:	83 c4 10             	add    $0x10,%esp
+     ce2:	eb 97                	jmp    c7b <preempt+0xcb>
+     ce4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     cea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000cf0 <exitwait>:
+{
+     cf0:	55                   	push   %ebp
+     cf1:	89 e5                	mov    %esp,%ebp
+     cf3:	56                   	push   %esi
+     cf4:	be 64 00 00 00       	mov    $0x64,%esi
+     cf9:	53                   	push   %ebx
+     cfa:	eb 14                	jmp    d10 <exitwait+0x20>
+     cfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pid){
+     d00:	74 6f                	je     d71 <exitwait+0x81>
+      if(wait() != pid){
+     d02:	e8 a3 2b 00 00       	call   38aa <wait>
+     d07:	39 d8                	cmp    %ebx,%eax
+     d09:	75 2d                	jne    d38 <exitwait+0x48>
+  for(i = 0; i < 100; i++){
+     d0b:	83 ee 01             	sub    $0x1,%esi
+     d0e:	74 48                	je     d58 <exitwait+0x68>
+    pid = fork();
+     d10:	e8 85 2b 00 00       	call   389a <fork>
+    if(pid < 0){
+     d15:	85 c0                	test   %eax,%eax
+    pid = fork();
+     d17:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+     d19:	79 e5                	jns    d00 <exitwait+0x10>
+      printf(1, "fork failed\n");
+     d1b:	83 ec 08             	sub    $0x8,%esp
+     d1e:	68 a9 4c 00 00       	push   $0x4ca9
+     d23:	6a 01                	push   $0x1
+     d25:	e8 e6 2c 00 00       	call   3a10 <printf>
+      return;
+     d2a:	83 c4 10             	add    $0x10,%esp
+}
+     d2d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d30:	5b                   	pop    %ebx
+     d31:	5e                   	pop    %esi
+     d32:	5d                   	pop    %ebp
+     d33:	c3                   	ret    
+     d34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        printf(1, "wait wrong pid\n");
+     d38:	83 ec 08             	sub    $0x8,%esp
+     d3b:	68 4b 41 00 00       	push   $0x414b
+     d40:	6a 01                	push   $0x1
+     d42:	e8 c9 2c 00 00       	call   3a10 <printf>
+        return;
+     d47:	83 c4 10             	add    $0x10,%esp
+}
+     d4a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d4d:	5b                   	pop    %ebx
+     d4e:	5e                   	pop    %esi
+     d4f:	5d                   	pop    %ebp
+     d50:	c3                   	ret    
+     d51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  printf(1, "exitwait ok\n");
+     d58:	83 ec 08             	sub    $0x8,%esp
+     d5b:	68 5b 41 00 00       	push   $0x415b
+     d60:	6a 01                	push   $0x1
+     d62:	e8 a9 2c 00 00       	call   3a10 <printf>
+     d67:	83 c4 10             	add    $0x10,%esp
+}
+     d6a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d6d:	5b                   	pop    %ebx
+     d6e:	5e                   	pop    %esi
+     d6f:	5d                   	pop    %ebp
+     d70:	c3                   	ret    
+      exit();
+     d71:	e8 2c 2b 00 00       	call   38a2 <exit>
+     d76:	8d 76 00             	lea    0x0(%esi),%esi
+     d79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000d80 <mem>:
+{
+     d80:	55                   	push   %ebp
+     d81:	89 e5                	mov    %esp,%ebp
+     d83:	57                   	push   %edi
+     d84:	56                   	push   %esi
+     d85:	53                   	push   %ebx
+     d86:	31 db                	xor    %ebx,%ebx
+     d88:	83 ec 14             	sub    $0x14,%esp
+  printf(1, "mem test\n");
+     d8b:	68 68 41 00 00       	push   $0x4168
+     d90:	6a 01                	push   $0x1
+     d92:	e8 79 2c 00 00       	call   3a10 <printf>
+  ppid = getpid();
+     d97:	e8 86 2b 00 00       	call   3922 <getpid>
+     d9c:	89 c6                	mov    %eax,%esi
+  if((pid = fork()) == 0){
+     d9e:	e8 f7 2a 00 00       	call   389a <fork>
+     da3:	83 c4 10             	add    $0x10,%esp
+     da6:	85 c0                	test   %eax,%eax
+     da8:	74 0a                	je     db4 <mem+0x34>
+     daa:	e9 89 00 00 00       	jmp    e38 <mem+0xb8>
+     daf:	90                   	nop
+      *(char**)m2 = m1;
+     db0:	89 18                	mov    %ebx,(%eax)
+     db2:	89 c3                	mov    %eax,%ebx
+    while((m2 = malloc(10001)) != 0){
+     db4:	83 ec 0c             	sub    $0xc,%esp
+     db7:	68 11 27 00 00       	push   $0x2711
+     dbc:	e8 af 2e 00 00       	call   3c70 <malloc>
+     dc1:	83 c4 10             	add    $0x10,%esp
+     dc4:	85 c0                	test   %eax,%eax
+     dc6:	75 e8                	jne    db0 <mem+0x30>
+    while(m1){
+     dc8:	85 db                	test   %ebx,%ebx
+     dca:	74 18                	je     de4 <mem+0x64>
+     dcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      m2 = *(char**)m1;
+     dd0:	8b 3b                	mov    (%ebx),%edi
+      free(m1);
+     dd2:	83 ec 0c             	sub    $0xc,%esp
+     dd5:	53                   	push   %ebx
+     dd6:	89 fb                	mov    %edi,%ebx
+     dd8:	e8 03 2e 00 00       	call   3be0 <free>
+    while(m1){
+     ddd:	83 c4 10             	add    $0x10,%esp
+     de0:	85 db                	test   %ebx,%ebx
+     de2:	75 ec                	jne    dd0 <mem+0x50>
+    m1 = malloc(1024*20);
+     de4:	83 ec 0c             	sub    $0xc,%esp
+     de7:	68 00 50 00 00       	push   $0x5000
+     dec:	e8 7f 2e 00 00       	call   3c70 <malloc>
+    if(m1 == 0){
+     df1:	83 c4 10             	add    $0x10,%esp
+     df4:	85 c0                	test   %eax,%eax
+     df6:	74 20                	je     e18 <mem+0x98>
+    free(m1);
+     df8:	83 ec 0c             	sub    $0xc,%esp
+     dfb:	50                   	push   %eax
+     dfc:	e8 df 2d 00 00       	call   3be0 <free>
+    printf(1, "mem ok\n");
+     e01:	58                   	pop    %eax
+     e02:	5a                   	pop    %edx
+     e03:	68 8c 41 00 00       	push   $0x418c
+     e08:	6a 01                	push   $0x1
+     e0a:	e8 01 2c 00 00       	call   3a10 <printf>
+    exit();
+     e0f:	e8 8e 2a 00 00       	call   38a2 <exit>
+     e14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      printf(1, "couldn't allocate mem?!!\n");
+     e18:	83 ec 08             	sub    $0x8,%esp
+     e1b:	68 72 41 00 00       	push   $0x4172
+     e20:	6a 01                	push   $0x1
+     e22:	e8 e9 2b 00 00       	call   3a10 <printf>
+      kill(ppid);
+     e27:	89 34 24             	mov    %esi,(%esp)
+     e2a:	e8 a3 2a 00 00       	call   38d2 <kill>
+      exit();
+     e2f:	e8 6e 2a 00 00       	call   38a2 <exit>
+     e34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+}
+     e38:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     e3b:	5b                   	pop    %ebx
+     e3c:	5e                   	pop    %esi
+     e3d:	5f                   	pop    %edi
+     e3e:	5d                   	pop    %ebp
+    wait();
+     e3f:	e9 66 2a 00 00       	jmp    38aa <wait>
+     e44:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     e4a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000e50 <sharedfd>:
+{
+     e50:	55                   	push   %ebp
+     e51:	89 e5                	mov    %esp,%ebp
+     e53:	57                   	push   %edi
+     e54:	56                   	push   %esi
+     e55:	53                   	push   %ebx
+     e56:	83 ec 34             	sub    $0x34,%esp
+  printf(1, "sharedfd test\n");
+     e59:	68 94 41 00 00       	push   $0x4194
+     e5e:	6a 01                	push   $0x1
+     e60:	e8 ab 2b 00 00       	call   3a10 <printf>
+  unlink("sharedfd");
+     e65:	c7 04 24 a3 41 00 00 	movl   $0x41a3,(%esp)
+     e6c:	e8 81 2a 00 00       	call   38f2 <unlink>
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+     e71:	59                   	pop    %ecx
+     e72:	5b                   	pop    %ebx
+     e73:	68 02 02 00 00       	push   $0x202
+     e78:	68 a3 41 00 00       	push   $0x41a3
+     e7d:	e8 60 2a 00 00       	call   38e2 <open>
+  if(fd < 0){
+     e82:	83 c4 10             	add    $0x10,%esp
+     e85:	85 c0                	test   %eax,%eax
+     e87:	0f 88 33 01 00 00    	js     fc0 <sharedfd+0x170>
+     e8d:	89 c6                	mov    %eax,%esi
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     e8f:	bb e8 03 00 00       	mov    $0x3e8,%ebx
+  pid = fork();
+     e94:	e8 01 2a 00 00       	call   389a <fork>
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     e99:	83 f8 01             	cmp    $0x1,%eax
+  pid = fork();
+     e9c:	89 c7                	mov    %eax,%edi
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     e9e:	19 c0                	sbb    %eax,%eax
+     ea0:	83 ec 04             	sub    $0x4,%esp
+     ea3:	83 e0 f3             	and    $0xfffffff3,%eax
+     ea6:	6a 0a                	push   $0xa
+     ea8:	83 c0 70             	add    $0x70,%eax
+     eab:	50                   	push   %eax
+     eac:	8d 45 de             	lea    -0x22(%ebp),%eax
+     eaf:	50                   	push   %eax
+     eb0:	e8 4b 28 00 00       	call   3700 <memset>
+     eb5:	83 c4 10             	add    $0x10,%esp
+     eb8:	eb 0b                	jmp    ec5 <sharedfd+0x75>
+     eba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(i = 0; i < 1000; i++){
+     ec0:	83 eb 01             	sub    $0x1,%ebx
+     ec3:	74 29                	je     eee <sharedfd+0x9e>
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+     ec5:	8d 45 de             	lea    -0x22(%ebp),%eax
+     ec8:	83 ec 04             	sub    $0x4,%esp
+     ecb:	6a 0a                	push   $0xa
+     ecd:	50                   	push   %eax
+     ece:	56                   	push   %esi
+     ecf:	e8 ee 29 00 00       	call   38c2 <write>
+     ed4:	83 c4 10             	add    $0x10,%esp
+     ed7:	83 f8 0a             	cmp    $0xa,%eax
+     eda:	74 e4                	je     ec0 <sharedfd+0x70>
+      printf(1, "fstests: write sharedfd failed\n");
+     edc:	83 ec 08             	sub    $0x8,%esp
+     edf:	68 94 4e 00 00       	push   $0x4e94
+     ee4:	6a 01                	push   $0x1
+     ee6:	e8 25 2b 00 00       	call   3a10 <printf>
+      break;
+     eeb:	83 c4 10             	add    $0x10,%esp
+  if(pid == 0)
+     eee:	85 ff                	test   %edi,%edi
+     ef0:	0f 84 fe 00 00 00    	je     ff4 <sharedfd+0x1a4>
+    wait();
+     ef6:	e8 af 29 00 00       	call   38aa <wait>
+  close(fd);
+     efb:	83 ec 0c             	sub    $0xc,%esp
+  nc = np = 0;
+     efe:	31 db                	xor    %ebx,%ebx
+     f00:	31 ff                	xor    %edi,%edi
+  close(fd);
+     f02:	56                   	push   %esi
+     f03:	8d 75 e8             	lea    -0x18(%ebp),%esi
+     f06:	e8 bf 29 00 00       	call   38ca <close>
+  fd = open("sharedfd", 0);
+     f0b:	58                   	pop    %eax
+     f0c:	5a                   	pop    %edx
+     f0d:	6a 00                	push   $0x0
+     f0f:	68 a3 41 00 00       	push   $0x41a3
+     f14:	e8 c9 29 00 00       	call   38e2 <open>
+  if(fd < 0){
+     f19:	83 c4 10             	add    $0x10,%esp
+     f1c:	85 c0                	test   %eax,%eax
+  fd = open("sharedfd", 0);
+     f1e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  if(fd < 0){
+     f21:	0f 88 b3 00 00 00    	js     fda <sharedfd+0x18a>
+     f27:	89 f8                	mov    %edi,%eax
+     f29:	89 df                	mov    %ebx,%edi
+     f2b:	89 c3                	mov    %eax,%ebx
+     f2d:	8d 76 00             	lea    0x0(%esi),%esi
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+     f30:	8d 45 de             	lea    -0x22(%ebp),%eax
+     f33:	83 ec 04             	sub    $0x4,%esp
+     f36:	6a 0a                	push   $0xa
+     f38:	50                   	push   %eax
+     f39:	ff 75 d4             	pushl  -0x2c(%ebp)
+     f3c:	e8 79 29 00 00       	call   38ba <read>
+     f41:	83 c4 10             	add    $0x10,%esp
+     f44:	85 c0                	test   %eax,%eax
+     f46:	7e 28                	jle    f70 <sharedfd+0x120>
+     f48:	8d 45 de             	lea    -0x22(%ebp),%eax
+     f4b:	eb 15                	jmp    f62 <sharedfd+0x112>
+     f4d:	8d 76 00             	lea    0x0(%esi),%esi
+        np++;
+     f50:	80 fa 70             	cmp    $0x70,%dl
+     f53:	0f 94 c2             	sete   %dl
+     f56:	0f b6 d2             	movzbl %dl,%edx
+     f59:	01 d7                	add    %edx,%edi
+     f5b:	83 c0 01             	add    $0x1,%eax
+    for(i = 0; i < sizeof(buf); i++){
+     f5e:	39 f0                	cmp    %esi,%eax
+     f60:	74 ce                	je     f30 <sharedfd+0xe0>
+      if(buf[i] == 'c')
+     f62:	0f b6 10             	movzbl (%eax),%edx
+     f65:	80 fa 63             	cmp    $0x63,%dl
+     f68:	75 e6                	jne    f50 <sharedfd+0x100>
+        nc++;
+     f6a:	83 c3 01             	add    $0x1,%ebx
+     f6d:	eb ec                	jmp    f5b <sharedfd+0x10b>
+     f6f:	90                   	nop
+  close(fd);
+     f70:	83 ec 0c             	sub    $0xc,%esp
+     f73:	89 d8                	mov    %ebx,%eax
+     f75:	ff 75 d4             	pushl  -0x2c(%ebp)
+     f78:	89 fb                	mov    %edi,%ebx
+     f7a:	89 c7                	mov    %eax,%edi
+     f7c:	e8 49 29 00 00       	call   38ca <close>
+  unlink("sharedfd");
+     f81:	c7 04 24 a3 41 00 00 	movl   $0x41a3,(%esp)
+     f88:	e8 65 29 00 00       	call   38f2 <unlink>
+  if(nc == 10000 && np == 10000){
+     f8d:	83 c4 10             	add    $0x10,%esp
+     f90:	81 ff 10 27 00 00    	cmp    $0x2710,%edi
+     f96:	75 61                	jne    ff9 <sharedfd+0x1a9>
+     f98:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx
+     f9e:	75 59                	jne    ff9 <sharedfd+0x1a9>
+    printf(1, "sharedfd ok\n");
+     fa0:	83 ec 08             	sub    $0x8,%esp
+     fa3:	68 ac 41 00 00       	push   $0x41ac
+     fa8:	6a 01                	push   $0x1
+     faa:	e8 61 2a 00 00       	call   3a10 <printf>
+     faf:	83 c4 10             	add    $0x10,%esp
+}
+     fb2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fb5:	5b                   	pop    %ebx
+     fb6:	5e                   	pop    %esi
+     fb7:	5f                   	pop    %edi
+     fb8:	5d                   	pop    %ebp
+     fb9:	c3                   	ret    
+     fba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    printf(1, "fstests: cannot open sharedfd for writing");
+     fc0:	83 ec 08             	sub    $0x8,%esp
+     fc3:	68 68 4e 00 00       	push   $0x4e68
+     fc8:	6a 01                	push   $0x1
+     fca:	e8 41 2a 00 00       	call   3a10 <printf>
+    return;
+     fcf:	83 c4 10             	add    $0x10,%esp
+}
+     fd2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fd5:	5b                   	pop    %ebx
+     fd6:	5e                   	pop    %esi
+     fd7:	5f                   	pop    %edi
+     fd8:	5d                   	pop    %ebp
+     fd9:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+     fda:	83 ec 08             	sub    $0x8,%esp
+     fdd:	68 b4 4e 00 00       	push   $0x4eb4
+     fe2:	6a 01                	push   $0x1
+     fe4:	e8 27 2a 00 00       	call   3a10 <printf>
+    return;
+     fe9:	83 c4 10             	add    $0x10,%esp
+}
+     fec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fef:	5b                   	pop    %ebx
+     ff0:	5e                   	pop    %esi
+     ff1:	5f                   	pop    %edi
+     ff2:	5d                   	pop    %ebp
+     ff3:	c3                   	ret    
+    exit();
+     ff4:	e8 a9 28 00 00       	call   38a2 <exit>
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+     ff9:	53                   	push   %ebx
+     ffa:	57                   	push   %edi
+     ffb:	68 b9 41 00 00       	push   $0x41b9
+    1000:	6a 01                	push   $0x1
+    1002:	e8 09 2a 00 00       	call   3a10 <printf>
+    exit();
+    1007:	e8 96 28 00 00       	call   38a2 <exit>
+    100c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001010 <fourfiles>:
+{
+    1010:	55                   	push   %ebp
+    1011:	89 e5                	mov    %esp,%ebp
+    1013:	57                   	push   %edi
+    1014:	56                   	push   %esi
+    1015:	53                   	push   %ebx
+  printf(1, "fourfiles test\n");
+    1016:	be ce 41 00 00       	mov    $0x41ce,%esi
+  for(pi = 0; pi < 4; pi++){
+    101b:	31 db                	xor    %ebx,%ebx
+{
+    101d:	83 ec 34             	sub    $0x34,%esp
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1020:	c7 45 d8 ce 41 00 00 	movl   $0x41ce,-0x28(%ebp)
+    1027:	c7 45 dc 17 43 00 00 	movl   $0x4317,-0x24(%ebp)
+  printf(1, "fourfiles test\n");
+    102e:	68 d4 41 00 00       	push   $0x41d4
+    1033:	6a 01                	push   $0x1
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1035:	c7 45 e0 1b 43 00 00 	movl   $0x431b,-0x20(%ebp)
+    103c:	c7 45 e4 d1 41 00 00 	movl   $0x41d1,-0x1c(%ebp)
+  printf(1, "fourfiles test\n");
+    1043:	e8 c8 29 00 00       	call   3a10 <printf>
+    1048:	83 c4 10             	add    $0x10,%esp
+    unlink(fname);
+    104b:	83 ec 0c             	sub    $0xc,%esp
+    104e:	56                   	push   %esi
+    104f:	e8 9e 28 00 00       	call   38f2 <unlink>
+    pid = fork();
+    1054:	e8 41 28 00 00       	call   389a <fork>
+    if(pid < 0){
+    1059:	83 c4 10             	add    $0x10,%esp
+    105c:	85 c0                	test   %eax,%eax
+    105e:	0f 88 68 01 00 00    	js     11cc <fourfiles+0x1bc>
+    if(pid == 0){
+    1064:	0f 84 df 00 00 00    	je     1149 <fourfiles+0x139>
+  for(pi = 0; pi < 4; pi++){
+    106a:	83 c3 01             	add    $0x1,%ebx
+    106d:	83 fb 04             	cmp    $0x4,%ebx
+    1070:	74 06                	je     1078 <fourfiles+0x68>
+    1072:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi
+    1076:	eb d3                	jmp    104b <fourfiles+0x3b>
+    wait();
+    1078:	e8 2d 28 00 00       	call   38aa <wait>
+  for(i = 0; i < 2; i++){
+    107d:	31 ff                	xor    %edi,%edi
+    wait();
+    107f:	e8 26 28 00 00       	call   38aa <wait>
+    1084:	e8 21 28 00 00       	call   38aa <wait>
+    1089:	e8 1c 28 00 00       	call   38aa <wait>
+    108e:	c7 45 d0 ce 41 00 00 	movl   $0x41ce,-0x30(%ebp)
+    fd = open(fname, 0);
+    1095:	83 ec 08             	sub    $0x8,%esp
+    total = 0;
+    1098:	31 db                	xor    %ebx,%ebx
+    fd = open(fname, 0);
+    109a:	6a 00                	push   $0x0
+    109c:	ff 75 d0             	pushl  -0x30(%ebp)
+    109f:	e8 3e 28 00 00       	call   38e2 <open>
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    10a4:	83 c4 10             	add    $0x10,%esp
+    fd = open(fname, 0);
+    10a7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    10aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    10b0:	83 ec 04             	sub    $0x4,%esp
+    10b3:	68 00 20 00 00       	push   $0x2000
+    10b8:	68 00 86 00 00       	push   $0x8600
+    10bd:	ff 75 d4             	pushl  -0x2c(%ebp)
+    10c0:	e8 f5 27 00 00       	call   38ba <read>
+    10c5:	83 c4 10             	add    $0x10,%esp
+    10c8:	85 c0                	test   %eax,%eax
+    10ca:	7e 26                	jle    10f2 <fourfiles+0xe2>
+      for(j = 0; j < n; j++){
+    10cc:	31 d2                	xor    %edx,%edx
+    10ce:	66 90                	xchg   %ax,%ax
+        if(buf[j] != '0'+i){
+    10d0:	0f be b2 00 86 00 00 	movsbl 0x8600(%edx),%esi
+    10d7:	83 ff 01             	cmp    $0x1,%edi
+    10da:	19 c9                	sbb    %ecx,%ecx
+    10dc:	83 c1 31             	add    $0x31,%ecx
+    10df:	39 ce                	cmp    %ecx,%esi
+    10e1:	0f 85 be 00 00 00    	jne    11a5 <fourfiles+0x195>
+      for(j = 0; j < n; j++){
+    10e7:	83 c2 01             	add    $0x1,%edx
+    10ea:	39 d0                	cmp    %edx,%eax
+    10ec:	75 e2                	jne    10d0 <fourfiles+0xc0>
+      total += n;
+    10ee:	01 c3                	add    %eax,%ebx
+    10f0:	eb be                	jmp    10b0 <fourfiles+0xa0>
+    close(fd);
+    10f2:	83 ec 0c             	sub    $0xc,%esp
+    10f5:	ff 75 d4             	pushl  -0x2c(%ebp)
+    10f8:	e8 cd 27 00 00       	call   38ca <close>
+    if(total != 12*500){
+    10fd:	83 c4 10             	add    $0x10,%esp
+    1100:	81 fb 70 17 00 00    	cmp    $0x1770,%ebx
+    1106:	0f 85 d3 00 00 00    	jne    11df <fourfiles+0x1cf>
+    unlink(fname);
+    110c:	83 ec 0c             	sub    $0xc,%esp
+    110f:	ff 75 d0             	pushl  -0x30(%ebp)
+    1112:	e8 db 27 00 00       	call   38f2 <unlink>
+  for(i = 0; i < 2; i++){
+    1117:	83 c4 10             	add    $0x10,%esp
+    111a:	83 ff 01             	cmp    $0x1,%edi
+    111d:	75 1a                	jne    1139 <fourfiles+0x129>
+  printf(1, "fourfiles ok\n");
+    111f:	83 ec 08             	sub    $0x8,%esp
+    1122:	68 12 42 00 00       	push   $0x4212
+    1127:	6a 01                	push   $0x1
+    1129:	e8 e2 28 00 00       	call   3a10 <printf>
+}
+    112e:	83 c4 10             	add    $0x10,%esp
+    1131:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1134:	5b                   	pop    %ebx
+    1135:	5e                   	pop    %esi
+    1136:	5f                   	pop    %edi
+    1137:	5d                   	pop    %ebp
+    1138:	c3                   	ret    
+    1139:	8b 45 dc             	mov    -0x24(%ebp),%eax
+    113c:	bf 01 00 00 00       	mov    $0x1,%edi
+    1141:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    1144:	e9 4c ff ff ff       	jmp    1095 <fourfiles+0x85>
+      fd = open(fname, O_CREATE | O_RDWR);
+    1149:	83 ec 08             	sub    $0x8,%esp
+    114c:	68 02 02 00 00       	push   $0x202
+    1151:	56                   	push   %esi
+    1152:	e8 8b 27 00 00       	call   38e2 <open>
+      if(fd < 0){
+    1157:	83 c4 10             	add    $0x10,%esp
+    115a:	85 c0                	test   %eax,%eax
+      fd = open(fname, O_CREATE | O_RDWR);
+    115c:	89 c6                	mov    %eax,%esi
+      if(fd < 0){
+    115e:	78 59                	js     11b9 <fourfiles+0x1a9>
+      memset(buf, '0'+pi, 512);
+    1160:	83 ec 04             	sub    $0x4,%esp
+    1163:	83 c3 30             	add    $0x30,%ebx
+    1166:	68 00 02 00 00       	push   $0x200
+    116b:	53                   	push   %ebx
+    116c:	bb 0c 00 00 00       	mov    $0xc,%ebx
+    1171:	68 00 86 00 00       	push   $0x8600
+    1176:	e8 85 25 00 00       	call   3700 <memset>
+    117b:	83 c4 10             	add    $0x10,%esp
+        if((n = write(fd, buf, 500)) != 500){
+    117e:	83 ec 04             	sub    $0x4,%esp
+    1181:	68 f4 01 00 00       	push   $0x1f4
+    1186:	68 00 86 00 00       	push   $0x8600
+    118b:	56                   	push   %esi
+    118c:	e8 31 27 00 00       	call   38c2 <write>
+    1191:	83 c4 10             	add    $0x10,%esp
+    1194:	3d f4 01 00 00       	cmp    $0x1f4,%eax
+    1199:	75 57                	jne    11f2 <fourfiles+0x1e2>
+      for(i = 0; i < 12; i++){
+    119b:	83 eb 01             	sub    $0x1,%ebx
+    119e:	75 de                	jne    117e <fourfiles+0x16e>
+      exit();
+    11a0:	e8 fd 26 00 00       	call   38a2 <exit>
+          printf(1, "wrong char\n");
+    11a5:	83 ec 08             	sub    $0x8,%esp
+    11a8:	68 f5 41 00 00       	push   $0x41f5
+    11ad:	6a 01                	push   $0x1
+    11af:	e8 5c 28 00 00       	call   3a10 <printf>
+          exit();
+    11b4:	e8 e9 26 00 00       	call   38a2 <exit>
+        printf(1, "create failed\n");
+    11b9:	51                   	push   %ecx
+    11ba:	51                   	push   %ecx
+    11bb:	68 6f 44 00 00       	push   $0x446f
+    11c0:	6a 01                	push   $0x1
+    11c2:	e8 49 28 00 00       	call   3a10 <printf>
+        exit();
+    11c7:	e8 d6 26 00 00       	call   38a2 <exit>
+      printf(1, "fork failed\n");
+    11cc:	53                   	push   %ebx
+    11cd:	53                   	push   %ebx
+    11ce:	68 a9 4c 00 00       	push   $0x4ca9
+    11d3:	6a 01                	push   $0x1
+    11d5:	e8 36 28 00 00       	call   3a10 <printf>
+      exit();
+    11da:	e8 c3 26 00 00       	call   38a2 <exit>
+      printf(1, "wrong length %d\n", total);
+    11df:	50                   	push   %eax
+    11e0:	53                   	push   %ebx
+    11e1:	68 01 42 00 00       	push   $0x4201
+    11e6:	6a 01                	push   $0x1
+    11e8:	e8 23 28 00 00       	call   3a10 <printf>
+      exit();
+    11ed:	e8 b0 26 00 00       	call   38a2 <exit>
+          printf(1, "write failed %d\n", n);
+    11f2:	52                   	push   %edx
+    11f3:	50                   	push   %eax
+    11f4:	68 e4 41 00 00       	push   $0x41e4
+    11f9:	6a 01                	push   $0x1
+    11fb:	e8 10 28 00 00       	call   3a10 <printf>
+          exit();
+    1200:	e8 9d 26 00 00       	call   38a2 <exit>
+    1205:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00001210 <createdelete>:
+{
+    1210:	55                   	push   %ebp
+    1211:	89 e5                	mov    %esp,%ebp
+    1213:	57                   	push   %edi
+    1214:	56                   	push   %esi
+    1215:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    1216:	31 db                	xor    %ebx,%ebx
+{
+    1218:	83 ec 44             	sub    $0x44,%esp
+  printf(1, "createdelete test\n");
+    121b:	68 20 42 00 00       	push   $0x4220
+    1220:	6a 01                	push   $0x1
+    1222:	e8 e9 27 00 00       	call   3a10 <printf>
+    1227:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+    122a:	e8 6b 26 00 00       	call   389a <fork>
+    if(pid < 0){
+    122f:	85 c0                	test   %eax,%eax
+    1231:	0f 88 be 01 00 00    	js     13f5 <createdelete+0x1e5>
+    if(pid == 0){
+    1237:	0f 84 0b 01 00 00    	je     1348 <createdelete+0x138>
+  for(pi = 0; pi < 4; pi++){
+    123d:	83 c3 01             	add    $0x1,%ebx
+    1240:	83 fb 04             	cmp    $0x4,%ebx
+    1243:	75 e5                	jne    122a <createdelete+0x1a>
+    1245:	8d 7d c8             	lea    -0x38(%ebp),%edi
+  name[0] = name[1] = name[2] = 0;
+    1248:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    wait();
+    124d:	e8 58 26 00 00       	call   38aa <wait>
+    1252:	e8 53 26 00 00       	call   38aa <wait>
+    1257:	e8 4e 26 00 00       	call   38aa <wait>
+    125c:	e8 49 26 00 00       	call   38aa <wait>
+  name[0] = name[1] = name[2] = 0;
+    1261:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    1265:	8d 76 00             	lea    0x0(%esi),%esi
+    1268:	8d 46 31             	lea    0x31(%esi),%eax
+    126b:	88 45 c7             	mov    %al,-0x39(%ebp)
+    126e:	8d 46 01             	lea    0x1(%esi),%eax
+    1271:	83 f8 09             	cmp    $0x9,%eax
+    1274:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    1277:	0f 9f c3             	setg   %bl
+    127a:	85 c0                	test   %eax,%eax
+    127c:	0f 94 c0             	sete   %al
+    127f:	09 c3                	or     %eax,%ebx
+    1281:	88 5d c6             	mov    %bl,-0x3a(%ebp)
+      name[2] = '\0';
+    1284:	bb 70 00 00 00       	mov    $0x70,%ebx
+      name[1] = '0' + i;
+    1289:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+      fd = open(name, 0);
+    128d:	83 ec 08             	sub    $0x8,%esp
+      name[0] = 'p' + pi;
+    1290:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      fd = open(name, 0);
+    1293:	6a 00                	push   $0x0
+    1295:	57                   	push   %edi
+      name[1] = '0' + i;
+    1296:	88 45 c9             	mov    %al,-0x37(%ebp)
+      fd = open(name, 0);
+    1299:	e8 44 26 00 00       	call   38e2 <open>
+      if((i == 0 || i >= N/2) && fd < 0){
+    129e:	83 c4 10             	add    $0x10,%esp
+    12a1:	80 7d c6 00          	cmpb   $0x0,-0x3a(%ebp)
+    12a5:	0f 84 85 00 00 00    	je     1330 <createdelete+0x120>
+    12ab:	85 c0                	test   %eax,%eax
+    12ad:	0f 88 1a 01 00 00    	js     13cd <createdelete+0x1bd>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    12b3:	83 fe 08             	cmp    $0x8,%esi
+    12b6:	0f 86 54 01 00 00    	jbe    1410 <createdelete+0x200>
+        close(fd);
+    12bc:	83 ec 0c             	sub    $0xc,%esp
+    12bf:	50                   	push   %eax
+    12c0:	e8 05 26 00 00       	call   38ca <close>
+    12c5:	83 c4 10             	add    $0x10,%esp
+    12c8:	83 c3 01             	add    $0x1,%ebx
+    for(pi = 0; pi < 4; pi++){
+    12cb:	80 fb 74             	cmp    $0x74,%bl
+    12ce:	75 b9                	jne    1289 <createdelete+0x79>
+    12d0:	8b 75 c0             	mov    -0x40(%ebp),%esi
+  for(i = 0; i < N; i++){
+    12d3:	83 fe 13             	cmp    $0x13,%esi
+    12d6:	75 90                	jne    1268 <createdelete+0x58>
+    12d8:	be 70 00 00 00       	mov    $0x70,%esi
+    12dd:	8d 76 00             	lea    0x0(%esi),%esi
+    12e0:	8d 46 c0             	lea    -0x40(%esi),%eax
+  name[0] = name[1] = name[2] = 0;
+    12e3:	bb 04 00 00 00       	mov    $0x4,%ebx
+    12e8:	88 45 c7             	mov    %al,-0x39(%ebp)
+      name[0] = 'p' + i;
+    12eb:	89 f0                	mov    %esi,%eax
+      unlink(name);
+    12ed:	83 ec 0c             	sub    $0xc,%esp
+      name[0] = 'p' + i;
+    12f0:	88 45 c8             	mov    %al,-0x38(%ebp)
+      name[1] = '0' + i;
+    12f3:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+      unlink(name);
+    12f7:	57                   	push   %edi
+      name[1] = '0' + i;
+    12f8:	88 45 c9             	mov    %al,-0x37(%ebp)
+      unlink(name);
+    12fb:	e8 f2 25 00 00       	call   38f2 <unlink>
+    for(pi = 0; pi < 4; pi++){
+    1300:	83 c4 10             	add    $0x10,%esp
+    1303:	83 eb 01             	sub    $0x1,%ebx
+    1306:	75 e3                	jne    12eb <createdelete+0xdb>
+    1308:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; i < N; i++){
+    130b:	89 f0                	mov    %esi,%eax
+    130d:	3c 84                	cmp    $0x84,%al
+    130f:	75 cf                	jne    12e0 <createdelete+0xd0>
+  printf(1, "createdelete ok\n");
+    1311:	83 ec 08             	sub    $0x8,%esp
+    1314:	68 33 42 00 00       	push   $0x4233
+    1319:	6a 01                	push   $0x1
+    131b:	e8 f0 26 00 00       	call   3a10 <printf>
+}
+    1320:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1323:	5b                   	pop    %ebx
+    1324:	5e                   	pop    %esi
+    1325:	5f                   	pop    %edi
+    1326:	5d                   	pop    %ebp
+    1327:	c3                   	ret    
+    1328:	90                   	nop
+    1329:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1330:	83 fe 08             	cmp    $0x8,%esi
+    1333:	0f 86 cf 00 00 00    	jbe    1408 <createdelete+0x1f8>
+      if(fd >= 0)
+    1339:	85 c0                	test   %eax,%eax
+    133b:	78 8b                	js     12c8 <createdelete+0xb8>
+    133d:	e9 7a ff ff ff       	jmp    12bc <createdelete+0xac>
+    1342:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      name[0] = 'p' + pi;
+    1348:	83 c3 70             	add    $0x70,%ebx
+      name[2] = '\0';
+    134b:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    134f:	8d 7d c8             	lea    -0x38(%ebp),%edi
+      name[0] = 'p' + pi;
+    1352:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      name[2] = '\0';
+    1355:	31 db                	xor    %ebx,%ebx
+    1357:	eb 0f                	jmp    1368 <createdelete+0x158>
+    1359:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      for(i = 0; i < N; i++){
+    1360:	83 fb 13             	cmp    $0x13,%ebx
+    1363:	74 63                	je     13c8 <createdelete+0x1b8>
+    1365:	83 c3 01             	add    $0x1,%ebx
+        fd = open(name, O_CREATE | O_RDWR);
+    1368:	83 ec 08             	sub    $0x8,%esp
+        name[1] = '0' + i;
+    136b:	8d 43 30             	lea    0x30(%ebx),%eax
+        fd = open(name, O_CREATE | O_RDWR);
+    136e:	68 02 02 00 00       	push   $0x202
+    1373:	57                   	push   %edi
+        name[1] = '0' + i;
+    1374:	88 45 c9             	mov    %al,-0x37(%ebp)
+        fd = open(name, O_CREATE | O_RDWR);
+    1377:	e8 66 25 00 00       	call   38e2 <open>
+        if(fd < 0){
+    137c:	83 c4 10             	add    $0x10,%esp
+    137f:	85 c0                	test   %eax,%eax
+    1381:	78 5f                	js     13e2 <createdelete+0x1d2>
+        close(fd);
+    1383:	83 ec 0c             	sub    $0xc,%esp
+    1386:	50                   	push   %eax
+    1387:	e8 3e 25 00 00       	call   38ca <close>
+        if(i > 0 && (i % 2 ) == 0){
+    138c:	83 c4 10             	add    $0x10,%esp
+    138f:	85 db                	test   %ebx,%ebx
+    1391:	74 d2                	je     1365 <createdelete+0x155>
+    1393:	f6 c3 01             	test   $0x1,%bl
+    1396:	75 c8                	jne    1360 <createdelete+0x150>
+          if(unlink(name) < 0){
+    1398:	83 ec 0c             	sub    $0xc,%esp
+          name[1] = '0' + (i / 2);
+    139b:	89 d8                	mov    %ebx,%eax
+    139d:	d1 f8                	sar    %eax
+          if(unlink(name) < 0){
+    139f:	57                   	push   %edi
+          name[1] = '0' + (i / 2);
+    13a0:	83 c0 30             	add    $0x30,%eax
+    13a3:	88 45 c9             	mov    %al,-0x37(%ebp)
+          if(unlink(name) < 0){
+    13a6:	e8 47 25 00 00       	call   38f2 <unlink>
+    13ab:	83 c4 10             	add    $0x10,%esp
+    13ae:	85 c0                	test   %eax,%eax
+    13b0:	79 ae                	jns    1360 <createdelete+0x150>
+            printf(1, "unlink failed\n");
+    13b2:	52                   	push   %edx
+    13b3:	52                   	push   %edx
+    13b4:	68 21 3e 00 00       	push   $0x3e21
+    13b9:	6a 01                	push   $0x1
+    13bb:	e8 50 26 00 00       	call   3a10 <printf>
+            exit();
+    13c0:	e8 dd 24 00 00       	call   38a2 <exit>
+    13c5:	8d 76 00             	lea    0x0(%esi),%esi
+      exit();
+    13c8:	e8 d5 24 00 00       	call   38a2 <exit>
+        printf(1, "oops createdelete %s didn't exist\n", name);
+    13cd:	83 ec 04             	sub    $0x4,%esp
+    13d0:	57                   	push   %edi
+    13d1:	68 e0 4e 00 00       	push   $0x4ee0
+    13d6:	6a 01                	push   $0x1
+    13d8:	e8 33 26 00 00       	call   3a10 <printf>
+        exit();
+    13dd:	e8 c0 24 00 00       	call   38a2 <exit>
+          printf(1, "create failed\n");
+    13e2:	51                   	push   %ecx
+    13e3:	51                   	push   %ecx
+    13e4:	68 6f 44 00 00       	push   $0x446f
+    13e9:	6a 01                	push   $0x1
+    13eb:	e8 20 26 00 00       	call   3a10 <printf>
+          exit();
+    13f0:	e8 ad 24 00 00       	call   38a2 <exit>
+      printf(1, "fork failed\n");
+    13f5:	53                   	push   %ebx
+    13f6:	53                   	push   %ebx
+    13f7:	68 a9 4c 00 00       	push   $0x4ca9
+    13fc:	6a 01                	push   $0x1
+    13fe:	e8 0d 26 00 00       	call   3a10 <printf>
+      exit();
+    1403:	e8 9a 24 00 00       	call   38a2 <exit>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1408:	85 c0                	test   %eax,%eax
+    140a:	0f 88 b8 fe ff ff    	js     12c8 <createdelete+0xb8>
+        printf(1, "oops createdelete %s did exist\n", name);
+    1410:	50                   	push   %eax
+    1411:	57                   	push   %edi
+    1412:	68 04 4f 00 00       	push   $0x4f04
+    1417:	6a 01                	push   $0x1
+    1419:	e8 f2 25 00 00       	call   3a10 <printf>
+        exit();
+    141e:	e8 7f 24 00 00       	call   38a2 <exit>
+    1423:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1429:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00001430 <unlinkread>:
+{
+    1430:	55                   	push   %ebp
+    1431:	89 e5                	mov    %esp,%ebp
+    1433:	56                   	push   %esi
+    1434:	53                   	push   %ebx
+  printf(1, "unlinkread test\n");
+    1435:	83 ec 08             	sub    $0x8,%esp
+    1438:	68 44 42 00 00       	push   $0x4244
+    143d:	6a 01                	push   $0x1
+    143f:	e8 cc 25 00 00       	call   3a10 <printf>
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+    1444:	5b                   	pop    %ebx
+    1445:	5e                   	pop    %esi
+    1446:	68 02 02 00 00       	push   $0x202
+    144b:	68 55 42 00 00       	push   $0x4255
+    1450:	e8 8d 24 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1455:	83 c4 10             	add    $0x10,%esp
+    1458:	85 c0                	test   %eax,%eax
+    145a:	0f 88 e6 00 00 00    	js     1546 <unlinkread+0x116>
+  write(fd, "hello", 5);
+    1460:	83 ec 04             	sub    $0x4,%esp
+    1463:	89 c3                	mov    %eax,%ebx
+    1465:	6a 05                	push   $0x5
+    1467:	68 7a 42 00 00       	push   $0x427a
+    146c:	50                   	push   %eax
+    146d:	e8 50 24 00 00       	call   38c2 <write>
+  close(fd);
+    1472:	89 1c 24             	mov    %ebx,(%esp)
+    1475:	e8 50 24 00 00       	call   38ca <close>
+  fd = open("unlinkread", O_RDWR);
+    147a:	58                   	pop    %eax
+    147b:	5a                   	pop    %edx
+    147c:	6a 02                	push   $0x2
+    147e:	68 55 42 00 00       	push   $0x4255
+    1483:	e8 5a 24 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1488:	83 c4 10             	add    $0x10,%esp
+    148b:	85 c0                	test   %eax,%eax
+  fd = open("unlinkread", O_RDWR);
+    148d:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    148f:	0f 88 10 01 00 00    	js     15a5 <unlinkread+0x175>
+  if(unlink("unlinkread") != 0){
+    1495:	83 ec 0c             	sub    $0xc,%esp
+    1498:	68 55 42 00 00       	push   $0x4255
+    149d:	e8 50 24 00 00       	call   38f2 <unlink>
+    14a2:	83 c4 10             	add    $0x10,%esp
+    14a5:	85 c0                	test   %eax,%eax
+    14a7:	0f 85 e5 00 00 00    	jne    1592 <unlinkread+0x162>
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    14ad:	83 ec 08             	sub    $0x8,%esp
+    14b0:	68 02 02 00 00       	push   $0x202
+    14b5:	68 55 42 00 00       	push   $0x4255
+    14ba:	e8 23 24 00 00       	call   38e2 <open>
+  write(fd1, "yyy", 3);
+    14bf:	83 c4 0c             	add    $0xc,%esp
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    14c2:	89 c6                	mov    %eax,%esi
+  write(fd1, "yyy", 3);
+    14c4:	6a 03                	push   $0x3
+    14c6:	68 b2 42 00 00       	push   $0x42b2
+    14cb:	50                   	push   %eax
+    14cc:	e8 f1 23 00 00       	call   38c2 <write>
+  close(fd1);
+    14d1:	89 34 24             	mov    %esi,(%esp)
+    14d4:	e8 f1 23 00 00       	call   38ca <close>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    14d9:	83 c4 0c             	add    $0xc,%esp
+    14dc:	68 00 20 00 00       	push   $0x2000
+    14e1:	68 00 86 00 00       	push   $0x8600
+    14e6:	53                   	push   %ebx
+    14e7:	e8 ce 23 00 00       	call   38ba <read>
+    14ec:	83 c4 10             	add    $0x10,%esp
+    14ef:	83 f8 05             	cmp    $0x5,%eax
+    14f2:	0f 85 87 00 00 00    	jne    157f <unlinkread+0x14f>
+  if(buf[0] != 'h'){
+    14f8:	80 3d 00 86 00 00 68 	cmpb   $0x68,0x8600
+    14ff:	75 6b                	jne    156c <unlinkread+0x13c>
+  if(write(fd, buf, 10) != 10){
+    1501:	83 ec 04             	sub    $0x4,%esp
+    1504:	6a 0a                	push   $0xa
+    1506:	68 00 86 00 00       	push   $0x8600
+    150b:	53                   	push   %ebx
+    150c:	e8 b1 23 00 00       	call   38c2 <write>
+    1511:	83 c4 10             	add    $0x10,%esp
+    1514:	83 f8 0a             	cmp    $0xa,%eax
+    1517:	75 40                	jne    1559 <unlinkread+0x129>
+  close(fd);
+    1519:	83 ec 0c             	sub    $0xc,%esp
+    151c:	53                   	push   %ebx
+    151d:	e8 a8 23 00 00       	call   38ca <close>
+  unlink("unlinkread");
+    1522:	c7 04 24 55 42 00 00 	movl   $0x4255,(%esp)
+    1529:	e8 c4 23 00 00       	call   38f2 <unlink>
+  printf(1, "unlinkread ok\n");
+    152e:	58                   	pop    %eax
+    152f:	5a                   	pop    %edx
+    1530:	68 fd 42 00 00       	push   $0x42fd
+    1535:	6a 01                	push   $0x1
+    1537:	e8 d4 24 00 00       	call   3a10 <printf>
+}
+    153c:	83 c4 10             	add    $0x10,%esp
+    153f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    1542:	5b                   	pop    %ebx
+    1543:	5e                   	pop    %esi
+    1544:	5d                   	pop    %ebp
+    1545:	c3                   	ret    
+    printf(1, "create unlinkread failed\n");
+    1546:	51                   	push   %ecx
+    1547:	51                   	push   %ecx
+    1548:	68 60 42 00 00       	push   $0x4260
+    154d:	6a 01                	push   $0x1
+    154f:	e8 bc 24 00 00       	call   3a10 <printf>
+    exit();
+    1554:	e8 49 23 00 00       	call   38a2 <exit>
+    printf(1, "unlinkread write failed\n");
+    1559:	51                   	push   %ecx
+    155a:	51                   	push   %ecx
+    155b:	68 e4 42 00 00       	push   $0x42e4
+    1560:	6a 01                	push   $0x1
+    1562:	e8 a9 24 00 00       	call   3a10 <printf>
+    exit();
+    1567:	e8 36 23 00 00       	call   38a2 <exit>
+    printf(1, "unlinkread wrong data\n");
+    156c:	53                   	push   %ebx
+    156d:	53                   	push   %ebx
+    156e:	68 cd 42 00 00       	push   $0x42cd
+    1573:	6a 01                	push   $0x1
+    1575:	e8 96 24 00 00       	call   3a10 <printf>
+    exit();
+    157a:	e8 23 23 00 00       	call   38a2 <exit>
+    printf(1, "unlinkread read failed");
+    157f:	56                   	push   %esi
+    1580:	56                   	push   %esi
+    1581:	68 b6 42 00 00       	push   $0x42b6
+    1586:	6a 01                	push   $0x1
+    1588:	e8 83 24 00 00       	call   3a10 <printf>
+    exit();
+    158d:	e8 10 23 00 00       	call   38a2 <exit>
+    printf(1, "unlink unlinkread failed\n");
+    1592:	50                   	push   %eax
+    1593:	50                   	push   %eax
+    1594:	68 98 42 00 00       	push   $0x4298
+    1599:	6a 01                	push   $0x1
+    159b:	e8 70 24 00 00       	call   3a10 <printf>
+    exit();
+    15a0:	e8 fd 22 00 00       	call   38a2 <exit>
+    printf(1, "open unlinkread failed\n");
+    15a5:	50                   	push   %eax
+    15a6:	50                   	push   %eax
+    15a7:	68 80 42 00 00       	push   $0x4280
+    15ac:	6a 01                	push   $0x1
+    15ae:	e8 5d 24 00 00       	call   3a10 <printf>
+    exit();
+    15b3:	e8 ea 22 00 00       	call   38a2 <exit>
+    15b8:	90                   	nop
+    15b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000015c0 <linktest>:
+{
+    15c0:	55                   	push   %ebp
+    15c1:	89 e5                	mov    %esp,%ebp
+    15c3:	53                   	push   %ebx
+    15c4:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "linktest\n");
+    15c7:	68 0c 43 00 00       	push   $0x430c
+    15cc:	6a 01                	push   $0x1
+    15ce:	e8 3d 24 00 00       	call   3a10 <printf>
+  unlink("lf1");
+    15d3:	c7 04 24 16 43 00 00 	movl   $0x4316,(%esp)
+    15da:	e8 13 23 00 00       	call   38f2 <unlink>
+  unlink("lf2");
+    15df:	c7 04 24 1a 43 00 00 	movl   $0x431a,(%esp)
+    15e6:	e8 07 23 00 00       	call   38f2 <unlink>
+  fd = open("lf1", O_CREATE|O_RDWR);
+    15eb:	58                   	pop    %eax
+    15ec:	5a                   	pop    %edx
+    15ed:	68 02 02 00 00       	push   $0x202
+    15f2:	68 16 43 00 00       	push   $0x4316
+    15f7:	e8 e6 22 00 00       	call   38e2 <open>
+  if(fd < 0){
+    15fc:	83 c4 10             	add    $0x10,%esp
+    15ff:	85 c0                	test   %eax,%eax
+    1601:	0f 88 1e 01 00 00    	js     1725 <linktest+0x165>
+  if(write(fd, "hello", 5) != 5){
+    1607:	83 ec 04             	sub    $0x4,%esp
+    160a:	89 c3                	mov    %eax,%ebx
+    160c:	6a 05                	push   $0x5
+    160e:	68 7a 42 00 00       	push   $0x427a
+    1613:	50                   	push   %eax
+    1614:	e8 a9 22 00 00       	call   38c2 <write>
+    1619:	83 c4 10             	add    $0x10,%esp
+    161c:	83 f8 05             	cmp    $0x5,%eax
+    161f:	0f 85 98 01 00 00    	jne    17bd <linktest+0x1fd>
+  close(fd);
+    1625:	83 ec 0c             	sub    $0xc,%esp
+    1628:	53                   	push   %ebx
+    1629:	e8 9c 22 00 00       	call   38ca <close>
+  if(link("lf1", "lf2") < 0){
+    162e:	5b                   	pop    %ebx
+    162f:	58                   	pop    %eax
+    1630:	68 1a 43 00 00       	push   $0x431a
+    1635:	68 16 43 00 00       	push   $0x4316
+    163a:	e8 c3 22 00 00       	call   3902 <link>
+    163f:	83 c4 10             	add    $0x10,%esp
+    1642:	85 c0                	test   %eax,%eax
+    1644:	0f 88 60 01 00 00    	js     17aa <linktest+0x1ea>
+  unlink("lf1");
+    164a:	83 ec 0c             	sub    $0xc,%esp
+    164d:	68 16 43 00 00       	push   $0x4316
+    1652:	e8 9b 22 00 00       	call   38f2 <unlink>
+  if(open("lf1", 0) >= 0){
+    1657:	58                   	pop    %eax
+    1658:	5a                   	pop    %edx
+    1659:	6a 00                	push   $0x0
+    165b:	68 16 43 00 00       	push   $0x4316
+    1660:	e8 7d 22 00 00       	call   38e2 <open>
+    1665:	83 c4 10             	add    $0x10,%esp
+    1668:	85 c0                	test   %eax,%eax
+    166a:	0f 89 27 01 00 00    	jns    1797 <linktest+0x1d7>
+  fd = open("lf2", 0);
+    1670:	83 ec 08             	sub    $0x8,%esp
+    1673:	6a 00                	push   $0x0
+    1675:	68 1a 43 00 00       	push   $0x431a
+    167a:	e8 63 22 00 00       	call   38e2 <open>
+  if(fd < 0){
+    167f:	83 c4 10             	add    $0x10,%esp
+    1682:	85 c0                	test   %eax,%eax
+  fd = open("lf2", 0);
+    1684:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1686:	0f 88 f8 00 00 00    	js     1784 <linktest+0x1c4>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    168c:	83 ec 04             	sub    $0x4,%esp
+    168f:	68 00 20 00 00       	push   $0x2000
+    1694:	68 00 86 00 00       	push   $0x8600
+    1699:	50                   	push   %eax
+    169a:	e8 1b 22 00 00       	call   38ba <read>
+    169f:	83 c4 10             	add    $0x10,%esp
+    16a2:	83 f8 05             	cmp    $0x5,%eax
+    16a5:	0f 85 c6 00 00 00    	jne    1771 <linktest+0x1b1>
+  close(fd);
+    16ab:	83 ec 0c             	sub    $0xc,%esp
+    16ae:	53                   	push   %ebx
+    16af:	e8 16 22 00 00       	call   38ca <close>
+  if(link("lf2", "lf2") >= 0){
+    16b4:	58                   	pop    %eax
+    16b5:	5a                   	pop    %edx
+    16b6:	68 1a 43 00 00       	push   $0x431a
+    16bb:	68 1a 43 00 00       	push   $0x431a
+    16c0:	e8 3d 22 00 00       	call   3902 <link>
+    16c5:	83 c4 10             	add    $0x10,%esp
+    16c8:	85 c0                	test   %eax,%eax
+    16ca:	0f 89 8e 00 00 00    	jns    175e <linktest+0x19e>
+  unlink("lf2");
+    16d0:	83 ec 0c             	sub    $0xc,%esp
+    16d3:	68 1a 43 00 00       	push   $0x431a
+    16d8:	e8 15 22 00 00       	call   38f2 <unlink>
+  if(link("lf2", "lf1") >= 0){
+    16dd:	59                   	pop    %ecx
+    16de:	5b                   	pop    %ebx
+    16df:	68 16 43 00 00       	push   $0x4316
+    16e4:	68 1a 43 00 00       	push   $0x431a
+    16e9:	e8 14 22 00 00       	call   3902 <link>
+    16ee:	83 c4 10             	add    $0x10,%esp
+    16f1:	85 c0                	test   %eax,%eax
+    16f3:	79 56                	jns    174b <linktest+0x18b>
+  if(link(".", "lf1") >= 0){
+    16f5:	83 ec 08             	sub    $0x8,%esp
+    16f8:	68 16 43 00 00       	push   $0x4316
+    16fd:	68 de 45 00 00       	push   $0x45de
+    1702:	e8 fb 21 00 00       	call   3902 <link>
+    1707:	83 c4 10             	add    $0x10,%esp
+    170a:	85 c0                	test   %eax,%eax
+    170c:	79 2a                	jns    1738 <linktest+0x178>
+  printf(1, "linktest ok\n");
+    170e:	83 ec 08             	sub    $0x8,%esp
+    1711:	68 b4 43 00 00       	push   $0x43b4
+    1716:	6a 01                	push   $0x1
+    1718:	e8 f3 22 00 00       	call   3a10 <printf>
+}
+    171d:	83 c4 10             	add    $0x10,%esp
+    1720:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    1723:	c9                   	leave  
+    1724:	c3                   	ret    
+    printf(1, "create lf1 failed\n");
+    1725:	50                   	push   %eax
+    1726:	50                   	push   %eax
+    1727:	68 1e 43 00 00       	push   $0x431e
+    172c:	6a 01                	push   $0x1
+    172e:	e8 dd 22 00 00       	call   3a10 <printf>
+    exit();
+    1733:	e8 6a 21 00 00       	call   38a2 <exit>
+    printf(1, "link . lf1 succeeded! oops\n");
+    1738:	50                   	push   %eax
+    1739:	50                   	push   %eax
+    173a:	68 98 43 00 00       	push   $0x4398
+    173f:	6a 01                	push   $0x1
+    1741:	e8 ca 22 00 00       	call   3a10 <printf>
+    exit();
+    1746:	e8 57 21 00 00       	call   38a2 <exit>
+    printf(1, "link non-existant succeeded! oops\n");
+    174b:	52                   	push   %edx
+    174c:	52                   	push   %edx
+    174d:	68 4c 4f 00 00       	push   $0x4f4c
+    1752:	6a 01                	push   $0x1
+    1754:	e8 b7 22 00 00       	call   3a10 <printf>
+    exit();
+    1759:	e8 44 21 00 00       	call   38a2 <exit>
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    175e:	50                   	push   %eax
+    175f:	50                   	push   %eax
+    1760:	68 7a 43 00 00       	push   $0x437a
+    1765:	6a 01                	push   $0x1
+    1767:	e8 a4 22 00 00       	call   3a10 <printf>
+    exit();
+    176c:	e8 31 21 00 00       	call   38a2 <exit>
+    printf(1, "read lf2 failed\n");
+    1771:	51                   	push   %ecx
+    1772:	51                   	push   %ecx
+    1773:	68 69 43 00 00       	push   $0x4369
+    1778:	6a 01                	push   $0x1
+    177a:	e8 91 22 00 00       	call   3a10 <printf>
+    exit();
+    177f:	e8 1e 21 00 00       	call   38a2 <exit>
+    printf(1, "open lf2 failed\n");
+    1784:	53                   	push   %ebx
+    1785:	53                   	push   %ebx
+    1786:	68 58 43 00 00       	push   $0x4358
+    178b:	6a 01                	push   $0x1
+    178d:	e8 7e 22 00 00       	call   3a10 <printf>
+    exit();
+    1792:	e8 0b 21 00 00       	call   38a2 <exit>
+    printf(1, "unlinked lf1 but it is still there!\n");
+    1797:	50                   	push   %eax
+    1798:	50                   	push   %eax
+    1799:	68 24 4f 00 00       	push   $0x4f24
+    179e:	6a 01                	push   $0x1
+    17a0:	e8 6b 22 00 00       	call   3a10 <printf>
+    exit();
+    17a5:	e8 f8 20 00 00       	call   38a2 <exit>
+    printf(1, "link lf1 lf2 failed\n");
+    17aa:	51                   	push   %ecx
+    17ab:	51                   	push   %ecx
+    17ac:	68 43 43 00 00       	push   $0x4343
+    17b1:	6a 01                	push   $0x1
+    17b3:	e8 58 22 00 00       	call   3a10 <printf>
+    exit();
+    17b8:	e8 e5 20 00 00       	call   38a2 <exit>
+    printf(1, "write lf1 failed\n");
+    17bd:	50                   	push   %eax
+    17be:	50                   	push   %eax
+    17bf:	68 31 43 00 00       	push   $0x4331
+    17c4:	6a 01                	push   $0x1
+    17c6:	e8 45 22 00 00       	call   3a10 <printf>
+    exit();
+    17cb:	e8 d2 20 00 00       	call   38a2 <exit>
+
+000017d0 <concreate>:
+{
+    17d0:	55                   	push   %ebp
+    17d1:	89 e5                	mov    %esp,%ebp
+    17d3:	57                   	push   %edi
+    17d4:	56                   	push   %esi
+    17d5:	53                   	push   %ebx
+  for(i = 0; i < 40; i++){
+    17d6:	31 f6                	xor    %esi,%esi
+    17d8:	8d 5d ad             	lea    -0x53(%ebp),%ebx
+    if(pid && (i % 3) == 1){
+    17db:	bf ab aa aa aa       	mov    $0xaaaaaaab,%edi
+{
+    17e0:	83 ec 64             	sub    $0x64,%esp
+  printf(1, "concreate test\n");
+    17e3:	68 c1 43 00 00       	push   $0x43c1
+    17e8:	6a 01                	push   $0x1
+    17ea:	e8 21 22 00 00       	call   3a10 <printf>
+  file[0] = 'C';
+    17ef:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
+  file[2] = '\0';
+    17f3:	c6 45 af 00          	movb   $0x0,-0x51(%ebp)
+    17f7:	83 c4 10             	add    $0x10,%esp
+    17fa:	eb 4c                	jmp    1848 <concreate+0x78>
+    17fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pid && (i % 3) == 1){
+    1800:	89 f0                	mov    %esi,%eax
+    1802:	89 f1                	mov    %esi,%ecx
+    1804:	f7 e7                	mul    %edi
+    1806:	d1 ea                	shr    %edx
+    1808:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    180b:	29 c1                	sub    %eax,%ecx
+    180d:	83 f9 01             	cmp    $0x1,%ecx
+    1810:	0f 84 ba 00 00 00    	je     18d0 <concreate+0x100>
+      fd = open(file, O_CREATE | O_RDWR);
+    1816:	83 ec 08             	sub    $0x8,%esp
+    1819:	68 02 02 00 00       	push   $0x202
+    181e:	53                   	push   %ebx
+    181f:	e8 be 20 00 00       	call   38e2 <open>
+      if(fd < 0){
+    1824:	83 c4 10             	add    $0x10,%esp
+    1827:	85 c0                	test   %eax,%eax
+    1829:	78 67                	js     1892 <concreate+0xc2>
+      close(fd);
+    182b:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 40; i++){
+    182e:	83 c6 01             	add    $0x1,%esi
+      close(fd);
+    1831:	50                   	push   %eax
+    1832:	e8 93 20 00 00       	call   38ca <close>
+    1837:	83 c4 10             	add    $0x10,%esp
+      wait();
+    183a:	e8 6b 20 00 00       	call   38aa <wait>
+  for(i = 0; i < 40; i++){
+    183f:	83 fe 28             	cmp    $0x28,%esi
+    1842:	0f 84 aa 00 00 00    	je     18f2 <concreate+0x122>
+    unlink(file);
+    1848:	83 ec 0c             	sub    $0xc,%esp
+    file[1] = '0' + i;
+    184b:	8d 46 30             	lea    0x30(%esi),%eax
+    unlink(file);
+    184e:	53                   	push   %ebx
+    file[1] = '0' + i;
+    184f:	88 45 ae             	mov    %al,-0x52(%ebp)
+    unlink(file);
+    1852:	e8 9b 20 00 00       	call   38f2 <unlink>
+    pid = fork();
+    1857:	e8 3e 20 00 00       	call   389a <fork>
+    if(pid && (i % 3) == 1){
+    185c:	83 c4 10             	add    $0x10,%esp
+    185f:	85 c0                	test   %eax,%eax
+    1861:	75 9d                	jne    1800 <concreate+0x30>
+    } else if(pid == 0 && (i % 5) == 1){
+    1863:	89 f0                	mov    %esi,%eax
+    1865:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+    186a:	f7 e2                	mul    %edx
+    186c:	c1 ea 02             	shr    $0x2,%edx
+    186f:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    1872:	29 c6                	sub    %eax,%esi
+    1874:	83 fe 01             	cmp    $0x1,%esi
+    1877:	74 37                	je     18b0 <concreate+0xe0>
+      fd = open(file, O_CREATE | O_RDWR);
+    1879:	83 ec 08             	sub    $0x8,%esp
+    187c:	68 02 02 00 00       	push   $0x202
+    1881:	53                   	push   %ebx
+    1882:	e8 5b 20 00 00       	call   38e2 <open>
+      if(fd < 0){
+    1887:	83 c4 10             	add    $0x10,%esp
+    188a:	85 c0                	test   %eax,%eax
+    188c:	0f 89 28 02 00 00    	jns    1aba <concreate+0x2ea>
+        printf(1, "concreate create %s failed\n", file);
+    1892:	83 ec 04             	sub    $0x4,%esp
+    1895:	53                   	push   %ebx
+    1896:	68 d4 43 00 00       	push   $0x43d4
+    189b:	6a 01                	push   $0x1
+    189d:	e8 6e 21 00 00       	call   3a10 <printf>
+        exit();
+    18a2:	e8 fb 1f 00 00       	call   38a2 <exit>
+    18a7:	89 f6                	mov    %esi,%esi
+    18a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      link("C0", file);
+    18b0:	83 ec 08             	sub    $0x8,%esp
+    18b3:	53                   	push   %ebx
+    18b4:	68 d1 43 00 00       	push   $0x43d1
+    18b9:	e8 44 20 00 00       	call   3902 <link>
+    18be:	83 c4 10             	add    $0x10,%esp
+      exit();
+    18c1:	e8 dc 1f 00 00       	call   38a2 <exit>
+    18c6:	8d 76 00             	lea    0x0(%esi),%esi
+    18c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      link("C0", file);
+    18d0:	83 ec 08             	sub    $0x8,%esp
+  for(i = 0; i < 40; i++){
+    18d3:	83 c6 01             	add    $0x1,%esi
+      link("C0", file);
+    18d6:	53                   	push   %ebx
+    18d7:	68 d1 43 00 00       	push   $0x43d1
+    18dc:	e8 21 20 00 00       	call   3902 <link>
+    18e1:	83 c4 10             	add    $0x10,%esp
+      wait();
+    18e4:	e8 c1 1f 00 00       	call   38aa <wait>
+  for(i = 0; i < 40; i++){
+    18e9:	83 fe 28             	cmp    $0x28,%esi
+    18ec:	0f 85 56 ff ff ff    	jne    1848 <concreate+0x78>
+  memset(fa, 0, sizeof(fa));
+    18f2:	8d 45 c0             	lea    -0x40(%ebp),%eax
+    18f5:	83 ec 04             	sub    $0x4,%esp
+    18f8:	6a 28                	push   $0x28
+    18fa:	6a 00                	push   $0x0
+    18fc:	50                   	push   %eax
+    18fd:	e8 fe 1d 00 00       	call   3700 <memset>
+  fd = open(".", 0);
+    1902:	5f                   	pop    %edi
+    1903:	58                   	pop    %eax
+    1904:	6a 00                	push   $0x0
+    1906:	68 de 45 00 00       	push   $0x45de
+    190b:	8d 7d b0             	lea    -0x50(%ebp),%edi
+    190e:	e8 cf 1f 00 00       	call   38e2 <open>
+  while(read(fd, &de, sizeof(de)) > 0){
+    1913:	83 c4 10             	add    $0x10,%esp
+  fd = open(".", 0);
+    1916:	89 c6                	mov    %eax,%esi
+  n = 0;
+    1918:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
+    191f:	90                   	nop
+  while(read(fd, &de, sizeof(de)) > 0){
+    1920:	83 ec 04             	sub    $0x4,%esp
+    1923:	6a 10                	push   $0x10
+    1925:	57                   	push   %edi
+    1926:	56                   	push   %esi
+    1927:	e8 8e 1f 00 00       	call   38ba <read>
+    192c:	83 c4 10             	add    $0x10,%esp
+    192f:	85 c0                	test   %eax,%eax
+    1931:	7e 3d                	jle    1970 <concreate+0x1a0>
+    if(de.inum == 0)
+    1933:	66 83 7d b0 00       	cmpw   $0x0,-0x50(%ebp)
+    1938:	74 e6                	je     1920 <concreate+0x150>
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    193a:	80 7d b2 43          	cmpb   $0x43,-0x4e(%ebp)
+    193e:	75 e0                	jne    1920 <concreate+0x150>
+    1940:	80 7d b4 00          	cmpb   $0x0,-0x4c(%ebp)
+    1944:	75 da                	jne    1920 <concreate+0x150>
+      i = de.name[1] - '0';
+    1946:	0f be 45 b3          	movsbl -0x4d(%ebp),%eax
+    194a:	83 e8 30             	sub    $0x30,%eax
+      if(i < 0 || i >= sizeof(fa)){
+    194d:	83 f8 27             	cmp    $0x27,%eax
+    1950:	0f 87 4e 01 00 00    	ja     1aa4 <concreate+0x2d4>
+      if(fa[i]){
+    1956:	80 7c 05 c0 00       	cmpb   $0x0,-0x40(%ebp,%eax,1)
+    195b:	0f 85 2d 01 00 00    	jne    1a8e <concreate+0x2be>
+      fa[i] = 1;
+    1961:	c6 44 05 c0 01       	movb   $0x1,-0x40(%ebp,%eax,1)
+      n++;
+    1966:	83 45 a4 01          	addl   $0x1,-0x5c(%ebp)
+    196a:	eb b4                	jmp    1920 <concreate+0x150>
+    196c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  close(fd);
+    1970:	83 ec 0c             	sub    $0xc,%esp
+    1973:	56                   	push   %esi
+    1974:	e8 51 1f 00 00       	call   38ca <close>
+  if(n != 40){
+    1979:	83 c4 10             	add    $0x10,%esp
+    197c:	83 7d a4 28          	cmpl   $0x28,-0x5c(%ebp)
+    1980:	0f 85 f5 00 00 00    	jne    1a7b <concreate+0x2ab>
+  for(i = 0; i < 40; i++){
+    1986:	31 f6                	xor    %esi,%esi
+    1988:	eb 48                	jmp    19d2 <concreate+0x202>
+    198a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+       ((i % 3) == 1 && pid != 0)){
+    1990:	85 ff                	test   %edi,%edi
+    1992:	74 05                	je     1999 <concreate+0x1c9>
+    1994:	83 fa 01             	cmp    $0x1,%edx
+    1997:	74 64                	je     19fd <concreate+0x22d>
+      unlink(file);
+    1999:	83 ec 0c             	sub    $0xc,%esp
+    199c:	53                   	push   %ebx
+    199d:	e8 50 1f 00 00       	call   38f2 <unlink>
+      unlink(file);
+    19a2:	89 1c 24             	mov    %ebx,(%esp)
+    19a5:	e8 48 1f 00 00       	call   38f2 <unlink>
+      unlink(file);
+    19aa:	89 1c 24             	mov    %ebx,(%esp)
+    19ad:	e8 40 1f 00 00       	call   38f2 <unlink>
+      unlink(file);
+    19b2:	89 1c 24             	mov    %ebx,(%esp)
+    19b5:	e8 38 1f 00 00       	call   38f2 <unlink>
+    19ba:	83 c4 10             	add    $0x10,%esp
+    if(pid == 0)
+    19bd:	85 ff                	test   %edi,%edi
+    19bf:	0f 84 fc fe ff ff    	je     18c1 <concreate+0xf1>
+  for(i = 0; i < 40; i++){
+    19c5:	83 c6 01             	add    $0x1,%esi
+      wait();
+    19c8:	e8 dd 1e 00 00       	call   38aa <wait>
+  for(i = 0; i < 40; i++){
+    19cd:	83 fe 28             	cmp    $0x28,%esi
+    19d0:	74 7e                	je     1a50 <concreate+0x280>
+    file[1] = '0' + i;
+    19d2:	8d 46 30             	lea    0x30(%esi),%eax
+    19d5:	88 45 ae             	mov    %al,-0x52(%ebp)
+    pid = fork();
+    19d8:	e8 bd 1e 00 00       	call   389a <fork>
+    if(pid < 0){
+    19dd:	85 c0                	test   %eax,%eax
+    pid = fork();
+    19df:	89 c7                	mov    %eax,%edi
+    if(pid < 0){
+    19e1:	0f 88 80 00 00 00    	js     1a67 <concreate+0x297>
+    if(((i % 3) == 0 && pid == 0) ||
+    19e7:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
+    19ec:	f7 e6                	mul    %esi
+    19ee:	d1 ea                	shr    %edx
+    19f0:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    19f3:	89 f2                	mov    %esi,%edx
+    19f5:	29 c2                	sub    %eax,%edx
+    19f7:	89 d0                	mov    %edx,%eax
+    19f9:	09 f8                	or     %edi,%eax
+    19fb:	75 93                	jne    1990 <concreate+0x1c0>
+      close(open(file, 0));
+    19fd:	83 ec 08             	sub    $0x8,%esp
+    1a00:	6a 00                	push   $0x0
+    1a02:	53                   	push   %ebx
+    1a03:	e8 da 1e 00 00       	call   38e2 <open>
+    1a08:	89 04 24             	mov    %eax,(%esp)
+    1a0b:	e8 ba 1e 00 00       	call   38ca <close>
+      close(open(file, 0));
+    1a10:	58                   	pop    %eax
+    1a11:	5a                   	pop    %edx
+    1a12:	6a 00                	push   $0x0
+    1a14:	53                   	push   %ebx
+    1a15:	e8 c8 1e 00 00       	call   38e2 <open>
+    1a1a:	89 04 24             	mov    %eax,(%esp)
+    1a1d:	e8 a8 1e 00 00       	call   38ca <close>
+      close(open(file, 0));
+    1a22:	59                   	pop    %ecx
+    1a23:	58                   	pop    %eax
+    1a24:	6a 00                	push   $0x0
+    1a26:	53                   	push   %ebx
+    1a27:	e8 b6 1e 00 00       	call   38e2 <open>
+    1a2c:	89 04 24             	mov    %eax,(%esp)
+    1a2f:	e8 96 1e 00 00       	call   38ca <close>
+      close(open(file, 0));
+    1a34:	58                   	pop    %eax
+    1a35:	5a                   	pop    %edx
+    1a36:	6a 00                	push   $0x0
+    1a38:	53                   	push   %ebx
+    1a39:	e8 a4 1e 00 00       	call   38e2 <open>
+    1a3e:	89 04 24             	mov    %eax,(%esp)
+    1a41:	e8 84 1e 00 00       	call   38ca <close>
+    1a46:	83 c4 10             	add    $0x10,%esp
+    1a49:	e9 6f ff ff ff       	jmp    19bd <concreate+0x1ed>
+    1a4e:	66 90                	xchg   %ax,%ax
+  printf(1, "concreate ok\n");
+    1a50:	83 ec 08             	sub    $0x8,%esp
+    1a53:	68 26 44 00 00       	push   $0x4426
+    1a58:	6a 01                	push   $0x1
+    1a5a:	e8 b1 1f 00 00       	call   3a10 <printf>
+}
+    1a5f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1a62:	5b                   	pop    %ebx
+    1a63:	5e                   	pop    %esi
+    1a64:	5f                   	pop    %edi
+    1a65:	5d                   	pop    %ebp
+    1a66:	c3                   	ret    
+      printf(1, "fork failed\n");
+    1a67:	83 ec 08             	sub    $0x8,%esp
+    1a6a:	68 a9 4c 00 00       	push   $0x4ca9
+    1a6f:	6a 01                	push   $0x1
+    1a71:	e8 9a 1f 00 00       	call   3a10 <printf>
+      exit();
+    1a76:	e8 27 1e 00 00       	call   38a2 <exit>
+    printf(1, "concreate not enough files in directory listing\n");
+    1a7b:	51                   	push   %ecx
+    1a7c:	51                   	push   %ecx
+    1a7d:	68 70 4f 00 00       	push   $0x4f70
+    1a82:	6a 01                	push   $0x1
+    1a84:	e8 87 1f 00 00       	call   3a10 <printf>
+    exit();
+    1a89:	e8 14 1e 00 00       	call   38a2 <exit>
+        printf(1, "concreate duplicate file %s\n", de.name);
+    1a8e:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1a91:	53                   	push   %ebx
+    1a92:	50                   	push   %eax
+    1a93:	68 09 44 00 00       	push   $0x4409
+    1a98:	6a 01                	push   $0x1
+    1a9a:	e8 71 1f 00 00       	call   3a10 <printf>
+        exit();
+    1a9f:	e8 fe 1d 00 00       	call   38a2 <exit>
+        printf(1, "concreate weird file %s\n", de.name);
+    1aa4:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1aa7:	56                   	push   %esi
+    1aa8:	50                   	push   %eax
+    1aa9:	68 f0 43 00 00       	push   $0x43f0
+    1aae:	6a 01                	push   $0x1
+    1ab0:	e8 5b 1f 00 00       	call   3a10 <printf>
+        exit();
+    1ab5:	e8 e8 1d 00 00       	call   38a2 <exit>
+      close(fd);
+    1aba:	83 ec 0c             	sub    $0xc,%esp
+    1abd:	50                   	push   %eax
+    1abe:	e8 07 1e 00 00       	call   38ca <close>
+    1ac3:	83 c4 10             	add    $0x10,%esp
+    1ac6:	e9 f6 fd ff ff       	jmp    18c1 <concreate+0xf1>
+    1acb:	90                   	nop
+    1acc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001ad0 <linkunlink>:
+{
+    1ad0:	55                   	push   %ebp
+    1ad1:	89 e5                	mov    %esp,%ebp
+    1ad3:	57                   	push   %edi
+    1ad4:	56                   	push   %esi
+    1ad5:	53                   	push   %ebx
+    1ad6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "linkunlink test\n");
+    1ad9:	68 34 44 00 00       	push   $0x4434
+    1ade:	6a 01                	push   $0x1
+    1ae0:	e8 2b 1f 00 00       	call   3a10 <printf>
+  unlink("x");
+    1ae5:	c7 04 24 c1 46 00 00 	movl   $0x46c1,(%esp)
+    1aec:	e8 01 1e 00 00       	call   38f2 <unlink>
+  pid = fork();
+    1af1:	e8 a4 1d 00 00       	call   389a <fork>
+  if(pid < 0){
+    1af6:	83 c4 10             	add    $0x10,%esp
+    1af9:	85 c0                	test   %eax,%eax
+  pid = fork();
+    1afb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(pid < 0){
+    1afe:	0f 88 b6 00 00 00    	js     1bba <linkunlink+0xea>
+  unsigned int x = (pid ? 1 : 97);
+    1b04:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
+    1b08:	bb 64 00 00 00       	mov    $0x64,%ebx
+    if((x % 3) == 0){
+    1b0d:	be ab aa aa aa       	mov    $0xaaaaaaab,%esi
+  unsigned int x = (pid ? 1 : 97);
+    1b12:	19 ff                	sbb    %edi,%edi
+    1b14:	83 e7 60             	and    $0x60,%edi
+    1b17:	83 c7 01             	add    $0x1,%edi
+    1b1a:	eb 1e                	jmp    1b3a <linkunlink+0x6a>
+    1b1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if((x % 3) == 1){
+    1b20:	83 fa 01             	cmp    $0x1,%edx
+    1b23:	74 7b                	je     1ba0 <linkunlink+0xd0>
+      unlink("x");
+    1b25:	83 ec 0c             	sub    $0xc,%esp
+    1b28:	68 c1 46 00 00       	push   $0x46c1
+    1b2d:	e8 c0 1d 00 00       	call   38f2 <unlink>
+    1b32:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1b35:	83 eb 01             	sub    $0x1,%ebx
+    1b38:	74 3d                	je     1b77 <linkunlink+0xa7>
+    x = x * 1103515245 + 12345;
+    1b3a:	69 cf 6d 4e c6 41    	imul   $0x41c64e6d,%edi,%ecx
+    1b40:	8d b9 39 30 00 00    	lea    0x3039(%ecx),%edi
+    if((x % 3) == 0){
+    1b46:	89 f8                	mov    %edi,%eax
+    1b48:	f7 e6                	mul    %esi
+    1b4a:	d1 ea                	shr    %edx
+    1b4c:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    1b4f:	89 fa                	mov    %edi,%edx
+    1b51:	29 c2                	sub    %eax,%edx
+    1b53:	75 cb                	jne    1b20 <linkunlink+0x50>
+      close(open("x", O_RDWR | O_CREATE));
+    1b55:	83 ec 08             	sub    $0x8,%esp
+    1b58:	68 02 02 00 00       	push   $0x202
+    1b5d:	68 c1 46 00 00       	push   $0x46c1
+    1b62:	e8 7b 1d 00 00       	call   38e2 <open>
+    1b67:	89 04 24             	mov    %eax,(%esp)
+    1b6a:	e8 5b 1d 00 00       	call   38ca <close>
+    1b6f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1b72:	83 eb 01             	sub    $0x1,%ebx
+    1b75:	75 c3                	jne    1b3a <linkunlink+0x6a>
+  if(pid)
+    1b77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    1b7a:	85 c0                	test   %eax,%eax
+    1b7c:	74 4f                	je     1bcd <linkunlink+0xfd>
+    wait();
+    1b7e:	e8 27 1d 00 00       	call   38aa <wait>
+  printf(1, "linkunlink ok\n");
+    1b83:	83 ec 08             	sub    $0x8,%esp
+    1b86:	68 49 44 00 00       	push   $0x4449
+    1b8b:	6a 01                	push   $0x1
+    1b8d:	e8 7e 1e 00 00       	call   3a10 <printf>
+}
+    1b92:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1b95:	5b                   	pop    %ebx
+    1b96:	5e                   	pop    %esi
+    1b97:	5f                   	pop    %edi
+    1b98:	5d                   	pop    %ebp
+    1b99:	c3                   	ret    
+    1b9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      link("cat", "x");
+    1ba0:	83 ec 08             	sub    $0x8,%esp
+    1ba3:	68 c1 46 00 00       	push   $0x46c1
+    1ba8:	68 45 44 00 00       	push   $0x4445
+    1bad:	e8 50 1d 00 00       	call   3902 <link>
+    1bb2:	83 c4 10             	add    $0x10,%esp
+    1bb5:	e9 7b ff ff ff       	jmp    1b35 <linkunlink+0x65>
+    printf(1, "fork failed\n");
+    1bba:	52                   	push   %edx
+    1bbb:	52                   	push   %edx
+    1bbc:	68 a9 4c 00 00       	push   $0x4ca9
+    1bc1:	6a 01                	push   $0x1
+    1bc3:	e8 48 1e 00 00       	call   3a10 <printf>
+    exit();
+    1bc8:	e8 d5 1c 00 00       	call   38a2 <exit>
+    exit();
+    1bcd:	e8 d0 1c 00 00       	call   38a2 <exit>
+    1bd2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1bd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00001be0 <bigdir>:
+{
+    1be0:	55                   	push   %ebp
+    1be1:	89 e5                	mov    %esp,%ebp
+    1be3:	57                   	push   %edi
+    1be4:	56                   	push   %esi
+    1be5:	53                   	push   %ebx
+    1be6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "bigdir test\n");
+    1be9:	68 58 44 00 00       	push   $0x4458
+    1bee:	6a 01                	push   $0x1
+    1bf0:	e8 1b 1e 00 00       	call   3a10 <printf>
+  unlink("bd");
+    1bf5:	c7 04 24 65 44 00 00 	movl   $0x4465,(%esp)
+    1bfc:	e8 f1 1c 00 00       	call   38f2 <unlink>
+  fd = open("bd", O_CREATE);
+    1c01:	5a                   	pop    %edx
+    1c02:	59                   	pop    %ecx
+    1c03:	68 00 02 00 00       	push   $0x200
+    1c08:	68 65 44 00 00       	push   $0x4465
+    1c0d:	e8 d0 1c 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1c12:	83 c4 10             	add    $0x10,%esp
+    1c15:	85 c0                	test   %eax,%eax
+    1c17:	0f 88 de 00 00 00    	js     1cfb <bigdir+0x11b>
+  close(fd);
+    1c1d:	83 ec 0c             	sub    $0xc,%esp
+    1c20:	8d 7d de             	lea    -0x22(%ebp),%edi
+  for(i = 0; i < 500; i++){
+    1c23:	31 f6                	xor    %esi,%esi
+  close(fd);
+    1c25:	50                   	push   %eax
+    1c26:	e8 9f 1c 00 00       	call   38ca <close>
+    1c2b:	83 c4 10             	add    $0x10,%esp
+    1c2e:	66 90                	xchg   %ax,%ax
+    name[1] = '0' + (i / 64);
+    1c30:	89 f0                	mov    %esi,%eax
+    if(link("bd", name) != 0){
+    1c32:	83 ec 08             	sub    $0x8,%esp
+    name[0] = 'x';
+    1c35:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1c39:	c1 f8 06             	sar    $0x6,%eax
+    if(link("bd", name) != 0){
+    1c3c:	57                   	push   %edi
+    1c3d:	68 65 44 00 00       	push   $0x4465
+    name[1] = '0' + (i / 64);
+    1c42:	83 c0 30             	add    $0x30,%eax
+    name[3] = '\0';
+    1c45:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[1] = '0' + (i / 64);
+    1c49:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1c4c:	89 f0                	mov    %esi,%eax
+    1c4e:	83 e0 3f             	and    $0x3f,%eax
+    1c51:	83 c0 30             	add    $0x30,%eax
+    1c54:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(link("bd", name) != 0){
+    1c57:	e8 a6 1c 00 00       	call   3902 <link>
+    1c5c:	83 c4 10             	add    $0x10,%esp
+    1c5f:	85 c0                	test   %eax,%eax
+    1c61:	89 c3                	mov    %eax,%ebx
+    1c63:	75 6e                	jne    1cd3 <bigdir+0xf3>
+  for(i = 0; i < 500; i++){
+    1c65:	83 c6 01             	add    $0x1,%esi
+    1c68:	81 fe f4 01 00 00    	cmp    $0x1f4,%esi
+    1c6e:	75 c0                	jne    1c30 <bigdir+0x50>
+  unlink("bd");
+    1c70:	83 ec 0c             	sub    $0xc,%esp
+    1c73:	68 65 44 00 00       	push   $0x4465
+    1c78:	e8 75 1c 00 00       	call   38f2 <unlink>
+    1c7d:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + (i / 64);
+    1c80:	89 d8                	mov    %ebx,%eax
+    if(unlink(name) != 0){
+    1c82:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'x';
+    1c85:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1c89:	c1 f8 06             	sar    $0x6,%eax
+    if(unlink(name) != 0){
+    1c8c:	57                   	push   %edi
+    name[3] = '\0';
+    1c8d:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[1] = '0' + (i / 64);
+    1c91:	83 c0 30             	add    $0x30,%eax
+    1c94:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1c97:	89 d8                	mov    %ebx,%eax
+    1c99:	83 e0 3f             	and    $0x3f,%eax
+    1c9c:	83 c0 30             	add    $0x30,%eax
+    1c9f:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(unlink(name) != 0){
+    1ca2:	e8 4b 1c 00 00       	call   38f2 <unlink>
+    1ca7:	83 c4 10             	add    $0x10,%esp
+    1caa:	85 c0                	test   %eax,%eax
+    1cac:	75 39                	jne    1ce7 <bigdir+0x107>
+  for(i = 0; i < 500; i++){
+    1cae:	83 c3 01             	add    $0x1,%ebx
+    1cb1:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
+    1cb7:	75 c7                	jne    1c80 <bigdir+0xa0>
+  printf(1, "bigdir ok\n");
+    1cb9:	83 ec 08             	sub    $0x8,%esp
+    1cbc:	68 a7 44 00 00       	push   $0x44a7
+    1cc1:	6a 01                	push   $0x1
+    1cc3:	e8 48 1d 00 00       	call   3a10 <printf>
+}
+    1cc8:	83 c4 10             	add    $0x10,%esp
+    1ccb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1cce:	5b                   	pop    %ebx
+    1ccf:	5e                   	pop    %esi
+    1cd0:	5f                   	pop    %edi
+    1cd1:	5d                   	pop    %ebp
+    1cd2:	c3                   	ret    
+      printf(1, "bigdir link failed\n");
+    1cd3:	83 ec 08             	sub    $0x8,%esp
+    1cd6:	68 7e 44 00 00       	push   $0x447e
+    1cdb:	6a 01                	push   $0x1
+    1cdd:	e8 2e 1d 00 00       	call   3a10 <printf>
+      exit();
+    1ce2:	e8 bb 1b 00 00       	call   38a2 <exit>
+      printf(1, "bigdir unlink failed");
+    1ce7:	83 ec 08             	sub    $0x8,%esp
+    1cea:	68 92 44 00 00       	push   $0x4492
+    1cef:	6a 01                	push   $0x1
+    1cf1:	e8 1a 1d 00 00       	call   3a10 <printf>
+      exit();
+    1cf6:	e8 a7 1b 00 00       	call   38a2 <exit>
+    printf(1, "bigdir create failed\n");
+    1cfb:	50                   	push   %eax
+    1cfc:	50                   	push   %eax
+    1cfd:	68 68 44 00 00       	push   $0x4468
+    1d02:	6a 01                	push   $0x1
+    1d04:	e8 07 1d 00 00       	call   3a10 <printf>
+    exit();
+    1d09:	e8 94 1b 00 00       	call   38a2 <exit>
+    1d0e:	66 90                	xchg   %ax,%ax
+
+00001d10 <subdir>:
+{
+    1d10:	55                   	push   %ebp
+    1d11:	89 e5                	mov    %esp,%ebp
+    1d13:	53                   	push   %ebx
+    1d14:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "subdir test\n");
+    1d17:	68 b2 44 00 00       	push   $0x44b2
+    1d1c:	6a 01                	push   $0x1
+    1d1e:	e8 ed 1c 00 00       	call   3a10 <printf>
+  unlink("ff");
+    1d23:	c7 04 24 3b 45 00 00 	movl   $0x453b,(%esp)
+    1d2a:	e8 c3 1b 00 00       	call   38f2 <unlink>
+  if(mkdir("dd") != 0){
+    1d2f:	c7 04 24 d8 45 00 00 	movl   $0x45d8,(%esp)
+    1d36:	e8 cf 1b 00 00       	call   390a <mkdir>
+    1d3b:	83 c4 10             	add    $0x10,%esp
+    1d3e:	85 c0                	test   %eax,%eax
+    1d40:	0f 85 b3 05 00 00    	jne    22f9 <subdir+0x5e9>
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1d46:	83 ec 08             	sub    $0x8,%esp
+    1d49:	68 02 02 00 00       	push   $0x202
+    1d4e:	68 11 45 00 00       	push   $0x4511
+    1d53:	e8 8a 1b 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1d58:	83 c4 10             	add    $0x10,%esp
+    1d5b:	85 c0                	test   %eax,%eax
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1d5d:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1d5f:	0f 88 81 05 00 00    	js     22e6 <subdir+0x5d6>
+  write(fd, "ff", 2);
+    1d65:	83 ec 04             	sub    $0x4,%esp
+    1d68:	6a 02                	push   $0x2
+    1d6a:	68 3b 45 00 00       	push   $0x453b
+    1d6f:	50                   	push   %eax
+    1d70:	e8 4d 1b 00 00       	call   38c2 <write>
+  close(fd);
+    1d75:	89 1c 24             	mov    %ebx,(%esp)
+    1d78:	e8 4d 1b 00 00       	call   38ca <close>
+  if(unlink("dd") >= 0){
+    1d7d:	c7 04 24 d8 45 00 00 	movl   $0x45d8,(%esp)
+    1d84:	e8 69 1b 00 00       	call   38f2 <unlink>
+    1d89:	83 c4 10             	add    $0x10,%esp
+    1d8c:	85 c0                	test   %eax,%eax
+    1d8e:	0f 89 3f 05 00 00    	jns    22d3 <subdir+0x5c3>
+  if(mkdir("/dd/dd") != 0){
+    1d94:	83 ec 0c             	sub    $0xc,%esp
+    1d97:	68 ec 44 00 00       	push   $0x44ec
+    1d9c:	e8 69 1b 00 00       	call   390a <mkdir>
+    1da1:	83 c4 10             	add    $0x10,%esp
+    1da4:	85 c0                	test   %eax,%eax
+    1da6:	0f 85 14 05 00 00    	jne    22c0 <subdir+0x5b0>
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1dac:	83 ec 08             	sub    $0x8,%esp
+    1daf:	68 02 02 00 00       	push   $0x202
+    1db4:	68 0e 45 00 00       	push   $0x450e
+    1db9:	e8 24 1b 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1dbe:	83 c4 10             	add    $0x10,%esp
+    1dc1:	85 c0                	test   %eax,%eax
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1dc3:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1dc5:	0f 88 24 04 00 00    	js     21ef <subdir+0x4df>
+  write(fd, "FF", 2);
+    1dcb:	83 ec 04             	sub    $0x4,%esp
+    1dce:	6a 02                	push   $0x2
+    1dd0:	68 2f 45 00 00       	push   $0x452f
+    1dd5:	50                   	push   %eax
+    1dd6:	e8 e7 1a 00 00       	call   38c2 <write>
+  close(fd);
+    1ddb:	89 1c 24             	mov    %ebx,(%esp)
+    1dde:	e8 e7 1a 00 00       	call   38ca <close>
+  fd = open("dd/dd/../ff", 0);
+    1de3:	58                   	pop    %eax
+    1de4:	5a                   	pop    %edx
+    1de5:	6a 00                	push   $0x0
+    1de7:	68 32 45 00 00       	push   $0x4532
+    1dec:	e8 f1 1a 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1df1:	83 c4 10             	add    $0x10,%esp
+    1df4:	85 c0                	test   %eax,%eax
+  fd = open("dd/dd/../ff", 0);
+    1df6:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1df8:	0f 88 de 03 00 00    	js     21dc <subdir+0x4cc>
+  cc = read(fd, buf, sizeof(buf));
+    1dfe:	83 ec 04             	sub    $0x4,%esp
+    1e01:	68 00 20 00 00       	push   $0x2000
+    1e06:	68 00 86 00 00       	push   $0x8600
+    1e0b:	50                   	push   %eax
+    1e0c:	e8 a9 1a 00 00       	call   38ba <read>
+  if(cc != 2 || buf[0] != 'f'){
+    1e11:	83 c4 10             	add    $0x10,%esp
+    1e14:	83 f8 02             	cmp    $0x2,%eax
+    1e17:	0f 85 3a 03 00 00    	jne    2157 <subdir+0x447>
+    1e1d:	80 3d 00 86 00 00 66 	cmpb   $0x66,0x8600
+    1e24:	0f 85 2d 03 00 00    	jne    2157 <subdir+0x447>
+  close(fd);
+    1e2a:	83 ec 0c             	sub    $0xc,%esp
+    1e2d:	53                   	push   %ebx
+    1e2e:	e8 97 1a 00 00       	call   38ca <close>
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    1e33:	5b                   	pop    %ebx
+    1e34:	58                   	pop    %eax
+    1e35:	68 72 45 00 00       	push   $0x4572
+    1e3a:	68 0e 45 00 00       	push   $0x450e
+    1e3f:	e8 be 1a 00 00       	call   3902 <link>
+    1e44:	83 c4 10             	add    $0x10,%esp
+    1e47:	85 c0                	test   %eax,%eax
+    1e49:	0f 85 c6 03 00 00    	jne    2215 <subdir+0x505>
+  if(unlink("dd/dd/ff") != 0){
+    1e4f:	83 ec 0c             	sub    $0xc,%esp
+    1e52:	68 0e 45 00 00       	push   $0x450e
+    1e57:	e8 96 1a 00 00       	call   38f2 <unlink>
+    1e5c:	83 c4 10             	add    $0x10,%esp
+    1e5f:	85 c0                	test   %eax,%eax
+    1e61:	0f 85 16 03 00 00    	jne    217d <subdir+0x46d>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1e67:	83 ec 08             	sub    $0x8,%esp
+    1e6a:	6a 00                	push   $0x0
+    1e6c:	68 0e 45 00 00       	push   $0x450e
+    1e71:	e8 6c 1a 00 00       	call   38e2 <open>
+    1e76:	83 c4 10             	add    $0x10,%esp
+    1e79:	85 c0                	test   %eax,%eax
+    1e7b:	0f 89 2c 04 00 00    	jns    22ad <subdir+0x59d>
+  if(chdir("dd") != 0){
+    1e81:	83 ec 0c             	sub    $0xc,%esp
+    1e84:	68 d8 45 00 00       	push   $0x45d8
+    1e89:	e8 84 1a 00 00       	call   3912 <chdir>
+    1e8e:	83 c4 10             	add    $0x10,%esp
+    1e91:	85 c0                	test   %eax,%eax
+    1e93:	0f 85 01 04 00 00    	jne    229a <subdir+0x58a>
+  if(chdir("dd/../../dd") != 0){
+    1e99:	83 ec 0c             	sub    $0xc,%esp
+    1e9c:	68 a6 45 00 00       	push   $0x45a6
+    1ea1:	e8 6c 1a 00 00       	call   3912 <chdir>
+    1ea6:	83 c4 10             	add    $0x10,%esp
+    1ea9:	85 c0                	test   %eax,%eax
+    1eab:	0f 85 b9 02 00 00    	jne    216a <subdir+0x45a>
+  if(chdir("dd/../../../dd") != 0){
+    1eb1:	83 ec 0c             	sub    $0xc,%esp
+    1eb4:	68 cc 45 00 00       	push   $0x45cc
+    1eb9:	e8 54 1a 00 00       	call   3912 <chdir>
+    1ebe:	83 c4 10             	add    $0x10,%esp
+    1ec1:	85 c0                	test   %eax,%eax
+    1ec3:	0f 85 a1 02 00 00    	jne    216a <subdir+0x45a>
+  if(chdir("./..") != 0){
+    1ec9:	83 ec 0c             	sub    $0xc,%esp
+    1ecc:	68 db 45 00 00       	push   $0x45db
+    1ed1:	e8 3c 1a 00 00       	call   3912 <chdir>
+    1ed6:	83 c4 10             	add    $0x10,%esp
+    1ed9:	85 c0                	test   %eax,%eax
+    1edb:	0f 85 21 03 00 00    	jne    2202 <subdir+0x4f2>
+  fd = open("dd/dd/ffff", 0);
+    1ee1:	83 ec 08             	sub    $0x8,%esp
+    1ee4:	6a 00                	push   $0x0
+    1ee6:	68 72 45 00 00       	push   $0x4572
+    1eeb:	e8 f2 19 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1ef0:	83 c4 10             	add    $0x10,%esp
+    1ef3:	85 c0                	test   %eax,%eax
+  fd = open("dd/dd/ffff", 0);
+    1ef5:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1ef7:	0f 88 e0 04 00 00    	js     23dd <subdir+0x6cd>
+  if(read(fd, buf, sizeof(buf)) != 2){
+    1efd:	83 ec 04             	sub    $0x4,%esp
+    1f00:	68 00 20 00 00       	push   $0x2000
+    1f05:	68 00 86 00 00       	push   $0x8600
+    1f0a:	50                   	push   %eax
+    1f0b:	e8 aa 19 00 00       	call   38ba <read>
+    1f10:	83 c4 10             	add    $0x10,%esp
+    1f13:	83 f8 02             	cmp    $0x2,%eax
+    1f16:	0f 85 ae 04 00 00    	jne    23ca <subdir+0x6ba>
+  close(fd);
+    1f1c:	83 ec 0c             	sub    $0xc,%esp
+    1f1f:	53                   	push   %ebx
+    1f20:	e8 a5 19 00 00       	call   38ca <close>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1f25:	59                   	pop    %ecx
+    1f26:	5b                   	pop    %ebx
+    1f27:	6a 00                	push   $0x0
+    1f29:	68 0e 45 00 00       	push   $0x450e
+    1f2e:	e8 af 19 00 00       	call   38e2 <open>
+    1f33:	83 c4 10             	add    $0x10,%esp
+    1f36:	85 c0                	test   %eax,%eax
+    1f38:	0f 89 65 02 00 00    	jns    21a3 <subdir+0x493>
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    1f3e:	83 ec 08             	sub    $0x8,%esp
+    1f41:	68 02 02 00 00       	push   $0x202
+    1f46:	68 26 46 00 00       	push   $0x4626
+    1f4b:	e8 92 19 00 00       	call   38e2 <open>
+    1f50:	83 c4 10             	add    $0x10,%esp
+    1f53:	85 c0                	test   %eax,%eax
+    1f55:	0f 89 35 02 00 00    	jns    2190 <subdir+0x480>
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    1f5b:	83 ec 08             	sub    $0x8,%esp
+    1f5e:	68 02 02 00 00       	push   $0x202
+    1f63:	68 4b 46 00 00       	push   $0x464b
+    1f68:	e8 75 19 00 00       	call   38e2 <open>
+    1f6d:	83 c4 10             	add    $0x10,%esp
+    1f70:	85 c0                	test   %eax,%eax
+    1f72:	0f 89 0f 03 00 00    	jns    2287 <subdir+0x577>
+  if(open("dd", O_CREATE) >= 0){
+    1f78:	83 ec 08             	sub    $0x8,%esp
+    1f7b:	68 00 02 00 00       	push   $0x200
+    1f80:	68 d8 45 00 00       	push   $0x45d8
+    1f85:	e8 58 19 00 00       	call   38e2 <open>
+    1f8a:	83 c4 10             	add    $0x10,%esp
+    1f8d:	85 c0                	test   %eax,%eax
+    1f8f:	0f 89 df 02 00 00    	jns    2274 <subdir+0x564>
+  if(open("dd", O_RDWR) >= 0){
+    1f95:	83 ec 08             	sub    $0x8,%esp
+    1f98:	6a 02                	push   $0x2
+    1f9a:	68 d8 45 00 00       	push   $0x45d8
+    1f9f:	e8 3e 19 00 00       	call   38e2 <open>
+    1fa4:	83 c4 10             	add    $0x10,%esp
+    1fa7:	85 c0                	test   %eax,%eax
+    1fa9:	0f 89 b2 02 00 00    	jns    2261 <subdir+0x551>
+  if(open("dd", O_WRONLY) >= 0){
+    1faf:	83 ec 08             	sub    $0x8,%esp
+    1fb2:	6a 01                	push   $0x1
+    1fb4:	68 d8 45 00 00       	push   $0x45d8
+    1fb9:	e8 24 19 00 00       	call   38e2 <open>
+    1fbe:	83 c4 10             	add    $0x10,%esp
+    1fc1:	85 c0                	test   %eax,%eax
+    1fc3:	0f 89 85 02 00 00    	jns    224e <subdir+0x53e>
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    1fc9:	83 ec 08             	sub    $0x8,%esp
+    1fcc:	68 ba 46 00 00       	push   $0x46ba
+    1fd1:	68 26 46 00 00       	push   $0x4626
+    1fd6:	e8 27 19 00 00       	call   3902 <link>
+    1fdb:	83 c4 10             	add    $0x10,%esp
+    1fde:	85 c0                	test   %eax,%eax
+    1fe0:	0f 84 55 02 00 00    	je     223b <subdir+0x52b>
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    1fe6:	83 ec 08             	sub    $0x8,%esp
+    1fe9:	68 ba 46 00 00       	push   $0x46ba
+    1fee:	68 4b 46 00 00       	push   $0x464b
+    1ff3:	e8 0a 19 00 00       	call   3902 <link>
+    1ff8:	83 c4 10             	add    $0x10,%esp
+    1ffb:	85 c0                	test   %eax,%eax
+    1ffd:	0f 84 25 02 00 00    	je     2228 <subdir+0x518>
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    2003:	83 ec 08             	sub    $0x8,%esp
+    2006:	68 72 45 00 00       	push   $0x4572
+    200b:	68 11 45 00 00       	push   $0x4511
+    2010:	e8 ed 18 00 00       	call   3902 <link>
+    2015:	83 c4 10             	add    $0x10,%esp
+    2018:	85 c0                	test   %eax,%eax
+    201a:	0f 84 a9 01 00 00    	je     21c9 <subdir+0x4b9>
+  if(mkdir("dd/ff/ff") == 0){
+    2020:	83 ec 0c             	sub    $0xc,%esp
+    2023:	68 26 46 00 00       	push   $0x4626
+    2028:	e8 dd 18 00 00       	call   390a <mkdir>
+    202d:	83 c4 10             	add    $0x10,%esp
+    2030:	85 c0                	test   %eax,%eax
+    2032:	0f 84 7e 01 00 00    	je     21b6 <subdir+0x4a6>
+  if(mkdir("dd/xx/ff") == 0){
+    2038:	83 ec 0c             	sub    $0xc,%esp
+    203b:	68 4b 46 00 00       	push   $0x464b
+    2040:	e8 c5 18 00 00       	call   390a <mkdir>
+    2045:	83 c4 10             	add    $0x10,%esp
+    2048:	85 c0                	test   %eax,%eax
+    204a:	0f 84 67 03 00 00    	je     23b7 <subdir+0x6a7>
+  if(mkdir("dd/dd/ffff") == 0){
+    2050:	83 ec 0c             	sub    $0xc,%esp
+    2053:	68 72 45 00 00       	push   $0x4572
+    2058:	e8 ad 18 00 00       	call   390a <mkdir>
+    205d:	83 c4 10             	add    $0x10,%esp
+    2060:	85 c0                	test   %eax,%eax
+    2062:	0f 84 3c 03 00 00    	je     23a4 <subdir+0x694>
+  if(unlink("dd/xx/ff") == 0){
+    2068:	83 ec 0c             	sub    $0xc,%esp
+    206b:	68 4b 46 00 00       	push   $0x464b
+    2070:	e8 7d 18 00 00       	call   38f2 <unlink>
+    2075:	83 c4 10             	add    $0x10,%esp
+    2078:	85 c0                	test   %eax,%eax
+    207a:	0f 84 11 03 00 00    	je     2391 <subdir+0x681>
+  if(unlink("dd/ff/ff") == 0){
+    2080:	83 ec 0c             	sub    $0xc,%esp
+    2083:	68 26 46 00 00       	push   $0x4626
+    2088:	e8 65 18 00 00       	call   38f2 <unlink>
+    208d:	83 c4 10             	add    $0x10,%esp
+    2090:	85 c0                	test   %eax,%eax
+    2092:	0f 84 e6 02 00 00    	je     237e <subdir+0x66e>
+  if(chdir("dd/ff") == 0){
+    2098:	83 ec 0c             	sub    $0xc,%esp
+    209b:	68 11 45 00 00       	push   $0x4511
+    20a0:	e8 6d 18 00 00       	call   3912 <chdir>
+    20a5:	83 c4 10             	add    $0x10,%esp
+    20a8:	85 c0                	test   %eax,%eax
+    20aa:	0f 84 bb 02 00 00    	je     236b <subdir+0x65b>
+  if(chdir("dd/xx") == 0){
+    20b0:	83 ec 0c             	sub    $0xc,%esp
+    20b3:	68 bd 46 00 00       	push   $0x46bd
+    20b8:	e8 55 18 00 00       	call   3912 <chdir>
+    20bd:	83 c4 10             	add    $0x10,%esp
+    20c0:	85 c0                	test   %eax,%eax
+    20c2:	0f 84 90 02 00 00    	je     2358 <subdir+0x648>
+  if(unlink("dd/dd/ffff") != 0){
+    20c8:	83 ec 0c             	sub    $0xc,%esp
+    20cb:	68 72 45 00 00       	push   $0x4572
+    20d0:	e8 1d 18 00 00       	call   38f2 <unlink>
+    20d5:	83 c4 10             	add    $0x10,%esp
+    20d8:	85 c0                	test   %eax,%eax
+    20da:	0f 85 9d 00 00 00    	jne    217d <subdir+0x46d>
+  if(unlink("dd/ff") != 0){
+    20e0:	83 ec 0c             	sub    $0xc,%esp
+    20e3:	68 11 45 00 00       	push   $0x4511
+    20e8:	e8 05 18 00 00       	call   38f2 <unlink>
+    20ed:	83 c4 10             	add    $0x10,%esp
+    20f0:	85 c0                	test   %eax,%eax
+    20f2:	0f 85 4d 02 00 00    	jne    2345 <subdir+0x635>
+  if(unlink("dd") == 0){
+    20f8:	83 ec 0c             	sub    $0xc,%esp
+    20fb:	68 d8 45 00 00       	push   $0x45d8
+    2100:	e8 ed 17 00 00       	call   38f2 <unlink>
+    2105:	83 c4 10             	add    $0x10,%esp
+    2108:	85 c0                	test   %eax,%eax
+    210a:	0f 84 22 02 00 00    	je     2332 <subdir+0x622>
+  if(unlink("dd/dd") < 0){
+    2110:	83 ec 0c             	sub    $0xc,%esp
+    2113:	68 ed 44 00 00       	push   $0x44ed
+    2118:	e8 d5 17 00 00       	call   38f2 <unlink>
+    211d:	83 c4 10             	add    $0x10,%esp
+    2120:	85 c0                	test   %eax,%eax
+    2122:	0f 88 f7 01 00 00    	js     231f <subdir+0x60f>
+  if(unlink("dd") < 0){
+    2128:	83 ec 0c             	sub    $0xc,%esp
+    212b:	68 d8 45 00 00       	push   $0x45d8
+    2130:	e8 bd 17 00 00       	call   38f2 <unlink>
+    2135:	83 c4 10             	add    $0x10,%esp
+    2138:	85 c0                	test   %eax,%eax
+    213a:	0f 88 cc 01 00 00    	js     230c <subdir+0x5fc>
+  printf(1, "subdir ok\n");
+    2140:	83 ec 08             	sub    $0x8,%esp
+    2143:	68 ba 47 00 00       	push   $0x47ba
+    2148:	6a 01                	push   $0x1
+    214a:	e8 c1 18 00 00       	call   3a10 <printf>
+}
+    214f:	83 c4 10             	add    $0x10,%esp
+    2152:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2155:	c9                   	leave  
+    2156:	c3                   	ret    
+    printf(1, "dd/dd/../ff wrong content\n");
+    2157:	50                   	push   %eax
+    2158:	50                   	push   %eax
+    2159:	68 57 45 00 00       	push   $0x4557
+    215e:	6a 01                	push   $0x1
+    2160:	e8 ab 18 00 00       	call   3a10 <printf>
+    exit();
+    2165:	e8 38 17 00 00       	call   38a2 <exit>
+    printf(1, "chdir dd/../../dd failed\n");
+    216a:	50                   	push   %eax
+    216b:	50                   	push   %eax
+    216c:	68 b2 45 00 00       	push   $0x45b2
+    2171:	6a 01                	push   $0x1
+    2173:	e8 98 18 00 00       	call   3a10 <printf>
+    exit();
+    2178:	e8 25 17 00 00       	call   38a2 <exit>
+    printf(1, "unlink dd/dd/ff failed\n");
+    217d:	52                   	push   %edx
+    217e:	52                   	push   %edx
+    217f:	68 7d 45 00 00       	push   $0x457d
+    2184:	6a 01                	push   $0x1
+    2186:	e8 85 18 00 00       	call   3a10 <printf>
+    exit();
+    218b:	e8 12 17 00 00       	call   38a2 <exit>
+    printf(1, "create dd/ff/ff succeeded!\n");
+    2190:	50                   	push   %eax
+    2191:	50                   	push   %eax
+    2192:	68 2f 46 00 00       	push   $0x462f
+    2197:	6a 01                	push   $0x1
+    2199:	e8 72 18 00 00       	call   3a10 <printf>
+    exit();
+    219e:	e8 ff 16 00 00       	call   38a2 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    21a3:	52                   	push   %edx
+    21a4:	52                   	push   %edx
+    21a5:	68 14 50 00 00       	push   $0x5014
+    21aa:	6a 01                	push   $0x1
+    21ac:	e8 5f 18 00 00       	call   3a10 <printf>
+    exit();
+    21b1:	e8 ec 16 00 00       	call   38a2 <exit>
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    21b6:	52                   	push   %edx
+    21b7:	52                   	push   %edx
+    21b8:	68 c3 46 00 00       	push   $0x46c3
+    21bd:	6a 01                	push   $0x1
+    21bf:	e8 4c 18 00 00       	call   3a10 <printf>
+    exit();
+    21c4:	e8 d9 16 00 00       	call   38a2 <exit>
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    21c9:	51                   	push   %ecx
+    21ca:	51                   	push   %ecx
+    21cb:	68 84 50 00 00       	push   $0x5084
+    21d0:	6a 01                	push   $0x1
+    21d2:	e8 39 18 00 00       	call   3a10 <printf>
+    exit();
+    21d7:	e8 c6 16 00 00       	call   38a2 <exit>
+    printf(1, "open dd/dd/../ff failed\n");
+    21dc:	50                   	push   %eax
+    21dd:	50                   	push   %eax
+    21de:	68 3e 45 00 00       	push   $0x453e
+    21e3:	6a 01                	push   $0x1
+    21e5:	e8 26 18 00 00       	call   3a10 <printf>
+    exit();
+    21ea:	e8 b3 16 00 00       	call   38a2 <exit>
+    printf(1, "create dd/dd/ff failed\n");
+    21ef:	51                   	push   %ecx
+    21f0:	51                   	push   %ecx
+    21f1:	68 17 45 00 00       	push   $0x4517
+    21f6:	6a 01                	push   $0x1
+    21f8:	e8 13 18 00 00       	call   3a10 <printf>
+    exit();
+    21fd:	e8 a0 16 00 00       	call   38a2 <exit>
+    printf(1, "chdir ./.. failed\n");
+    2202:	50                   	push   %eax
+    2203:	50                   	push   %eax
+    2204:	68 e0 45 00 00       	push   $0x45e0
+    2209:	6a 01                	push   $0x1
+    220b:	e8 00 18 00 00       	call   3a10 <printf>
+    exit();
+    2210:	e8 8d 16 00 00       	call   38a2 <exit>
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    2215:	51                   	push   %ecx
+    2216:	51                   	push   %ecx
+    2217:	68 cc 4f 00 00       	push   $0x4fcc
+    221c:	6a 01                	push   $0x1
+    221e:	e8 ed 17 00 00       	call   3a10 <printf>
+    exit();
+    2223:	e8 7a 16 00 00       	call   38a2 <exit>
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    2228:	53                   	push   %ebx
+    2229:	53                   	push   %ebx
+    222a:	68 60 50 00 00       	push   $0x5060
+    222f:	6a 01                	push   $0x1
+    2231:	e8 da 17 00 00       	call   3a10 <printf>
+    exit();
+    2236:	e8 67 16 00 00       	call   38a2 <exit>
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    223b:	50                   	push   %eax
+    223c:	50                   	push   %eax
+    223d:	68 3c 50 00 00       	push   $0x503c
+    2242:	6a 01                	push   $0x1
+    2244:	e8 c7 17 00 00       	call   3a10 <printf>
+    exit();
+    2249:	e8 54 16 00 00       	call   38a2 <exit>
+    printf(1, "open dd wronly succeeded!\n");
+    224e:	50                   	push   %eax
+    224f:	50                   	push   %eax
+    2250:	68 9f 46 00 00       	push   $0x469f
+    2255:	6a 01                	push   $0x1
+    2257:	e8 b4 17 00 00       	call   3a10 <printf>
+    exit();
+    225c:	e8 41 16 00 00       	call   38a2 <exit>
+    printf(1, "open dd rdwr succeeded!\n");
+    2261:	50                   	push   %eax
+    2262:	50                   	push   %eax
+    2263:	68 86 46 00 00       	push   $0x4686
+    2268:	6a 01                	push   $0x1
+    226a:	e8 a1 17 00 00       	call   3a10 <printf>
+    exit();
+    226f:	e8 2e 16 00 00       	call   38a2 <exit>
+    printf(1, "create dd succeeded!\n");
+    2274:	50                   	push   %eax
+    2275:	50                   	push   %eax
+    2276:	68 70 46 00 00       	push   $0x4670
+    227b:	6a 01                	push   $0x1
+    227d:	e8 8e 17 00 00       	call   3a10 <printf>
+    exit();
+    2282:	e8 1b 16 00 00       	call   38a2 <exit>
+    printf(1, "create dd/xx/ff succeeded!\n");
+    2287:	50                   	push   %eax
+    2288:	50                   	push   %eax
+    2289:	68 54 46 00 00       	push   $0x4654
+    228e:	6a 01                	push   $0x1
+    2290:	e8 7b 17 00 00       	call   3a10 <printf>
+    exit();
+    2295:	e8 08 16 00 00       	call   38a2 <exit>
+    printf(1, "chdir dd failed\n");
+    229a:	50                   	push   %eax
+    229b:	50                   	push   %eax
+    229c:	68 95 45 00 00       	push   $0x4595
+    22a1:	6a 01                	push   $0x1
+    22a3:	e8 68 17 00 00       	call   3a10 <printf>
+    exit();
+    22a8:	e8 f5 15 00 00       	call   38a2 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    22ad:	50                   	push   %eax
+    22ae:	50                   	push   %eax
+    22af:	68 f0 4f 00 00       	push   $0x4ff0
+    22b4:	6a 01                	push   $0x1
+    22b6:	e8 55 17 00 00       	call   3a10 <printf>
+    exit();
+    22bb:	e8 e2 15 00 00       	call   38a2 <exit>
+    printf(1, "subdir mkdir dd/dd failed\n");
+    22c0:	53                   	push   %ebx
+    22c1:	53                   	push   %ebx
+    22c2:	68 f3 44 00 00       	push   $0x44f3
+    22c7:	6a 01                	push   $0x1
+    22c9:	e8 42 17 00 00       	call   3a10 <printf>
+    exit();
+    22ce:	e8 cf 15 00 00       	call   38a2 <exit>
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    22d3:	50                   	push   %eax
+    22d4:	50                   	push   %eax
+    22d5:	68 a4 4f 00 00       	push   $0x4fa4
+    22da:	6a 01                	push   $0x1
+    22dc:	e8 2f 17 00 00       	call   3a10 <printf>
+    exit();
+    22e1:	e8 bc 15 00 00       	call   38a2 <exit>
+    printf(1, "create dd/ff failed\n");
+    22e6:	50                   	push   %eax
+    22e7:	50                   	push   %eax
+    22e8:	68 d7 44 00 00       	push   $0x44d7
+    22ed:	6a 01                	push   $0x1
+    22ef:	e8 1c 17 00 00       	call   3a10 <printf>
+    exit();
+    22f4:	e8 a9 15 00 00       	call   38a2 <exit>
+    printf(1, "subdir mkdir dd failed\n");
+    22f9:	50                   	push   %eax
+    22fa:	50                   	push   %eax
+    22fb:	68 bf 44 00 00       	push   $0x44bf
+    2300:	6a 01                	push   $0x1
+    2302:	e8 09 17 00 00       	call   3a10 <printf>
+    exit();
+    2307:	e8 96 15 00 00       	call   38a2 <exit>
+    printf(1, "unlink dd failed\n");
+    230c:	50                   	push   %eax
+    230d:	50                   	push   %eax
+    230e:	68 a8 47 00 00       	push   $0x47a8
+    2313:	6a 01                	push   $0x1
+    2315:	e8 f6 16 00 00       	call   3a10 <printf>
+    exit();
+    231a:	e8 83 15 00 00       	call   38a2 <exit>
+    printf(1, "unlink dd/dd failed\n");
+    231f:	52                   	push   %edx
+    2320:	52                   	push   %edx
+    2321:	68 93 47 00 00       	push   $0x4793
+    2326:	6a 01                	push   $0x1
+    2328:	e8 e3 16 00 00       	call   3a10 <printf>
+    exit();
+    232d:	e8 70 15 00 00       	call   38a2 <exit>
+    printf(1, "unlink non-empty dd succeeded!\n");
+    2332:	51                   	push   %ecx
+    2333:	51                   	push   %ecx
+    2334:	68 a8 50 00 00       	push   $0x50a8
+    2339:	6a 01                	push   $0x1
+    233b:	e8 d0 16 00 00       	call   3a10 <printf>
+    exit();
+    2340:	e8 5d 15 00 00       	call   38a2 <exit>
+    printf(1, "unlink dd/ff failed\n");
+    2345:	53                   	push   %ebx
+    2346:	53                   	push   %ebx
+    2347:	68 7e 47 00 00       	push   $0x477e
+    234c:	6a 01                	push   $0x1
+    234e:	e8 bd 16 00 00       	call   3a10 <printf>
+    exit();
+    2353:	e8 4a 15 00 00       	call   38a2 <exit>
+    printf(1, "chdir dd/xx succeeded!\n");
+    2358:	50                   	push   %eax
+    2359:	50                   	push   %eax
+    235a:	68 66 47 00 00       	push   $0x4766
+    235f:	6a 01                	push   $0x1
+    2361:	e8 aa 16 00 00       	call   3a10 <printf>
+    exit();
+    2366:	e8 37 15 00 00       	call   38a2 <exit>
+    printf(1, "chdir dd/ff succeeded!\n");
+    236b:	50                   	push   %eax
+    236c:	50                   	push   %eax
+    236d:	68 4e 47 00 00       	push   $0x474e
+    2372:	6a 01                	push   $0x1
+    2374:	e8 97 16 00 00       	call   3a10 <printf>
+    exit();
+    2379:	e8 24 15 00 00       	call   38a2 <exit>
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    237e:	50                   	push   %eax
+    237f:	50                   	push   %eax
+    2380:	68 32 47 00 00       	push   $0x4732
+    2385:	6a 01                	push   $0x1
+    2387:	e8 84 16 00 00       	call   3a10 <printf>
+    exit();
+    238c:	e8 11 15 00 00       	call   38a2 <exit>
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    2391:	50                   	push   %eax
+    2392:	50                   	push   %eax
+    2393:	68 16 47 00 00       	push   $0x4716
+    2398:	6a 01                	push   $0x1
+    239a:	e8 71 16 00 00       	call   3a10 <printf>
+    exit();
+    239f:	e8 fe 14 00 00       	call   38a2 <exit>
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    23a4:	50                   	push   %eax
+    23a5:	50                   	push   %eax
+    23a6:	68 f9 46 00 00       	push   $0x46f9
+    23ab:	6a 01                	push   $0x1
+    23ad:	e8 5e 16 00 00       	call   3a10 <printf>
+    exit();
+    23b2:	e8 eb 14 00 00       	call   38a2 <exit>
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    23b7:	50                   	push   %eax
+    23b8:	50                   	push   %eax
+    23b9:	68 de 46 00 00       	push   $0x46de
+    23be:	6a 01                	push   $0x1
+    23c0:	e8 4b 16 00 00       	call   3a10 <printf>
+    exit();
+    23c5:	e8 d8 14 00 00       	call   38a2 <exit>
+    printf(1, "read dd/dd/ffff wrong len\n");
+    23ca:	50                   	push   %eax
+    23cb:	50                   	push   %eax
+    23cc:	68 0b 46 00 00       	push   $0x460b
+    23d1:	6a 01                	push   $0x1
+    23d3:	e8 38 16 00 00       	call   3a10 <printf>
+    exit();
+    23d8:	e8 c5 14 00 00       	call   38a2 <exit>
+    printf(1, "open dd/dd/ffff failed\n");
+    23dd:	50                   	push   %eax
+    23de:	50                   	push   %eax
+    23df:	68 f3 45 00 00       	push   $0x45f3
+    23e4:	6a 01                	push   $0x1
+    23e6:	e8 25 16 00 00       	call   3a10 <printf>
+    exit();
+    23eb:	e8 b2 14 00 00       	call   38a2 <exit>
+
+000023f0 <bigwrite>:
+{
+    23f0:	55                   	push   %ebp
+    23f1:	89 e5                	mov    %esp,%ebp
+    23f3:	56                   	push   %esi
+    23f4:	53                   	push   %ebx
+  for(sz = 499; sz < 12*512; sz += 471){
+    23f5:	bb f3 01 00 00       	mov    $0x1f3,%ebx
+  printf(1, "bigwrite test\n");
+    23fa:	83 ec 08             	sub    $0x8,%esp
+    23fd:	68 c5 47 00 00       	push   $0x47c5
+    2402:	6a 01                	push   $0x1
+    2404:	e8 07 16 00 00       	call   3a10 <printf>
+  unlink("bigwrite");
+    2409:	c7 04 24 d4 47 00 00 	movl   $0x47d4,(%esp)
+    2410:	e8 dd 14 00 00       	call   38f2 <unlink>
+    2415:	83 c4 10             	add    $0x10,%esp
+    2418:	90                   	nop
+    2419:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    2420:	83 ec 08             	sub    $0x8,%esp
+    2423:	68 02 02 00 00       	push   $0x202
+    2428:	68 d4 47 00 00       	push   $0x47d4
+    242d:	e8 b0 14 00 00       	call   38e2 <open>
+    if(fd < 0){
+    2432:	83 c4 10             	add    $0x10,%esp
+    2435:	85 c0                	test   %eax,%eax
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    2437:	89 c6                	mov    %eax,%esi
+    if(fd < 0){
+    2439:	78 7e                	js     24b9 <bigwrite+0xc9>
+      int cc = write(fd, buf, sz);
+    243b:	83 ec 04             	sub    $0x4,%esp
+    243e:	53                   	push   %ebx
+    243f:	68 00 86 00 00       	push   $0x8600
+    2444:	50                   	push   %eax
+    2445:	e8 78 14 00 00       	call   38c2 <write>
+      if(cc != sz){
+    244a:	83 c4 10             	add    $0x10,%esp
+    244d:	39 d8                	cmp    %ebx,%eax
+    244f:	75 55                	jne    24a6 <bigwrite+0xb6>
+      int cc = write(fd, buf, sz);
+    2451:	83 ec 04             	sub    $0x4,%esp
+    2454:	53                   	push   %ebx
+    2455:	68 00 86 00 00       	push   $0x8600
+    245a:	56                   	push   %esi
+    245b:	e8 62 14 00 00       	call   38c2 <write>
+      if(cc != sz){
+    2460:	83 c4 10             	add    $0x10,%esp
+    2463:	39 d8                	cmp    %ebx,%eax
+    2465:	75 3f                	jne    24a6 <bigwrite+0xb6>
+    close(fd);
+    2467:	83 ec 0c             	sub    $0xc,%esp
+  for(sz = 499; sz < 12*512; sz += 471){
+    246a:	81 c3 d7 01 00 00    	add    $0x1d7,%ebx
+    close(fd);
+    2470:	56                   	push   %esi
+    2471:	e8 54 14 00 00       	call   38ca <close>
+    unlink("bigwrite");
+    2476:	c7 04 24 d4 47 00 00 	movl   $0x47d4,(%esp)
+    247d:	e8 70 14 00 00       	call   38f2 <unlink>
+  for(sz = 499; sz < 12*512; sz += 471){
+    2482:	83 c4 10             	add    $0x10,%esp
+    2485:	81 fb 07 18 00 00    	cmp    $0x1807,%ebx
+    248b:	75 93                	jne    2420 <bigwrite+0x30>
+  printf(1, "bigwrite ok\n");
+    248d:	83 ec 08             	sub    $0x8,%esp
+    2490:	68 07 48 00 00       	push   $0x4807
+    2495:	6a 01                	push   $0x1
+    2497:	e8 74 15 00 00       	call   3a10 <printf>
+}
+    249c:	83 c4 10             	add    $0x10,%esp
+    249f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    24a2:	5b                   	pop    %ebx
+    24a3:	5e                   	pop    %esi
+    24a4:	5d                   	pop    %ebp
+    24a5:	c3                   	ret    
+        printf(1, "write(%d) ret %d\n", sz, cc);
+    24a6:	50                   	push   %eax
+    24a7:	53                   	push   %ebx
+    24a8:	68 f5 47 00 00       	push   $0x47f5
+    24ad:	6a 01                	push   $0x1
+    24af:	e8 5c 15 00 00       	call   3a10 <printf>
+        exit();
+    24b4:	e8 e9 13 00 00       	call   38a2 <exit>
+      printf(1, "cannot create bigwrite\n");
+    24b9:	83 ec 08             	sub    $0x8,%esp
+    24bc:	68 dd 47 00 00       	push   $0x47dd
+    24c1:	6a 01                	push   $0x1
+    24c3:	e8 48 15 00 00       	call   3a10 <printf>
+      exit();
+    24c8:	e8 d5 13 00 00       	call   38a2 <exit>
+    24cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000024d0 <bigfile>:
+{
+    24d0:	55                   	push   %ebp
+    24d1:	89 e5                	mov    %esp,%ebp
+    24d3:	57                   	push   %edi
+    24d4:	56                   	push   %esi
+    24d5:	53                   	push   %ebx
+    24d6:	83 ec 14             	sub    $0x14,%esp
+  printf(1, "bigfile test\n");
+    24d9:	68 14 48 00 00       	push   $0x4814
+    24de:	6a 01                	push   $0x1
+    24e0:	e8 2b 15 00 00       	call   3a10 <printf>
+  unlink("bigfile");
+    24e5:	c7 04 24 30 48 00 00 	movl   $0x4830,(%esp)
+    24ec:	e8 01 14 00 00       	call   38f2 <unlink>
+  fd = open("bigfile", O_CREATE | O_RDWR);
+    24f1:	58                   	pop    %eax
+    24f2:	5a                   	pop    %edx
+    24f3:	68 02 02 00 00       	push   $0x202
+    24f8:	68 30 48 00 00       	push   $0x4830
+    24fd:	e8 e0 13 00 00       	call   38e2 <open>
+  if(fd < 0){
+    2502:	83 c4 10             	add    $0x10,%esp
+    2505:	85 c0                	test   %eax,%eax
+    2507:	0f 88 5e 01 00 00    	js     266b <bigfile+0x19b>
+    250d:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 20; i++){
+    250f:	31 db                	xor    %ebx,%ebx
+    2511:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    memset(buf, i, 600);
+    2518:	83 ec 04             	sub    $0x4,%esp
+    251b:	68 58 02 00 00       	push   $0x258
+    2520:	53                   	push   %ebx
+    2521:	68 00 86 00 00       	push   $0x8600
+    2526:	e8 d5 11 00 00       	call   3700 <memset>
+    if(write(fd, buf, 600) != 600){
+    252b:	83 c4 0c             	add    $0xc,%esp
+    252e:	68 58 02 00 00       	push   $0x258
+    2533:	68 00 86 00 00       	push   $0x8600
+    2538:	56                   	push   %esi
+    2539:	e8 84 13 00 00       	call   38c2 <write>
+    253e:	83 c4 10             	add    $0x10,%esp
+    2541:	3d 58 02 00 00       	cmp    $0x258,%eax
+    2546:	0f 85 f8 00 00 00    	jne    2644 <bigfile+0x174>
+  for(i = 0; i < 20; i++){
+    254c:	83 c3 01             	add    $0x1,%ebx
+    254f:	83 fb 14             	cmp    $0x14,%ebx
+    2552:	75 c4                	jne    2518 <bigfile+0x48>
+  close(fd);
+    2554:	83 ec 0c             	sub    $0xc,%esp
+    2557:	56                   	push   %esi
+    2558:	e8 6d 13 00 00       	call   38ca <close>
+  fd = open("bigfile", 0);
+    255d:	5e                   	pop    %esi
+    255e:	5f                   	pop    %edi
+    255f:	6a 00                	push   $0x0
+    2561:	68 30 48 00 00       	push   $0x4830
+    2566:	e8 77 13 00 00       	call   38e2 <open>
+  if(fd < 0){
+    256b:	83 c4 10             	add    $0x10,%esp
+    256e:	85 c0                	test   %eax,%eax
+  fd = open("bigfile", 0);
+    2570:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+    2572:	0f 88 e0 00 00 00    	js     2658 <bigfile+0x188>
+  total = 0;
+    2578:	31 db                	xor    %ebx,%ebx
+  for(i = 0; ; i++){
+    257a:	31 ff                	xor    %edi,%edi
+    257c:	eb 30                	jmp    25ae <bigfile+0xde>
+    257e:	66 90                	xchg   %ax,%ax
+    if(cc != 300){
+    2580:	3d 2c 01 00 00       	cmp    $0x12c,%eax
+    2585:	0f 85 91 00 00 00    	jne    261c <bigfile+0x14c>
+    if(buf[0] != i/2 || buf[299] != i/2){
+    258b:	0f be 05 00 86 00 00 	movsbl 0x8600,%eax
+    2592:	89 fa                	mov    %edi,%edx
+    2594:	d1 fa                	sar    %edx
+    2596:	39 d0                	cmp    %edx,%eax
+    2598:	75 6e                	jne    2608 <bigfile+0x138>
+    259a:	0f be 15 2b 87 00 00 	movsbl 0x872b,%edx
+    25a1:	39 d0                	cmp    %edx,%eax
+    25a3:	75 63                	jne    2608 <bigfile+0x138>
+    total += cc;
+    25a5:	81 c3 2c 01 00 00    	add    $0x12c,%ebx
+  for(i = 0; ; i++){
+    25ab:	83 c7 01             	add    $0x1,%edi
+    cc = read(fd, buf, 300);
+    25ae:	83 ec 04             	sub    $0x4,%esp
+    25b1:	68 2c 01 00 00       	push   $0x12c
+    25b6:	68 00 86 00 00       	push   $0x8600
+    25bb:	56                   	push   %esi
+    25bc:	e8 f9 12 00 00       	call   38ba <read>
+    if(cc < 0){
+    25c1:	83 c4 10             	add    $0x10,%esp
+    25c4:	85 c0                	test   %eax,%eax
+    25c6:	78 68                	js     2630 <bigfile+0x160>
+    if(cc == 0)
+    25c8:	75 b6                	jne    2580 <bigfile+0xb0>
+  close(fd);
+    25ca:	83 ec 0c             	sub    $0xc,%esp
+    25cd:	56                   	push   %esi
+    25ce:	e8 f7 12 00 00       	call   38ca <close>
+  if(total != 20*600){
+    25d3:	83 c4 10             	add    $0x10,%esp
+    25d6:	81 fb e0 2e 00 00    	cmp    $0x2ee0,%ebx
+    25dc:	0f 85 9c 00 00 00    	jne    267e <bigfile+0x1ae>
+  unlink("bigfile");
+    25e2:	83 ec 0c             	sub    $0xc,%esp
+    25e5:	68 30 48 00 00       	push   $0x4830
+    25ea:	e8 03 13 00 00       	call   38f2 <unlink>
+  printf(1, "bigfile test ok\n");
+    25ef:	58                   	pop    %eax
+    25f0:	5a                   	pop    %edx
+    25f1:	68 bf 48 00 00       	push   $0x48bf
+    25f6:	6a 01                	push   $0x1
+    25f8:	e8 13 14 00 00       	call   3a10 <printf>
+}
+    25fd:	83 c4 10             	add    $0x10,%esp
+    2600:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    2603:	5b                   	pop    %ebx
+    2604:	5e                   	pop    %esi
+    2605:	5f                   	pop    %edi
+    2606:	5d                   	pop    %ebp
+    2607:	c3                   	ret    
+      printf(1, "read bigfile wrong data\n");
+    2608:	83 ec 08             	sub    $0x8,%esp
+    260b:	68 8c 48 00 00       	push   $0x488c
+    2610:	6a 01                	push   $0x1
+    2612:	e8 f9 13 00 00       	call   3a10 <printf>
+      exit();
+    2617:	e8 86 12 00 00       	call   38a2 <exit>
+      printf(1, "short read bigfile\n");
+    261c:	83 ec 08             	sub    $0x8,%esp
+    261f:	68 78 48 00 00       	push   $0x4878
+    2624:	6a 01                	push   $0x1
+    2626:	e8 e5 13 00 00       	call   3a10 <printf>
+      exit();
+    262b:	e8 72 12 00 00       	call   38a2 <exit>
+      printf(1, "read bigfile failed\n");
+    2630:	83 ec 08             	sub    $0x8,%esp
+    2633:	68 63 48 00 00       	push   $0x4863
+    2638:	6a 01                	push   $0x1
+    263a:	e8 d1 13 00 00       	call   3a10 <printf>
+      exit();
+    263f:	e8 5e 12 00 00       	call   38a2 <exit>
+      printf(1, "write bigfile failed\n");
+    2644:	83 ec 08             	sub    $0x8,%esp
+    2647:	68 38 48 00 00       	push   $0x4838
+    264c:	6a 01                	push   $0x1
+    264e:	e8 bd 13 00 00       	call   3a10 <printf>
+      exit();
+    2653:	e8 4a 12 00 00       	call   38a2 <exit>
+    printf(1, "cannot open bigfile\n");
+    2658:	53                   	push   %ebx
+    2659:	53                   	push   %ebx
+    265a:	68 4e 48 00 00       	push   $0x484e
+    265f:	6a 01                	push   $0x1
+    2661:	e8 aa 13 00 00       	call   3a10 <printf>
+    exit();
+    2666:	e8 37 12 00 00       	call   38a2 <exit>
+    printf(1, "cannot create bigfile");
+    266b:	50                   	push   %eax
+    266c:	50                   	push   %eax
+    266d:	68 22 48 00 00       	push   $0x4822
+    2672:	6a 01                	push   $0x1
+    2674:	e8 97 13 00 00       	call   3a10 <printf>
+    exit();
+    2679:	e8 24 12 00 00       	call   38a2 <exit>
+    printf(1, "read bigfile wrong total\n");
+    267e:	51                   	push   %ecx
+    267f:	51                   	push   %ecx
+    2680:	68 a5 48 00 00       	push   $0x48a5
+    2685:	6a 01                	push   $0x1
+    2687:	e8 84 13 00 00       	call   3a10 <printf>
+    exit();
+    268c:	e8 11 12 00 00       	call   38a2 <exit>
+    2691:	eb 0d                	jmp    26a0 <fourteen>
+    2693:	90                   	nop
+    2694:	90                   	nop
+    2695:	90                   	nop
+    2696:	90                   	nop
+    2697:	90                   	nop
+    2698:	90                   	nop
+    2699:	90                   	nop
+    269a:	90                   	nop
+    269b:	90                   	nop
+    269c:	90                   	nop
+    269d:	90                   	nop
+    269e:	90                   	nop
+    269f:	90                   	nop
+
+000026a0 <fourteen>:
+{
+    26a0:	55                   	push   %ebp
+    26a1:	89 e5                	mov    %esp,%ebp
+    26a3:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "fourteen test\n");
+    26a6:	68 d0 48 00 00       	push   $0x48d0
+    26ab:	6a 01                	push   $0x1
+    26ad:	e8 5e 13 00 00       	call   3a10 <printf>
+  if(mkdir("12345678901234") != 0){
+    26b2:	c7 04 24 0b 49 00 00 	movl   $0x490b,(%esp)
+    26b9:	e8 4c 12 00 00       	call   390a <mkdir>
+    26be:	83 c4 10             	add    $0x10,%esp
+    26c1:	85 c0                	test   %eax,%eax
+    26c3:	0f 85 97 00 00 00    	jne    2760 <fourteen+0xc0>
+  if(mkdir("12345678901234/123456789012345") != 0){
+    26c9:	83 ec 0c             	sub    $0xc,%esp
+    26cc:	68 c8 50 00 00       	push   $0x50c8
+    26d1:	e8 34 12 00 00       	call   390a <mkdir>
+    26d6:	83 c4 10             	add    $0x10,%esp
+    26d9:	85 c0                	test   %eax,%eax
+    26db:	0f 85 de 00 00 00    	jne    27bf <fourteen+0x11f>
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+    26e1:	83 ec 08             	sub    $0x8,%esp
+    26e4:	68 00 02 00 00       	push   $0x200
+    26e9:	68 18 51 00 00       	push   $0x5118
+    26ee:	e8 ef 11 00 00       	call   38e2 <open>
+  if(fd < 0){
+    26f3:	83 c4 10             	add    $0x10,%esp
+    26f6:	85 c0                	test   %eax,%eax
+    26f8:	0f 88 ae 00 00 00    	js     27ac <fourteen+0x10c>
+  close(fd);
+    26fe:	83 ec 0c             	sub    $0xc,%esp
+    2701:	50                   	push   %eax
+    2702:	e8 c3 11 00 00       	call   38ca <close>
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+    2707:	58                   	pop    %eax
+    2708:	5a                   	pop    %edx
+    2709:	6a 00                	push   $0x0
+    270b:	68 88 51 00 00       	push   $0x5188
+    2710:	e8 cd 11 00 00       	call   38e2 <open>
+  if(fd < 0){
+    2715:	83 c4 10             	add    $0x10,%esp
+    2718:	85 c0                	test   %eax,%eax
+    271a:	78 7d                	js     2799 <fourteen+0xf9>
+  close(fd);
+    271c:	83 ec 0c             	sub    $0xc,%esp
+    271f:	50                   	push   %eax
+    2720:	e8 a5 11 00 00       	call   38ca <close>
+  if(mkdir("12345678901234/12345678901234") == 0){
+    2725:	c7 04 24 fc 48 00 00 	movl   $0x48fc,(%esp)
+    272c:	e8 d9 11 00 00       	call   390a <mkdir>
+    2731:	83 c4 10             	add    $0x10,%esp
+    2734:	85 c0                	test   %eax,%eax
+    2736:	74 4e                	je     2786 <fourteen+0xe6>
+  if(mkdir("123456789012345/12345678901234") == 0){
+    2738:	83 ec 0c             	sub    $0xc,%esp
+    273b:	68 24 52 00 00       	push   $0x5224
+    2740:	e8 c5 11 00 00       	call   390a <mkdir>
+    2745:	83 c4 10             	add    $0x10,%esp
+    2748:	85 c0                	test   %eax,%eax
+    274a:	74 27                	je     2773 <fourteen+0xd3>
+  printf(1, "fourteen ok\n");
+    274c:	83 ec 08             	sub    $0x8,%esp
+    274f:	68 1a 49 00 00       	push   $0x491a
+    2754:	6a 01                	push   $0x1
+    2756:	e8 b5 12 00 00       	call   3a10 <printf>
+}
+    275b:	83 c4 10             	add    $0x10,%esp
+    275e:	c9                   	leave  
+    275f:	c3                   	ret    
+    printf(1, "mkdir 12345678901234 failed\n");
+    2760:	50                   	push   %eax
+    2761:	50                   	push   %eax
+    2762:	68 df 48 00 00       	push   $0x48df
+    2767:	6a 01                	push   $0x1
+    2769:	e8 a2 12 00 00       	call   3a10 <printf>
+    exit();
+    276e:	e8 2f 11 00 00       	call   38a2 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
+    2773:	50                   	push   %eax
+    2774:	50                   	push   %eax
+    2775:	68 44 52 00 00       	push   $0x5244
+    277a:	6a 01                	push   $0x1
+    277c:	e8 8f 12 00 00       	call   3a10 <printf>
+    exit();
+    2781:	e8 1c 11 00 00       	call   38a2 <exit>
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    2786:	52                   	push   %edx
+    2787:	52                   	push   %edx
+    2788:	68 f4 51 00 00       	push   $0x51f4
+    278d:	6a 01                	push   $0x1
+    278f:	e8 7c 12 00 00       	call   3a10 <printf>
+    exit();
+    2794:	e8 09 11 00 00       	call   38a2 <exit>
+    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
+    2799:	51                   	push   %ecx
+    279a:	51                   	push   %ecx
+    279b:	68 b8 51 00 00       	push   $0x51b8
+    27a0:	6a 01                	push   $0x1
+    27a2:	e8 69 12 00 00       	call   3a10 <printf>
+    exit();
+    27a7:	e8 f6 10 00 00       	call   38a2 <exit>
+    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
+    27ac:	51                   	push   %ecx
+    27ad:	51                   	push   %ecx
+    27ae:	68 48 51 00 00       	push   $0x5148
+    27b3:	6a 01                	push   $0x1
+    27b5:	e8 56 12 00 00       	call   3a10 <printf>
+    exit();
+    27ba:	e8 e3 10 00 00       	call   38a2 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    27bf:	50                   	push   %eax
+    27c0:	50                   	push   %eax
+    27c1:	68 e8 50 00 00       	push   $0x50e8
+    27c6:	6a 01                	push   $0x1
+    27c8:	e8 43 12 00 00       	call   3a10 <printf>
+    exit();
+    27cd:	e8 d0 10 00 00       	call   38a2 <exit>
+    27d2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    27d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000027e0 <rmdot>:
+{
+    27e0:	55                   	push   %ebp
+    27e1:	89 e5                	mov    %esp,%ebp
+    27e3:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "rmdot test\n");
+    27e6:	68 27 49 00 00       	push   $0x4927
+    27eb:	6a 01                	push   $0x1
+    27ed:	e8 1e 12 00 00       	call   3a10 <printf>
+  if(mkdir("dots") != 0){
+    27f2:	c7 04 24 33 49 00 00 	movl   $0x4933,(%esp)
+    27f9:	e8 0c 11 00 00       	call   390a <mkdir>
+    27fe:	83 c4 10             	add    $0x10,%esp
+    2801:	85 c0                	test   %eax,%eax
+    2803:	0f 85 b0 00 00 00    	jne    28b9 <rmdot+0xd9>
+  if(chdir("dots") != 0){
+    2809:	83 ec 0c             	sub    $0xc,%esp
+    280c:	68 33 49 00 00       	push   $0x4933
+    2811:	e8 fc 10 00 00       	call   3912 <chdir>
+    2816:	83 c4 10             	add    $0x10,%esp
+    2819:	85 c0                	test   %eax,%eax
+    281b:	0f 85 1d 01 00 00    	jne    293e <rmdot+0x15e>
+  if(unlink(".") == 0){
+    2821:	83 ec 0c             	sub    $0xc,%esp
+    2824:	68 de 45 00 00       	push   $0x45de
+    2829:	e8 c4 10 00 00       	call   38f2 <unlink>
+    282e:	83 c4 10             	add    $0x10,%esp
+    2831:	85 c0                	test   %eax,%eax
+    2833:	0f 84 f2 00 00 00    	je     292b <rmdot+0x14b>
+  if(unlink("..") == 0){
+    2839:	83 ec 0c             	sub    $0xc,%esp
+    283c:	68 dd 45 00 00       	push   $0x45dd
+    2841:	e8 ac 10 00 00       	call   38f2 <unlink>
+    2846:	83 c4 10             	add    $0x10,%esp
+    2849:	85 c0                	test   %eax,%eax
+    284b:	0f 84 c7 00 00 00    	je     2918 <rmdot+0x138>
+  if(chdir("/") != 0){
+    2851:	83 ec 0c             	sub    $0xc,%esp
+    2854:	68 b1 3d 00 00       	push   $0x3db1
+    2859:	e8 b4 10 00 00       	call   3912 <chdir>
+    285e:	83 c4 10             	add    $0x10,%esp
+    2861:	85 c0                	test   %eax,%eax
+    2863:	0f 85 9c 00 00 00    	jne    2905 <rmdot+0x125>
+  if(unlink("dots/.") == 0){
+    2869:	83 ec 0c             	sub    $0xc,%esp
+    286c:	68 7b 49 00 00       	push   $0x497b
+    2871:	e8 7c 10 00 00       	call   38f2 <unlink>
+    2876:	83 c4 10             	add    $0x10,%esp
+    2879:	85 c0                	test   %eax,%eax
+    287b:	74 75                	je     28f2 <rmdot+0x112>
+  if(unlink("dots/..") == 0){
+    287d:	83 ec 0c             	sub    $0xc,%esp
+    2880:	68 99 49 00 00       	push   $0x4999
+    2885:	e8 68 10 00 00       	call   38f2 <unlink>
+    288a:	83 c4 10             	add    $0x10,%esp
+    288d:	85 c0                	test   %eax,%eax
+    288f:	74 4e                	je     28df <rmdot+0xff>
+  if(unlink("dots") != 0){
+    2891:	83 ec 0c             	sub    $0xc,%esp
+    2894:	68 33 49 00 00       	push   $0x4933
+    2899:	e8 54 10 00 00       	call   38f2 <unlink>
+    289e:	83 c4 10             	add    $0x10,%esp
+    28a1:	85 c0                	test   %eax,%eax
+    28a3:	75 27                	jne    28cc <rmdot+0xec>
+  printf(1, "rmdot ok\n");
+    28a5:	83 ec 08             	sub    $0x8,%esp
+    28a8:	68 ce 49 00 00       	push   $0x49ce
+    28ad:	6a 01                	push   $0x1
+    28af:	e8 5c 11 00 00       	call   3a10 <printf>
+}
+    28b4:	83 c4 10             	add    $0x10,%esp
+    28b7:	c9                   	leave  
+    28b8:	c3                   	ret    
+    printf(1, "mkdir dots failed\n");
+    28b9:	50                   	push   %eax
+    28ba:	50                   	push   %eax
+    28bb:	68 38 49 00 00       	push   $0x4938
+    28c0:	6a 01                	push   $0x1
+    28c2:	e8 49 11 00 00       	call   3a10 <printf>
+    exit();
+    28c7:	e8 d6 0f 00 00       	call   38a2 <exit>
+    printf(1, "unlink dots failed!\n");
+    28cc:	50                   	push   %eax
+    28cd:	50                   	push   %eax
+    28ce:	68 b9 49 00 00       	push   $0x49b9
+    28d3:	6a 01                	push   $0x1
+    28d5:	e8 36 11 00 00       	call   3a10 <printf>
+    exit();
+    28da:	e8 c3 0f 00 00       	call   38a2 <exit>
+    printf(1, "unlink dots/.. worked!\n");
+    28df:	52                   	push   %edx
+    28e0:	52                   	push   %edx
+    28e1:	68 a1 49 00 00       	push   $0x49a1
+    28e6:	6a 01                	push   $0x1
+    28e8:	e8 23 11 00 00       	call   3a10 <printf>
+    exit();
+    28ed:	e8 b0 0f 00 00       	call   38a2 <exit>
+    printf(1, "unlink dots/. worked!\n");
+    28f2:	51                   	push   %ecx
+    28f3:	51                   	push   %ecx
+    28f4:	68 82 49 00 00       	push   $0x4982
+    28f9:	6a 01                	push   $0x1
+    28fb:	e8 10 11 00 00       	call   3a10 <printf>
+    exit();
+    2900:	e8 9d 0f 00 00       	call   38a2 <exit>
+    printf(1, "chdir / failed\n");
+    2905:	50                   	push   %eax
+    2906:	50                   	push   %eax
+    2907:	68 b3 3d 00 00       	push   $0x3db3
+    290c:	6a 01                	push   $0x1
+    290e:	e8 fd 10 00 00       	call   3a10 <printf>
+    exit();
+    2913:	e8 8a 0f 00 00       	call   38a2 <exit>
+    printf(1, "rm .. worked!\n");
+    2918:	50                   	push   %eax
+    2919:	50                   	push   %eax
+    291a:	68 6c 49 00 00       	push   $0x496c
+    291f:	6a 01                	push   $0x1
+    2921:	e8 ea 10 00 00       	call   3a10 <printf>
+    exit();
+    2926:	e8 77 0f 00 00       	call   38a2 <exit>
+    printf(1, "rm . worked!\n");
+    292b:	50                   	push   %eax
+    292c:	50                   	push   %eax
+    292d:	68 5e 49 00 00       	push   $0x495e
+    2932:	6a 01                	push   $0x1
+    2934:	e8 d7 10 00 00       	call   3a10 <printf>
+    exit();
+    2939:	e8 64 0f 00 00       	call   38a2 <exit>
+    printf(1, "chdir dots failed\n");
+    293e:	50                   	push   %eax
+    293f:	50                   	push   %eax
+    2940:	68 4b 49 00 00       	push   $0x494b
+    2945:	6a 01                	push   $0x1
+    2947:	e8 c4 10 00 00       	call   3a10 <printf>
+    exit();
+    294c:	e8 51 0f 00 00       	call   38a2 <exit>
+    2951:	eb 0d                	jmp    2960 <dirfile>
+    2953:	90                   	nop
+    2954:	90                   	nop
+    2955:	90                   	nop
+    2956:	90                   	nop
+    2957:	90                   	nop
+    2958:	90                   	nop
+    2959:	90                   	nop
+    295a:	90                   	nop
+    295b:	90                   	nop
+    295c:	90                   	nop
+    295d:	90                   	nop
+    295e:	90                   	nop
+    295f:	90                   	nop
+
+00002960 <dirfile>:
+{
+    2960:	55                   	push   %ebp
+    2961:	89 e5                	mov    %esp,%ebp
+    2963:	53                   	push   %ebx
+    2964:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "dir vs file\n");
+    2967:	68 d8 49 00 00       	push   $0x49d8
+    296c:	6a 01                	push   $0x1
+    296e:	e8 9d 10 00 00       	call   3a10 <printf>
+  fd = open("dirfile", O_CREATE);
+    2973:	59                   	pop    %ecx
+    2974:	5b                   	pop    %ebx
+    2975:	68 00 02 00 00       	push   $0x200
+    297a:	68 e5 49 00 00       	push   $0x49e5
+    297f:	e8 5e 0f 00 00       	call   38e2 <open>
+  if(fd < 0){
+    2984:	83 c4 10             	add    $0x10,%esp
+    2987:	85 c0                	test   %eax,%eax
+    2989:	0f 88 43 01 00 00    	js     2ad2 <dirfile+0x172>
+  close(fd);
+    298f:	83 ec 0c             	sub    $0xc,%esp
+    2992:	50                   	push   %eax
+    2993:	e8 32 0f 00 00       	call   38ca <close>
+  if(chdir("dirfile") == 0){
+    2998:	c7 04 24 e5 49 00 00 	movl   $0x49e5,(%esp)
+    299f:	e8 6e 0f 00 00       	call   3912 <chdir>
+    29a4:	83 c4 10             	add    $0x10,%esp
+    29a7:	85 c0                	test   %eax,%eax
+    29a9:	0f 84 10 01 00 00    	je     2abf <dirfile+0x15f>
+  fd = open("dirfile/xx", 0);
+    29af:	83 ec 08             	sub    $0x8,%esp
+    29b2:	6a 00                	push   $0x0
+    29b4:	68 1e 4a 00 00       	push   $0x4a1e
+    29b9:	e8 24 0f 00 00       	call   38e2 <open>
+  if(fd >= 0){
+    29be:	83 c4 10             	add    $0x10,%esp
+    29c1:	85 c0                	test   %eax,%eax
+    29c3:	0f 89 e3 00 00 00    	jns    2aac <dirfile+0x14c>
+  fd = open("dirfile/xx", O_CREATE);
+    29c9:	83 ec 08             	sub    $0x8,%esp
+    29cc:	68 00 02 00 00       	push   $0x200
+    29d1:	68 1e 4a 00 00       	push   $0x4a1e
+    29d6:	e8 07 0f 00 00       	call   38e2 <open>
+  if(fd >= 0){
+    29db:	83 c4 10             	add    $0x10,%esp
+    29de:	85 c0                	test   %eax,%eax
+    29e0:	0f 89 c6 00 00 00    	jns    2aac <dirfile+0x14c>
+  if(mkdir("dirfile/xx") == 0){
+    29e6:	83 ec 0c             	sub    $0xc,%esp
+    29e9:	68 1e 4a 00 00       	push   $0x4a1e
+    29ee:	e8 17 0f 00 00       	call   390a <mkdir>
+    29f3:	83 c4 10             	add    $0x10,%esp
+    29f6:	85 c0                	test   %eax,%eax
+    29f8:	0f 84 46 01 00 00    	je     2b44 <dirfile+0x1e4>
+  if(unlink("dirfile/xx") == 0){
+    29fe:	83 ec 0c             	sub    $0xc,%esp
+    2a01:	68 1e 4a 00 00       	push   $0x4a1e
+    2a06:	e8 e7 0e 00 00       	call   38f2 <unlink>
+    2a0b:	83 c4 10             	add    $0x10,%esp
+    2a0e:	85 c0                	test   %eax,%eax
+    2a10:	0f 84 1b 01 00 00    	je     2b31 <dirfile+0x1d1>
+  if(link("README", "dirfile/xx") == 0){
+    2a16:	83 ec 08             	sub    $0x8,%esp
+    2a19:	68 1e 4a 00 00       	push   $0x4a1e
+    2a1e:	68 82 4a 00 00       	push   $0x4a82
+    2a23:	e8 da 0e 00 00       	call   3902 <link>
+    2a28:	83 c4 10             	add    $0x10,%esp
+    2a2b:	85 c0                	test   %eax,%eax
+    2a2d:	0f 84 eb 00 00 00    	je     2b1e <dirfile+0x1be>
+  if(unlink("dirfile") != 0){
+    2a33:	83 ec 0c             	sub    $0xc,%esp
+    2a36:	68 e5 49 00 00       	push   $0x49e5
+    2a3b:	e8 b2 0e 00 00       	call   38f2 <unlink>
+    2a40:	83 c4 10             	add    $0x10,%esp
+    2a43:	85 c0                	test   %eax,%eax
+    2a45:	0f 85 c0 00 00 00    	jne    2b0b <dirfile+0x1ab>
+  fd = open(".", O_RDWR);
+    2a4b:	83 ec 08             	sub    $0x8,%esp
+    2a4e:	6a 02                	push   $0x2
+    2a50:	68 de 45 00 00       	push   $0x45de
+    2a55:	e8 88 0e 00 00       	call   38e2 <open>
+  if(fd >= 0){
+    2a5a:	83 c4 10             	add    $0x10,%esp
+    2a5d:	85 c0                	test   %eax,%eax
+    2a5f:	0f 89 93 00 00 00    	jns    2af8 <dirfile+0x198>
+  fd = open(".", 0);
+    2a65:	83 ec 08             	sub    $0x8,%esp
+    2a68:	6a 00                	push   $0x0
+    2a6a:	68 de 45 00 00       	push   $0x45de
+    2a6f:	e8 6e 0e 00 00       	call   38e2 <open>
+  if(write(fd, "x", 1) > 0){
+    2a74:	83 c4 0c             	add    $0xc,%esp
+  fd = open(".", 0);
+    2a77:	89 c3                	mov    %eax,%ebx
+  if(write(fd, "x", 1) > 0){
+    2a79:	6a 01                	push   $0x1
+    2a7b:	68 c1 46 00 00       	push   $0x46c1
+    2a80:	50                   	push   %eax
+    2a81:	e8 3c 0e 00 00       	call   38c2 <write>
+    2a86:	83 c4 10             	add    $0x10,%esp
+    2a89:	85 c0                	test   %eax,%eax
+    2a8b:	7f 58                	jg     2ae5 <dirfile+0x185>
+  close(fd);
+    2a8d:	83 ec 0c             	sub    $0xc,%esp
+    2a90:	53                   	push   %ebx
+    2a91:	e8 34 0e 00 00       	call   38ca <close>
+  printf(1, "dir vs file OK\n");
+    2a96:	58                   	pop    %eax
+    2a97:	5a                   	pop    %edx
+    2a98:	68 b5 4a 00 00       	push   $0x4ab5
+    2a9d:	6a 01                	push   $0x1
+    2a9f:	e8 6c 0f 00 00       	call   3a10 <printf>
+}
+    2aa4:	83 c4 10             	add    $0x10,%esp
+    2aa7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2aaa:	c9                   	leave  
+    2aab:	c3                   	ret    
+    printf(1, "create dirfile/xx succeeded!\n");
+    2aac:	50                   	push   %eax
+    2aad:	50                   	push   %eax
+    2aae:	68 29 4a 00 00       	push   $0x4a29
+    2ab3:	6a 01                	push   $0x1
+    2ab5:	e8 56 0f 00 00       	call   3a10 <printf>
+    exit();
+    2aba:	e8 e3 0d 00 00       	call   38a2 <exit>
+    printf(1, "chdir dirfile succeeded!\n");
+    2abf:	50                   	push   %eax
+    2ac0:	50                   	push   %eax
+    2ac1:	68 04 4a 00 00       	push   $0x4a04
+    2ac6:	6a 01                	push   $0x1
+    2ac8:	e8 43 0f 00 00       	call   3a10 <printf>
+    exit();
+    2acd:	e8 d0 0d 00 00       	call   38a2 <exit>
+    printf(1, "create dirfile failed\n");
+    2ad2:	52                   	push   %edx
+    2ad3:	52                   	push   %edx
+    2ad4:	68 ed 49 00 00       	push   $0x49ed
+    2ad9:	6a 01                	push   $0x1
+    2adb:	e8 30 0f 00 00       	call   3a10 <printf>
+    exit();
+    2ae0:	e8 bd 0d 00 00       	call   38a2 <exit>
+    printf(1, "write . succeeded!\n");
+    2ae5:	51                   	push   %ecx
+    2ae6:	51                   	push   %ecx
+    2ae7:	68 a1 4a 00 00       	push   $0x4aa1
+    2aec:	6a 01                	push   $0x1
+    2aee:	e8 1d 0f 00 00       	call   3a10 <printf>
+    exit();
+    2af3:	e8 aa 0d 00 00       	call   38a2 <exit>
+    printf(1, "open . for writing succeeded!\n");
+    2af8:	53                   	push   %ebx
+    2af9:	53                   	push   %ebx
+    2afa:	68 98 52 00 00       	push   $0x5298
+    2aff:	6a 01                	push   $0x1
+    2b01:	e8 0a 0f 00 00       	call   3a10 <printf>
+    exit();
+    2b06:	e8 97 0d 00 00       	call   38a2 <exit>
+    printf(1, "unlink dirfile failed!\n");
+    2b0b:	50                   	push   %eax
+    2b0c:	50                   	push   %eax
+    2b0d:	68 89 4a 00 00       	push   $0x4a89
+    2b12:	6a 01                	push   $0x1
+    2b14:	e8 f7 0e 00 00       	call   3a10 <printf>
+    exit();
+    2b19:	e8 84 0d 00 00       	call   38a2 <exit>
+    printf(1, "link to dirfile/xx succeeded!\n");
+    2b1e:	50                   	push   %eax
+    2b1f:	50                   	push   %eax
+    2b20:	68 78 52 00 00       	push   $0x5278
+    2b25:	6a 01                	push   $0x1
+    2b27:	e8 e4 0e 00 00       	call   3a10 <printf>
+    exit();
+    2b2c:	e8 71 0d 00 00       	call   38a2 <exit>
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    2b31:	50                   	push   %eax
+    2b32:	50                   	push   %eax
+    2b33:	68 64 4a 00 00       	push   $0x4a64
+    2b38:	6a 01                	push   $0x1
+    2b3a:	e8 d1 0e 00 00       	call   3a10 <printf>
+    exit();
+    2b3f:	e8 5e 0d 00 00       	call   38a2 <exit>
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    2b44:	50                   	push   %eax
+    2b45:	50                   	push   %eax
+    2b46:	68 47 4a 00 00       	push   $0x4a47
+    2b4b:	6a 01                	push   $0x1
+    2b4d:	e8 be 0e 00 00       	call   3a10 <printf>
+    exit();
+    2b52:	e8 4b 0d 00 00       	call   38a2 <exit>
+    2b57:	89 f6                	mov    %esi,%esi
+    2b59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00002b60 <iref>:
+{
+    2b60:	55                   	push   %ebp
+    2b61:	89 e5                	mov    %esp,%ebp
+    2b63:	53                   	push   %ebx
+  printf(1, "empty file name\n");
+    2b64:	bb 33 00 00 00       	mov    $0x33,%ebx
+{
+    2b69:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "empty file name\n");
+    2b6c:	68 c5 4a 00 00       	push   $0x4ac5
+    2b71:	6a 01                	push   $0x1
+    2b73:	e8 98 0e 00 00       	call   3a10 <printf>
+    2b78:	83 c4 10             	add    $0x10,%esp
+    2b7b:	90                   	nop
+    2b7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(mkdir("irefd") != 0){
+    2b80:	83 ec 0c             	sub    $0xc,%esp
+    2b83:	68 d6 4a 00 00       	push   $0x4ad6
+    2b88:	e8 7d 0d 00 00       	call   390a <mkdir>
+    2b8d:	83 c4 10             	add    $0x10,%esp
+    2b90:	85 c0                	test   %eax,%eax
+    2b92:	0f 85 bb 00 00 00    	jne    2c53 <iref+0xf3>
+    if(chdir("irefd") != 0){
+    2b98:	83 ec 0c             	sub    $0xc,%esp
+    2b9b:	68 d6 4a 00 00       	push   $0x4ad6
+    2ba0:	e8 6d 0d 00 00       	call   3912 <chdir>
+    2ba5:	83 c4 10             	add    $0x10,%esp
+    2ba8:	85 c0                	test   %eax,%eax
+    2baa:	0f 85 b7 00 00 00    	jne    2c67 <iref+0x107>
+    mkdir("");
+    2bb0:	83 ec 0c             	sub    $0xc,%esp
+    2bb3:	68 8b 41 00 00       	push   $0x418b
+    2bb8:	e8 4d 0d 00 00       	call   390a <mkdir>
+    link("README", "");
+    2bbd:	59                   	pop    %ecx
+    2bbe:	58                   	pop    %eax
+    2bbf:	68 8b 41 00 00       	push   $0x418b
+    2bc4:	68 82 4a 00 00       	push   $0x4a82
+    2bc9:	e8 34 0d 00 00       	call   3902 <link>
+    fd = open("", O_CREATE);
+    2bce:	58                   	pop    %eax
+    2bcf:	5a                   	pop    %edx
+    2bd0:	68 00 02 00 00       	push   $0x200
+    2bd5:	68 8b 41 00 00       	push   $0x418b
+    2bda:	e8 03 0d 00 00       	call   38e2 <open>
+    if(fd >= 0)
+    2bdf:	83 c4 10             	add    $0x10,%esp
+    2be2:	85 c0                	test   %eax,%eax
+    2be4:	78 0c                	js     2bf2 <iref+0x92>
+      close(fd);
+    2be6:	83 ec 0c             	sub    $0xc,%esp
+    2be9:	50                   	push   %eax
+    2bea:	e8 db 0c 00 00       	call   38ca <close>
+    2bef:	83 c4 10             	add    $0x10,%esp
+    fd = open("xx", O_CREATE);
+    2bf2:	83 ec 08             	sub    $0x8,%esp
+    2bf5:	68 00 02 00 00       	push   $0x200
+    2bfa:	68 c0 46 00 00       	push   $0x46c0
+    2bff:	e8 de 0c 00 00       	call   38e2 <open>
+    if(fd >= 0)
+    2c04:	83 c4 10             	add    $0x10,%esp
+    2c07:	85 c0                	test   %eax,%eax
+    2c09:	78 0c                	js     2c17 <iref+0xb7>
+      close(fd);
+    2c0b:	83 ec 0c             	sub    $0xc,%esp
+    2c0e:	50                   	push   %eax
+    2c0f:	e8 b6 0c 00 00       	call   38ca <close>
+    2c14:	83 c4 10             	add    $0x10,%esp
+    unlink("xx");
+    2c17:	83 ec 0c             	sub    $0xc,%esp
+    2c1a:	68 c0 46 00 00       	push   $0x46c0
+    2c1f:	e8 ce 0c 00 00       	call   38f2 <unlink>
+  for(i = 0; i < 50 + 1; i++){
+    2c24:	83 c4 10             	add    $0x10,%esp
+    2c27:	83 eb 01             	sub    $0x1,%ebx
+    2c2a:	0f 85 50 ff ff ff    	jne    2b80 <iref+0x20>
+  chdir("/");
+    2c30:	83 ec 0c             	sub    $0xc,%esp
+    2c33:	68 b1 3d 00 00       	push   $0x3db1
+    2c38:	e8 d5 0c 00 00       	call   3912 <chdir>
+  printf(1, "empty file name OK\n");
+    2c3d:	58                   	pop    %eax
+    2c3e:	5a                   	pop    %edx
+    2c3f:	68 04 4b 00 00       	push   $0x4b04
+    2c44:	6a 01                	push   $0x1
+    2c46:	e8 c5 0d 00 00       	call   3a10 <printf>
+}
+    2c4b:	83 c4 10             	add    $0x10,%esp
+    2c4e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2c51:	c9                   	leave  
+    2c52:	c3                   	ret    
+      printf(1, "mkdir irefd failed\n");
+    2c53:	83 ec 08             	sub    $0x8,%esp
+    2c56:	68 dc 4a 00 00       	push   $0x4adc
+    2c5b:	6a 01                	push   $0x1
+    2c5d:	e8 ae 0d 00 00       	call   3a10 <printf>
+      exit();
+    2c62:	e8 3b 0c 00 00       	call   38a2 <exit>
+      printf(1, "chdir irefd failed\n");
+    2c67:	83 ec 08             	sub    $0x8,%esp
+    2c6a:	68 f0 4a 00 00       	push   $0x4af0
+    2c6f:	6a 01                	push   $0x1
+    2c71:	e8 9a 0d 00 00       	call   3a10 <printf>
+      exit();
+    2c76:	e8 27 0c 00 00       	call   38a2 <exit>
+    2c7b:	90                   	nop
+    2c7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00002c80 <forktest>:
+{
+    2c80:	55                   	push   %ebp
+    2c81:	89 e5                	mov    %esp,%ebp
+    2c83:	53                   	push   %ebx
+  for(n=0; n<1000; n++){
+    2c84:	31 db                	xor    %ebx,%ebx
+{
+    2c86:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "fork test\n");
+    2c89:	68 18 4b 00 00       	push   $0x4b18
+    2c8e:	6a 01                	push   $0x1
+    2c90:	e8 7b 0d 00 00       	call   3a10 <printf>
+    2c95:	83 c4 10             	add    $0x10,%esp
+    2c98:	eb 13                	jmp    2cad <forktest+0x2d>
+    2c9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(pid == 0)
+    2ca0:	74 62                	je     2d04 <forktest+0x84>
+  for(n=0; n<1000; n++){
+    2ca2:	83 c3 01             	add    $0x1,%ebx
+    2ca5:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+    2cab:	74 43                	je     2cf0 <forktest+0x70>
+    pid = fork();
+    2cad:	e8 e8 0b 00 00       	call   389a <fork>
+    if(pid < 0)
+    2cb2:	85 c0                	test   %eax,%eax
+    2cb4:	79 ea                	jns    2ca0 <forktest+0x20>
+  for(; n > 0; n--){
+    2cb6:	85 db                	test   %ebx,%ebx
+    2cb8:	74 14                	je     2cce <forktest+0x4e>
+    2cba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(wait() < 0){
+    2cc0:	e8 e5 0b 00 00       	call   38aa <wait>
+    2cc5:	85 c0                	test   %eax,%eax
+    2cc7:	78 40                	js     2d09 <forktest+0x89>
+  for(; n > 0; n--){
+    2cc9:	83 eb 01             	sub    $0x1,%ebx
+    2ccc:	75 f2                	jne    2cc0 <forktest+0x40>
+  if(wait() != -1){
+    2cce:	e8 d7 0b 00 00       	call   38aa <wait>
+    2cd3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2cd6:	75 45                	jne    2d1d <forktest+0x9d>
+  printf(1, "fork test OK\n");
+    2cd8:	83 ec 08             	sub    $0x8,%esp
+    2cdb:	68 4a 4b 00 00       	push   $0x4b4a
+    2ce0:	6a 01                	push   $0x1
+    2ce2:	e8 29 0d 00 00       	call   3a10 <printf>
+}
+    2ce7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2cea:	c9                   	leave  
+    2ceb:	c3                   	ret    
+    2cec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    printf(1, "fork claimed to work 1000 times!\n");
+    2cf0:	83 ec 08             	sub    $0x8,%esp
+    2cf3:	68 b8 52 00 00       	push   $0x52b8
+    2cf8:	6a 01                	push   $0x1
+    2cfa:	e8 11 0d 00 00       	call   3a10 <printf>
+    exit();
+    2cff:	e8 9e 0b 00 00       	call   38a2 <exit>
+      exit();
+    2d04:	e8 99 0b 00 00       	call   38a2 <exit>
+      printf(1, "wait stopped early\n");
+    2d09:	83 ec 08             	sub    $0x8,%esp
+    2d0c:	68 23 4b 00 00       	push   $0x4b23
+    2d11:	6a 01                	push   $0x1
+    2d13:	e8 f8 0c 00 00       	call   3a10 <printf>
+      exit();
+    2d18:	e8 85 0b 00 00       	call   38a2 <exit>
+    printf(1, "wait got too many\n");
+    2d1d:	50                   	push   %eax
+    2d1e:	50                   	push   %eax
+    2d1f:	68 37 4b 00 00       	push   $0x4b37
+    2d24:	6a 01                	push   $0x1
+    2d26:	e8 e5 0c 00 00       	call   3a10 <printf>
+    exit();
+    2d2b:	e8 72 0b 00 00       	call   38a2 <exit>
+
+00002d30 <sbrktest>:
+{
+    2d30:	55                   	push   %ebp
+    2d31:	89 e5                	mov    %esp,%ebp
+    2d33:	57                   	push   %edi
+    2d34:	56                   	push   %esi
+    2d35:	53                   	push   %ebx
+  for(i = 0; i < 5000; i++){
+    2d36:	31 ff                	xor    %edi,%edi
+{
+    2d38:	83 ec 64             	sub    $0x64,%esp
+  printf(stdout, "sbrk test\n");
+    2d3b:	68 58 4b 00 00       	push   $0x4b58
+    2d40:	ff 35 18 5e 00 00    	pushl  0x5e18
+    2d46:	e8 c5 0c 00 00       	call   3a10 <printf>
+  oldbrk = sbrk(0);
+    2d4b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2d52:	e8 d3 0b 00 00       	call   392a <sbrk>
+  a = sbrk(0);
+    2d57:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  oldbrk = sbrk(0);
+    2d5e:	89 c3                	mov    %eax,%ebx
+  a = sbrk(0);
+    2d60:	e8 c5 0b 00 00       	call   392a <sbrk>
+    2d65:	83 c4 10             	add    $0x10,%esp
+    2d68:	89 c6                	mov    %eax,%esi
+    2d6a:	eb 06                	jmp    2d72 <sbrktest+0x42>
+    2d6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    a = b + 1;
+    2d70:	89 c6                	mov    %eax,%esi
+    b = sbrk(1);
+    2d72:	83 ec 0c             	sub    $0xc,%esp
+    2d75:	6a 01                	push   $0x1
+    2d77:	e8 ae 0b 00 00       	call   392a <sbrk>
+    if(b != a){
+    2d7c:	83 c4 10             	add    $0x10,%esp
+    2d7f:	39 f0                	cmp    %esi,%eax
+    2d81:	0f 85 62 02 00 00    	jne    2fe9 <sbrktest+0x2b9>
+  for(i = 0; i < 5000; i++){
+    2d87:	83 c7 01             	add    $0x1,%edi
+    *b = 1;
+    2d8a:	c6 06 01             	movb   $0x1,(%esi)
+    a = b + 1;
+    2d8d:	8d 46 01             	lea    0x1(%esi),%eax
+  for(i = 0; i < 5000; i++){
+    2d90:	81 ff 88 13 00 00    	cmp    $0x1388,%edi
+    2d96:	75 d8                	jne    2d70 <sbrktest+0x40>
+  pid = fork();
+    2d98:	e8 fd 0a 00 00       	call   389a <fork>
+  if(pid < 0){
+    2d9d:	85 c0                	test   %eax,%eax
+  pid = fork();
+    2d9f:	89 c7                	mov    %eax,%edi
+  if(pid < 0){
+    2da1:	0f 88 82 03 00 00    	js     3129 <sbrktest+0x3f9>
+  c = sbrk(1);
+    2da7:	83 ec 0c             	sub    $0xc,%esp
+  if(c != a + 1){
+    2daa:	83 c6 02             	add    $0x2,%esi
+  c = sbrk(1);
+    2dad:	6a 01                	push   $0x1
+    2daf:	e8 76 0b 00 00       	call   392a <sbrk>
+  c = sbrk(1);
+    2db4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2dbb:	e8 6a 0b 00 00       	call   392a <sbrk>
+  if(c != a + 1){
+    2dc0:	83 c4 10             	add    $0x10,%esp
+    2dc3:	39 f0                	cmp    %esi,%eax
+    2dc5:	0f 85 47 03 00 00    	jne    3112 <sbrktest+0x3e2>
+  if(pid == 0)
+    2dcb:	85 ff                	test   %edi,%edi
+    2dcd:	0f 84 3a 03 00 00    	je     310d <sbrktest+0x3dd>
+  wait();
+    2dd3:	e8 d2 0a 00 00       	call   38aa <wait>
+  a = sbrk(0);
+    2dd8:	83 ec 0c             	sub    $0xc,%esp
+    2ddb:	6a 00                	push   $0x0
+    2ddd:	e8 48 0b 00 00       	call   392a <sbrk>
+    2de2:	89 c6                	mov    %eax,%esi
+  amt = (BIG) - (uint)a;
+    2de4:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    2de9:	29 f0                	sub    %esi,%eax
+  p = sbrk(amt);
+    2deb:	89 04 24             	mov    %eax,(%esp)
+    2dee:	e8 37 0b 00 00       	call   392a <sbrk>
+  if (p != a) {
+    2df3:	83 c4 10             	add    $0x10,%esp
+    2df6:	39 c6                	cmp    %eax,%esi
+    2df8:	0f 85 f8 02 00 00    	jne    30f6 <sbrktest+0x3c6>
+  a = sbrk(0);
+    2dfe:	83 ec 0c             	sub    $0xc,%esp
+  *lastaddr = 99;
+    2e01:	c6 05 ff ff 3f 06 63 	movb   $0x63,0x63fffff
+  a = sbrk(0);
+    2e08:	6a 00                	push   $0x0
+    2e0a:	e8 1b 0b 00 00       	call   392a <sbrk>
+  c = sbrk(-4096);
+    2e0f:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
+  a = sbrk(0);
+    2e16:	89 c6                	mov    %eax,%esi
+  c = sbrk(-4096);
+    2e18:	e8 0d 0b 00 00       	call   392a <sbrk>
+  if(c == (char*)0xffffffff){
+    2e1d:	83 c4 10             	add    $0x10,%esp
+    2e20:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2e23:	0f 84 b6 02 00 00    	je     30df <sbrktest+0x3af>
+  c = sbrk(0);
+    2e29:	83 ec 0c             	sub    $0xc,%esp
+    2e2c:	6a 00                	push   $0x0
+    2e2e:	e8 f7 0a 00 00       	call   392a <sbrk>
+  if(c != a - 4096){
+    2e33:	8d 96 00 f0 ff ff    	lea    -0x1000(%esi),%edx
+    2e39:	83 c4 10             	add    $0x10,%esp
+    2e3c:	39 d0                	cmp    %edx,%eax
+    2e3e:	0f 85 84 02 00 00    	jne    30c8 <sbrktest+0x398>
+  a = sbrk(0);
+    2e44:	83 ec 0c             	sub    $0xc,%esp
+    2e47:	6a 00                	push   $0x0
+    2e49:	e8 dc 0a 00 00       	call   392a <sbrk>
+    2e4e:	89 c6                	mov    %eax,%esi
+  c = sbrk(4096);
+    2e50:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+    2e57:	e8 ce 0a 00 00       	call   392a <sbrk>
+  if(c != a || sbrk(0) != a + 4096){
+    2e5c:	83 c4 10             	add    $0x10,%esp
+    2e5f:	39 c6                	cmp    %eax,%esi
+  c = sbrk(4096);
+    2e61:	89 c7                	mov    %eax,%edi
+  if(c != a || sbrk(0) != a + 4096){
+    2e63:	0f 85 48 02 00 00    	jne    30b1 <sbrktest+0x381>
+    2e69:	83 ec 0c             	sub    $0xc,%esp
+    2e6c:	6a 00                	push   $0x0
+    2e6e:	e8 b7 0a 00 00       	call   392a <sbrk>
+    2e73:	8d 96 00 10 00 00    	lea    0x1000(%esi),%edx
+    2e79:	83 c4 10             	add    $0x10,%esp
+    2e7c:	39 d0                	cmp    %edx,%eax
+    2e7e:	0f 85 2d 02 00 00    	jne    30b1 <sbrktest+0x381>
+  if(*lastaddr == 99){
+    2e84:	80 3d ff ff 3f 06 63 	cmpb   $0x63,0x63fffff
+    2e8b:	0f 84 09 02 00 00    	je     309a <sbrktest+0x36a>
+  a = sbrk(0);
+    2e91:	83 ec 0c             	sub    $0xc,%esp
+    2e94:	6a 00                	push   $0x0
+    2e96:	e8 8f 0a 00 00       	call   392a <sbrk>
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2e9b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  a = sbrk(0);
+    2ea2:	89 c6                	mov    %eax,%esi
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2ea4:	e8 81 0a 00 00       	call   392a <sbrk>
+    2ea9:	89 d9                	mov    %ebx,%ecx
+    2eab:	29 c1                	sub    %eax,%ecx
+    2ead:	89 0c 24             	mov    %ecx,(%esp)
+    2eb0:	e8 75 0a 00 00       	call   392a <sbrk>
+  if(c != a){
+    2eb5:	83 c4 10             	add    $0x10,%esp
+    2eb8:	39 c6                	cmp    %eax,%esi
+    2eba:	0f 85 c3 01 00 00    	jne    3083 <sbrktest+0x353>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2ec0:	be 00 00 00 80       	mov    $0x80000000,%esi
+    ppid = getpid();
+    2ec5:	e8 58 0a 00 00       	call   3922 <getpid>
+    2eca:	89 c7                	mov    %eax,%edi
+    pid = fork();
+    2ecc:	e8 c9 09 00 00       	call   389a <fork>
+    if(pid < 0){
+    2ed1:	85 c0                	test   %eax,%eax
+    2ed3:	0f 88 93 01 00 00    	js     306c <sbrktest+0x33c>
+    if(pid == 0){
+    2ed9:	0f 84 6b 01 00 00    	je     304a <sbrktest+0x31a>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2edf:	81 c6 50 c3 00 00    	add    $0xc350,%esi
+    wait();
+    2ee5:	e8 c0 09 00 00       	call   38aa <wait>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2eea:	81 fe 80 84 1e 80    	cmp    $0x801e8480,%esi
+    2ef0:	75 d3                	jne    2ec5 <sbrktest+0x195>
+  if(pipe(fds) != 0){
+    2ef2:	8d 45 b8             	lea    -0x48(%ebp),%eax
+    2ef5:	83 ec 0c             	sub    $0xc,%esp
+    2ef8:	50                   	push   %eax
+    2ef9:	e8 b4 09 00 00       	call   38b2 <pipe>
+    2efe:	83 c4 10             	add    $0x10,%esp
+    2f01:	85 c0                	test   %eax,%eax
+    2f03:	0f 85 2e 01 00 00    	jne    3037 <sbrktest+0x307>
+    2f09:	8d 7d c0             	lea    -0x40(%ebp),%edi
+    2f0c:	89 fe                	mov    %edi,%esi
+    2f0e:	eb 23                	jmp    2f33 <sbrktest+0x203>
+    if(pids[i] != -1)
+    2f10:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2f13:	74 14                	je     2f29 <sbrktest+0x1f9>
+      read(fds[0], &scratch, 1);
+    2f15:	8d 45 b7             	lea    -0x49(%ebp),%eax
+    2f18:	83 ec 04             	sub    $0x4,%esp
+    2f1b:	6a 01                	push   $0x1
+    2f1d:	50                   	push   %eax
+    2f1e:	ff 75 b8             	pushl  -0x48(%ebp)
+    2f21:	e8 94 09 00 00       	call   38ba <read>
+    2f26:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2f29:	8d 45 e8             	lea    -0x18(%ebp),%eax
+    2f2c:	83 c6 04             	add    $0x4,%esi
+    2f2f:	39 c6                	cmp    %eax,%esi
+    2f31:	74 4f                	je     2f82 <sbrktest+0x252>
+    if((pids[i] = fork()) == 0){
+    2f33:	e8 62 09 00 00       	call   389a <fork>
+    2f38:	85 c0                	test   %eax,%eax
+    2f3a:	89 06                	mov    %eax,(%esi)
+    2f3c:	75 d2                	jne    2f10 <sbrktest+0x1e0>
+      sbrk(BIG - (uint)sbrk(0));
+    2f3e:	83 ec 0c             	sub    $0xc,%esp
+    2f41:	6a 00                	push   $0x0
+    2f43:	e8 e2 09 00 00       	call   392a <sbrk>
+    2f48:	ba 00 00 40 06       	mov    $0x6400000,%edx
+    2f4d:	29 c2                	sub    %eax,%edx
+    2f4f:	89 14 24             	mov    %edx,(%esp)
+    2f52:	e8 d3 09 00 00       	call   392a <sbrk>
+      write(fds[1], "x", 1);
+    2f57:	83 c4 0c             	add    $0xc,%esp
+    2f5a:	6a 01                	push   $0x1
+    2f5c:	68 c1 46 00 00       	push   $0x46c1
+    2f61:	ff 75 bc             	pushl  -0x44(%ebp)
+    2f64:	e8 59 09 00 00       	call   38c2 <write>
+    2f69:	83 c4 10             	add    $0x10,%esp
+    2f6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      for(;;) sleep(1000);
+    2f70:	83 ec 0c             	sub    $0xc,%esp
+    2f73:	68 e8 03 00 00       	push   $0x3e8
+    2f78:	e8 b5 09 00 00       	call   3932 <sleep>
+    2f7d:	83 c4 10             	add    $0x10,%esp
+    2f80:	eb ee                	jmp    2f70 <sbrktest+0x240>
+  c = sbrk(4096);
+    2f82:	83 ec 0c             	sub    $0xc,%esp
+    2f85:	68 00 10 00 00       	push   $0x1000
+    2f8a:	e8 9b 09 00 00       	call   392a <sbrk>
+    2f8f:	83 c4 10             	add    $0x10,%esp
+    2f92:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+    if(pids[i] == -1)
+    2f95:	8b 07                	mov    (%edi),%eax
+    2f97:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2f9a:	74 11                	je     2fad <sbrktest+0x27d>
+    kill(pids[i]);
+    2f9c:	83 ec 0c             	sub    $0xc,%esp
+    2f9f:	50                   	push   %eax
+    2fa0:	e8 2d 09 00 00       	call   38d2 <kill>
+    wait();
+    2fa5:	e8 00 09 00 00       	call   38aa <wait>
+    2faa:	83 c4 10             	add    $0x10,%esp
+    2fad:	83 c7 04             	add    $0x4,%edi
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2fb0:	39 fe                	cmp    %edi,%esi
+    2fb2:	75 e1                	jne    2f95 <sbrktest+0x265>
+  if(c == (char*)0xffffffff){
+    2fb4:	83 7d a4 ff          	cmpl   $0xffffffff,-0x5c(%ebp)
+    2fb8:	74 66                	je     3020 <sbrktest+0x2f0>
+  if(sbrk(0) > oldbrk)
+    2fba:	83 ec 0c             	sub    $0xc,%esp
+    2fbd:	6a 00                	push   $0x0
+    2fbf:	e8 66 09 00 00       	call   392a <sbrk>
+    2fc4:	83 c4 10             	add    $0x10,%esp
+    2fc7:	39 d8                	cmp    %ebx,%eax
+    2fc9:	77 3c                	ja     3007 <sbrktest+0x2d7>
+  printf(stdout, "sbrk test OK\n");
+    2fcb:	83 ec 08             	sub    $0x8,%esp
+    2fce:	68 00 4c 00 00       	push   $0x4c00
+    2fd3:	ff 35 18 5e 00 00    	pushl  0x5e18
+    2fd9:	e8 32 0a 00 00       	call   3a10 <printf>
+}
+    2fde:	83 c4 10             	add    $0x10,%esp
+    2fe1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    2fe4:	5b                   	pop    %ebx
+    2fe5:	5e                   	pop    %esi
+    2fe6:	5f                   	pop    %edi
+    2fe7:	5d                   	pop    %ebp
+    2fe8:	c3                   	ret    
+      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
+    2fe9:	83 ec 0c             	sub    $0xc,%esp
+    2fec:	50                   	push   %eax
+    2fed:	56                   	push   %esi
+    2fee:	57                   	push   %edi
+    2fef:	68 63 4b 00 00       	push   $0x4b63
+    2ff4:	ff 35 18 5e 00 00    	pushl  0x5e18
+    2ffa:	e8 11 0a 00 00       	call   3a10 <printf>
+      exit();
+    2fff:	83 c4 20             	add    $0x20,%esp
+    3002:	e8 9b 08 00 00       	call   38a2 <exit>
+    sbrk(-(sbrk(0) - oldbrk));
+    3007:	83 ec 0c             	sub    $0xc,%esp
+    300a:	6a 00                	push   $0x0
+    300c:	e8 19 09 00 00       	call   392a <sbrk>
+    3011:	29 c3                	sub    %eax,%ebx
+    3013:	89 1c 24             	mov    %ebx,(%esp)
+    3016:	e8 0f 09 00 00       	call   392a <sbrk>
+    301b:	83 c4 10             	add    $0x10,%esp
+    301e:	eb ab                	jmp    2fcb <sbrktest+0x29b>
+    printf(stdout, "failed sbrk leaked memory\n");
+    3020:	50                   	push   %eax
+    3021:	50                   	push   %eax
+    3022:	68 e5 4b 00 00       	push   $0x4be5
+    3027:	ff 35 18 5e 00 00    	pushl  0x5e18
+    302d:	e8 de 09 00 00       	call   3a10 <printf>
+    exit();
+    3032:	e8 6b 08 00 00       	call   38a2 <exit>
+    printf(1, "pipe() failed\n");
+    3037:	52                   	push   %edx
+    3038:	52                   	push   %edx
+    3039:	68 a1 40 00 00       	push   $0x40a1
+    303e:	6a 01                	push   $0x1
+    3040:	e8 cb 09 00 00       	call   3a10 <printf>
+    exit();
+    3045:	e8 58 08 00 00       	call   38a2 <exit>
+      printf(stdout, "oops could read %x = %x\n", a, *a);
+    304a:	0f be 06             	movsbl (%esi),%eax
+    304d:	50                   	push   %eax
+    304e:	56                   	push   %esi
+    304f:	68 cc 4b 00 00       	push   $0x4bcc
+    3054:	ff 35 18 5e 00 00    	pushl  0x5e18
+    305a:	e8 b1 09 00 00       	call   3a10 <printf>
+      kill(ppid);
+    305f:	89 3c 24             	mov    %edi,(%esp)
+    3062:	e8 6b 08 00 00       	call   38d2 <kill>
+      exit();
+    3067:	e8 36 08 00 00       	call   38a2 <exit>
+      printf(stdout, "fork failed\n");
+    306c:	51                   	push   %ecx
+    306d:	51                   	push   %ecx
+    306e:	68 a9 4c 00 00       	push   $0x4ca9
+    3073:	ff 35 18 5e 00 00    	pushl  0x5e18
+    3079:	e8 92 09 00 00       	call   3a10 <printf>
+      exit();
+    307e:	e8 1f 08 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    3083:	50                   	push   %eax
+    3084:	56                   	push   %esi
+    3085:	68 ac 53 00 00       	push   $0x53ac
+    308a:	ff 35 18 5e 00 00    	pushl  0x5e18
+    3090:	e8 7b 09 00 00       	call   3a10 <printf>
+    exit();
+    3095:	e8 08 08 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+    309a:	53                   	push   %ebx
+    309b:	53                   	push   %ebx
+    309c:	68 7c 53 00 00       	push   $0x537c
+    30a1:	ff 35 18 5e 00 00    	pushl  0x5e18
+    30a7:	e8 64 09 00 00       	call   3a10 <printf>
+    exit();
+    30ac:	e8 f1 07 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    30b1:	57                   	push   %edi
+    30b2:	56                   	push   %esi
+    30b3:	68 54 53 00 00       	push   $0x5354
+    30b8:	ff 35 18 5e 00 00    	pushl  0x5e18
+    30be:	e8 4d 09 00 00       	call   3a10 <printf>
+    exit();
+    30c3:	e8 da 07 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
+    30c8:	50                   	push   %eax
+    30c9:	56                   	push   %esi
+    30ca:	68 1c 53 00 00       	push   $0x531c
+    30cf:	ff 35 18 5e 00 00    	pushl  0x5e18
+    30d5:	e8 36 09 00 00       	call   3a10 <printf>
+    exit();
+    30da:	e8 c3 07 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk could not deallocate\n");
+    30df:	56                   	push   %esi
+    30e0:	56                   	push   %esi
+    30e1:	68 b1 4b 00 00       	push   $0x4bb1
+    30e6:	ff 35 18 5e 00 00    	pushl  0x5e18
+    30ec:	e8 1f 09 00 00       	call   3a10 <printf>
+    exit();
+    30f1:	e8 ac 07 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
+    30f6:	57                   	push   %edi
+    30f7:	57                   	push   %edi
+    30f8:	68 dc 52 00 00       	push   $0x52dc
+    30fd:	ff 35 18 5e 00 00    	pushl  0x5e18
+    3103:	e8 08 09 00 00       	call   3a10 <printf>
+    exit();
+    3108:	e8 95 07 00 00       	call   38a2 <exit>
+    exit();
+    310d:	e8 90 07 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk test failed post-fork\n");
+    3112:	50                   	push   %eax
+    3113:	50                   	push   %eax
+    3114:	68 95 4b 00 00       	push   $0x4b95
+    3119:	ff 35 18 5e 00 00    	pushl  0x5e18
+    311f:	e8 ec 08 00 00       	call   3a10 <printf>
+    exit();
+    3124:	e8 79 07 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk test fork failed\n");
+    3129:	50                   	push   %eax
+    312a:	50                   	push   %eax
+    312b:	68 7e 4b 00 00       	push   $0x4b7e
+    3130:	ff 35 18 5e 00 00    	pushl  0x5e18
+    3136:	e8 d5 08 00 00       	call   3a10 <printf>
+    exit();
+    313b:	e8 62 07 00 00       	call   38a2 <exit>
+
+00003140 <validateint>:
+{
+    3140:	55                   	push   %ebp
+    3141:	89 e5                	mov    %esp,%ebp
+}
+    3143:	5d                   	pop    %ebp
+    3144:	c3                   	ret    
+    3145:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003150 <validatetest>:
+{
+    3150:	55                   	push   %ebp
+    3151:	89 e5                	mov    %esp,%ebp
+    3153:	56                   	push   %esi
+    3154:	53                   	push   %ebx
+  for(p = 0; p <= (uint)hi; p += 4096){
+    3155:	31 db                	xor    %ebx,%ebx
+  printf(stdout, "validate test\n");
+    3157:	83 ec 08             	sub    $0x8,%esp
+    315a:	68 0e 4c 00 00       	push   $0x4c0e
+    315f:	ff 35 18 5e 00 00    	pushl  0x5e18
+    3165:	e8 a6 08 00 00       	call   3a10 <printf>
+    316a:	83 c4 10             	add    $0x10,%esp
+    316d:	8d 76 00             	lea    0x0(%esi),%esi
+    if((pid = fork()) == 0){
+    3170:	e8 25 07 00 00       	call   389a <fork>
+    3175:	85 c0                	test   %eax,%eax
+    3177:	89 c6                	mov    %eax,%esi
+    3179:	74 63                	je     31de <validatetest+0x8e>
+    sleep(0);
+    317b:	83 ec 0c             	sub    $0xc,%esp
+    317e:	6a 00                	push   $0x0
+    3180:	e8 ad 07 00 00       	call   3932 <sleep>
+    sleep(0);
+    3185:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    318c:	e8 a1 07 00 00       	call   3932 <sleep>
+    kill(pid);
+    3191:	89 34 24             	mov    %esi,(%esp)
+    3194:	e8 39 07 00 00       	call   38d2 <kill>
+    wait();
+    3199:	e8 0c 07 00 00       	call   38aa <wait>
+    if(link("nosuchfile", (char*)p) != -1){
+    319e:	58                   	pop    %eax
+    319f:	5a                   	pop    %edx
+    31a0:	53                   	push   %ebx
+    31a1:	68 1d 4c 00 00       	push   $0x4c1d
+    31a6:	e8 57 07 00 00       	call   3902 <link>
+    31ab:	83 c4 10             	add    $0x10,%esp
+    31ae:	83 f8 ff             	cmp    $0xffffffff,%eax
+    31b1:	75 30                	jne    31e3 <validatetest+0x93>
+  for(p = 0; p <= (uint)hi; p += 4096){
+    31b3:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    31b9:	81 fb 00 40 11 00    	cmp    $0x114000,%ebx
+    31bf:	75 af                	jne    3170 <validatetest+0x20>
+  printf(stdout, "validate ok\n");
+    31c1:	83 ec 08             	sub    $0x8,%esp
+    31c4:	68 41 4c 00 00       	push   $0x4c41
+    31c9:	ff 35 18 5e 00 00    	pushl  0x5e18
+    31cf:	e8 3c 08 00 00       	call   3a10 <printf>
+}
+    31d4:	83 c4 10             	add    $0x10,%esp
+    31d7:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    31da:	5b                   	pop    %ebx
+    31db:	5e                   	pop    %esi
+    31dc:	5d                   	pop    %ebp
+    31dd:	c3                   	ret    
+      exit();
+    31de:	e8 bf 06 00 00       	call   38a2 <exit>
+      printf(stdout, "link should not succeed\n");
+    31e3:	83 ec 08             	sub    $0x8,%esp
+    31e6:	68 28 4c 00 00       	push   $0x4c28
+    31eb:	ff 35 18 5e 00 00    	pushl  0x5e18
+    31f1:	e8 1a 08 00 00       	call   3a10 <printf>
+      exit();
+    31f6:	e8 a7 06 00 00       	call   38a2 <exit>
+    31fb:	90                   	nop
+    31fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003200 <bsstest>:
+{
+    3200:	55                   	push   %ebp
+    3201:	89 e5                	mov    %esp,%ebp
+    3203:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "bss test\n");
+    3206:	68 4e 4c 00 00       	push   $0x4c4e
+    320b:	ff 35 18 5e 00 00    	pushl  0x5e18
+    3211:	e8 fa 07 00 00       	call   3a10 <printf>
+    if(uninit[i] != '\0'){
+    3216:	83 c4 10             	add    $0x10,%esp
+    3219:	80 3d e0 5e 00 00 00 	cmpb   $0x0,0x5ee0
+    3220:	75 39                	jne    325b <bsstest+0x5b>
+  for(i = 0; i < sizeof(uninit); i++){
+    3222:	b8 01 00 00 00       	mov    $0x1,%eax
+    3227:	89 f6                	mov    %esi,%esi
+    3229:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    if(uninit[i] != '\0'){
+    3230:	80 b8 e0 5e 00 00 00 	cmpb   $0x0,0x5ee0(%eax)
+    3237:	75 22                	jne    325b <bsstest+0x5b>
+  for(i = 0; i < sizeof(uninit); i++){
+    3239:	83 c0 01             	add    $0x1,%eax
+    323c:	3d 10 27 00 00       	cmp    $0x2710,%eax
+    3241:	75 ed                	jne    3230 <bsstest+0x30>
+  printf(stdout, "bss test ok\n");
+    3243:	83 ec 08             	sub    $0x8,%esp
+    3246:	68 69 4c 00 00       	push   $0x4c69
+    324b:	ff 35 18 5e 00 00    	pushl  0x5e18
+    3251:	e8 ba 07 00 00       	call   3a10 <printf>
+}
+    3256:	83 c4 10             	add    $0x10,%esp
+    3259:	c9                   	leave  
+    325a:	c3                   	ret    
+      printf(stdout, "bss test failed\n");
+    325b:	83 ec 08             	sub    $0x8,%esp
+    325e:	68 58 4c 00 00       	push   $0x4c58
+    3263:	ff 35 18 5e 00 00    	pushl  0x5e18
+    3269:	e8 a2 07 00 00       	call   3a10 <printf>
+      exit();
+    326e:	e8 2f 06 00 00       	call   38a2 <exit>
+    3273:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3279:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003280 <bigargtest>:
+{
+    3280:	55                   	push   %ebp
+    3281:	89 e5                	mov    %esp,%ebp
+    3283:	83 ec 14             	sub    $0x14,%esp
+  unlink("bigarg-ok");
+    3286:	68 76 4c 00 00       	push   $0x4c76
+    328b:	e8 62 06 00 00       	call   38f2 <unlink>
+  pid = fork();
+    3290:	e8 05 06 00 00       	call   389a <fork>
+  if(pid == 0){
+    3295:	83 c4 10             	add    $0x10,%esp
+    3298:	85 c0                	test   %eax,%eax
+    329a:	74 3f                	je     32db <bigargtest+0x5b>
+  } else if(pid < 0){
+    329c:	0f 88 c2 00 00 00    	js     3364 <bigargtest+0xe4>
+  wait();
+    32a2:	e8 03 06 00 00       	call   38aa <wait>
+  fd = open("bigarg-ok", 0);
+    32a7:	83 ec 08             	sub    $0x8,%esp
+    32aa:	6a 00                	push   $0x0
+    32ac:	68 76 4c 00 00       	push   $0x4c76
+    32b1:	e8 2c 06 00 00       	call   38e2 <open>
+  if(fd < 0){
+    32b6:	83 c4 10             	add    $0x10,%esp
+    32b9:	85 c0                	test   %eax,%eax
+    32bb:	0f 88 8c 00 00 00    	js     334d <bigargtest+0xcd>
+  close(fd);
+    32c1:	83 ec 0c             	sub    $0xc,%esp
+    32c4:	50                   	push   %eax
+    32c5:	e8 00 06 00 00       	call   38ca <close>
+  unlink("bigarg-ok");
+    32ca:	c7 04 24 76 4c 00 00 	movl   $0x4c76,(%esp)
+    32d1:	e8 1c 06 00 00       	call   38f2 <unlink>
+}
+    32d6:	83 c4 10             	add    $0x10,%esp
+    32d9:	c9                   	leave  
+    32da:	c3                   	ret    
+    32db:	b8 40 5e 00 00       	mov    $0x5e40,%eax
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    32e0:	c7 00 d0 53 00 00    	movl   $0x53d0,(%eax)
+    32e6:	83 c0 04             	add    $0x4,%eax
+    for(i = 0; i < MAXARG-1; i++)
+    32e9:	3d bc 5e 00 00       	cmp    $0x5ebc,%eax
+    32ee:	75 f0                	jne    32e0 <bigargtest+0x60>
+    printf(stdout, "bigarg test\n");
+    32f0:	51                   	push   %ecx
+    32f1:	51                   	push   %ecx
+    32f2:	68 80 4c 00 00       	push   $0x4c80
+    32f7:	ff 35 18 5e 00 00    	pushl  0x5e18
+    args[MAXARG-1] = 0;
+    32fd:	c7 05 bc 5e 00 00 00 	movl   $0x0,0x5ebc
+    3304:	00 00 00 
+    printf(stdout, "bigarg test\n");
+    3307:	e8 04 07 00 00       	call   3a10 <printf>
+    exec("echo", args);
+    330c:	58                   	pop    %eax
+    330d:	5a                   	pop    %edx
+    330e:	68 40 5e 00 00       	push   $0x5e40
+    3313:	68 4d 3e 00 00       	push   $0x3e4d
+    3318:	e8 bd 05 00 00       	call   38da <exec>
+    printf(stdout, "bigarg test ok\n");
+    331d:	59                   	pop    %ecx
+    331e:	58                   	pop    %eax
+    331f:	68 8d 4c 00 00       	push   $0x4c8d
+    3324:	ff 35 18 5e 00 00    	pushl  0x5e18
+    332a:	e8 e1 06 00 00       	call   3a10 <printf>
+    fd = open("bigarg-ok", O_CREATE);
+    332f:	58                   	pop    %eax
+    3330:	5a                   	pop    %edx
+    3331:	68 00 02 00 00       	push   $0x200
+    3336:	68 76 4c 00 00       	push   $0x4c76
+    333b:	e8 a2 05 00 00       	call   38e2 <open>
+    close(fd);
+    3340:	89 04 24             	mov    %eax,(%esp)
+    3343:	e8 82 05 00 00       	call   38ca <close>
+    exit();
+    3348:	e8 55 05 00 00       	call   38a2 <exit>
+    printf(stdout, "bigarg test failed!\n");
+    334d:	50                   	push   %eax
+    334e:	50                   	push   %eax
+    334f:	68 b6 4c 00 00       	push   $0x4cb6
+    3354:	ff 35 18 5e 00 00    	pushl  0x5e18
+    335a:	e8 b1 06 00 00       	call   3a10 <printf>
+    exit();
+    335f:	e8 3e 05 00 00       	call   38a2 <exit>
+    printf(stdout, "bigargtest: fork failed\n");
+    3364:	52                   	push   %edx
+    3365:	52                   	push   %edx
+    3366:	68 9d 4c 00 00       	push   $0x4c9d
+    336b:	ff 35 18 5e 00 00    	pushl  0x5e18
+    3371:	e8 9a 06 00 00       	call   3a10 <printf>
+    exit();
+    3376:	e8 27 05 00 00       	call   38a2 <exit>
+    337b:	90                   	nop
+    337c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003380 <fsfull>:
+{
+    3380:	55                   	push   %ebp
+    3381:	89 e5                	mov    %esp,%ebp
+    3383:	57                   	push   %edi
+    3384:	56                   	push   %esi
+    3385:	53                   	push   %ebx
+  for(nfiles = 0; ; nfiles++){
+    3386:	31 db                	xor    %ebx,%ebx
+{
+    3388:	83 ec 54             	sub    $0x54,%esp
+  printf(1, "fsfull test\n");
+    338b:	68 cb 4c 00 00       	push   $0x4ccb
+    3390:	6a 01                	push   $0x1
+    3392:	e8 79 06 00 00       	call   3a10 <printf>
+    3397:	83 c4 10             	add    $0x10,%esp
+    339a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    name[1] = '0' + nfiles / 1000;
+    33a0:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    33a5:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
+    printf(1, "writing %s\n", name);
+    33aa:	83 ec 04             	sub    $0x4,%esp
+    name[1] = '0' + nfiles / 1000;
+    33ad:	f7 e3                	mul    %ebx
+    name[0] = 'f';
+    33af:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[5] = '\0';
+    33b3:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    33b7:	c1 ea 06             	shr    $0x6,%edx
+    33ba:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33bd:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    33c3:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33c6:	89 d8                	mov    %ebx,%eax
+    33c8:	29 d0                	sub    %edx,%eax
+    33ca:	89 c2                	mov    %eax,%edx
+    33cc:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    33d1:	f7 e2                	mul    %edx
+    name[3] = '0' + (nfiles % 100) / 10;
+    33d3:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33d8:	c1 ea 05             	shr    $0x5,%edx
+    33db:	83 c2 30             	add    $0x30,%edx
+    33de:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    33e1:	f7 e3                	mul    %ebx
+    33e3:	89 d8                	mov    %ebx,%eax
+    33e5:	c1 ea 05             	shr    $0x5,%edx
+    33e8:	6b d2 64             	imul   $0x64,%edx,%edx
+    33eb:	29 d0                	sub    %edx,%eax
+    33ed:	f7 e1                	mul    %ecx
+    name[4] = '0' + (nfiles % 10);
+    33ef:	89 d8                	mov    %ebx,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    33f1:	c1 ea 03             	shr    $0x3,%edx
+    33f4:	83 c2 30             	add    $0x30,%edx
+    33f7:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    33fa:	f7 e1                	mul    %ecx
+    33fc:	89 d9                	mov    %ebx,%ecx
+    33fe:	c1 ea 03             	shr    $0x3,%edx
+    3401:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    3404:	01 c0                	add    %eax,%eax
+    3406:	29 c1                	sub    %eax,%ecx
+    3408:	89 c8                	mov    %ecx,%eax
+    340a:	83 c0 30             	add    $0x30,%eax
+    340d:	88 45 ac             	mov    %al,-0x54(%ebp)
+    printf(1, "writing %s\n", name);
+    3410:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3413:	50                   	push   %eax
+    3414:	68 d8 4c 00 00       	push   $0x4cd8
+    3419:	6a 01                	push   $0x1
+    341b:	e8 f0 05 00 00       	call   3a10 <printf>
+    int fd = open(name, O_CREATE|O_RDWR);
+    3420:	58                   	pop    %eax
+    3421:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3424:	5a                   	pop    %edx
+    3425:	68 02 02 00 00       	push   $0x202
+    342a:	50                   	push   %eax
+    342b:	e8 b2 04 00 00       	call   38e2 <open>
+    if(fd < 0){
+    3430:	83 c4 10             	add    $0x10,%esp
+    3433:	85 c0                	test   %eax,%eax
+    int fd = open(name, O_CREATE|O_RDWR);
+    3435:	89 c7                	mov    %eax,%edi
+    if(fd < 0){
+    3437:	78 57                	js     3490 <fsfull+0x110>
+    int total = 0;
+    3439:	31 f6                	xor    %esi,%esi
+    343b:	eb 05                	jmp    3442 <fsfull+0xc2>
+    343d:	8d 76 00             	lea    0x0(%esi),%esi
+      total += cc;
+    3440:	01 c6                	add    %eax,%esi
+      int cc = write(fd, buf, 512);
+    3442:	83 ec 04             	sub    $0x4,%esp
+    3445:	68 00 02 00 00       	push   $0x200
+    344a:	68 00 86 00 00       	push   $0x8600
+    344f:	57                   	push   %edi
+    3450:	e8 6d 04 00 00       	call   38c2 <write>
+      if(cc < 512)
+    3455:	83 c4 10             	add    $0x10,%esp
+    3458:	3d ff 01 00 00       	cmp    $0x1ff,%eax
+    345d:	7f e1                	jg     3440 <fsfull+0xc0>
+    printf(1, "wrote %d bytes\n", total);
+    345f:	83 ec 04             	sub    $0x4,%esp
+    3462:	56                   	push   %esi
+    3463:	68 f4 4c 00 00       	push   $0x4cf4
+    3468:	6a 01                	push   $0x1
+    346a:	e8 a1 05 00 00       	call   3a10 <printf>
+    close(fd);
+    346f:	89 3c 24             	mov    %edi,(%esp)
+    3472:	e8 53 04 00 00       	call   38ca <close>
+    if(total == 0)
+    3477:	83 c4 10             	add    $0x10,%esp
+    347a:	85 f6                	test   %esi,%esi
+    347c:	74 28                	je     34a6 <fsfull+0x126>
+  for(nfiles = 0; ; nfiles++){
+    347e:	83 c3 01             	add    $0x1,%ebx
+    3481:	e9 1a ff ff ff       	jmp    33a0 <fsfull+0x20>
+    3486:	8d 76 00             	lea    0x0(%esi),%esi
+    3489:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      printf(1, "open %s failed\n", name);
+    3490:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3493:	83 ec 04             	sub    $0x4,%esp
+    3496:	50                   	push   %eax
+    3497:	68 e4 4c 00 00       	push   $0x4ce4
+    349c:	6a 01                	push   $0x1
+    349e:	e8 6d 05 00 00       	call   3a10 <printf>
+      break;
+    34a3:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + nfiles / 1000;
+    34a6:	bf d3 4d 62 10       	mov    $0x10624dd3,%edi
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34ab:	be 1f 85 eb 51       	mov    $0x51eb851f,%esi
+    name[1] = '0' + nfiles / 1000;
+    34b0:	89 d8                	mov    %ebx,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    34b2:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
+    unlink(name);
+    34b7:	83 ec 0c             	sub    $0xc,%esp
+    name[1] = '0' + nfiles / 1000;
+    34ba:	f7 e7                	mul    %edi
+    name[0] = 'f';
+    34bc:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[5] = '\0';
+    34c0:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    34c4:	c1 ea 06             	shr    $0x6,%edx
+    34c7:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34ca:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    34d0:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34d3:	89 d8                	mov    %ebx,%eax
+    34d5:	29 d0                	sub    %edx,%eax
+    34d7:	f7 e6                	mul    %esi
+    name[3] = '0' + (nfiles % 100) / 10;
+    34d9:	89 d8                	mov    %ebx,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34db:	c1 ea 05             	shr    $0x5,%edx
+    34de:	83 c2 30             	add    $0x30,%edx
+    34e1:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    34e4:	f7 e6                	mul    %esi
+    34e6:	89 d8                	mov    %ebx,%eax
+    34e8:	c1 ea 05             	shr    $0x5,%edx
+    34eb:	6b d2 64             	imul   $0x64,%edx,%edx
+    34ee:	29 d0                	sub    %edx,%eax
+    34f0:	f7 e1                	mul    %ecx
+    name[4] = '0' + (nfiles % 10);
+    34f2:	89 d8                	mov    %ebx,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    34f4:	c1 ea 03             	shr    $0x3,%edx
+    34f7:	83 c2 30             	add    $0x30,%edx
+    34fa:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    34fd:	f7 e1                	mul    %ecx
+    34ff:	89 d9                	mov    %ebx,%ecx
+    nfiles--;
+    3501:	83 eb 01             	sub    $0x1,%ebx
+    name[4] = '0' + (nfiles % 10);
+    3504:	c1 ea 03             	shr    $0x3,%edx
+    3507:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    350a:	01 c0                	add    %eax,%eax
+    350c:	29 c1                	sub    %eax,%ecx
+    350e:	89 c8                	mov    %ecx,%eax
+    3510:	83 c0 30             	add    $0x30,%eax
+    3513:	88 45 ac             	mov    %al,-0x54(%ebp)
+    unlink(name);
+    3516:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3519:	50                   	push   %eax
+    351a:	e8 d3 03 00 00       	call   38f2 <unlink>
+  while(nfiles >= 0){
+    351f:	83 c4 10             	add    $0x10,%esp
+    3522:	83 fb ff             	cmp    $0xffffffff,%ebx
+    3525:	75 89                	jne    34b0 <fsfull+0x130>
+  printf(1, "fsfull test finished\n");
+    3527:	83 ec 08             	sub    $0x8,%esp
+    352a:	68 04 4d 00 00       	push   $0x4d04
+    352f:	6a 01                	push   $0x1
+    3531:	e8 da 04 00 00       	call   3a10 <printf>
+}
+    3536:	83 c4 10             	add    $0x10,%esp
+    3539:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    353c:	5b                   	pop    %ebx
+    353d:	5e                   	pop    %esi
+    353e:	5f                   	pop    %edi
+    353f:	5d                   	pop    %ebp
+    3540:	c3                   	ret    
+    3541:	eb 0d                	jmp    3550 <uio>
+    3543:	90                   	nop
+    3544:	90                   	nop
+    3545:	90                   	nop
+    3546:	90                   	nop
+    3547:	90                   	nop
+    3548:	90                   	nop
+    3549:	90                   	nop
+    354a:	90                   	nop
+    354b:	90                   	nop
+    354c:	90                   	nop
+    354d:	90                   	nop
+    354e:	90                   	nop
+    354f:	90                   	nop
+
+00003550 <uio>:
+{
+    3550:	55                   	push   %ebp
+    3551:	89 e5                	mov    %esp,%ebp
+    3553:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "uio test\n");
+    3556:	68 1a 4d 00 00       	push   $0x4d1a
+    355b:	6a 01                	push   $0x1
+    355d:	e8 ae 04 00 00       	call   3a10 <printf>
+  pid = fork();
+    3562:	e8 33 03 00 00       	call   389a <fork>
+  if(pid == 0){
+    3567:	83 c4 10             	add    $0x10,%esp
+    356a:	85 c0                	test   %eax,%eax
+    356c:	74 1b                	je     3589 <uio+0x39>
+  } else if(pid < 0){
+    356e:	78 3d                	js     35ad <uio+0x5d>
+  wait();
+    3570:	e8 35 03 00 00       	call   38aa <wait>
+  printf(1, "uio test done\n");
+    3575:	83 ec 08             	sub    $0x8,%esp
+    3578:	68 24 4d 00 00       	push   $0x4d24
+    357d:	6a 01                	push   $0x1
+    357f:	e8 8c 04 00 00       	call   3a10 <printf>
+}
+    3584:	83 c4 10             	add    $0x10,%esp
+    3587:	c9                   	leave  
+    3588:	c3                   	ret    
+    asm volatile("outb %0,%1"::"a"(val), "d" (port));
+    3589:	b8 09 00 00 00       	mov    $0x9,%eax
+    358e:	ba 70 00 00 00       	mov    $0x70,%edx
+    3593:	ee                   	out    %al,(%dx)
+    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
+    3594:	ba 71 00 00 00       	mov    $0x71,%edx
+    3599:	ec                   	in     (%dx),%al
+    printf(1, "uio: uio succeeded; test FAILED\n");
+    359a:	52                   	push   %edx
+    359b:	52                   	push   %edx
+    359c:	68 b0 54 00 00       	push   $0x54b0
+    35a1:	6a 01                	push   $0x1
+    35a3:	e8 68 04 00 00       	call   3a10 <printf>
+    exit();
+    35a8:	e8 f5 02 00 00       	call   38a2 <exit>
+    printf (1, "fork failed\n");
+    35ad:	50                   	push   %eax
+    35ae:	50                   	push   %eax
+    35af:	68 a9 4c 00 00       	push   $0x4ca9
+    35b4:	6a 01                	push   $0x1
+    35b6:	e8 55 04 00 00       	call   3a10 <printf>
+    exit();
+    35bb:	e8 e2 02 00 00       	call   38a2 <exit>
+
+000035c0 <argptest>:
+{
+    35c0:	55                   	push   %ebp
+    35c1:	89 e5                	mov    %esp,%ebp
+    35c3:	53                   	push   %ebx
+    35c4:	83 ec 0c             	sub    $0xc,%esp
+  fd = open("init", O_RDONLY);
+    35c7:	6a 00                	push   $0x0
+    35c9:	68 33 4d 00 00       	push   $0x4d33
+    35ce:	e8 0f 03 00 00       	call   38e2 <open>
+  if (fd < 0) {
+    35d3:	83 c4 10             	add    $0x10,%esp
+    35d6:	85 c0                	test   %eax,%eax
+    35d8:	78 39                	js     3613 <argptest+0x53>
+  read(fd, sbrk(0) - 1, -1);
+    35da:	83 ec 0c             	sub    $0xc,%esp
+    35dd:	89 c3                	mov    %eax,%ebx
+    35df:	6a 00                	push   $0x0
+    35e1:	e8 44 03 00 00       	call   392a <sbrk>
+    35e6:	83 c4 0c             	add    $0xc,%esp
+    35e9:	83 e8 01             	sub    $0x1,%eax
+    35ec:	6a ff                	push   $0xffffffff
+    35ee:	50                   	push   %eax
+    35ef:	53                   	push   %ebx
+    35f0:	e8 c5 02 00 00       	call   38ba <read>
+  close(fd);
+    35f5:	89 1c 24             	mov    %ebx,(%esp)
+    35f8:	e8 cd 02 00 00       	call   38ca <close>
+  printf(1, "arg test passed\n");
+    35fd:	58                   	pop    %eax
+    35fe:	5a                   	pop    %edx
+    35ff:	68 45 4d 00 00       	push   $0x4d45
+    3604:	6a 01                	push   $0x1
+    3606:	e8 05 04 00 00       	call   3a10 <printf>
+}
+    360b:	83 c4 10             	add    $0x10,%esp
+    360e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    3611:	c9                   	leave  
+    3612:	c3                   	ret    
+    printf(2, "open failed\n");
+    3613:	51                   	push   %ecx
+    3614:	51                   	push   %ecx
+    3615:	68 38 4d 00 00       	push   $0x4d38
+    361a:	6a 02                	push   $0x2
+    361c:	e8 ef 03 00 00       	call   3a10 <printf>
+    exit();
+    3621:	e8 7c 02 00 00       	call   38a2 <exit>
+    3626:	8d 76 00             	lea    0x0(%esi),%esi
+    3629:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003630 <rand>:
+  randstate = randstate * 1664525 + 1013904223;
+    3630:	69 05 14 5e 00 00 0d 	imul   $0x19660d,0x5e14,%eax
+    3637:	66 19 00 
+{
+    363a:	55                   	push   %ebp
+    363b:	89 e5                	mov    %esp,%ebp
+}
+    363d:	5d                   	pop    %ebp
+  randstate = randstate * 1664525 + 1013904223;
+    363e:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
+    3643:	a3 14 5e 00 00       	mov    %eax,0x5e14
+}
+    3648:	c3                   	ret    
+    3649:	66 90                	xchg   %ax,%ax
+    364b:	66 90                	xchg   %ax,%ax
+    364d:	66 90                	xchg   %ax,%ax
+    364f:	90                   	nop
+
+00003650 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+    3650:	55                   	push   %ebp
+    3651:	89 e5                	mov    %esp,%ebp
+    3653:	53                   	push   %ebx
+    3654:	8b 45 08             	mov    0x8(%ebp),%eax
+    3657:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+    365a:	89 c2                	mov    %eax,%edx
+    365c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3660:	83 c1 01             	add    $0x1,%ecx
+    3663:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+    3667:	83 c2 01             	add    $0x1,%edx
+    366a:	84 db                	test   %bl,%bl
+    366c:	88 5a ff             	mov    %bl,-0x1(%edx)
+    366f:	75 ef                	jne    3660 <strcpy+0x10>
+    ;
+  return os;
+}
+    3671:	5b                   	pop    %ebx
+    3672:	5d                   	pop    %ebp
+    3673:	c3                   	ret    
+    3674:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    367a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00003680 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+    3680:	55                   	push   %ebp
+    3681:	89 e5                	mov    %esp,%ebp
+    3683:	53                   	push   %ebx
+    3684:	8b 55 08             	mov    0x8(%ebp),%edx
+    3687:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+    368a:	0f b6 02             	movzbl (%edx),%eax
+    368d:	0f b6 19             	movzbl (%ecx),%ebx
+    3690:	84 c0                	test   %al,%al
+    3692:	75 1c                	jne    36b0 <strcmp+0x30>
+    3694:	eb 2a                	jmp    36c0 <strcmp+0x40>
+    3696:	8d 76 00             	lea    0x0(%esi),%esi
+    3699:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+    36a0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+    36a3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+    36a6:	83 c1 01             	add    $0x1,%ecx
+    36a9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+    36ac:	84 c0                	test   %al,%al
+    36ae:	74 10                	je     36c0 <strcmp+0x40>
+    36b0:	38 d8                	cmp    %bl,%al
+    36b2:	74 ec                	je     36a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+    36b4:	29 d8                	sub    %ebx,%eax
+}
+    36b6:	5b                   	pop    %ebx
+    36b7:	5d                   	pop    %ebp
+    36b8:	c3                   	ret    
+    36b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    36c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+    36c2:	29 d8                	sub    %ebx,%eax
+}
+    36c4:	5b                   	pop    %ebx
+    36c5:	5d                   	pop    %ebp
+    36c6:	c3                   	ret    
+    36c7:	89 f6                	mov    %esi,%esi
+    36c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000036d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+    36d0:	55                   	push   %ebp
+    36d1:	89 e5                	mov    %esp,%ebp
+    36d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+    36d6:	80 39 00             	cmpb   $0x0,(%ecx)
+    36d9:	74 15                	je     36f0 <strlen+0x20>
+    36db:	31 d2                	xor    %edx,%edx
+    36dd:	8d 76 00             	lea    0x0(%esi),%esi
+    36e0:	83 c2 01             	add    $0x1,%edx
+    36e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+    36e7:	89 d0                	mov    %edx,%eax
+    36e9:	75 f5                	jne    36e0 <strlen+0x10>
+    ;
+  return n;
+}
+    36eb:	5d                   	pop    %ebp
+    36ec:	c3                   	ret    
+    36ed:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+    36f0:	31 c0                	xor    %eax,%eax
+}
+    36f2:	5d                   	pop    %ebp
+    36f3:	c3                   	ret    
+    36f4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    36fa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00003700 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+    3700:	55                   	push   %ebp
+    3701:	89 e5                	mov    %esp,%ebp
+    3703:	57                   	push   %edi
+    3704:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    3707:	8b 4d 10             	mov    0x10(%ebp),%ecx
+    370a:	8b 45 0c             	mov    0xc(%ebp),%eax
+    370d:	89 d7                	mov    %edx,%edi
+    370f:	fc                   	cld    
+    3710:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+    3712:	89 d0                	mov    %edx,%eax
+    3714:	5f                   	pop    %edi
+    3715:	5d                   	pop    %ebp
+    3716:	c3                   	ret    
+    3717:	89 f6                	mov    %esi,%esi
+    3719:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003720 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+    3720:	55                   	push   %ebp
+    3721:	89 e5                	mov    %esp,%ebp
+    3723:	53                   	push   %ebx
+    3724:	8b 45 08             	mov    0x8(%ebp),%eax
+    3727:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+    372a:	0f b6 10             	movzbl (%eax),%edx
+    372d:	84 d2                	test   %dl,%dl
+    372f:	74 1d                	je     374e <strchr+0x2e>
+    if(*s == c)
+    3731:	38 d3                	cmp    %dl,%bl
+    3733:	89 d9                	mov    %ebx,%ecx
+    3735:	75 0d                	jne    3744 <strchr+0x24>
+    3737:	eb 17                	jmp    3750 <strchr+0x30>
+    3739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3740:	38 ca                	cmp    %cl,%dl
+    3742:	74 0c                	je     3750 <strchr+0x30>
+  for(; *s; s++)
+    3744:	83 c0 01             	add    $0x1,%eax
+    3747:	0f b6 10             	movzbl (%eax),%edx
+    374a:	84 d2                	test   %dl,%dl
+    374c:	75 f2                	jne    3740 <strchr+0x20>
+      return (char*)s;
+  return 0;
+    374e:	31 c0                	xor    %eax,%eax
+}
+    3750:	5b                   	pop    %ebx
+    3751:	5d                   	pop    %ebp
+    3752:	c3                   	ret    
+    3753:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3759:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003760 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+    3760:	55                   	push   %ebp
+    3761:	89 e5                	mov    %esp,%ebp
+    3763:	57                   	push   %edi
+    3764:	56                   	push   %esi
+    3765:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    3766:	31 f6                	xor    %esi,%esi
+    3768:	89 f3                	mov    %esi,%ebx
+{
+    376a:	83 ec 1c             	sub    $0x1c,%esp
+    376d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+    3770:	eb 2f                	jmp    37a1 <gets+0x41>
+    3772:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+    3778:	8d 45 e7             	lea    -0x19(%ebp),%eax
+    377b:	83 ec 04             	sub    $0x4,%esp
+    377e:	6a 01                	push   $0x1
+    3780:	50                   	push   %eax
+    3781:	6a 00                	push   $0x0
+    3783:	e8 32 01 00 00       	call   38ba <read>
+    if(cc < 1)
+    3788:	83 c4 10             	add    $0x10,%esp
+    378b:	85 c0                	test   %eax,%eax
+    378d:	7e 1c                	jle    37ab <gets+0x4b>
+      break;
+    buf[i++] = c;
+    378f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+    3793:	83 c7 01             	add    $0x1,%edi
+    3796:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+    3799:	3c 0a                	cmp    $0xa,%al
+    379b:	74 23                	je     37c0 <gets+0x60>
+    379d:	3c 0d                	cmp    $0xd,%al
+    379f:	74 1f                	je     37c0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+    37a1:	83 c3 01             	add    $0x1,%ebx
+    37a4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+    37a7:	89 fe                	mov    %edi,%esi
+    37a9:	7c cd                	jl     3778 <gets+0x18>
+    37ab:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+    37ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+    37b0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    37b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    37b6:	5b                   	pop    %ebx
+    37b7:	5e                   	pop    %esi
+    37b8:	5f                   	pop    %edi
+    37b9:	5d                   	pop    %ebp
+    37ba:	c3                   	ret    
+    37bb:	90                   	nop
+    37bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    37c0:	8b 75 08             	mov    0x8(%ebp),%esi
+    37c3:	8b 45 08             	mov    0x8(%ebp),%eax
+    37c6:	01 de                	add    %ebx,%esi
+    37c8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+    37ca:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    37cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    37d0:	5b                   	pop    %ebx
+    37d1:	5e                   	pop    %esi
+    37d2:	5f                   	pop    %edi
+    37d3:	5d                   	pop    %ebp
+    37d4:	c3                   	ret    
+    37d5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    37d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000037e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+    37e0:	55                   	push   %ebp
+    37e1:	89 e5                	mov    %esp,%ebp
+    37e3:	56                   	push   %esi
+    37e4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+    37e5:	83 ec 08             	sub    $0x8,%esp
+    37e8:	6a 00                	push   $0x0
+    37ea:	ff 75 08             	pushl  0x8(%ebp)
+    37ed:	e8 f0 00 00 00       	call   38e2 <open>
+  if(fd < 0)
+    37f2:	83 c4 10             	add    $0x10,%esp
+    37f5:	85 c0                	test   %eax,%eax
+    37f7:	78 27                	js     3820 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+    37f9:	83 ec 08             	sub    $0x8,%esp
+    37fc:	ff 75 0c             	pushl  0xc(%ebp)
+    37ff:	89 c3                	mov    %eax,%ebx
+    3801:	50                   	push   %eax
+    3802:	e8 f3 00 00 00       	call   38fa <fstat>
+  close(fd);
+    3807:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+    380a:	89 c6                	mov    %eax,%esi
+  close(fd);
+    380c:	e8 b9 00 00 00       	call   38ca <close>
+  return r;
+    3811:	83 c4 10             	add    $0x10,%esp
+}
+    3814:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    3817:	89 f0                	mov    %esi,%eax
+    3819:	5b                   	pop    %ebx
+    381a:	5e                   	pop    %esi
+    381b:	5d                   	pop    %ebp
+    381c:	c3                   	ret    
+    381d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+    3820:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    3825:	eb ed                	jmp    3814 <stat+0x34>
+    3827:	89 f6                	mov    %esi,%esi
+    3829:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003830 <atoi>:
+
+int
+atoi(const char *s)
+{
+    3830:	55                   	push   %ebp
+    3831:	89 e5                	mov    %esp,%ebp
+    3833:	53                   	push   %ebx
+    3834:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    3837:	0f be 11             	movsbl (%ecx),%edx
+    383a:	8d 42 d0             	lea    -0x30(%edx),%eax
+    383d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+    383f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+    3844:	77 1f                	ja     3865 <atoi+0x35>
+    3846:	8d 76 00             	lea    0x0(%esi),%esi
+    3849:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+    3850:	8d 04 80             	lea    (%eax,%eax,4),%eax
+    3853:	83 c1 01             	add    $0x1,%ecx
+    3856:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+    385a:	0f be 11             	movsbl (%ecx),%edx
+    385d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+    3860:	80 fb 09             	cmp    $0x9,%bl
+    3863:	76 eb                	jbe    3850 <atoi+0x20>
+  return n;
+}
+    3865:	5b                   	pop    %ebx
+    3866:	5d                   	pop    %ebp
+    3867:	c3                   	ret    
+    3868:	90                   	nop
+    3869:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00003870 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+    3870:	55                   	push   %ebp
+    3871:	89 e5                	mov    %esp,%ebp
+    3873:	56                   	push   %esi
+    3874:	53                   	push   %ebx
+    3875:	8b 5d 10             	mov    0x10(%ebp),%ebx
+    3878:	8b 45 08             	mov    0x8(%ebp),%eax
+    387b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+    387e:	85 db                	test   %ebx,%ebx
+    3880:	7e 14                	jle    3896 <memmove+0x26>
+    3882:	31 d2                	xor    %edx,%edx
+    3884:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+    3888:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+    388c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+    388f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+    3892:	39 d3                	cmp    %edx,%ebx
+    3894:	75 f2                	jne    3888 <memmove+0x18>
+  return vdst;
+}
+    3896:	5b                   	pop    %ebx
+    3897:	5e                   	pop    %esi
+    3898:	5d                   	pop    %ebp
+    3899:	c3                   	ret    
+
+0000389a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+    389a:	b8 01 00 00 00       	mov    $0x1,%eax
+    389f:	cd 40                	int    $0x40
+    38a1:	c3                   	ret    
+
+000038a2 <exit>:
+SYSCALL(exit)
+    38a2:	b8 02 00 00 00       	mov    $0x2,%eax
+    38a7:	cd 40                	int    $0x40
+    38a9:	c3                   	ret    
+
+000038aa <wait>:
+SYSCALL(wait)
+    38aa:	b8 03 00 00 00       	mov    $0x3,%eax
+    38af:	cd 40                	int    $0x40
+    38b1:	c3                   	ret    
+
+000038b2 <pipe>:
+SYSCALL(pipe)
+    38b2:	b8 04 00 00 00       	mov    $0x4,%eax
+    38b7:	cd 40                	int    $0x40
+    38b9:	c3                   	ret    
+
+000038ba <read>:
+SYSCALL(read)
+    38ba:	b8 05 00 00 00       	mov    $0x5,%eax
+    38bf:	cd 40                	int    $0x40
+    38c1:	c3                   	ret    
+
+000038c2 <write>:
+SYSCALL(write)
+    38c2:	b8 10 00 00 00       	mov    $0x10,%eax
+    38c7:	cd 40                	int    $0x40
+    38c9:	c3                   	ret    
+
+000038ca <close>:
+SYSCALL(close)
+    38ca:	b8 15 00 00 00       	mov    $0x15,%eax
+    38cf:	cd 40                	int    $0x40
+    38d1:	c3                   	ret    
+
+000038d2 <kill>:
+SYSCALL(kill)
+    38d2:	b8 06 00 00 00       	mov    $0x6,%eax
+    38d7:	cd 40                	int    $0x40
+    38d9:	c3                   	ret    
+
+000038da <exec>:
+SYSCALL(exec)
+    38da:	b8 07 00 00 00       	mov    $0x7,%eax
+    38df:	cd 40                	int    $0x40
+    38e1:	c3                   	ret    
+
+000038e2 <open>:
+SYSCALL(open)
+    38e2:	b8 0f 00 00 00       	mov    $0xf,%eax
+    38e7:	cd 40                	int    $0x40
+    38e9:	c3                   	ret    
+
+000038ea <mknod>:
+SYSCALL(mknod)
+    38ea:	b8 11 00 00 00       	mov    $0x11,%eax
+    38ef:	cd 40                	int    $0x40
+    38f1:	c3                   	ret    
+
+000038f2 <unlink>:
+SYSCALL(unlink)
+    38f2:	b8 12 00 00 00       	mov    $0x12,%eax
+    38f7:	cd 40                	int    $0x40
+    38f9:	c3                   	ret    
+
+000038fa <fstat>:
+SYSCALL(fstat)
+    38fa:	b8 08 00 00 00       	mov    $0x8,%eax
+    38ff:	cd 40                	int    $0x40
+    3901:	c3                   	ret    
+
+00003902 <link>:
+SYSCALL(link)
+    3902:	b8 13 00 00 00       	mov    $0x13,%eax
+    3907:	cd 40                	int    $0x40
+    3909:	c3                   	ret    
+
+0000390a <mkdir>:
+SYSCALL(mkdir)
+    390a:	b8 14 00 00 00       	mov    $0x14,%eax
+    390f:	cd 40                	int    $0x40
+    3911:	c3                   	ret    
+
+00003912 <chdir>:
+SYSCALL(chdir)
+    3912:	b8 09 00 00 00       	mov    $0x9,%eax
+    3917:	cd 40                	int    $0x40
+    3919:	c3                   	ret    
+
+0000391a <dup>:
+SYSCALL(dup)
+    391a:	b8 0a 00 00 00       	mov    $0xa,%eax
+    391f:	cd 40                	int    $0x40
+    3921:	c3                   	ret    
+
+00003922 <getpid>:
+SYSCALL(getpid)
+    3922:	b8 0b 00 00 00       	mov    $0xb,%eax
+    3927:	cd 40                	int    $0x40
+    3929:	c3                   	ret    
+
+0000392a <sbrk>:
+SYSCALL(sbrk)
+    392a:	b8 0c 00 00 00       	mov    $0xc,%eax
+    392f:	cd 40                	int    $0x40
+    3931:	c3                   	ret    
+
+00003932 <sleep>:
+SYSCALL(sleep)
+    3932:	b8 0d 00 00 00       	mov    $0xd,%eax
+    3937:	cd 40                	int    $0x40
+    3939:	c3                   	ret    
+
+0000393a <uptime>:
+SYSCALL(uptime)
+    393a:	b8 0e 00 00 00       	mov    $0xe,%eax
+    393f:	cd 40                	int    $0x40
+    3941:	c3                   	ret    
+
+00003942 <kmalloc>:
+SYSCALL(kmalloc)
+    3942:	b8 16 00 00 00       	mov    $0x16,%eax
+    3947:	cd 40                	int    $0x40
+    3949:	c3                   	ret    
+
+0000394a <kmfree>:
+SYSCALL(kmfree) 
+    394a:	b8 17 00 00 00       	mov    $0x17,%eax
+    394f:	cd 40                	int    $0x40
+    3951:	c3                   	ret    
+
+00003952 <mmap>:
+SYSCALL(mmap)
+    3952:	b8 18 00 00 00       	mov    $0x18,%eax
+    3957:	cd 40                	int    $0x40
+    3959:	c3                   	ret    
+
+0000395a <munmap>:
+    395a:	b8 19 00 00 00       	mov    $0x19,%eax
+    395f:	cd 40                	int    $0x40
+    3961:	c3                   	ret    
+    3962:	66 90                	xchg   %ax,%ax
+    3964:	66 90                	xchg   %ax,%ax
+    3966:	66 90                	xchg   %ax,%ax
+    3968:	66 90                	xchg   %ax,%ax
+    396a:	66 90                	xchg   %ax,%ax
+    396c:	66 90                	xchg   %ax,%ax
+    396e:	66 90                	xchg   %ax,%ax
+
+00003970 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+    3970:	55                   	push   %ebp
+    3971:	89 e5                	mov    %esp,%ebp
+    3973:	57                   	push   %edi
+    3974:	56                   	push   %esi
+    3975:	53                   	push   %ebx
+    3976:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    3979:	85 d2                	test   %edx,%edx
+{
+    397b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+    397e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+    3980:	79 76                	jns    39f8 <printint+0x88>
+    3982:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+    3986:	74 70                	je     39f8 <printint+0x88>
+    x = -xx;
+    3988:	f7 d8                	neg    %eax
+    neg = 1;
+    398a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+    3991:	31 f6                	xor    %esi,%esi
+    3993:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+    3996:	eb 0a                	jmp    39a2 <printint+0x32>
+    3998:	90                   	nop
+    3999:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+    39a0:	89 fe                	mov    %edi,%esi
+    39a2:	31 d2                	xor    %edx,%edx
+    39a4:	8d 7e 01             	lea    0x1(%esi),%edi
+    39a7:	f7 f1                	div    %ecx
+    39a9:	0f b6 92 08 55 00 00 	movzbl 0x5508(%edx),%edx
+  }while((x /= base) != 0);
+    39b0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+    39b2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+    39b5:	75 e9                	jne    39a0 <printint+0x30>
+  if(neg)
+    39b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+    39ba:	85 c0                	test   %eax,%eax
+    39bc:	74 08                	je     39c6 <printint+0x56>
+    buf[i++] = '-';
+    39be:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+    39c3:	8d 7e 02             	lea    0x2(%esi),%edi
+    39c6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+    39ca:	8b 7d c0             	mov    -0x40(%ebp),%edi
+    39cd:	8d 76 00             	lea    0x0(%esi),%esi
+    39d0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+    39d3:	83 ec 04             	sub    $0x4,%esp
+    39d6:	83 ee 01             	sub    $0x1,%esi
+    39d9:	6a 01                	push   $0x1
+    39db:	53                   	push   %ebx
+    39dc:	57                   	push   %edi
+    39dd:	88 45 d7             	mov    %al,-0x29(%ebp)
+    39e0:	e8 dd fe ff ff       	call   38c2 <write>
+
+  while(--i >= 0)
+    39e5:	83 c4 10             	add    $0x10,%esp
+    39e8:	39 de                	cmp    %ebx,%esi
+    39ea:	75 e4                	jne    39d0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+    39ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    39ef:	5b                   	pop    %ebx
+    39f0:	5e                   	pop    %esi
+    39f1:	5f                   	pop    %edi
+    39f2:	5d                   	pop    %ebp
+    39f3:	c3                   	ret    
+    39f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+    39f8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+    39ff:	eb 90                	jmp    3991 <printint+0x21>
+    3a01:	eb 0d                	jmp    3a10 <printf>
+    3a03:	90                   	nop
+    3a04:	90                   	nop
+    3a05:	90                   	nop
+    3a06:	90                   	nop
+    3a07:	90                   	nop
+    3a08:	90                   	nop
+    3a09:	90                   	nop
+    3a0a:	90                   	nop
+    3a0b:	90                   	nop
+    3a0c:	90                   	nop
+    3a0d:	90                   	nop
+    3a0e:	90                   	nop
+    3a0f:	90                   	nop
+
+00003a10 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+    3a10:	55                   	push   %ebp
+    3a11:	89 e5                	mov    %esp,%ebp
+    3a13:	57                   	push   %edi
+    3a14:	56                   	push   %esi
+    3a15:	53                   	push   %ebx
+    3a16:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    3a19:	8b 75 0c             	mov    0xc(%ebp),%esi
+    3a1c:	0f b6 1e             	movzbl (%esi),%ebx
+    3a1f:	84 db                	test   %bl,%bl
+    3a21:	0f 84 b3 00 00 00    	je     3ada <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+    3a27:	8d 45 10             	lea    0x10(%ebp),%eax
+    3a2a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+    3a2d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+    3a2f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    3a32:	eb 2f                	jmp    3a63 <printf+0x53>
+    3a34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+    3a38:	83 f8 25             	cmp    $0x25,%eax
+    3a3b:	0f 84 a7 00 00 00    	je     3ae8 <printf+0xd8>
+  write(fd, &c, 1);
+    3a41:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+    3a44:	83 ec 04             	sub    $0x4,%esp
+    3a47:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+    3a4a:	6a 01                	push   $0x1
+    3a4c:	50                   	push   %eax
+    3a4d:	ff 75 08             	pushl  0x8(%ebp)
+    3a50:	e8 6d fe ff ff       	call   38c2 <write>
+    3a55:	83 c4 10             	add    $0x10,%esp
+    3a58:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+    3a5b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+    3a5f:	84 db                	test   %bl,%bl
+    3a61:	74 77                	je     3ada <printf+0xca>
+    if(state == 0){
+    3a63:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+    3a65:	0f be cb             	movsbl %bl,%ecx
+    3a68:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+    3a6b:	74 cb                	je     3a38 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+    3a6d:	83 ff 25             	cmp    $0x25,%edi
+    3a70:	75 e6                	jne    3a58 <printf+0x48>
+      if(c == 'd'){
+    3a72:	83 f8 64             	cmp    $0x64,%eax
+    3a75:	0f 84 05 01 00 00    	je     3b80 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+    3a7b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+    3a81:	83 f9 70             	cmp    $0x70,%ecx
+    3a84:	74 72                	je     3af8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+    3a86:	83 f8 73             	cmp    $0x73,%eax
+    3a89:	0f 84 99 00 00 00    	je     3b28 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+    3a8f:	83 f8 63             	cmp    $0x63,%eax
+    3a92:	0f 84 08 01 00 00    	je     3ba0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+    3a98:	83 f8 25             	cmp    $0x25,%eax
+    3a9b:	0f 84 ef 00 00 00    	je     3b90 <printf+0x180>
+  write(fd, &c, 1);
+    3aa1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+    3aa4:	83 ec 04             	sub    $0x4,%esp
+    3aa7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    3aab:	6a 01                	push   $0x1
+    3aad:	50                   	push   %eax
+    3aae:	ff 75 08             	pushl  0x8(%ebp)
+    3ab1:	e8 0c fe ff ff       	call   38c2 <write>
+    3ab6:	83 c4 0c             	add    $0xc,%esp
+    3ab9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+    3abc:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+    3abf:	6a 01                	push   $0x1
+    3ac1:	50                   	push   %eax
+    3ac2:	ff 75 08             	pushl  0x8(%ebp)
+    3ac5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+    3ac8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+    3aca:	e8 f3 fd ff ff       	call   38c2 <write>
+  for(i = 0; fmt[i]; i++){
+    3acf:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+    3ad3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+    3ad6:	84 db                	test   %bl,%bl
+    3ad8:	75 89                	jne    3a63 <printf+0x53>
+    }
+  }
+}
+    3ada:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3add:	5b                   	pop    %ebx
+    3ade:	5e                   	pop    %esi
+    3adf:	5f                   	pop    %edi
+    3ae0:	5d                   	pop    %ebp
+    3ae1:	c3                   	ret    
+    3ae2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+    3ae8:	bf 25 00 00 00       	mov    $0x25,%edi
+    3aed:	e9 66 ff ff ff       	jmp    3a58 <printf+0x48>
+    3af2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+    3af8:	83 ec 0c             	sub    $0xc,%esp
+    3afb:	b9 10 00 00 00       	mov    $0x10,%ecx
+    3b00:	6a 00                	push   $0x0
+    3b02:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+    3b05:	8b 45 08             	mov    0x8(%ebp),%eax
+    3b08:	8b 17                	mov    (%edi),%edx
+    3b0a:	e8 61 fe ff ff       	call   3970 <printint>
+        ap++;
+    3b0f:	89 f8                	mov    %edi,%eax
+    3b11:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3b14:	31 ff                	xor    %edi,%edi
+        ap++;
+    3b16:	83 c0 04             	add    $0x4,%eax
+    3b19:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    3b1c:	e9 37 ff ff ff       	jmp    3a58 <printf+0x48>
+    3b21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+    3b28:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    3b2b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+    3b2d:	83 c0 04             	add    $0x4,%eax
+    3b30:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+    3b33:	85 c9                	test   %ecx,%ecx
+    3b35:	0f 84 8e 00 00 00    	je     3bc9 <printf+0x1b9>
+        while(*s != 0){
+    3b3b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+    3b3e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+    3b40:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+    3b42:	84 c0                	test   %al,%al
+    3b44:	0f 84 0e ff ff ff    	je     3a58 <printf+0x48>
+    3b4a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+    3b4d:	89 de                	mov    %ebx,%esi
+    3b4f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3b52:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+    3b55:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+    3b58:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    3b5b:	83 c6 01             	add    $0x1,%esi
+    3b5e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+    3b61:	6a 01                	push   $0x1
+    3b63:	57                   	push   %edi
+    3b64:	53                   	push   %ebx
+    3b65:	e8 58 fd ff ff       	call   38c2 <write>
+        while(*s != 0){
+    3b6a:	0f b6 06             	movzbl (%esi),%eax
+    3b6d:	83 c4 10             	add    $0x10,%esp
+    3b70:	84 c0                	test   %al,%al
+    3b72:	75 e4                	jne    3b58 <printf+0x148>
+    3b74:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+    3b77:	31 ff                	xor    %edi,%edi
+    3b79:	e9 da fe ff ff       	jmp    3a58 <printf+0x48>
+    3b7e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+    3b80:	83 ec 0c             	sub    $0xc,%esp
+    3b83:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    3b88:	6a 01                	push   $0x1
+    3b8a:	e9 73 ff ff ff       	jmp    3b02 <printf+0xf2>
+    3b8f:	90                   	nop
+  write(fd, &c, 1);
+    3b90:	83 ec 04             	sub    $0x4,%esp
+    3b93:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+    3b96:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    3b99:	6a 01                	push   $0x1
+    3b9b:	e9 21 ff ff ff       	jmp    3ac1 <printf+0xb1>
+        putc(fd, *ap);
+    3ba0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+    3ba3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    3ba6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+    3ba8:	6a 01                	push   $0x1
+        ap++;
+    3baa:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+    3bad:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+    3bb0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+    3bb3:	50                   	push   %eax
+    3bb4:	ff 75 08             	pushl  0x8(%ebp)
+    3bb7:	e8 06 fd ff ff       	call   38c2 <write>
+        ap++;
+    3bbc:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+    3bbf:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3bc2:	31 ff                	xor    %edi,%edi
+    3bc4:	e9 8f fe ff ff       	jmp    3a58 <printf+0x48>
+          s = "(null)";
+    3bc9:	bb 00 55 00 00       	mov    $0x5500,%ebx
+        while(*s != 0){
+    3bce:	b8 28 00 00 00       	mov    $0x28,%eax
+    3bd3:	e9 72 ff ff ff       	jmp    3b4a <printf+0x13a>
+    3bd8:	66 90                	xchg   %ax,%ax
+    3bda:	66 90                	xchg   %ax,%ax
+    3bdc:	66 90                	xchg   %ax,%ax
+    3bde:	66 90                	xchg   %ax,%ax
+
+00003be0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    3be0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3be1:	a1 c0 5e 00 00       	mov    0x5ec0,%eax
+{
+    3be6:	89 e5                	mov    %esp,%ebp
+    3be8:	57                   	push   %edi
+    3be9:	56                   	push   %esi
+    3bea:	53                   	push   %ebx
+    3beb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+    3bee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+    3bf1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3bf8:	39 c8                	cmp    %ecx,%eax
+    3bfa:	8b 10                	mov    (%eax),%edx
+    3bfc:	73 32                	jae    3c30 <free+0x50>
+    3bfe:	39 d1                	cmp    %edx,%ecx
+    3c00:	72 04                	jb     3c06 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3c02:	39 d0                	cmp    %edx,%eax
+    3c04:	72 32                	jb     3c38 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    3c06:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    3c09:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    3c0c:	39 fa                	cmp    %edi,%edx
+    3c0e:	74 30                	je     3c40 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    3c10:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3c13:	8b 50 04             	mov    0x4(%eax),%edx
+    3c16:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3c19:	39 f1                	cmp    %esi,%ecx
+    3c1b:	74 3a                	je     3c57 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    3c1d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+    3c1f:	a3 c0 5e 00 00       	mov    %eax,0x5ec0
+}
+    3c24:	5b                   	pop    %ebx
+    3c25:	5e                   	pop    %esi
+    3c26:	5f                   	pop    %edi
+    3c27:	5d                   	pop    %ebp
+    3c28:	c3                   	ret    
+    3c29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3c30:	39 d0                	cmp    %edx,%eax
+    3c32:	72 04                	jb     3c38 <free+0x58>
+    3c34:	39 d1                	cmp    %edx,%ecx
+    3c36:	72 ce                	jb     3c06 <free+0x26>
+{
+    3c38:	89 d0                	mov    %edx,%eax
+    3c3a:	eb bc                	jmp    3bf8 <free+0x18>
+    3c3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+    3c40:	03 72 04             	add    0x4(%edx),%esi
+    3c43:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    3c46:	8b 10                	mov    (%eax),%edx
+    3c48:	8b 12                	mov    (%edx),%edx
+    3c4a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3c4d:	8b 50 04             	mov    0x4(%eax),%edx
+    3c50:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3c53:	39 f1                	cmp    %esi,%ecx
+    3c55:	75 c6                	jne    3c1d <free+0x3d>
+    p->s.size += bp->s.size;
+    3c57:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+    3c5a:	a3 c0 5e 00 00       	mov    %eax,0x5ec0
+    p->s.size += bp->s.size;
+    3c5f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    3c62:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    3c65:	89 10                	mov    %edx,(%eax)
+}
+    3c67:	5b                   	pop    %ebx
+    3c68:	5e                   	pop    %esi
+    3c69:	5f                   	pop    %edi
+    3c6a:	5d                   	pop    %ebp
+    3c6b:	c3                   	ret    
+    3c6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003c70 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    3c70:	55                   	push   %ebp
+    3c71:	89 e5                	mov    %esp,%ebp
+    3c73:	57                   	push   %edi
+    3c74:	56                   	push   %esi
+    3c75:	53                   	push   %ebx
+    3c76:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3c79:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    3c7c:	8b 15 c0 5e 00 00    	mov    0x5ec0,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3c82:	8d 78 07             	lea    0x7(%eax),%edi
+    3c85:	c1 ef 03             	shr    $0x3,%edi
+    3c88:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+    3c8b:	85 d2                	test   %edx,%edx
+    3c8d:	0f 84 9d 00 00 00    	je     3d30 <malloc+0xc0>
+    3c93:	8b 02                	mov    (%edx),%eax
+    3c95:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+    3c98:	39 cf                	cmp    %ecx,%edi
+    3c9a:	76 6c                	jbe    3d08 <malloc+0x98>
+    3c9c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+    3ca2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    3ca7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    3caa:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+    3cb1:	eb 0e                	jmp    3cc1 <malloc+0x51>
+    3cb3:	90                   	nop
+    3cb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3cb8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+    3cba:	8b 48 04             	mov    0x4(%eax),%ecx
+    3cbd:	39 f9                	cmp    %edi,%ecx
+    3cbf:	73 47                	jae    3d08 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    3cc1:	39 05 c0 5e 00 00    	cmp    %eax,0x5ec0
+    3cc7:	89 c2                	mov    %eax,%edx
+    3cc9:	75 ed                	jne    3cb8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+    3ccb:	83 ec 0c             	sub    $0xc,%esp
+    3cce:	56                   	push   %esi
+    3ccf:	e8 56 fc ff ff       	call   392a <sbrk>
+  if(p == (char*)-1)
+    3cd4:	83 c4 10             	add    $0x10,%esp
+    3cd7:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3cda:	74 1c                	je     3cf8 <malloc+0x88>
+  hp->s.size = nu;
+    3cdc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    3cdf:	83 ec 0c             	sub    $0xc,%esp
+    3ce2:	83 c0 08             	add    $0x8,%eax
+    3ce5:	50                   	push   %eax
+    3ce6:	e8 f5 fe ff ff       	call   3be0 <free>
+  return freep;
+    3ceb:	8b 15 c0 5e 00 00    	mov    0x5ec0,%edx
+      if((p = morecore(nunits)) == 0)
+    3cf1:	83 c4 10             	add    $0x10,%esp
+    3cf4:	85 d2                	test   %edx,%edx
+    3cf6:	75 c0                	jne    3cb8 <malloc+0x48>
+        return 0;
+  }
+}
+    3cf8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    3cfb:	31 c0                	xor    %eax,%eax
+}
+    3cfd:	5b                   	pop    %ebx
+    3cfe:	5e                   	pop    %esi
+    3cff:	5f                   	pop    %edi
+    3d00:	5d                   	pop    %ebp
+    3d01:	c3                   	ret    
+    3d02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+    3d08:	39 cf                	cmp    %ecx,%edi
+    3d0a:	74 54                	je     3d60 <malloc+0xf0>
+        p->s.size -= nunits;
+    3d0c:	29 f9                	sub    %edi,%ecx
+    3d0e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+    3d11:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+    3d14:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+    3d17:	89 15 c0 5e 00 00    	mov    %edx,0x5ec0
+}
+    3d1d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    3d20:	83 c0 08             	add    $0x8,%eax
+}
+    3d23:	5b                   	pop    %ebx
+    3d24:	5e                   	pop    %esi
+    3d25:	5f                   	pop    %edi
+    3d26:	5d                   	pop    %ebp
+    3d27:	c3                   	ret    
+    3d28:	90                   	nop
+    3d29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    3d30:	c7 05 c0 5e 00 00 c4 	movl   $0x5ec4,0x5ec0
+    3d37:	5e 00 00 
+    3d3a:	c7 05 c4 5e 00 00 c4 	movl   $0x5ec4,0x5ec4
+    3d41:	5e 00 00 
+    base.s.size = 0;
+    3d44:	b8 c4 5e 00 00       	mov    $0x5ec4,%eax
+    3d49:	c7 05 c8 5e 00 00 00 	movl   $0x0,0x5ec8
+    3d50:	00 00 00 
+    3d53:	e9 44 ff ff ff       	jmp    3c9c <malloc+0x2c>
+    3d58:	90                   	nop
+    3d59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+    3d60:	8b 08                	mov    (%eax),%ecx
+    3d62:	89 0a                	mov    %ecx,(%edx)
+    3d64:	eb b1                	jmp    3d17 <malloc+0xa7>
diff -ruN src-old/usertests.d src/usertests.d
--- src-old/usertests.d	1970-01-01 00:00:00.000000000 +0000
+++ src/usertests.d	2023-04-19 02:18:57.252322169 +0000
@@ -0,0 +1,2 @@
+usertests.o: usertests.c /usr/include/stdc-predef.h param.h types.h \
+ stat.h user.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files src-old/usertests.o and src/usertests.o differ
diff -ruN src-old/usertests.sym src/usertests.sym
--- src-old/usertests.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/usertests.sym	2023-04-19 02:18:57.304328309 +0000
@@ -0,0 +1,107 @@
+00000000 .text
+00003d68 .rodata
+0000551c .eh_frame
+00005e14 .data
+00005e40 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 usertests.c
+00005e40 args.1416
+00000000 ulib.c
+00000000 printf.c
+00003970 printint
+00005508 digits.1052
+00000000 umalloc.c
+00005ec0 freep
+00005ec4 base
+00003650 strcpy
+00000cf0 exitwait
+00003a10 printf
+00005e18 stdout
+00003280 bigargtest
+00003870 memmove
+0000395a munmap
+000002f0 openiputtest
+000038ea mknod
+00003760 gets
+00003922 getpid
+00000a10 pipe1
+00002b60 iref
+00003c70 malloc
+00003932 sleep
+00000200 exitiputtest
+0000394a kmfree
+00003380 fsfull
+00001be0 bigdir
+00002c80 forktest
+00003952 mmap
+00000660 writetest1
+000023f0 bigwrite
+00000e50 sharedfd
+00005e14 randstate
+000038b2 pipe
+00005ee0 uninit
+00002960 dirfile
+000038c2 write
+00003200 bsstest
+00005e1c echoargv
+000038fa fstat
+000038d2 kill
+00003150 validatetest
+000027e0 rmdot
+00003912 chdir
+000009c0 exectest
+000038da exec
+000038aa wait
+00003630 rand
+000038ba read
+00000bb0 preempt
+000038f2 unlink
+000035c0 argptest
+00000d80 mem
+0000389a fork
+0000392a sbrk
+0000393a uptime
+00005e30 __bss_start
+00003700 memset
+00000830 createtest
+00000000 main
+00001210 createdelete
+00003680 strcmp
+00000480 writetest
+0000391a dup
+00002d30 sbrktest
+000003f0 opentest
+00001d10 subdir
+00003550 uio
+000015c0 linktest
+00008600 buf
+000008e0 dirtest
+00000120 iputtest
+000037e0 stat
+000024d0 bigfile
+00005e30 _edata
+0000a604 _end
+00001430 unlinkread
+00003902 link
+00003942 kmalloc
+000038a2 exit
+00003830 atoi
+00001ad0 linkunlink
+0000a600 name
+000036d0 strlen
+000038e2 open
+00003720 strchr
+000017d0 concreate
+000026a0 fourteen
+00003140 validateint
+00001010 fourfiles
+0000390a mkdir
+000038ca close
+00003be0 free
Binary files src-old/usys.o and src/usys.o differ
diff -ruN src-old/usys.S src/usys.S
--- src-old/usys.S	2023-04-19 02:17:16.002996457 +0000
+++ src/usys.S	2023-04-19 02:17:16.026999981 +0000
@@ -29,3 +29,7 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(kmalloc)
+SYSCALL(kmfree) 
+SYSCALL(mmap)
+SYSCALL(munmap) 
\ No newline at end of file
Binary files src-old/vectors.o and src/vectors.o differ
diff -ruN src-old/vectors.S src/vectors.S
--- src-old/vectors.S	1970-01-01 00:00:00.000000000 +0000
+++ src/vectors.S	2023-04-19 02:18:55.152073588 +0000
@@ -0,0 +1,1537 @@
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+  pushl $0
+  jmp alltraps
+.globl vector1
+vector1:
+  pushl $0
+  pushl $1
+  jmp alltraps
+.globl vector2
+vector2:
+  pushl $0
+  pushl $2
+  jmp alltraps
+.globl vector3
+vector3:
+  pushl $0
+  pushl $3
+  jmp alltraps
+.globl vector4
+vector4:
+  pushl $0
+  pushl $4
+  jmp alltraps
+.globl vector5
+vector5:
+  pushl $0
+  pushl $5
+  jmp alltraps
+.globl vector6
+vector6:
+  pushl $0
+  pushl $6
+  jmp alltraps
+.globl vector7
+vector7:
+  pushl $0
+  pushl $7
+  jmp alltraps
+.globl vector8
+vector8:
+  pushl $8
+  jmp alltraps
+.globl vector9
+vector9:
+  pushl $0
+  pushl $9
+  jmp alltraps
+.globl vector10
+vector10:
+  pushl $10
+  jmp alltraps
+.globl vector11
+vector11:
+  pushl $11
+  jmp alltraps
+.globl vector12
+vector12:
+  pushl $12
+  jmp alltraps
+.globl vector13
+vector13:
+  pushl $13
+  jmp alltraps
+.globl vector14
+vector14:
+  pushl $14
+  jmp alltraps
+.globl vector15
+vector15:
+  pushl $0
+  pushl $15
+  jmp alltraps
+.globl vector16
+vector16:
+  pushl $0
+  pushl $16
+  jmp alltraps
+.globl vector17
+vector17:
+  pushl $17
+  jmp alltraps
+.globl vector18
+vector18:
+  pushl $0
+  pushl $18
+  jmp alltraps
+.globl vector19
+vector19:
+  pushl $0
+  pushl $19
+  jmp alltraps
+.globl vector20
+vector20:
+  pushl $0
+  pushl $20
+  jmp alltraps
+.globl vector21
+vector21:
+  pushl $0
+  pushl $21
+  jmp alltraps
+.globl vector22
+vector22:
+  pushl $0
+  pushl $22
+  jmp alltraps
+.globl vector23
+vector23:
+  pushl $0
+  pushl $23
+  jmp alltraps
+.globl vector24
+vector24:
+  pushl $0
+  pushl $24
+  jmp alltraps
+.globl vector25
+vector25:
+  pushl $0
+  pushl $25
+  jmp alltraps
+.globl vector26
+vector26:
+  pushl $0
+  pushl $26
+  jmp alltraps
+.globl vector27
+vector27:
+  pushl $0
+  pushl $27
+  jmp alltraps
+.globl vector28
+vector28:
+  pushl $0
+  pushl $28
+  jmp alltraps
+.globl vector29
+vector29:
+  pushl $0
+  pushl $29
+  jmp alltraps
+.globl vector30
+vector30:
+  pushl $0
+  pushl $30
+  jmp alltraps
+.globl vector31
+vector31:
+  pushl $0
+  pushl $31
+  jmp alltraps
+.globl vector32
+vector32:
+  pushl $0
+  pushl $32
+  jmp alltraps
+.globl vector33
+vector33:
+  pushl $0
+  pushl $33
+  jmp alltraps
+.globl vector34
+vector34:
+  pushl $0
+  pushl $34
+  jmp alltraps
+.globl vector35
+vector35:
+  pushl $0
+  pushl $35
+  jmp alltraps
+.globl vector36
+vector36:
+  pushl $0
+  pushl $36
+  jmp alltraps
+.globl vector37
+vector37:
+  pushl $0
+  pushl $37
+  jmp alltraps
+.globl vector38
+vector38:
+  pushl $0
+  pushl $38
+  jmp alltraps
+.globl vector39
+vector39:
+  pushl $0
+  pushl $39
+  jmp alltraps
+.globl vector40
+vector40:
+  pushl $0
+  pushl $40
+  jmp alltraps
+.globl vector41
+vector41:
+  pushl $0
+  pushl $41
+  jmp alltraps
+.globl vector42
+vector42:
+  pushl $0
+  pushl $42
+  jmp alltraps
+.globl vector43
+vector43:
+  pushl $0
+  pushl $43
+  jmp alltraps
+.globl vector44
+vector44:
+  pushl $0
+  pushl $44
+  jmp alltraps
+.globl vector45
+vector45:
+  pushl $0
+  pushl $45
+  jmp alltraps
+.globl vector46
+vector46:
+  pushl $0
+  pushl $46
+  jmp alltraps
+.globl vector47
+vector47:
+  pushl $0
+  pushl $47
+  jmp alltraps
+.globl vector48
+vector48:
+  pushl $0
+  pushl $48
+  jmp alltraps
+.globl vector49
+vector49:
+  pushl $0
+  pushl $49
+  jmp alltraps
+.globl vector50
+vector50:
+  pushl $0
+  pushl $50
+  jmp alltraps
+.globl vector51
+vector51:
+  pushl $0
+  pushl $51
+  jmp alltraps
+.globl vector52
+vector52:
+  pushl $0
+  pushl $52
+  jmp alltraps
+.globl vector53
+vector53:
+  pushl $0
+  pushl $53
+  jmp alltraps
+.globl vector54
+vector54:
+  pushl $0
+  pushl $54
+  jmp alltraps
+.globl vector55
+vector55:
+  pushl $0
+  pushl $55
+  jmp alltraps
+.globl vector56
+vector56:
+  pushl $0
+  pushl $56
+  jmp alltraps
+.globl vector57
+vector57:
+  pushl $0
+  pushl $57
+  jmp alltraps
+.globl vector58
+vector58:
+  pushl $0
+  pushl $58
+  jmp alltraps
+.globl vector59
+vector59:
+  pushl $0
+  pushl $59
+  jmp alltraps
+.globl vector60
+vector60:
+  pushl $0
+  pushl $60
+  jmp alltraps
+.globl vector61
+vector61:
+  pushl $0
+  pushl $61
+  jmp alltraps
+.globl vector62
+vector62:
+  pushl $0
+  pushl $62
+  jmp alltraps
+.globl vector63
+vector63:
+  pushl $0
+  pushl $63
+  jmp alltraps
+.globl vector64
+vector64:
+  pushl $0
+  pushl $64
+  jmp alltraps
+.globl vector65
+vector65:
+  pushl $0
+  pushl $65
+  jmp alltraps
+.globl vector66
+vector66:
+  pushl $0
+  pushl $66
+  jmp alltraps
+.globl vector67
+vector67:
+  pushl $0
+  pushl $67
+  jmp alltraps
+.globl vector68
+vector68:
+  pushl $0
+  pushl $68
+  jmp alltraps
+.globl vector69
+vector69:
+  pushl $0
+  pushl $69
+  jmp alltraps
+.globl vector70
+vector70:
+  pushl $0
+  pushl $70
+  jmp alltraps
+.globl vector71
+vector71:
+  pushl $0
+  pushl $71
+  jmp alltraps
+.globl vector72
+vector72:
+  pushl $0
+  pushl $72
+  jmp alltraps
+.globl vector73
+vector73:
+  pushl $0
+  pushl $73
+  jmp alltraps
+.globl vector74
+vector74:
+  pushl $0
+  pushl $74
+  jmp alltraps
+.globl vector75
+vector75:
+  pushl $0
+  pushl $75
+  jmp alltraps
+.globl vector76
+vector76:
+  pushl $0
+  pushl $76
+  jmp alltraps
+.globl vector77
+vector77:
+  pushl $0
+  pushl $77
+  jmp alltraps
+.globl vector78
+vector78:
+  pushl $0
+  pushl $78
+  jmp alltraps
+.globl vector79
+vector79:
+  pushl $0
+  pushl $79
+  jmp alltraps
+.globl vector80
+vector80:
+  pushl $0
+  pushl $80
+  jmp alltraps
+.globl vector81
+vector81:
+  pushl $0
+  pushl $81
+  jmp alltraps
+.globl vector82
+vector82:
+  pushl $0
+  pushl $82
+  jmp alltraps
+.globl vector83
+vector83:
+  pushl $0
+  pushl $83
+  jmp alltraps
+.globl vector84
+vector84:
+  pushl $0
+  pushl $84
+  jmp alltraps
+.globl vector85
+vector85:
+  pushl $0
+  pushl $85
+  jmp alltraps
+.globl vector86
+vector86:
+  pushl $0
+  pushl $86
+  jmp alltraps
+.globl vector87
+vector87:
+  pushl $0
+  pushl $87
+  jmp alltraps
+.globl vector88
+vector88:
+  pushl $0
+  pushl $88
+  jmp alltraps
+.globl vector89
+vector89:
+  pushl $0
+  pushl $89
+  jmp alltraps
+.globl vector90
+vector90:
+  pushl $0
+  pushl $90
+  jmp alltraps
+.globl vector91
+vector91:
+  pushl $0
+  pushl $91
+  jmp alltraps
+.globl vector92
+vector92:
+  pushl $0
+  pushl $92
+  jmp alltraps
+.globl vector93
+vector93:
+  pushl $0
+  pushl $93
+  jmp alltraps
+.globl vector94
+vector94:
+  pushl $0
+  pushl $94
+  jmp alltraps
+.globl vector95
+vector95:
+  pushl $0
+  pushl $95
+  jmp alltraps
+.globl vector96
+vector96:
+  pushl $0
+  pushl $96
+  jmp alltraps
+.globl vector97
+vector97:
+  pushl $0
+  pushl $97
+  jmp alltraps
+.globl vector98
+vector98:
+  pushl $0
+  pushl $98
+  jmp alltraps
+.globl vector99
+vector99:
+  pushl $0
+  pushl $99
+  jmp alltraps
+.globl vector100
+vector100:
+  pushl $0
+  pushl $100
+  jmp alltraps
+.globl vector101
+vector101:
+  pushl $0
+  pushl $101
+  jmp alltraps
+.globl vector102
+vector102:
+  pushl $0
+  pushl $102
+  jmp alltraps
+.globl vector103
+vector103:
+  pushl $0
+  pushl $103
+  jmp alltraps
+.globl vector104
+vector104:
+  pushl $0
+  pushl $104
+  jmp alltraps
+.globl vector105
+vector105:
+  pushl $0
+  pushl $105
+  jmp alltraps
+.globl vector106
+vector106:
+  pushl $0
+  pushl $106
+  jmp alltraps
+.globl vector107
+vector107:
+  pushl $0
+  pushl $107
+  jmp alltraps
+.globl vector108
+vector108:
+  pushl $0
+  pushl $108
+  jmp alltraps
+.globl vector109
+vector109:
+  pushl $0
+  pushl $109
+  jmp alltraps
+.globl vector110
+vector110:
+  pushl $0
+  pushl $110
+  jmp alltraps
+.globl vector111
+vector111:
+  pushl $0
+  pushl $111
+  jmp alltraps
+.globl vector112
+vector112:
+  pushl $0
+  pushl $112
+  jmp alltraps
+.globl vector113
+vector113:
+  pushl $0
+  pushl $113
+  jmp alltraps
+.globl vector114
+vector114:
+  pushl $0
+  pushl $114
+  jmp alltraps
+.globl vector115
+vector115:
+  pushl $0
+  pushl $115
+  jmp alltraps
+.globl vector116
+vector116:
+  pushl $0
+  pushl $116
+  jmp alltraps
+.globl vector117
+vector117:
+  pushl $0
+  pushl $117
+  jmp alltraps
+.globl vector118
+vector118:
+  pushl $0
+  pushl $118
+  jmp alltraps
+.globl vector119
+vector119:
+  pushl $0
+  pushl $119
+  jmp alltraps
+.globl vector120
+vector120:
+  pushl $0
+  pushl $120
+  jmp alltraps
+.globl vector121
+vector121:
+  pushl $0
+  pushl $121
+  jmp alltraps
+.globl vector122
+vector122:
+  pushl $0
+  pushl $122
+  jmp alltraps
+.globl vector123
+vector123:
+  pushl $0
+  pushl $123
+  jmp alltraps
+.globl vector124
+vector124:
+  pushl $0
+  pushl $124
+  jmp alltraps
+.globl vector125
+vector125:
+  pushl $0
+  pushl $125
+  jmp alltraps
+.globl vector126
+vector126:
+  pushl $0
+  pushl $126
+  jmp alltraps
+.globl vector127
+vector127:
+  pushl $0
+  pushl $127
+  jmp alltraps
+.globl vector128
+vector128:
+  pushl $0
+  pushl $128
+  jmp alltraps
+.globl vector129
+vector129:
+  pushl $0
+  pushl $129
+  jmp alltraps
+.globl vector130
+vector130:
+  pushl $0
+  pushl $130
+  jmp alltraps
+.globl vector131
+vector131:
+  pushl $0
+  pushl $131
+  jmp alltraps
+.globl vector132
+vector132:
+  pushl $0
+  pushl $132
+  jmp alltraps
+.globl vector133
+vector133:
+  pushl $0
+  pushl $133
+  jmp alltraps
+.globl vector134
+vector134:
+  pushl $0
+  pushl $134
+  jmp alltraps
+.globl vector135
+vector135:
+  pushl $0
+  pushl $135
+  jmp alltraps
+.globl vector136
+vector136:
+  pushl $0
+  pushl $136
+  jmp alltraps
+.globl vector137
+vector137:
+  pushl $0
+  pushl $137
+  jmp alltraps
+.globl vector138
+vector138:
+  pushl $0
+  pushl $138
+  jmp alltraps
+.globl vector139
+vector139:
+  pushl $0
+  pushl $139
+  jmp alltraps
+.globl vector140
+vector140:
+  pushl $0
+  pushl $140
+  jmp alltraps
+.globl vector141
+vector141:
+  pushl $0
+  pushl $141
+  jmp alltraps
+.globl vector142
+vector142:
+  pushl $0
+  pushl $142
+  jmp alltraps
+.globl vector143
+vector143:
+  pushl $0
+  pushl $143
+  jmp alltraps
+.globl vector144
+vector144:
+  pushl $0
+  pushl $144
+  jmp alltraps
+.globl vector145
+vector145:
+  pushl $0
+  pushl $145
+  jmp alltraps
+.globl vector146
+vector146:
+  pushl $0
+  pushl $146
+  jmp alltraps
+.globl vector147
+vector147:
+  pushl $0
+  pushl $147
+  jmp alltraps
+.globl vector148
+vector148:
+  pushl $0
+  pushl $148
+  jmp alltraps
+.globl vector149
+vector149:
+  pushl $0
+  pushl $149
+  jmp alltraps
+.globl vector150
+vector150:
+  pushl $0
+  pushl $150
+  jmp alltraps
+.globl vector151
+vector151:
+  pushl $0
+  pushl $151
+  jmp alltraps
+.globl vector152
+vector152:
+  pushl $0
+  pushl $152
+  jmp alltraps
+.globl vector153
+vector153:
+  pushl $0
+  pushl $153
+  jmp alltraps
+.globl vector154
+vector154:
+  pushl $0
+  pushl $154
+  jmp alltraps
+.globl vector155
+vector155:
+  pushl $0
+  pushl $155
+  jmp alltraps
+.globl vector156
+vector156:
+  pushl $0
+  pushl $156
+  jmp alltraps
+.globl vector157
+vector157:
+  pushl $0
+  pushl $157
+  jmp alltraps
+.globl vector158
+vector158:
+  pushl $0
+  pushl $158
+  jmp alltraps
+.globl vector159
+vector159:
+  pushl $0
+  pushl $159
+  jmp alltraps
+.globl vector160
+vector160:
+  pushl $0
+  pushl $160
+  jmp alltraps
+.globl vector161
+vector161:
+  pushl $0
+  pushl $161
+  jmp alltraps
+.globl vector162
+vector162:
+  pushl $0
+  pushl $162
+  jmp alltraps
+.globl vector163
+vector163:
+  pushl $0
+  pushl $163
+  jmp alltraps
+.globl vector164
+vector164:
+  pushl $0
+  pushl $164
+  jmp alltraps
+.globl vector165
+vector165:
+  pushl $0
+  pushl $165
+  jmp alltraps
+.globl vector166
+vector166:
+  pushl $0
+  pushl $166
+  jmp alltraps
+.globl vector167
+vector167:
+  pushl $0
+  pushl $167
+  jmp alltraps
+.globl vector168
+vector168:
+  pushl $0
+  pushl $168
+  jmp alltraps
+.globl vector169
+vector169:
+  pushl $0
+  pushl $169
+  jmp alltraps
+.globl vector170
+vector170:
+  pushl $0
+  pushl $170
+  jmp alltraps
+.globl vector171
+vector171:
+  pushl $0
+  pushl $171
+  jmp alltraps
+.globl vector172
+vector172:
+  pushl $0
+  pushl $172
+  jmp alltraps
+.globl vector173
+vector173:
+  pushl $0
+  pushl $173
+  jmp alltraps
+.globl vector174
+vector174:
+  pushl $0
+  pushl $174
+  jmp alltraps
+.globl vector175
+vector175:
+  pushl $0
+  pushl $175
+  jmp alltraps
+.globl vector176
+vector176:
+  pushl $0
+  pushl $176
+  jmp alltraps
+.globl vector177
+vector177:
+  pushl $0
+  pushl $177
+  jmp alltraps
+.globl vector178
+vector178:
+  pushl $0
+  pushl $178
+  jmp alltraps
+.globl vector179
+vector179:
+  pushl $0
+  pushl $179
+  jmp alltraps
+.globl vector180
+vector180:
+  pushl $0
+  pushl $180
+  jmp alltraps
+.globl vector181
+vector181:
+  pushl $0
+  pushl $181
+  jmp alltraps
+.globl vector182
+vector182:
+  pushl $0
+  pushl $182
+  jmp alltraps
+.globl vector183
+vector183:
+  pushl $0
+  pushl $183
+  jmp alltraps
+.globl vector184
+vector184:
+  pushl $0
+  pushl $184
+  jmp alltraps
+.globl vector185
+vector185:
+  pushl $0
+  pushl $185
+  jmp alltraps
+.globl vector186
+vector186:
+  pushl $0
+  pushl $186
+  jmp alltraps
+.globl vector187
+vector187:
+  pushl $0
+  pushl $187
+  jmp alltraps
+.globl vector188
+vector188:
+  pushl $0
+  pushl $188
+  jmp alltraps
+.globl vector189
+vector189:
+  pushl $0
+  pushl $189
+  jmp alltraps
+.globl vector190
+vector190:
+  pushl $0
+  pushl $190
+  jmp alltraps
+.globl vector191
+vector191:
+  pushl $0
+  pushl $191
+  jmp alltraps
+.globl vector192
+vector192:
+  pushl $0
+  pushl $192
+  jmp alltraps
+.globl vector193
+vector193:
+  pushl $0
+  pushl $193
+  jmp alltraps
+.globl vector194
+vector194:
+  pushl $0
+  pushl $194
+  jmp alltraps
+.globl vector195
+vector195:
+  pushl $0
+  pushl $195
+  jmp alltraps
+.globl vector196
+vector196:
+  pushl $0
+  pushl $196
+  jmp alltraps
+.globl vector197
+vector197:
+  pushl $0
+  pushl $197
+  jmp alltraps
+.globl vector198
+vector198:
+  pushl $0
+  pushl $198
+  jmp alltraps
+.globl vector199
+vector199:
+  pushl $0
+  pushl $199
+  jmp alltraps
+.globl vector200
+vector200:
+  pushl $0
+  pushl $200
+  jmp alltraps
+.globl vector201
+vector201:
+  pushl $0
+  pushl $201
+  jmp alltraps
+.globl vector202
+vector202:
+  pushl $0
+  pushl $202
+  jmp alltraps
+.globl vector203
+vector203:
+  pushl $0
+  pushl $203
+  jmp alltraps
+.globl vector204
+vector204:
+  pushl $0
+  pushl $204
+  jmp alltraps
+.globl vector205
+vector205:
+  pushl $0
+  pushl $205
+  jmp alltraps
+.globl vector206
+vector206:
+  pushl $0
+  pushl $206
+  jmp alltraps
+.globl vector207
+vector207:
+  pushl $0
+  pushl $207
+  jmp alltraps
+.globl vector208
+vector208:
+  pushl $0
+  pushl $208
+  jmp alltraps
+.globl vector209
+vector209:
+  pushl $0
+  pushl $209
+  jmp alltraps
+.globl vector210
+vector210:
+  pushl $0
+  pushl $210
+  jmp alltraps
+.globl vector211
+vector211:
+  pushl $0
+  pushl $211
+  jmp alltraps
+.globl vector212
+vector212:
+  pushl $0
+  pushl $212
+  jmp alltraps
+.globl vector213
+vector213:
+  pushl $0
+  pushl $213
+  jmp alltraps
+.globl vector214
+vector214:
+  pushl $0
+  pushl $214
+  jmp alltraps
+.globl vector215
+vector215:
+  pushl $0
+  pushl $215
+  jmp alltraps
+.globl vector216
+vector216:
+  pushl $0
+  pushl $216
+  jmp alltraps
+.globl vector217
+vector217:
+  pushl $0
+  pushl $217
+  jmp alltraps
+.globl vector218
+vector218:
+  pushl $0
+  pushl $218
+  jmp alltraps
+.globl vector219
+vector219:
+  pushl $0
+  pushl $219
+  jmp alltraps
+.globl vector220
+vector220:
+  pushl $0
+  pushl $220
+  jmp alltraps
+.globl vector221
+vector221:
+  pushl $0
+  pushl $221
+  jmp alltraps
+.globl vector222
+vector222:
+  pushl $0
+  pushl $222
+  jmp alltraps
+.globl vector223
+vector223:
+  pushl $0
+  pushl $223
+  jmp alltraps
+.globl vector224
+vector224:
+  pushl $0
+  pushl $224
+  jmp alltraps
+.globl vector225
+vector225:
+  pushl $0
+  pushl $225
+  jmp alltraps
+.globl vector226
+vector226:
+  pushl $0
+  pushl $226
+  jmp alltraps
+.globl vector227
+vector227:
+  pushl $0
+  pushl $227
+  jmp alltraps
+.globl vector228
+vector228:
+  pushl $0
+  pushl $228
+  jmp alltraps
+.globl vector229
+vector229:
+  pushl $0
+  pushl $229
+  jmp alltraps
+.globl vector230
+vector230:
+  pushl $0
+  pushl $230
+  jmp alltraps
+.globl vector231
+vector231:
+  pushl $0
+  pushl $231
+  jmp alltraps
+.globl vector232
+vector232:
+  pushl $0
+  pushl $232
+  jmp alltraps
+.globl vector233
+vector233:
+  pushl $0
+  pushl $233
+  jmp alltraps
+.globl vector234
+vector234:
+  pushl $0
+  pushl $234
+  jmp alltraps
+.globl vector235
+vector235:
+  pushl $0
+  pushl $235
+  jmp alltraps
+.globl vector236
+vector236:
+  pushl $0
+  pushl $236
+  jmp alltraps
+.globl vector237
+vector237:
+  pushl $0
+  pushl $237
+  jmp alltraps
+.globl vector238
+vector238:
+  pushl $0
+  pushl $238
+  jmp alltraps
+.globl vector239
+vector239:
+  pushl $0
+  pushl $239
+  jmp alltraps
+.globl vector240
+vector240:
+  pushl $0
+  pushl $240
+  jmp alltraps
+.globl vector241
+vector241:
+  pushl $0
+  pushl $241
+  jmp alltraps
+.globl vector242
+vector242:
+  pushl $0
+  pushl $242
+  jmp alltraps
+.globl vector243
+vector243:
+  pushl $0
+  pushl $243
+  jmp alltraps
+.globl vector244
+vector244:
+  pushl $0
+  pushl $244
+  jmp alltraps
+.globl vector245
+vector245:
+  pushl $0
+  pushl $245
+  jmp alltraps
+.globl vector246
+vector246:
+  pushl $0
+  pushl $246
+  jmp alltraps
+.globl vector247
+vector247:
+  pushl $0
+  pushl $247
+  jmp alltraps
+.globl vector248
+vector248:
+  pushl $0
+  pushl $248
+  jmp alltraps
+.globl vector249
+vector249:
+  pushl $0
+  pushl $249
+  jmp alltraps
+.globl vector250
+vector250:
+  pushl $0
+  pushl $250
+  jmp alltraps
+.globl vector251
+vector251:
+  pushl $0
+  pushl $251
+  jmp alltraps
+.globl vector252
+vector252:
+  pushl $0
+  pushl $252
+  jmp alltraps
+.globl vector253
+vector253:
+  pushl $0
+  pushl $253
+  jmp alltraps
+.globl vector254
+vector254:
+  pushl $0
+  pushl $254
+  jmp alltraps
+.globl vector255
+vector255:
+  pushl $0
+  pushl $255
+  jmp alltraps
+
+# vector table
+.data
+.globl vectors
+vectors:
+  .long vector0
+  .long vector1
+  .long vector2
+  .long vector3
+  .long vector4
+  .long vector5
+  .long vector6
+  .long vector7
+  .long vector8
+  .long vector9
+  .long vector10
+  .long vector11
+  .long vector12
+  .long vector13
+  .long vector14
+  .long vector15
+  .long vector16
+  .long vector17
+  .long vector18
+  .long vector19
+  .long vector20
+  .long vector21
+  .long vector22
+  .long vector23
+  .long vector24
+  .long vector25
+  .long vector26
+  .long vector27
+  .long vector28
+  .long vector29
+  .long vector30
+  .long vector31
+  .long vector32
+  .long vector33
+  .long vector34
+  .long vector35
+  .long vector36
+  .long vector37
+  .long vector38
+  .long vector39
+  .long vector40
+  .long vector41
+  .long vector42
+  .long vector43
+  .long vector44
+  .long vector45
+  .long vector46
+  .long vector47
+  .long vector48
+  .long vector49
+  .long vector50
+  .long vector51
+  .long vector52
+  .long vector53
+  .long vector54
+  .long vector55
+  .long vector56
+  .long vector57
+  .long vector58
+  .long vector59
+  .long vector60
+  .long vector61
+  .long vector62
+  .long vector63
+  .long vector64
+  .long vector65
+  .long vector66
+  .long vector67
+  .long vector68
+  .long vector69
+  .long vector70
+  .long vector71
+  .long vector72
+  .long vector73
+  .long vector74
+  .long vector75
+  .long vector76
+  .long vector77
+  .long vector78
+  .long vector79
+  .long vector80
+  .long vector81
+  .long vector82
+  .long vector83
+  .long vector84
+  .long vector85
+  .long vector86
+  .long vector87
+  .long vector88
+  .long vector89
+  .long vector90
+  .long vector91
+  .long vector92
+  .long vector93
+  .long vector94
+  .long vector95
+  .long vector96
+  .long vector97
+  .long vector98
+  .long vector99
+  .long vector100
+  .long vector101
+  .long vector102
+  .long vector103
+  .long vector104
+  .long vector105
+  .long vector106
+  .long vector107
+  .long vector108
+  .long vector109
+  .long vector110
+  .long vector111
+  .long vector112
+  .long vector113
+  .long vector114
+  .long vector115
+  .long vector116
+  .long vector117
+  .long vector118
+  .long vector119
+  .long vector120
+  .long vector121
+  .long vector122
+  .long vector123
+  .long vector124
+  .long vector125
+  .long vector126
+  .long vector127
+  .long vector128
+  .long vector129
+  .long vector130
+  .long vector131
+  .long vector132
+  .long vector133
+  .long vector134
+  .long vector135
+  .long vector136
+  .long vector137
+  .long vector138
+  .long vector139
+  .long vector140
+  .long vector141
+  .long vector142
+  .long vector143
+  .long vector144
+  .long vector145
+  .long vector146
+  .long vector147
+  .long vector148
+  .long vector149
+  .long vector150
+  .long vector151
+  .long vector152
+  .long vector153
+  .long vector154
+  .long vector155
+  .long vector156
+  .long vector157
+  .long vector158
+  .long vector159
+  .long vector160
+  .long vector161
+  .long vector162
+  .long vector163
+  .long vector164
+  .long vector165
+  .long vector166
+  .long vector167
+  .long vector168
+  .long vector169
+  .long vector170
+  .long vector171
+  .long vector172
+  .long vector173
+  .long vector174
+  .long vector175
+  .long vector176
+  .long vector177
+  .long vector178
+  .long vector179
+  .long vector180
+  .long vector181
+  .long vector182
+  .long vector183
+  .long vector184
+  .long vector185
+  .long vector186
+  .long vector187
+  .long vector188
+  .long vector189
+  .long vector190
+  .long vector191
+  .long vector192
+  .long vector193
+  .long vector194
+  .long vector195
+  .long vector196
+  .long vector197
+  .long vector198
+  .long vector199
+  .long vector200
+  .long vector201
+  .long vector202
+  .long vector203
+  .long vector204
+  .long vector205
+  .long vector206
+  .long vector207
+  .long vector208
+  .long vector209
+  .long vector210
+  .long vector211
+  .long vector212
+  .long vector213
+  .long vector214
+  .long vector215
+  .long vector216
+  .long vector217
+  .long vector218
+  .long vector219
+  .long vector220
+  .long vector221
+  .long vector222
+  .long vector223
+  .long vector224
+  .long vector225
+  .long vector226
+  .long vector227
+  .long vector228
+  .long vector229
+  .long vector230
+  .long vector231
+  .long vector232
+  .long vector233
+  .long vector234
+  .long vector235
+  .long vector236
+  .long vector237
+  .long vector238
+  .long vector239
+  .long vector240
+  .long vector241
+  .long vector242
+  .long vector243
+  .long vector244
+  .long vector245
+  .long vector246
+  .long vector247
+  .long vector248
+  .long vector249
+  .long vector250
+  .long vector251
+  .long vector252
+  .long vector253
+  .long vector254
+  .long vector255
diff -ruN src-old/vm.d src/vm.d
--- src-old/vm.d	1970-01-01 00:00:00.000000000 +0000
+++ src/vm.d	2023-04-19 02:18:55.232083070 +0000
@@ -0,0 +1,2 @@
+vm.o: vm.c /usr/include/stdc-predef.h param.h types.h defs.h x86.h \
+ memlayout.h mmu.h proc.h elf.h
Binary files src-old/vm.o and src/vm.o differ
Binary files src-old/_wc and src/_wc differ
diff -ruN src-old/wc.asm src/wc.asm
--- src-old/wc.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/wc.asm	2023-04-19 02:18:57.360334920 +0000
@@ -0,0 +1,1328 @@
+
+_wc:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	be 01 00 00 00       	mov    $0x1,%esi
+  16:	83 ec 18             	sub    $0x18,%esp
+  19:	8b 01                	mov    (%ecx),%eax
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  21:	83 f8 01             	cmp    $0x1,%eax
+{
+  24:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(argc <= 1){
+  27:	7e 56                	jle    7f <main+0x7f>
+  29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    wc(0, "");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 d6 03 00 00       	call   412 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	85 c0                	test   %eax,%eax
+  41:	89 c7                	mov    %eax,%edi
+  43:	78 26                	js     6b <main+0x6b>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+      exit();
+    }
+    wc(fd, argv[i]);
+  45:	83 ec 08             	sub    $0x8,%esp
+  48:	ff 33                	pushl  (%ebx)
+  for(i = 1; i < argc; i++){
+  4a:	83 c6 01             	add    $0x1,%esi
+    wc(fd, argv[i]);
+  4d:	50                   	push   %eax
+  4e:	83 c3 04             	add    $0x4,%ebx
+  51:	e8 4a 00 00 00       	call   a0 <wc>
+    close(fd);
+  56:	89 3c 24             	mov    %edi,(%esp)
+  59:	e8 9c 03 00 00       	call   3fa <close>
+  for(i = 1; i < argc; i++){
+  5e:	83 c4 10             	add    $0x10,%esp
+  61:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  64:	75 ca                	jne    30 <main+0x30>
+  }
+  exit();
+  66:	e8 67 03 00 00       	call   3d2 <exit>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+  6b:	50                   	push   %eax
+  6c:	ff 33                	pushl  (%ebx)
+  6e:	68 bb 08 00 00       	push   $0x8bb
+  73:	6a 01                	push   $0x1
+  75:	e8 c6 04 00 00       	call   540 <printf>
+      exit();
+  7a:	e8 53 03 00 00       	call   3d2 <exit>
+    wc(0, "");
+  7f:	52                   	push   %edx
+  80:	52                   	push   %edx
+  81:	68 ad 08 00 00       	push   $0x8ad
+  86:	6a 00                	push   $0x0
+  88:	e8 13 00 00 00       	call   a0 <wc>
+    exit();
+  8d:	e8 40 03 00 00       	call   3d2 <exit>
+  92:	66 90                	xchg   %ax,%ax
+  94:	66 90                	xchg   %ax,%ax
+  96:	66 90                	xchg   %ax,%ax
+  98:	66 90                	xchg   %ax,%ax
+  9a:	66 90                	xchg   %ax,%ax
+  9c:	66 90                	xchg   %ax,%ax
+  9e:	66 90                	xchg   %ax,%ax
+
+000000a0 <wc>:
+{
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	57                   	push   %edi
+  a4:	56                   	push   %esi
+  a5:	53                   	push   %ebx
+  l = w = c = 0;
+  a6:	31 db                	xor    %ebx,%ebx
+{
+  a8:	83 ec 1c             	sub    $0x1c,%esp
+  inword = 0;
+  ab:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  l = w = c = 0;
+  b2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+  b9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  c0:	83 ec 04             	sub    $0x4,%esp
+  c3:	68 00 02 00 00       	push   $0x200
+  c8:	68 e0 0b 00 00       	push   $0xbe0
+  cd:	ff 75 08             	pushl  0x8(%ebp)
+  d0:	e8 15 03 00 00       	call   3ea <read>
+  d5:	83 c4 10             	add    $0x10,%esp
+  d8:	83 f8 00             	cmp    $0x0,%eax
+  db:	89 c6                	mov    %eax,%esi
+  dd:	7e 61                	jle    140 <wc+0xa0>
+    for(i=0; i<n; i++){
+  df:	31 ff                	xor    %edi,%edi
+  e1:	eb 13                	jmp    f6 <wc+0x56>
+  e3:	90                   	nop
+  e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        inword = 0;
+  e8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+  ef:	83 c7 01             	add    $0x1,%edi
+  f2:	39 fe                	cmp    %edi,%esi
+  f4:	74 42                	je     138 <wc+0x98>
+      if(buf[i] == '\n')
+  f6:	0f be 87 e0 0b 00 00 	movsbl 0xbe0(%edi),%eax
+        l++;
+  fd:	31 c9                	xor    %ecx,%ecx
+  ff:	3c 0a                	cmp    $0xa,%al
+ 101:	0f 94 c1             	sete   %cl
+      if(strchr(" \r\t\n\v", buf[i]))
+ 104:	83 ec 08             	sub    $0x8,%esp
+ 107:	50                   	push   %eax
+ 108:	68 98 08 00 00       	push   $0x898
+        l++;
+ 10d:	01 cb                	add    %ecx,%ebx
+      if(strchr(" \r\t\n\v", buf[i]))
+ 10f:	e8 3c 01 00 00       	call   250 <strchr>
+ 114:	83 c4 10             	add    $0x10,%esp
+ 117:	85 c0                	test   %eax,%eax
+ 119:	75 cd                	jne    e8 <wc+0x48>
+      else if(!inword){
+ 11b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+ 11e:	85 d2                	test   %edx,%edx
+ 120:	75 cd                	jne    ef <wc+0x4f>
+    for(i=0; i<n; i++){
+ 122:	83 c7 01             	add    $0x1,%edi
+        w++;
+ 125:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
+        inword = 1;
+ 129:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+ 130:	39 fe                	cmp    %edi,%esi
+ 132:	75 c2                	jne    f6 <wc+0x56>
+ 134:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 138:	01 75 e0             	add    %esi,-0x20(%ebp)
+ 13b:	eb 83                	jmp    c0 <wc+0x20>
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+  if(n < 0){
+ 140:	75 24                	jne    166 <wc+0xc6>
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+ 142:	83 ec 08             	sub    $0x8,%esp
+ 145:	ff 75 0c             	pushl  0xc(%ebp)
+ 148:	ff 75 e0             	pushl  -0x20(%ebp)
+ 14b:	ff 75 dc             	pushl  -0x24(%ebp)
+ 14e:	53                   	push   %ebx
+ 14f:	68 ae 08 00 00       	push   $0x8ae
+ 154:	6a 01                	push   $0x1
+ 156:	e8 e5 03 00 00       	call   540 <printf>
+}
+ 15b:	83 c4 20             	add    $0x20,%esp
+ 15e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 161:	5b                   	pop    %ebx
+ 162:	5e                   	pop    %esi
+ 163:	5f                   	pop    %edi
+ 164:	5d                   	pop    %ebp
+ 165:	c3                   	ret    
+    printf(1, "wc: read error\n");
+ 166:	50                   	push   %eax
+ 167:	50                   	push   %eax
+ 168:	68 9e 08 00 00       	push   $0x89e
+ 16d:	6a 01                	push   $0x1
+ 16f:	e8 cc 03 00 00       	call   540 <printf>
+    exit();
+ 174:	e8 59 02 00 00       	call   3d2 <exit>
+ 179:	66 90                	xchg   %ax,%ax
+ 17b:	66 90                	xchg   %ax,%ax
+ 17d:	66 90                	xchg   %ax,%ax
+ 17f:	90                   	nop
+
+00000180 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	53                   	push   %ebx
+ 184:	8b 45 08             	mov    0x8(%ebp),%eax
+ 187:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 18a:	89 c2                	mov    %eax,%edx
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 190:	83 c1 01             	add    $0x1,%ecx
+ 193:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 197:	83 c2 01             	add    $0x1,%edx
+ 19a:	84 db                	test   %bl,%bl
+ 19c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 19f:	75 ef                	jne    190 <strcpy+0x10>
+    ;
+  return os;
+}
+ 1a1:	5b                   	pop    %ebx
+ 1a2:	5d                   	pop    %ebp
+ 1a3:	c3                   	ret    
+ 1a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000001b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	53                   	push   %ebx
+ 1b4:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 1ba:	0f b6 02             	movzbl (%edx),%eax
+ 1bd:	0f b6 19             	movzbl (%ecx),%ebx
+ 1c0:	84 c0                	test   %al,%al
+ 1c2:	75 1c                	jne    1e0 <strcmp+0x30>
+ 1c4:	eb 2a                	jmp    1f0 <strcmp+0x40>
+ 1c6:	8d 76 00             	lea    0x0(%esi),%esi
+ 1c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 1d0:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1d3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 1d6:	83 c1 01             	add    $0x1,%ecx
+ 1d9:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 1dc:	84 c0                	test   %al,%al
+ 1de:	74 10                	je     1f0 <strcmp+0x40>
+ 1e0:	38 d8                	cmp    %bl,%al
+ 1e2:	74 ec                	je     1d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1e4:	29 d8                	sub    %ebx,%eax
+}
+ 1e6:	5b                   	pop    %ebx
+ 1e7:	5d                   	pop    %ebp
+ 1e8:	c3                   	ret    
+ 1e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1f2:	29 d8                	sub    %ebx,%eax
+}
+ 1f4:	5b                   	pop    %ebx
+ 1f5:	5d                   	pop    %ebp
+ 1f6:	c3                   	ret    
+ 1f7:	89 f6                	mov    %esi,%esi
+ 1f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000200 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 206:	80 39 00             	cmpb   $0x0,(%ecx)
+ 209:	74 15                	je     220 <strlen+0x20>
+ 20b:	31 d2                	xor    %edx,%edx
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+ 210:	83 c2 01             	add    $0x1,%edx
+ 213:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 217:	89 d0                	mov    %edx,%eax
+ 219:	75 f5                	jne    210 <strlen+0x10>
+    ;
+  return n;
+}
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 220:	31 c0                	xor    %eax,%eax
+}
+ 222:	5d                   	pop    %ebp
+ 223:	c3                   	ret    
+ 224:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 22a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000230 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	57                   	push   %edi
+ 234:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 237:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 23a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 23d:	89 d7                	mov    %edx,%edi
+ 23f:	fc                   	cld    
+ 240:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 242:	89 d0                	mov    %edx,%eax
+ 244:	5f                   	pop    %edi
+ 245:	5d                   	pop    %ebp
+ 246:	c3                   	ret    
+ 247:	89 f6                	mov    %esi,%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000250 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	53                   	push   %ebx
+ 254:	8b 45 08             	mov    0x8(%ebp),%eax
+ 257:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 25a:	0f b6 10             	movzbl (%eax),%edx
+ 25d:	84 d2                	test   %dl,%dl
+ 25f:	74 1d                	je     27e <strchr+0x2e>
+    if(*s == c)
+ 261:	38 d3                	cmp    %dl,%bl
+ 263:	89 d9                	mov    %ebx,%ecx
+ 265:	75 0d                	jne    274 <strchr+0x24>
+ 267:	eb 17                	jmp    280 <strchr+0x30>
+ 269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 270:	38 ca                	cmp    %cl,%dl
+ 272:	74 0c                	je     280 <strchr+0x30>
+  for(; *s; s++)
+ 274:	83 c0 01             	add    $0x1,%eax
+ 277:	0f b6 10             	movzbl (%eax),%edx
+ 27a:	84 d2                	test   %dl,%dl
+ 27c:	75 f2                	jne    270 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 27e:	31 c0                	xor    %eax,%eax
+}
+ 280:	5b                   	pop    %ebx
+ 281:	5d                   	pop    %ebp
+ 282:	c3                   	ret    
+ 283:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 289:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000290 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	57                   	push   %edi
+ 294:	56                   	push   %esi
+ 295:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 296:	31 f6                	xor    %esi,%esi
+ 298:	89 f3                	mov    %esi,%ebx
+{
+ 29a:	83 ec 1c             	sub    $0x1c,%esp
+ 29d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 2a0:	eb 2f                	jmp    2d1 <gets+0x41>
+ 2a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 2a8:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 2ab:	83 ec 04             	sub    $0x4,%esp
+ 2ae:	6a 01                	push   $0x1
+ 2b0:	50                   	push   %eax
+ 2b1:	6a 00                	push   $0x0
+ 2b3:	e8 32 01 00 00       	call   3ea <read>
+    if(cc < 1)
+ 2b8:	83 c4 10             	add    $0x10,%esp
+ 2bb:	85 c0                	test   %eax,%eax
+ 2bd:	7e 1c                	jle    2db <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 2bf:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2c3:	83 c7 01             	add    $0x1,%edi
+ 2c6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2c9:	3c 0a                	cmp    $0xa,%al
+ 2cb:	74 23                	je     2f0 <gets+0x60>
+ 2cd:	3c 0d                	cmp    $0xd,%al
+ 2cf:	74 1f                	je     2f0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 2d1:	83 c3 01             	add    $0x1,%ebx
+ 2d4:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2d7:	89 fe                	mov    %edi,%esi
+ 2d9:	7c cd                	jl     2a8 <gets+0x18>
+ 2db:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2e0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2e6:	5b                   	pop    %ebx
+ 2e7:	5e                   	pop    %esi
+ 2e8:	5f                   	pop    %edi
+ 2e9:	5d                   	pop    %ebp
+ 2ea:	c3                   	ret    
+ 2eb:	90                   	nop
+ 2ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2f0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2f3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2f6:	01 de                	add    %ebx,%esi
+ 2f8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2fa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 300:	5b                   	pop    %ebx
+ 301:	5e                   	pop    %esi
+ 302:	5f                   	pop    %edi
+ 303:	5d                   	pop    %ebp
+ 304:	c3                   	ret    
+ 305:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 309:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000310 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	56                   	push   %esi
+ 314:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 315:	83 ec 08             	sub    $0x8,%esp
+ 318:	6a 00                	push   $0x0
+ 31a:	ff 75 08             	pushl  0x8(%ebp)
+ 31d:	e8 f0 00 00 00       	call   412 <open>
+  if(fd < 0)
+ 322:	83 c4 10             	add    $0x10,%esp
+ 325:	85 c0                	test   %eax,%eax
+ 327:	78 27                	js     350 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 329:	83 ec 08             	sub    $0x8,%esp
+ 32c:	ff 75 0c             	pushl  0xc(%ebp)
+ 32f:	89 c3                	mov    %eax,%ebx
+ 331:	50                   	push   %eax
+ 332:	e8 f3 00 00 00       	call   42a <fstat>
+  close(fd);
+ 337:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 33a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 33c:	e8 b9 00 00 00       	call   3fa <close>
+  return r;
+ 341:	83 c4 10             	add    $0x10,%esp
+}
+ 344:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 347:	89 f0                	mov    %esi,%eax
+ 349:	5b                   	pop    %ebx
+ 34a:	5e                   	pop    %esi
+ 34b:	5d                   	pop    %ebp
+ 34c:	c3                   	ret    
+ 34d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 350:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 355:	eb ed                	jmp    344 <stat+0x34>
+ 357:	89 f6                	mov    %esi,%esi
+ 359:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000360 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	53                   	push   %ebx
+ 364:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 367:	0f be 11             	movsbl (%ecx),%edx
+ 36a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 36d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 36f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 374:	77 1f                	ja     395 <atoi+0x35>
+ 376:	8d 76 00             	lea    0x0(%esi),%esi
+ 379:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 380:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 383:	83 c1 01             	add    $0x1,%ecx
+ 386:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 38a:	0f be 11             	movsbl (%ecx),%edx
+ 38d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 390:	80 fb 09             	cmp    $0x9,%bl
+ 393:	76 eb                	jbe    380 <atoi+0x20>
+  return n;
+}
+ 395:	5b                   	pop    %ebx
+ 396:	5d                   	pop    %ebp
+ 397:	c3                   	ret    
+ 398:	90                   	nop
+ 399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000003a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	56                   	push   %esi
+ 3a4:	53                   	push   %ebx
+ 3a5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 3a8:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 3ae:	85 db                	test   %ebx,%ebx
+ 3b0:	7e 14                	jle    3c6 <memmove+0x26>
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 3b8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 3bc:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 3bf:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 3c2:	39 d3                	cmp    %edx,%ebx
+ 3c4:	75 f2                	jne    3b8 <memmove+0x18>
+  return vdst;
+}
+ 3c6:	5b                   	pop    %ebx
+ 3c7:	5e                   	pop    %esi
+ 3c8:	5d                   	pop    %ebp
+ 3c9:	c3                   	ret    
+
+000003ca <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3ca:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <exit>:
+SYSCALL(exit)
+ 3d2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <wait>:
+SYSCALL(wait)
+ 3da:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <pipe>:
+SYSCALL(pipe)
+ 3e2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <read>:
+SYSCALL(read)
+ 3ea:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <write>:
+SYSCALL(write)
+ 3f2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <close>:
+SYSCALL(close)
+ 3fa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <kill>:
+SYSCALL(kill)
+ 402:	b8 06 00 00 00       	mov    $0x6,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <exec>:
+SYSCALL(exec)
+ 40a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <open>:
+SYSCALL(open)
+ 412:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+
+0000041a <mknod>:
+SYSCALL(mknod)
+ 41a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+
+00000422 <unlink>:
+SYSCALL(unlink)
+ 422:	b8 12 00 00 00       	mov    $0x12,%eax
+ 427:	cd 40                	int    $0x40
+ 429:	c3                   	ret    
+
+0000042a <fstat>:
+SYSCALL(fstat)
+ 42a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 42f:	cd 40                	int    $0x40
+ 431:	c3                   	ret    
+
+00000432 <link>:
+SYSCALL(link)
+ 432:	b8 13 00 00 00       	mov    $0x13,%eax
+ 437:	cd 40                	int    $0x40
+ 439:	c3                   	ret    
+
+0000043a <mkdir>:
+SYSCALL(mkdir)
+ 43a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 43f:	cd 40                	int    $0x40
+ 441:	c3                   	ret    
+
+00000442 <chdir>:
+SYSCALL(chdir)
+ 442:	b8 09 00 00 00       	mov    $0x9,%eax
+ 447:	cd 40                	int    $0x40
+ 449:	c3                   	ret    
+
+0000044a <dup>:
+SYSCALL(dup)
+ 44a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 44f:	cd 40                	int    $0x40
+ 451:	c3                   	ret    
+
+00000452 <getpid>:
+SYSCALL(getpid)
+ 452:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 457:	cd 40                	int    $0x40
+ 459:	c3                   	ret    
+
+0000045a <sbrk>:
+SYSCALL(sbrk)
+ 45a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 45f:	cd 40                	int    $0x40
+ 461:	c3                   	ret    
+
+00000462 <sleep>:
+SYSCALL(sleep)
+ 462:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 467:	cd 40                	int    $0x40
+ 469:	c3                   	ret    
+
+0000046a <uptime>:
+SYSCALL(uptime)
+ 46a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 46f:	cd 40                	int    $0x40
+ 471:	c3                   	ret    
+
+00000472 <kmalloc>:
+SYSCALL(kmalloc)
+ 472:	b8 16 00 00 00       	mov    $0x16,%eax
+ 477:	cd 40                	int    $0x40
+ 479:	c3                   	ret    
+
+0000047a <kmfree>:
+SYSCALL(kmfree) 
+ 47a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 47f:	cd 40                	int    $0x40
+ 481:	c3                   	ret    
+
+00000482 <mmap>:
+SYSCALL(mmap)
+ 482:	b8 18 00 00 00       	mov    $0x18,%eax
+ 487:	cd 40                	int    $0x40
+ 489:	c3                   	ret    
+
+0000048a <munmap>:
+ 48a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 48f:	cd 40                	int    $0x40
+ 491:	c3                   	ret    
+ 492:	66 90                	xchg   %ax,%ax
+ 494:	66 90                	xchg   %ax,%ax
+ 496:	66 90                	xchg   %ax,%ax
+ 498:	66 90                	xchg   %ax,%ax
+ 49a:	66 90                	xchg   %ax,%ax
+ 49c:	66 90                	xchg   %ax,%ax
+ 49e:	66 90                	xchg   %ax,%ax
+
+000004a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 4a0:	55                   	push   %ebp
+ 4a1:	89 e5                	mov    %esp,%ebp
+ 4a3:	57                   	push   %edi
+ 4a4:	56                   	push   %esi
+ 4a5:	53                   	push   %ebx
+ 4a6:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 4a9:	85 d2                	test   %edx,%edx
+{
+ 4ab:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 4ae:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 4b0:	79 76                	jns    528 <printint+0x88>
+ 4b2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 4b6:	74 70                	je     528 <printint+0x88>
+    x = -xx;
+ 4b8:	f7 d8                	neg    %eax
+    neg = 1;
+ 4ba:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 4c1:	31 f6                	xor    %esi,%esi
+ 4c3:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 4c6:	eb 0a                	jmp    4d2 <printint+0x32>
+ 4c8:	90                   	nop
+ 4c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4d0:	89 fe                	mov    %edi,%esi
+ 4d2:	31 d2                	xor    %edx,%edx
+ 4d4:	8d 7e 01             	lea    0x1(%esi),%edi
+ 4d7:	f7 f1                	div    %ecx
+ 4d9:	0f b6 92 d8 08 00 00 	movzbl 0x8d8(%edx),%edx
+  }while((x /= base) != 0);
+ 4e0:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 4e2:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 4e5:	75 e9                	jne    4d0 <printint+0x30>
+  if(neg)
+ 4e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 4ea:	85 c0                	test   %eax,%eax
+ 4ec:	74 08                	je     4f6 <printint+0x56>
+    buf[i++] = '-';
+ 4ee:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 4f3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 4f6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 4fa:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 4fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 500:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 503:	83 ec 04             	sub    $0x4,%esp
+ 506:	83 ee 01             	sub    $0x1,%esi
+ 509:	6a 01                	push   $0x1
+ 50b:	53                   	push   %ebx
+ 50c:	57                   	push   %edi
+ 50d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 510:	e8 dd fe ff ff       	call   3f2 <write>
+
+  while(--i >= 0)
+ 515:	83 c4 10             	add    $0x10,%esp
+ 518:	39 de                	cmp    %ebx,%esi
+ 51a:	75 e4                	jne    500 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 51c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 51f:	5b                   	pop    %ebx
+ 520:	5e                   	pop    %esi
+ 521:	5f                   	pop    %edi
+ 522:	5d                   	pop    %ebp
+ 523:	c3                   	ret    
+ 524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 528:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 52f:	eb 90                	jmp    4c1 <printint+0x21>
+ 531:	eb 0d                	jmp    540 <printf>
+ 533:	90                   	nop
+ 534:	90                   	nop
+ 535:	90                   	nop
+ 536:	90                   	nop
+ 537:	90                   	nop
+ 538:	90                   	nop
+ 539:	90                   	nop
+ 53a:	90                   	nop
+ 53b:	90                   	nop
+ 53c:	90                   	nop
+ 53d:	90                   	nop
+ 53e:	90                   	nop
+ 53f:	90                   	nop
+
+00000540 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 540:	55                   	push   %ebp
+ 541:	89 e5                	mov    %esp,%ebp
+ 543:	57                   	push   %edi
+ 544:	56                   	push   %esi
+ 545:	53                   	push   %ebx
+ 546:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 549:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 54c:	0f b6 1e             	movzbl (%esi),%ebx
+ 54f:	84 db                	test   %bl,%bl
+ 551:	0f 84 b3 00 00 00    	je     60a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 557:	8d 45 10             	lea    0x10(%ebp),%eax
+ 55a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 55d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 55f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 562:	eb 2f                	jmp    593 <printf+0x53>
+ 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 568:	83 f8 25             	cmp    $0x25,%eax
+ 56b:	0f 84 a7 00 00 00    	je     618 <printf+0xd8>
+  write(fd, &c, 1);
+ 571:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 574:	83 ec 04             	sub    $0x4,%esp
+ 577:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 57a:	6a 01                	push   $0x1
+ 57c:	50                   	push   %eax
+ 57d:	ff 75 08             	pushl  0x8(%ebp)
+ 580:	e8 6d fe ff ff       	call   3f2 <write>
+ 585:	83 c4 10             	add    $0x10,%esp
+ 588:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 58b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 58f:	84 db                	test   %bl,%bl
+ 591:	74 77                	je     60a <printf+0xca>
+    if(state == 0){
+ 593:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 595:	0f be cb             	movsbl %bl,%ecx
+ 598:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 59b:	74 cb                	je     568 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 59d:	83 ff 25             	cmp    $0x25,%edi
+ 5a0:	75 e6                	jne    588 <printf+0x48>
+      if(c == 'd'){
+ 5a2:	83 f8 64             	cmp    $0x64,%eax
+ 5a5:	0f 84 05 01 00 00    	je     6b0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 5ab:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 5b1:	83 f9 70             	cmp    $0x70,%ecx
+ 5b4:	74 72                	je     628 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 5b6:	83 f8 73             	cmp    $0x73,%eax
+ 5b9:	0f 84 99 00 00 00    	je     658 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 5bf:	83 f8 63             	cmp    $0x63,%eax
+ 5c2:	0f 84 08 01 00 00    	je     6d0 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 5c8:	83 f8 25             	cmp    $0x25,%eax
+ 5cb:	0f 84 ef 00 00 00    	je     6c0 <printf+0x180>
+  write(fd, &c, 1);
+ 5d1:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 5d4:	83 ec 04             	sub    $0x4,%esp
+ 5d7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5db:	6a 01                	push   $0x1
+ 5dd:	50                   	push   %eax
+ 5de:	ff 75 08             	pushl  0x8(%ebp)
+ 5e1:	e8 0c fe ff ff       	call   3f2 <write>
+ 5e6:	83 c4 0c             	add    $0xc,%esp
+ 5e9:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 5ec:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 5ef:	6a 01                	push   $0x1
+ 5f1:	50                   	push   %eax
+ 5f2:	ff 75 08             	pushl  0x8(%ebp)
+ 5f5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5f8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 5fa:	e8 f3 fd ff ff       	call   3f2 <write>
+  for(i = 0; fmt[i]; i++){
+ 5ff:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 603:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 606:	84 db                	test   %bl,%bl
+ 608:	75 89                	jne    593 <printf+0x53>
+    }
+  }
+}
+ 60a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 60d:	5b                   	pop    %ebx
+ 60e:	5e                   	pop    %esi
+ 60f:	5f                   	pop    %edi
+ 610:	5d                   	pop    %ebp
+ 611:	c3                   	ret    
+ 612:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 618:	bf 25 00 00 00       	mov    $0x25,%edi
+ 61d:	e9 66 ff ff ff       	jmp    588 <printf+0x48>
+ 622:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 628:	83 ec 0c             	sub    $0xc,%esp
+ 62b:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 630:	6a 00                	push   $0x0
+ 632:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 635:	8b 45 08             	mov    0x8(%ebp),%eax
+ 638:	8b 17                	mov    (%edi),%edx
+ 63a:	e8 61 fe ff ff       	call   4a0 <printint>
+        ap++;
+ 63f:	89 f8                	mov    %edi,%eax
+ 641:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 644:	31 ff                	xor    %edi,%edi
+        ap++;
+ 646:	83 c0 04             	add    $0x4,%eax
+ 649:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 64c:	e9 37 ff ff ff       	jmp    588 <printf+0x48>
+ 651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 658:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 65b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 65d:	83 c0 04             	add    $0x4,%eax
+ 660:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 663:	85 c9                	test   %ecx,%ecx
+ 665:	0f 84 8e 00 00 00    	je     6f9 <printf+0x1b9>
+        while(*s != 0){
+ 66b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 66e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 670:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 672:	84 c0                	test   %al,%al
+ 674:	0f 84 0e ff ff ff    	je     588 <printf+0x48>
+ 67a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 67d:	89 de                	mov    %ebx,%esi
+ 67f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 682:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 685:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 688:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 68b:	83 c6 01             	add    $0x1,%esi
+ 68e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 691:	6a 01                	push   $0x1
+ 693:	57                   	push   %edi
+ 694:	53                   	push   %ebx
+ 695:	e8 58 fd ff ff       	call   3f2 <write>
+        while(*s != 0){
+ 69a:	0f b6 06             	movzbl (%esi),%eax
+ 69d:	83 c4 10             	add    $0x10,%esp
+ 6a0:	84 c0                	test   %al,%al
+ 6a2:	75 e4                	jne    688 <printf+0x148>
+ 6a4:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 6a7:	31 ff                	xor    %edi,%edi
+ 6a9:	e9 da fe ff ff       	jmp    588 <printf+0x48>
+ 6ae:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 6b0:	83 ec 0c             	sub    $0xc,%esp
+ 6b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 6b8:	6a 01                	push   $0x1
+ 6ba:	e9 73 ff ff ff       	jmp    632 <printf+0xf2>
+ 6bf:	90                   	nop
+  write(fd, &c, 1);
+ 6c0:	83 ec 04             	sub    $0x4,%esp
+ 6c3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 6c6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 6c9:	6a 01                	push   $0x1
+ 6cb:	e9 21 ff ff ff       	jmp    5f1 <printf+0xb1>
+        putc(fd, *ap);
+ 6d0:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 6d3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 6d6:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 6d8:	6a 01                	push   $0x1
+        ap++;
+ 6da:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 6dd:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 6e0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 6e3:	50                   	push   %eax
+ 6e4:	ff 75 08             	pushl  0x8(%ebp)
+ 6e7:	e8 06 fd ff ff       	call   3f2 <write>
+        ap++;
+ 6ec:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 6ef:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6f2:	31 ff                	xor    %edi,%edi
+ 6f4:	e9 8f fe ff ff       	jmp    588 <printf+0x48>
+          s = "(null)";
+ 6f9:	bb cf 08 00 00       	mov    $0x8cf,%ebx
+        while(*s != 0){
+ 6fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 703:	e9 72 ff ff ff       	jmp    67a <printf+0x13a>
+ 708:	66 90                	xchg   %ax,%ax
+ 70a:	66 90                	xchg   %ax,%ax
+ 70c:	66 90                	xchg   %ax,%ax
+ 70e:	66 90                	xchg   %ax,%ax
+
+00000710 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 710:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 711:	a1 c0 0b 00 00       	mov    0xbc0,%eax
+{
+ 716:	89 e5                	mov    %esp,%ebp
+ 718:	57                   	push   %edi
+ 719:	56                   	push   %esi
+ 71a:	53                   	push   %ebx
+ 71b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 71e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 728:	39 c8                	cmp    %ecx,%eax
+ 72a:	8b 10                	mov    (%eax),%edx
+ 72c:	73 32                	jae    760 <free+0x50>
+ 72e:	39 d1                	cmp    %edx,%ecx
+ 730:	72 04                	jb     736 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 732:	39 d0                	cmp    %edx,%eax
+ 734:	72 32                	jb     768 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 736:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 739:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 73c:	39 fa                	cmp    %edi,%edx
+ 73e:	74 30                	je     770 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 740:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 743:	8b 50 04             	mov    0x4(%eax),%edx
+ 746:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 749:	39 f1                	cmp    %esi,%ecx
+ 74b:	74 3a                	je     787 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 74d:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 74f:	a3 c0 0b 00 00       	mov    %eax,0xbc0
+}
+ 754:	5b                   	pop    %ebx
+ 755:	5e                   	pop    %esi
+ 756:	5f                   	pop    %edi
+ 757:	5d                   	pop    %ebp
+ 758:	c3                   	ret    
+ 759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 760:	39 d0                	cmp    %edx,%eax
+ 762:	72 04                	jb     768 <free+0x58>
+ 764:	39 d1                	cmp    %edx,%ecx
+ 766:	72 ce                	jb     736 <free+0x26>
+{
+ 768:	89 d0                	mov    %edx,%eax
+ 76a:	eb bc                	jmp    728 <free+0x18>
+ 76c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 770:	03 72 04             	add    0x4(%edx),%esi
+ 773:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 776:	8b 10                	mov    (%eax),%edx
+ 778:	8b 12                	mov    (%edx),%edx
+ 77a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 77d:	8b 50 04             	mov    0x4(%eax),%edx
+ 780:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 783:	39 f1                	cmp    %esi,%ecx
+ 785:	75 c6                	jne    74d <free+0x3d>
+    p->s.size += bp->s.size;
+ 787:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 78a:	a3 c0 0b 00 00       	mov    %eax,0xbc0
+    p->s.size += bp->s.size;
+ 78f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 792:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 795:	89 10                	mov    %edx,(%eax)
+}
+ 797:	5b                   	pop    %ebx
+ 798:	5e                   	pop    %esi
+ 799:	5f                   	pop    %edi
+ 79a:	5d                   	pop    %ebp
+ 79b:	c3                   	ret    
+ 79c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000007a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7a0:	55                   	push   %ebp
+ 7a1:	89 e5                	mov    %esp,%ebp
+ 7a3:	57                   	push   %edi
+ 7a4:	56                   	push   %esi
+ 7a5:	53                   	push   %ebx
+ 7a6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 7ac:	8b 15 c0 0b 00 00    	mov    0xbc0,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7b2:	8d 78 07             	lea    0x7(%eax),%edi
+ 7b5:	c1 ef 03             	shr    $0x3,%edi
+ 7b8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 7bb:	85 d2                	test   %edx,%edx
+ 7bd:	0f 84 9d 00 00 00    	je     860 <malloc+0xc0>
+ 7c3:	8b 02                	mov    (%edx),%eax
+ 7c5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 7c8:	39 cf                	cmp    %ecx,%edi
+ 7ca:	76 6c                	jbe    838 <malloc+0x98>
+ 7cc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 7d2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7d7:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 7da:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 7e1:	eb 0e                	jmp    7f1 <malloc+0x51>
+ 7e3:	90                   	nop
+ 7e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7e8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 7ea:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7ed:	39 f9                	cmp    %edi,%ecx
+ 7ef:	73 47                	jae    838 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7f1:	39 05 c0 0b 00 00    	cmp    %eax,0xbc0
+ 7f7:	89 c2                	mov    %eax,%edx
+ 7f9:	75 ed                	jne    7e8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 7fb:	83 ec 0c             	sub    $0xc,%esp
+ 7fe:	56                   	push   %esi
+ 7ff:	e8 56 fc ff ff       	call   45a <sbrk>
+  if(p == (char*)-1)
+ 804:	83 c4 10             	add    $0x10,%esp
+ 807:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 80a:	74 1c                	je     828 <malloc+0x88>
+  hp->s.size = nu;
+ 80c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 80f:	83 ec 0c             	sub    $0xc,%esp
+ 812:	83 c0 08             	add    $0x8,%eax
+ 815:	50                   	push   %eax
+ 816:	e8 f5 fe ff ff       	call   710 <free>
+  return freep;
+ 81b:	8b 15 c0 0b 00 00    	mov    0xbc0,%edx
+      if((p = morecore(nunits)) == 0)
+ 821:	83 c4 10             	add    $0x10,%esp
+ 824:	85 d2                	test   %edx,%edx
+ 826:	75 c0                	jne    7e8 <malloc+0x48>
+        return 0;
+  }
+}
+ 828:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 82b:	31 c0                	xor    %eax,%eax
+}
+ 82d:	5b                   	pop    %ebx
+ 82e:	5e                   	pop    %esi
+ 82f:	5f                   	pop    %edi
+ 830:	5d                   	pop    %ebp
+ 831:	c3                   	ret    
+ 832:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 838:	39 cf                	cmp    %ecx,%edi
+ 83a:	74 54                	je     890 <malloc+0xf0>
+        p->s.size -= nunits;
+ 83c:	29 f9                	sub    %edi,%ecx
+ 83e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 841:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 844:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 847:	89 15 c0 0b 00 00    	mov    %edx,0xbc0
+}
+ 84d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 850:	83 c0 08             	add    $0x8,%eax
+}
+ 853:	5b                   	pop    %ebx
+ 854:	5e                   	pop    %esi
+ 855:	5f                   	pop    %edi
+ 856:	5d                   	pop    %ebp
+ 857:	c3                   	ret    
+ 858:	90                   	nop
+ 859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 860:	c7 05 c0 0b 00 00 c4 	movl   $0xbc4,0xbc0
+ 867:	0b 00 00 
+ 86a:	c7 05 c4 0b 00 00 c4 	movl   $0xbc4,0xbc4
+ 871:	0b 00 00 
+    base.s.size = 0;
+ 874:	b8 c4 0b 00 00       	mov    $0xbc4,%eax
+ 879:	c7 05 c8 0b 00 00 00 	movl   $0x0,0xbc8
+ 880:	00 00 00 
+ 883:	e9 44 ff ff ff       	jmp    7cc <malloc+0x2c>
+ 888:	90                   	nop
+ 889:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 890:	8b 08                	mov    (%eax),%ecx
+ 892:	89 0a                	mov    %ecx,(%edx)
+ 894:	eb b1                	jmp    847 <malloc+0xa7>
diff -ruN src-old/wc.d src/wc.d
--- src-old/wc.d	1970-01-01 00:00:00.000000000 +0000
+++ src/wc.d	2023-04-19 02:18:57.340332559 +0000
@@ -0,0 +1 @@
+wc.o: wc.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files src-old/wc.o and src/wc.o differ
diff -ruN src-old/wc.sym src/wc.sym
--- src-old/wc.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/wc.sym	2023-04-19 02:18:57.368335865 +0000
@@ -0,0 +1,63 @@
+00000000 .text
+00000898 .rodata
+000008ec .eh_frame
+00000bc0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 wc.c
+00000000 ulib.c
+00000000 printf.c
+000004a0 printint
+000008d8 digits.1052
+00000000 umalloc.c
+00000bc0 freep
+00000bc4 base
+00000180 strcpy
+00000540 printf
+000003a0 memmove
+0000048a munmap
+0000041a mknod
+00000290 gets
+00000452 getpid
+000007a0 malloc
+00000462 sleep
+0000047a kmfree
+00000482 mmap
+000003e2 pipe
+000003f2 write
+0000042a fstat
+00000402 kill
+00000442 chdir
+0000040a exec
+000003da wait
+000003ea read
+00000422 unlink
+000000a0 wc
+000003ca fork
+0000045a sbrk
+0000046a uptime
+00000bb8 __bss_start
+00000230 memset
+00000000 main
+000001b0 strcmp
+0000044a dup
+00000be0 buf
+00000310 stat
+00000bb8 _edata
+00000de0 _end
+00000432 link
+00000472 kmalloc
+000003d2 exit
+00000360 atoi
+00000200 strlen
+00000412 open
+00000250 strchr
+0000043a mkdir
+000003fa close
+00000710 free
Binary files src-old/_xv6_2 and src/_xv6_2 differ
diff -ruN src-old/xv6_2.asm src/xv6_2.asm
--- src-old/xv6_2.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/xv6_2.asm	2023-04-19 02:18:57.480349086 +0000
@@ -0,0 +1,1383 @@
+
+_xv6_2:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "XV6_TEST_OUTPUT : munmap good\n");
+  return;
+}
+
+int main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  test();
+  11:	e8 6a 00 00 00       	call   80 <test>
+  exit();
+  16:	e8 47 04 00 00       	call   462 <exit>
+  1b:	66 90                	xchg   %ax,%ax
+  1d:	66 90                	xchg   %ax,%ax
+  1f:	90                   	nop
+
+00000020 <memcmp>:
+{
+  20:	55                   	push   %ebp
+  21:	89 e5                	mov    %esp,%ebp
+  23:	57                   	push   %edi
+  24:	56                   	push   %esi
+  25:	53                   	push   %ebx
+  26:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  29:	8b 75 08             	mov    0x8(%ebp),%esi
+  2c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  while (n-- > 0)
+  2f:	85 db                	test   %ebx,%ebx
+  31:	74 29                	je     5c <memcmp+0x3c>
+    if (*s1 != *s2)
+  33:	0f b6 16             	movzbl (%esi),%edx
+  36:	0f b6 0f             	movzbl (%edi),%ecx
+  39:	38 d1                	cmp    %dl,%cl
+  3b:	75 2b                	jne    68 <memcmp+0x48>
+  3d:	b8 01 00 00 00       	mov    $0x1,%eax
+  42:	eb 14                	jmp    58 <memcmp+0x38>
+  44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  48:	0f b6 14 06          	movzbl (%esi,%eax,1),%edx
+  4c:	83 c0 01             	add    $0x1,%eax
+  4f:	0f b6 4c 07 ff       	movzbl -0x1(%edi,%eax,1),%ecx
+  54:	38 ca                	cmp    %cl,%dl
+  56:	75 10                	jne    68 <memcmp+0x48>
+  while (n-- > 0)
+  58:	39 d8                	cmp    %ebx,%eax
+  5a:	75 ec                	jne    48 <memcmp+0x28>
+}
+  5c:	5b                   	pop    %ebx
+  return 0;
+  5d:	31 c0                	xor    %eax,%eax
+}
+  5f:	5e                   	pop    %esi
+  60:	5f                   	pop    %edi
+  61:	5d                   	pop    %ebp
+  62:	c3                   	ret    
+  63:	90                   	nop
+  64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      return *s1 - *s2;
+  68:	0f b6 c2             	movzbl %dl,%eax
+}
+  6b:	5b                   	pop    %ebx
+      return *s1 - *s2;
+  6c:	29 c8                	sub    %ecx,%eax
+}
+  6e:	5e                   	pop    %esi
+  6f:	5f                   	pop    %edi
+  70:	5d                   	pop    %ebp
+  71:	c3                   	ret    
+  72:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000080 <test>:
+{
+  80:	55                   	push   %ebp
+  81:	89 e5                	mov    %esp,%ebp
+  83:	56                   	push   %esi
+  84:	53                   	push   %ebx
+  res = mmap(res, size, 0 /*prot*/, 0 /*flags*/, -1 /*fd*/, 0 /*offset*/);
+  85:	83 ec 08             	sub    $0x8,%esp
+  88:	6a 00                	push   $0x0
+  8a:	6a ff                	push   $0xffffffff
+  8c:	6a 00                	push   $0x0
+  8e:	6a 00                	push   $0x0
+  90:	6a 0a                	push   $0xa
+  92:	6a 00                	push   $0x0
+  94:	e8 79 04 00 00       	call   512 <mmap>
+  if (res <= 0)
+  99:	83 c4 20             	add    $0x20,%esp
+  9c:	85 c0                	test   %eax,%eax
+  9e:	0f 84 2c 01 00 00    	je     1d0 <test+0x150>
+  printf(1, "XV6_TEST_OUTPUT : mmap good\n");
+  a4:	83 ec 08             	sub    $0x8,%esp
+  a7:	89 c6                	mov    %eax,%esi
+  a9:	68 64 0a 00 00       	push   $0xa64
+  ae:	6a 01                	push   $0x1
+  b0:	e8 1b 05 00 00       	call   5d0 <printf>
+  zeroes = malloc(size);
+  b5:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  bc:	e8 6f 07 00 00       	call   830 <malloc>
+  memset(zeroes, 0, size);
+  c1:	83 c4 0c             	add    $0xc,%esp
+  zeroes = malloc(size);
+  c4:	89 c3                	mov    %eax,%ebx
+  memset(zeroes, 0, size);
+  c6:	6a 0a                	push   $0xa
+  c8:	6a 00                	push   $0x0
+  ca:	50                   	push   %eax
+  cb:	e8 f0 01 00 00       	call   2c0 <memset>
+    if (*s1 != *s2)
+  d0:	0f b6 16             	movzbl (%esi),%edx
+  d3:	0f b6 0b             	movzbl (%ebx),%ecx
+  d6:	83 c4 10             	add    $0x10,%esp
+  d9:	38 d1                	cmp    %dl,%cl
+  db:	0f 85 af 00 00 00    	jne    190 <test+0x110>
+  e1:	b8 01 00 00 00       	mov    $0x1,%eax
+  e6:	8d 76 00             	lea    0x0(%esi),%esi
+  e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  f0:	0f b6 14 06          	movzbl (%esi,%eax,1),%edx
+  f4:	0f b6 0c 03          	movzbl (%ebx,%eax,1),%ecx
+  f8:	38 ca                	cmp    %cl,%dl
+  fa:	0f 85 90 00 00 00    	jne    190 <test+0x110>
+ 100:	83 c0 01             	add    $0x1,%eax
+  while (n-- > 0)
+ 103:	83 f8 0a             	cmp    $0xa,%eax
+ 106:	75 e8                	jne    f0 <test+0x70>
+  printf(1, "XV6_TEST_OUTPUT : Ret of memcmp %d\n", ret);
+ 108:	83 ec 04             	sub    $0x4,%esp
+ 10b:	6a 00                	push   $0x0
+ 10d:	68 48 09 00 00       	push   $0x948
+ 112:	6a 01                	push   $0x1
+ 114:	e8 b7 04 00 00       	call   5d0 <printf>
+ 119:	83 c4 10             	add    $0x10,%esp
+  printf(1, "XV6_TEST_OUTPUT : mmap() has correctly cleared the newly mapped anonymous memory region\n");
+ 11c:	83 ec 08             	sub    $0x8,%esp
+ 11f:	68 c4 09 00 00       	push   $0x9c4
+ 124:	6a 01                	push   $0x1
+ 126:	e8 a5 04 00 00       	call   5d0 <printf>
+  printf(1, "given size here size: %d\n", size);
+ 12b:	83 c4 0c             	add    $0xc,%esp
+ 12e:	6a 0a                	push   $0xa
+ 130:	68 81 0a 00 00       	push   $0xa81
+ 135:	6a 01                	push   $0x1
+ 137:	e8 94 04 00 00       	call   5d0 <printf>
+  printf(1, "given addr here: %d\n", res);
+ 13c:	83 c4 0c             	add    $0xc,%esp
+ 13f:	56                   	push   %esi
+ 140:	68 9b 0a 00 00       	push   $0xa9b
+ 145:	6a 01                	push   $0x1
+ 147:	e8 84 04 00 00       	call   5d0 <printf>
+  int rv = munmap(res, size);
+ 14c:	58                   	pop    %eax
+ 14d:	5a                   	pop    %edx
+ 14e:	6a 0a                	push   $0xa
+ 150:	56                   	push   %esi
+ 151:	e8 c4 03 00 00       	call   51a <munmap>
+  printf(1, "rv here: %d\n", rv);
+ 156:	83 c4 0c             	add    $0xc,%esp
+  int rv = munmap(res, size);
+ 159:	89 c3                	mov    %eax,%ebx
+  printf(1, "rv here: %d\n", rv);
+ 15b:	50                   	push   %eax
+ 15c:	68 b0 0a 00 00       	push   $0xab0
+ 161:	6a 01                	push   $0x1
+ 163:	e8 68 04 00 00       	call   5d0 <printf>
+  if (rv < 0)
+ 168:	83 c4 10             	add    $0x10,%esp
+ 16b:	85 db                	test   %ebx,%ebx
+ 16d:	0f 88 7d 00 00 00    	js     1f0 <test+0x170>
+  printf(1, "XV6_TEST_OUTPUT : munmap good\n");
+ 173:	83 ec 08             	sub    $0x8,%esp
+ 176:	68 44 0a 00 00       	push   $0xa44
+ 17b:	6a 01                	push   $0x1
+ 17d:	e8 4e 04 00 00       	call   5d0 <printf>
+  return;
+ 182:	83 c4 10             	add    $0x10,%esp
+}
+ 185:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 188:	5b                   	pop    %ebx
+ 189:	5e                   	pop    %esi
+ 18a:	5d                   	pop    %ebp
+ 18b:	c3                   	ret    
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      return *s1 - *s2;
+ 190:	0f b6 da             	movzbl %dl,%ebx
+  printf(1, "XV6_TEST_OUTPUT : Ret of memcmp %d\n", ret);
+ 193:	83 ec 04             	sub    $0x4,%esp
+      return *s1 - *s2;
+ 196:	29 cb                	sub    %ecx,%ebx
+  printf(1, "XV6_TEST_OUTPUT : Ret of memcmp %d\n", ret);
+ 198:	53                   	push   %ebx
+ 199:	68 48 09 00 00       	push   $0x948
+ 19e:	6a 01                	push   $0x1
+ 1a0:	e8 2b 04 00 00       	call   5d0 <printf>
+  if (ret != 0)
+ 1a5:	83 c4 10             	add    $0x10,%esp
+ 1a8:	85 db                	test   %ebx,%ebx
+ 1aa:	0f 84 6c ff ff ff    	je     11c <test+0x9c>
+    printf(1, "XV6_TEST_OUTPUT : mmap() should zero out the  newly mapped anonymous memory region.!!\n");
+ 1b0:	83 ec 08             	sub    $0x8,%esp
+ 1b3:	68 6c 09 00 00       	push   $0x96c
+ 1b8:	6a 01                	push   $0x1
+ 1ba:	e8 11 04 00 00       	call   5d0 <printf>
+    return;
+ 1bf:	83 c4 10             	add    $0x10,%esp
+}
+ 1c2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1c5:	5b                   	pop    %ebx
+ 1c6:	5e                   	pop    %esi
+ 1c7:	5d                   	pop    %ebp
+ 1c8:	c3                   	ret    
+ 1c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+ 1d0:	83 ec 08             	sub    $0x8,%esp
+ 1d3:	68 28 09 00 00       	push   $0x928
+ 1d8:	6a 01                	push   $0x1
+ 1da:	e8 f1 03 00 00       	call   5d0 <printf>
+    return;
+ 1df:	83 c4 10             	add    $0x10,%esp
+}
+ 1e2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1e5:	5b                   	pop    %ebx
+ 1e6:	5e                   	pop    %esi
+ 1e7:	5d                   	pop    %ebp
+ 1e8:	c3                   	ret    
+ 1e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+ 1f0:	83 ec 08             	sub    $0x8,%esp
+ 1f3:	68 20 0a 00 00       	push   $0xa20
+ 1f8:	6a 01                	push   $0x1
+ 1fa:	e8 d1 03 00 00       	call   5d0 <printf>
+    return;
+ 1ff:	83 c4 10             	add    $0x10,%esp
+}
+ 202:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 205:	5b                   	pop    %ebx
+ 206:	5e                   	pop    %esi
+ 207:	5d                   	pop    %ebp
+ 208:	c3                   	ret    
+ 209:	66 90                	xchg   %ax,%ax
+ 20b:	66 90                	xchg   %ax,%ax
+ 20d:	66 90                	xchg   %ax,%ax
+ 20f:	90                   	nop
+
+00000210 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 45 08             	mov    0x8(%ebp),%eax
+ 217:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 21a:	89 c2                	mov    %eax,%edx
+ 21c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 220:	83 c1 01             	add    $0x1,%ecx
+ 223:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 227:	83 c2 01             	add    $0x1,%edx
+ 22a:	84 db                	test   %bl,%bl
+ 22c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 22f:	75 ef                	jne    220 <strcpy+0x10>
+    ;
+  return os;
+}
+ 231:	5b                   	pop    %ebx
+ 232:	5d                   	pop    %ebp
+ 233:	c3                   	ret    
+ 234:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 23a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000240 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	53                   	push   %ebx
+ 244:	8b 55 08             	mov    0x8(%ebp),%edx
+ 247:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 24a:	0f b6 02             	movzbl (%edx),%eax
+ 24d:	0f b6 19             	movzbl (%ecx),%ebx
+ 250:	84 c0                	test   %al,%al
+ 252:	75 1c                	jne    270 <strcmp+0x30>
+ 254:	eb 2a                	jmp    280 <strcmp+0x40>
+ 256:	8d 76 00             	lea    0x0(%esi),%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 260:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 263:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 266:	83 c1 01             	add    $0x1,%ecx
+ 269:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+ 26c:	84 c0                	test   %al,%al
+ 26e:	74 10                	je     280 <strcmp+0x40>
+ 270:	38 d8                	cmp    %bl,%al
+ 272:	74 ec                	je     260 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 274:	29 d8                	sub    %ebx,%eax
+}
+ 276:	5b                   	pop    %ebx
+ 277:	5d                   	pop    %ebp
+ 278:	c3                   	ret    
+ 279:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 280:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 282:	29 d8                	sub    %ebx,%eax
+}
+ 284:	5b                   	pop    %ebx
+ 285:	5d                   	pop    %ebp
+ 286:	c3                   	ret    
+ 287:	89 f6                	mov    %esi,%esi
+ 289:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000290 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 296:	80 39 00             	cmpb   $0x0,(%ecx)
+ 299:	74 15                	je     2b0 <strlen+0x20>
+ 29b:	31 d2                	xor    %edx,%edx
+ 29d:	8d 76 00             	lea    0x0(%esi),%esi
+ 2a0:	83 c2 01             	add    $0x1,%edx
+ 2a3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 2a7:	89 d0                	mov    %edx,%eax
+ 2a9:	75 f5                	jne    2a0 <strlen+0x10>
+    ;
+  return n;
+}
+ 2ab:	5d                   	pop    %ebp
+ 2ac:	c3                   	ret    
+ 2ad:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 2b0:	31 c0                	xor    %eax,%eax
+}
+ 2b2:	5d                   	pop    %ebp
+ 2b3:	c3                   	ret    
+ 2b4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 2ba:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000002c0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 2c0:	55                   	push   %ebp
+ 2c1:	89 e5                	mov    %esp,%ebp
+ 2c3:	57                   	push   %edi
+ 2c4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 2c7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 2ca:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 2cd:	89 d7                	mov    %edx,%edi
+ 2cf:	fc                   	cld    
+ 2d0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 2d2:	89 d0                	mov    %edx,%eax
+ 2d4:	5f                   	pop    %edi
+ 2d5:	5d                   	pop    %ebp
+ 2d6:	c3                   	ret    
+ 2d7:	89 f6                	mov    %esi,%esi
+ 2d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002e0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 2e0:	55                   	push   %ebp
+ 2e1:	89 e5                	mov    %esp,%ebp
+ 2e3:	53                   	push   %ebx
+ 2e4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2e7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 2ea:	0f b6 10             	movzbl (%eax),%edx
+ 2ed:	84 d2                	test   %dl,%dl
+ 2ef:	74 1d                	je     30e <strchr+0x2e>
+    if(*s == c)
+ 2f1:	38 d3                	cmp    %dl,%bl
+ 2f3:	89 d9                	mov    %ebx,%ecx
+ 2f5:	75 0d                	jne    304 <strchr+0x24>
+ 2f7:	eb 17                	jmp    310 <strchr+0x30>
+ 2f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 300:	38 ca                	cmp    %cl,%dl
+ 302:	74 0c                	je     310 <strchr+0x30>
+  for(; *s; s++)
+ 304:	83 c0 01             	add    $0x1,%eax
+ 307:	0f b6 10             	movzbl (%eax),%edx
+ 30a:	84 d2                	test   %dl,%dl
+ 30c:	75 f2                	jne    300 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 30e:	31 c0                	xor    %eax,%eax
+}
+ 310:	5b                   	pop    %ebx
+ 311:	5d                   	pop    %ebp
+ 312:	c3                   	ret    
+ 313:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 319:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000320 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 320:	55                   	push   %ebp
+ 321:	89 e5                	mov    %esp,%ebp
+ 323:	57                   	push   %edi
+ 324:	56                   	push   %esi
+ 325:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 326:	31 f6                	xor    %esi,%esi
+ 328:	89 f3                	mov    %esi,%ebx
+{
+ 32a:	83 ec 1c             	sub    $0x1c,%esp
+ 32d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 330:	eb 2f                	jmp    361 <gets+0x41>
+ 332:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 338:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 33b:	83 ec 04             	sub    $0x4,%esp
+ 33e:	6a 01                	push   $0x1
+ 340:	50                   	push   %eax
+ 341:	6a 00                	push   $0x0
+ 343:	e8 32 01 00 00       	call   47a <read>
+    if(cc < 1)
+ 348:	83 c4 10             	add    $0x10,%esp
+ 34b:	85 c0                	test   %eax,%eax
+ 34d:	7e 1c                	jle    36b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 34f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 353:	83 c7 01             	add    $0x1,%edi
+ 356:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 359:	3c 0a                	cmp    $0xa,%al
+ 35b:	74 23                	je     380 <gets+0x60>
+ 35d:	3c 0d                	cmp    $0xd,%al
+ 35f:	74 1f                	je     380 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 361:	83 c3 01             	add    $0x1,%ebx
+ 364:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 367:	89 fe                	mov    %edi,%esi
+ 369:	7c cd                	jl     338 <gets+0x18>
+ 36b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 36d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 370:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 373:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 376:	5b                   	pop    %ebx
+ 377:	5e                   	pop    %esi
+ 378:	5f                   	pop    %edi
+ 379:	5d                   	pop    %ebp
+ 37a:	c3                   	ret    
+ 37b:	90                   	nop
+ 37c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 380:	8b 75 08             	mov    0x8(%ebp),%esi
+ 383:	8b 45 08             	mov    0x8(%ebp),%eax
+ 386:	01 de                	add    %ebx,%esi
+ 388:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 38a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 38d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 390:	5b                   	pop    %ebx
+ 391:	5e                   	pop    %esi
+ 392:	5f                   	pop    %edi
+ 393:	5d                   	pop    %ebp
+ 394:	c3                   	ret    
+ 395:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 399:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000003a0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	56                   	push   %esi
+ 3a4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 3a5:	83 ec 08             	sub    $0x8,%esp
+ 3a8:	6a 00                	push   $0x0
+ 3aa:	ff 75 08             	pushl  0x8(%ebp)
+ 3ad:	e8 f0 00 00 00       	call   4a2 <open>
+  if(fd < 0)
+ 3b2:	83 c4 10             	add    $0x10,%esp
+ 3b5:	85 c0                	test   %eax,%eax
+ 3b7:	78 27                	js     3e0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 3b9:	83 ec 08             	sub    $0x8,%esp
+ 3bc:	ff 75 0c             	pushl  0xc(%ebp)
+ 3bf:	89 c3                	mov    %eax,%ebx
+ 3c1:	50                   	push   %eax
+ 3c2:	e8 f3 00 00 00       	call   4ba <fstat>
+  close(fd);
+ 3c7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 3ca:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 3cc:	e8 b9 00 00 00       	call   48a <close>
+  return r;
+ 3d1:	83 c4 10             	add    $0x10,%esp
+}
+ 3d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 3d7:	89 f0                	mov    %esi,%eax
+ 3d9:	5b                   	pop    %ebx
+ 3da:	5e                   	pop    %esi
+ 3db:	5d                   	pop    %ebp
+ 3dc:	c3                   	ret    
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 3e0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 3e5:	eb ed                	jmp    3d4 <stat+0x34>
+ 3e7:	89 f6                	mov    %esi,%esi
+ 3e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000003f0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	53                   	push   %ebx
+ 3f4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 3f7:	0f be 11             	movsbl (%ecx),%edx
+ 3fa:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 3fd:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 3ff:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 404:	77 1f                	ja     425 <atoi+0x35>
+ 406:	8d 76 00             	lea    0x0(%esi),%esi
+ 409:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 410:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 413:	83 c1 01             	add    $0x1,%ecx
+ 416:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 41a:	0f be 11             	movsbl (%ecx),%edx
+ 41d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 420:	80 fb 09             	cmp    $0x9,%bl
+ 423:	76 eb                	jbe    410 <atoi+0x20>
+  return n;
+}
+ 425:	5b                   	pop    %ebx
+ 426:	5d                   	pop    %ebp
+ 427:	c3                   	ret    
+ 428:	90                   	nop
+ 429:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000430 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	56                   	push   %esi
+ 434:	53                   	push   %ebx
+ 435:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 438:	8b 45 08             	mov    0x8(%ebp),%eax
+ 43b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 43e:	85 db                	test   %ebx,%ebx
+ 440:	7e 14                	jle    456 <memmove+0x26>
+ 442:	31 d2                	xor    %edx,%edx
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 448:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 44c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 44f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 452:	39 d3                	cmp    %edx,%ebx
+ 454:	75 f2                	jne    448 <memmove+0x18>
+  return vdst;
+}
+ 456:	5b                   	pop    %ebx
+ 457:	5e                   	pop    %esi
+ 458:	5d                   	pop    %ebp
+ 459:	c3                   	ret    
+
+0000045a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 45a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 45f:	cd 40                	int    $0x40
+ 461:	c3                   	ret    
+
+00000462 <exit>:
+SYSCALL(exit)
+ 462:	b8 02 00 00 00       	mov    $0x2,%eax
+ 467:	cd 40                	int    $0x40
+ 469:	c3                   	ret    
+
+0000046a <wait>:
+SYSCALL(wait)
+ 46a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 46f:	cd 40                	int    $0x40
+ 471:	c3                   	ret    
+
+00000472 <pipe>:
+SYSCALL(pipe)
+ 472:	b8 04 00 00 00       	mov    $0x4,%eax
+ 477:	cd 40                	int    $0x40
+ 479:	c3                   	ret    
+
+0000047a <read>:
+SYSCALL(read)
+ 47a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 47f:	cd 40                	int    $0x40
+ 481:	c3                   	ret    
+
+00000482 <write>:
+SYSCALL(write)
+ 482:	b8 10 00 00 00       	mov    $0x10,%eax
+ 487:	cd 40                	int    $0x40
+ 489:	c3                   	ret    
+
+0000048a <close>:
+SYSCALL(close)
+ 48a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 48f:	cd 40                	int    $0x40
+ 491:	c3                   	ret    
+
+00000492 <kill>:
+SYSCALL(kill)
+ 492:	b8 06 00 00 00       	mov    $0x6,%eax
+ 497:	cd 40                	int    $0x40
+ 499:	c3                   	ret    
+
+0000049a <exec>:
+SYSCALL(exec)
+ 49a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 49f:	cd 40                	int    $0x40
+ 4a1:	c3                   	ret    
+
+000004a2 <open>:
+SYSCALL(open)
+ 4a2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 4a7:	cd 40                	int    $0x40
+ 4a9:	c3                   	ret    
+
+000004aa <mknod>:
+SYSCALL(mknod)
+ 4aa:	b8 11 00 00 00       	mov    $0x11,%eax
+ 4af:	cd 40                	int    $0x40
+ 4b1:	c3                   	ret    
+
+000004b2 <unlink>:
+SYSCALL(unlink)
+ 4b2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 4b7:	cd 40                	int    $0x40
+ 4b9:	c3                   	ret    
+
+000004ba <fstat>:
+SYSCALL(fstat)
+ 4ba:	b8 08 00 00 00       	mov    $0x8,%eax
+ 4bf:	cd 40                	int    $0x40
+ 4c1:	c3                   	ret    
+
+000004c2 <link>:
+SYSCALL(link)
+ 4c2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 4c7:	cd 40                	int    $0x40
+ 4c9:	c3                   	ret    
+
+000004ca <mkdir>:
+SYSCALL(mkdir)
+ 4ca:	b8 14 00 00 00       	mov    $0x14,%eax
+ 4cf:	cd 40                	int    $0x40
+ 4d1:	c3                   	ret    
+
+000004d2 <chdir>:
+SYSCALL(chdir)
+ 4d2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 4d7:	cd 40                	int    $0x40
+ 4d9:	c3                   	ret    
+
+000004da <dup>:
+SYSCALL(dup)
+ 4da:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 4df:	cd 40                	int    $0x40
+ 4e1:	c3                   	ret    
+
+000004e2 <getpid>:
+SYSCALL(getpid)
+ 4e2:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 4e7:	cd 40                	int    $0x40
+ 4e9:	c3                   	ret    
+
+000004ea <sbrk>:
+SYSCALL(sbrk)
+ 4ea:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 4ef:	cd 40                	int    $0x40
+ 4f1:	c3                   	ret    
+
+000004f2 <sleep>:
+SYSCALL(sleep)
+ 4f2:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 4f7:	cd 40                	int    $0x40
+ 4f9:	c3                   	ret    
+
+000004fa <uptime>:
+SYSCALL(uptime)
+ 4fa:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 4ff:	cd 40                	int    $0x40
+ 501:	c3                   	ret    
+
+00000502 <kmalloc>:
+SYSCALL(kmalloc)
+ 502:	b8 16 00 00 00       	mov    $0x16,%eax
+ 507:	cd 40                	int    $0x40
+ 509:	c3                   	ret    
+
+0000050a <kmfree>:
+SYSCALL(kmfree) 
+ 50a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 50f:	cd 40                	int    $0x40
+ 511:	c3                   	ret    
+
+00000512 <mmap>:
+SYSCALL(mmap)
+ 512:	b8 18 00 00 00       	mov    $0x18,%eax
+ 517:	cd 40                	int    $0x40
+ 519:	c3                   	ret    
+
+0000051a <munmap>:
+ 51a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 51f:	cd 40                	int    $0x40
+ 521:	c3                   	ret    
+ 522:	66 90                	xchg   %ax,%ax
+ 524:	66 90                	xchg   %ax,%ax
+ 526:	66 90                	xchg   %ax,%ax
+ 528:	66 90                	xchg   %ax,%ax
+ 52a:	66 90                	xchg   %ax,%ax
+ 52c:	66 90                	xchg   %ax,%ax
+ 52e:	66 90                	xchg   %ax,%ax
+
+00000530 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 530:	55                   	push   %ebp
+ 531:	89 e5                	mov    %esp,%ebp
+ 533:	57                   	push   %edi
+ 534:	56                   	push   %esi
+ 535:	53                   	push   %ebx
+ 536:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 539:	85 d2                	test   %edx,%edx
+{
+ 53b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 53e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 540:	79 76                	jns    5b8 <printint+0x88>
+ 542:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 546:	74 70                	je     5b8 <printint+0x88>
+    x = -xx;
+ 548:	f7 d8                	neg    %eax
+    neg = 1;
+ 54a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 551:	31 f6                	xor    %esi,%esi
+ 553:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 556:	eb 0a                	jmp    562 <printint+0x32>
+ 558:	90                   	nop
+ 559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 560:	89 fe                	mov    %edi,%esi
+ 562:	31 d2                	xor    %edx,%edx
+ 564:	8d 7e 01             	lea    0x1(%esi),%edi
+ 567:	f7 f1                	div    %ecx
+ 569:	0f b6 92 c4 0a 00 00 	movzbl 0xac4(%edx),%edx
+  }while((x /= base) != 0);
+ 570:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 572:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 575:	75 e9                	jne    560 <printint+0x30>
+  if(neg)
+ 577:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 57a:	85 c0                	test   %eax,%eax
+ 57c:	74 08                	je     586 <printint+0x56>
+    buf[i++] = '-';
+ 57e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 583:	8d 7e 02             	lea    0x2(%esi),%edi
+ 586:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 58a:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
+ 590:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 593:	83 ec 04             	sub    $0x4,%esp
+ 596:	83 ee 01             	sub    $0x1,%esi
+ 599:	6a 01                	push   $0x1
+ 59b:	53                   	push   %ebx
+ 59c:	57                   	push   %edi
+ 59d:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 5a0:	e8 dd fe ff ff       	call   482 <write>
+
+  while(--i >= 0)
+ 5a5:	83 c4 10             	add    $0x10,%esp
+ 5a8:	39 de                	cmp    %ebx,%esi
+ 5aa:	75 e4                	jne    590 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 5ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5af:	5b                   	pop    %ebx
+ 5b0:	5e                   	pop    %esi
+ 5b1:	5f                   	pop    %edi
+ 5b2:	5d                   	pop    %ebp
+ 5b3:	c3                   	ret    
+ 5b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 5b8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 5bf:	eb 90                	jmp    551 <printint+0x21>
+ 5c1:	eb 0d                	jmp    5d0 <printf>
+ 5c3:	90                   	nop
+ 5c4:	90                   	nop
+ 5c5:	90                   	nop
+ 5c6:	90                   	nop
+ 5c7:	90                   	nop
+ 5c8:	90                   	nop
+ 5c9:	90                   	nop
+ 5ca:	90                   	nop
+ 5cb:	90                   	nop
+ 5cc:	90                   	nop
+ 5cd:	90                   	nop
+ 5ce:	90                   	nop
+ 5cf:	90                   	nop
+
+000005d0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 5d0:	55                   	push   %ebp
+ 5d1:	89 e5                	mov    %esp,%ebp
+ 5d3:	57                   	push   %edi
+ 5d4:	56                   	push   %esi
+ 5d5:	53                   	push   %ebx
+ 5d6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 5d9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 5dc:	0f b6 1e             	movzbl (%esi),%ebx
+ 5df:	84 db                	test   %bl,%bl
+ 5e1:	0f 84 b3 00 00 00    	je     69a <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 5e7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 5ea:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 5ed:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 5ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 5f2:	eb 2f                	jmp    623 <printf+0x53>
+ 5f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 5f8:	83 f8 25             	cmp    $0x25,%eax
+ 5fb:	0f 84 a7 00 00 00    	je     6a8 <printf+0xd8>
+  write(fd, &c, 1);
+ 601:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 604:	83 ec 04             	sub    $0x4,%esp
+ 607:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 60a:	6a 01                	push   $0x1
+ 60c:	50                   	push   %eax
+ 60d:	ff 75 08             	pushl  0x8(%ebp)
+ 610:	e8 6d fe ff ff       	call   482 <write>
+ 615:	83 c4 10             	add    $0x10,%esp
+ 618:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 61b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 61f:	84 db                	test   %bl,%bl
+ 621:	74 77                	je     69a <printf+0xca>
+    if(state == 0){
+ 623:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 625:	0f be cb             	movsbl %bl,%ecx
+ 628:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 62b:	74 cb                	je     5f8 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 62d:	83 ff 25             	cmp    $0x25,%edi
+ 630:	75 e6                	jne    618 <printf+0x48>
+      if(c == 'd'){
+ 632:	83 f8 64             	cmp    $0x64,%eax
+ 635:	0f 84 05 01 00 00    	je     740 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 63b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 641:	83 f9 70             	cmp    $0x70,%ecx
+ 644:	74 72                	je     6b8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 646:	83 f8 73             	cmp    $0x73,%eax
+ 649:	0f 84 99 00 00 00    	je     6e8 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 64f:	83 f8 63             	cmp    $0x63,%eax
+ 652:	0f 84 08 01 00 00    	je     760 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 658:	83 f8 25             	cmp    $0x25,%eax
+ 65b:	0f 84 ef 00 00 00    	je     750 <printf+0x180>
+  write(fd, &c, 1);
+ 661:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 664:	83 ec 04             	sub    $0x4,%esp
+ 667:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 66b:	6a 01                	push   $0x1
+ 66d:	50                   	push   %eax
+ 66e:	ff 75 08             	pushl  0x8(%ebp)
+ 671:	e8 0c fe ff ff       	call   482 <write>
+ 676:	83 c4 0c             	add    $0xc,%esp
+ 679:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 67c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 67f:	6a 01                	push   $0x1
+ 681:	50                   	push   %eax
+ 682:	ff 75 08             	pushl  0x8(%ebp)
+ 685:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 688:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 68a:	e8 f3 fd ff ff       	call   482 <write>
+  for(i = 0; fmt[i]; i++){
+ 68f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 693:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 696:	84 db                	test   %bl,%bl
+ 698:	75 89                	jne    623 <printf+0x53>
+    }
+  }
+}
+ 69a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 69d:	5b                   	pop    %ebx
+ 69e:	5e                   	pop    %esi
+ 69f:	5f                   	pop    %edi
+ 6a0:	5d                   	pop    %ebp
+ 6a1:	c3                   	ret    
+ 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 6a8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 6ad:	e9 66 ff ff ff       	jmp    618 <printf+0x48>
+ 6b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 6b8:	83 ec 0c             	sub    $0xc,%esp
+ 6bb:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 6c0:	6a 00                	push   $0x0
+ 6c2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 6c5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6c8:	8b 17                	mov    (%edi),%edx
+ 6ca:	e8 61 fe ff ff       	call   530 <printint>
+        ap++;
+ 6cf:	89 f8                	mov    %edi,%eax
+ 6d1:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6d4:	31 ff                	xor    %edi,%edi
+        ap++;
+ 6d6:	83 c0 04             	add    $0x4,%eax
+ 6d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 6dc:	e9 37 ff ff ff       	jmp    618 <printf+0x48>
+ 6e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 6e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 6eb:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 6ed:	83 c0 04             	add    $0x4,%eax
+ 6f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 6f3:	85 c9                	test   %ecx,%ecx
+ 6f5:	0f 84 8e 00 00 00    	je     789 <printf+0x1b9>
+        while(*s != 0){
+ 6fb:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 6fe:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 700:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 702:	84 c0                	test   %al,%al
+ 704:	0f 84 0e ff ff ff    	je     618 <printf+0x48>
+ 70a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 70d:	89 de                	mov    %ebx,%esi
+ 70f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 712:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 715:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 718:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 71b:	83 c6 01             	add    $0x1,%esi
+ 71e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 721:	6a 01                	push   $0x1
+ 723:	57                   	push   %edi
+ 724:	53                   	push   %ebx
+ 725:	e8 58 fd ff ff       	call   482 <write>
+        while(*s != 0){
+ 72a:	0f b6 06             	movzbl (%esi),%eax
+ 72d:	83 c4 10             	add    $0x10,%esp
+ 730:	84 c0                	test   %al,%al
+ 732:	75 e4                	jne    718 <printf+0x148>
+ 734:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 737:	31 ff                	xor    %edi,%edi
+ 739:	e9 da fe ff ff       	jmp    618 <printf+0x48>
+ 73e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 740:	83 ec 0c             	sub    $0xc,%esp
+ 743:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 748:	6a 01                	push   $0x1
+ 74a:	e9 73 ff ff ff       	jmp    6c2 <printf+0xf2>
+ 74f:	90                   	nop
+  write(fd, &c, 1);
+ 750:	83 ec 04             	sub    $0x4,%esp
+ 753:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 756:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 759:	6a 01                	push   $0x1
+ 75b:	e9 21 ff ff ff       	jmp    681 <printf+0xb1>
+        putc(fd, *ap);
+ 760:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 763:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 766:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 768:	6a 01                	push   $0x1
+        ap++;
+ 76a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 76d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 770:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 773:	50                   	push   %eax
+ 774:	ff 75 08             	pushl  0x8(%ebp)
+ 777:	e8 06 fd ff ff       	call   482 <write>
+        ap++;
+ 77c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 77f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 782:	31 ff                	xor    %edi,%edi
+ 784:	e9 8f fe ff ff       	jmp    618 <printf+0x48>
+          s = "(null)";
+ 789:	bb bd 0a 00 00       	mov    $0xabd,%ebx
+        while(*s != 0){
+ 78e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 793:	e9 72 ff ff ff       	jmp    70a <printf+0x13a>
+ 798:	66 90                	xchg   %ax,%ax
+ 79a:	66 90                	xchg   %ax,%ax
+ 79c:	66 90                	xchg   %ax,%ax
+ 79e:	66 90                	xchg   %ax,%ax
+
+000007a0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 7a0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 7a1:	a1 f4 0d 00 00       	mov    0xdf4,%eax
+{
+ 7a6:	89 e5                	mov    %esp,%ebp
+ 7a8:	57                   	push   %edi
+ 7a9:	56                   	push   %esi
+ 7aa:	53                   	push   %ebx
+ 7ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 7ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 7b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 7b8:	39 c8                	cmp    %ecx,%eax
+ 7ba:	8b 10                	mov    (%eax),%edx
+ 7bc:	73 32                	jae    7f0 <free+0x50>
+ 7be:	39 d1                	cmp    %edx,%ecx
+ 7c0:	72 04                	jb     7c6 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7c2:	39 d0                	cmp    %edx,%eax
+ 7c4:	72 32                	jb     7f8 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 7c6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 7c9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 7cc:	39 fa                	cmp    %edi,%edx
+ 7ce:	74 30                	je     800 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 7d0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 7d3:	8b 50 04             	mov    0x4(%eax),%edx
+ 7d6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 7d9:	39 f1                	cmp    %esi,%ecx
+ 7db:	74 3a                	je     817 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 7dd:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 7df:	a3 f4 0d 00 00       	mov    %eax,0xdf4
+}
+ 7e4:	5b                   	pop    %ebx
+ 7e5:	5e                   	pop    %esi
+ 7e6:	5f                   	pop    %edi
+ 7e7:	5d                   	pop    %ebp
+ 7e8:	c3                   	ret    
+ 7e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7f0:	39 d0                	cmp    %edx,%eax
+ 7f2:	72 04                	jb     7f8 <free+0x58>
+ 7f4:	39 d1                	cmp    %edx,%ecx
+ 7f6:	72 ce                	jb     7c6 <free+0x26>
+{
+ 7f8:	89 d0                	mov    %edx,%eax
+ 7fa:	eb bc                	jmp    7b8 <free+0x18>
+ 7fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 800:	03 72 04             	add    0x4(%edx),%esi
+ 803:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 806:	8b 10                	mov    (%eax),%edx
+ 808:	8b 12                	mov    (%edx),%edx
+ 80a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 80d:	8b 50 04             	mov    0x4(%eax),%edx
+ 810:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 813:	39 f1                	cmp    %esi,%ecx
+ 815:	75 c6                	jne    7dd <free+0x3d>
+    p->s.size += bp->s.size;
+ 817:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 81a:	a3 f4 0d 00 00       	mov    %eax,0xdf4
+    p->s.size += bp->s.size;
+ 81f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 822:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 825:	89 10                	mov    %edx,(%eax)
+}
+ 827:	5b                   	pop    %ebx
+ 828:	5e                   	pop    %esi
+ 829:	5f                   	pop    %edi
+ 82a:	5d                   	pop    %ebp
+ 82b:	c3                   	ret    
+ 82c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000830 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 830:	55                   	push   %ebp
+ 831:	89 e5                	mov    %esp,%ebp
+ 833:	57                   	push   %edi
+ 834:	56                   	push   %esi
+ 835:	53                   	push   %ebx
+ 836:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 839:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 83c:	8b 15 f4 0d 00 00    	mov    0xdf4,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 842:	8d 78 07             	lea    0x7(%eax),%edi
+ 845:	c1 ef 03             	shr    $0x3,%edi
+ 848:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 84b:	85 d2                	test   %edx,%edx
+ 84d:	0f 84 9d 00 00 00    	je     8f0 <malloc+0xc0>
+ 853:	8b 02                	mov    (%edx),%eax
+ 855:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 858:	39 cf                	cmp    %ecx,%edi
+ 85a:	76 6c                	jbe    8c8 <malloc+0x98>
+ 85c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 862:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 867:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 86a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 871:	eb 0e                	jmp    881 <malloc+0x51>
+ 873:	90                   	nop
+ 874:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 878:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 87a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 87d:	39 f9                	cmp    %edi,%ecx
+ 87f:	73 47                	jae    8c8 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 881:	39 05 f4 0d 00 00    	cmp    %eax,0xdf4
+ 887:	89 c2                	mov    %eax,%edx
+ 889:	75 ed                	jne    878 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 88b:	83 ec 0c             	sub    $0xc,%esp
+ 88e:	56                   	push   %esi
+ 88f:	e8 56 fc ff ff       	call   4ea <sbrk>
+  if(p == (char*)-1)
+ 894:	83 c4 10             	add    $0x10,%esp
+ 897:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 89a:	74 1c                	je     8b8 <malloc+0x88>
+  hp->s.size = nu;
+ 89c:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 89f:	83 ec 0c             	sub    $0xc,%esp
+ 8a2:	83 c0 08             	add    $0x8,%eax
+ 8a5:	50                   	push   %eax
+ 8a6:	e8 f5 fe ff ff       	call   7a0 <free>
+  return freep;
+ 8ab:	8b 15 f4 0d 00 00    	mov    0xdf4,%edx
+      if((p = morecore(nunits)) == 0)
+ 8b1:	83 c4 10             	add    $0x10,%esp
+ 8b4:	85 d2                	test   %edx,%edx
+ 8b6:	75 c0                	jne    878 <malloc+0x48>
+        return 0;
+  }
+}
+ 8b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 8bb:	31 c0                	xor    %eax,%eax
+}
+ 8bd:	5b                   	pop    %ebx
+ 8be:	5e                   	pop    %esi
+ 8bf:	5f                   	pop    %edi
+ 8c0:	5d                   	pop    %ebp
+ 8c1:	c3                   	ret    
+ 8c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 8c8:	39 cf                	cmp    %ecx,%edi
+ 8ca:	74 54                	je     920 <malloc+0xf0>
+        p->s.size -= nunits;
+ 8cc:	29 f9                	sub    %edi,%ecx
+ 8ce:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 8d1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 8d4:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 8d7:	89 15 f4 0d 00 00    	mov    %edx,0xdf4
+}
+ 8dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 8e0:	83 c0 08             	add    $0x8,%eax
+}
+ 8e3:	5b                   	pop    %ebx
+ 8e4:	5e                   	pop    %esi
+ 8e5:	5f                   	pop    %edi
+ 8e6:	5d                   	pop    %ebp
+ 8e7:	c3                   	ret    
+ 8e8:	90                   	nop
+ 8e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 8f0:	c7 05 f4 0d 00 00 f8 	movl   $0xdf8,0xdf4
+ 8f7:	0d 00 00 
+ 8fa:	c7 05 f8 0d 00 00 f8 	movl   $0xdf8,0xdf8
+ 901:	0d 00 00 
+    base.s.size = 0;
+ 904:	b8 f8 0d 00 00       	mov    $0xdf8,%eax
+ 909:	c7 05 fc 0d 00 00 00 	movl   $0x0,0xdfc
+ 910:	00 00 00 
+ 913:	e9 44 ff ff ff       	jmp    85c <malloc+0x2c>
+ 918:	90                   	nop
+ 919:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 920:	8b 08                	mov    (%eax),%ecx
+ 922:	89 0a                	mov    %ecx,(%edx)
+ 924:	eb b1                	jmp    8d7 <malloc+0xa7>
diff -ruN src-old/xv6_2.c src/xv6_2.c
--- src-old/xv6_2.c	1970-01-01 00:00:00.000000000 +0000
+++ src/xv6_2.c	2023-04-19 02:17:16.035001156 +0000
@@ -0,0 +1,77 @@
+#include "param.h"
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "traps.h"
+#include "memlayout.h"
+
+/*Test simple mmap and munmap.
+Test mmap has zeroed the newly mapped anonymous region.*/
+int memcmp(const void *v1, const void *v2, uint n)
+{
+  const uchar *s1, *s2;
+
+  s1 = v1;
+  s2 = v2;
+  while (n-- > 0)
+  {
+    if (*s1 != *s2)
+      return *s1 - *s2;
+
+    s1++, s2++;
+  }
+
+  return 0;
+}
+
+void test()
+{
+  int size = 10;
+  void *zeroes;
+
+  void *res = 0;
+  res = mmap(res, size, 0 /*prot*/, 0 /*flags*/, -1 /*fd*/, 0 /*offset*/);
+  if (res <= 0)
+  {
+    printf(1, "XV6_TEST_OUTPUT : mmap failed\n");
+    return;
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : mmap good\n");
+
+  zeroes = malloc(size);
+  memset(zeroes, 0, size);
+
+  int ret = memcmp(res, zeroes, size);
+  printf(1, "XV6_TEST_OUTPUT : Ret of memcmp %d\n", ret);
+
+  if (ret != 0)
+  {
+    printf(1, "XV6_TEST_OUTPUT : mmap() should zero out the  newly mapped anonymous memory region.!!\n");
+    return;
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : mmap() has correctly cleared the newly mapped anonymous memory region\n");
+  printf(1, "given size here size: %d\n", size);
+  printf(1, "given addr here: %d\n", res);
+  int rv = munmap(res, size);
+
+  printf(1, "rv here: %d\n", rv);
+  if (rv < 0)
+  {
+    printf(1, "XV6_TEST_OUTPUT : munmap failed\n");
+    return;
+  }
+
+  printf(1, "XV6_TEST_OUTPUT : munmap good\n");
+  return;
+}
+
+int main(int argc, char *argv[])
+{
+  test();
+  exit();
+}
diff -ruN src-old/xv6_2.d src/xv6_2.d
--- src-old/xv6_2.d	1970-01-01 00:00:00.000000000 +0000
+++ src/xv6_2.d	2023-04-19 02:18:57.456346253 +0000
@@ -0,0 +1,2 @@
+xv6_2.o: xv6_2.c /usr/include/stdc-predef.h param.h types.h stat.h user.h \
+ fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files src-old/xv6_2.o and src/xv6_2.o differ
diff -ruN src-old/xv6_2.sym src/xv6_2.sym
--- src-old/xv6_2.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/xv6_2.sym	2023-04-19 02:18:57.488350030 +0000
@@ -0,0 +1,63 @@
+00000000 .text
+00000928 .rodata
+00000ad8 .eh_frame
+00000df4 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 xv6_2.c
+00000000 ulib.c
+00000000 printf.c
+00000530 printint
+00000ac4 digits.1052
+00000000 umalloc.c
+00000df4 freep
+00000df8 base
+00000210 strcpy
+000005d0 printf
+00000430 memmove
+0000051a munmap
+000004aa mknod
+00000320 gets
+000004e2 getpid
+00000830 malloc
+000004f2 sleep
+0000050a kmfree
+00000512 mmap
+00000472 pipe
+00000482 write
+000004ba fstat
+00000492 kill
+000004d2 chdir
+0000049a exec
+0000046a wait
+00000080 test
+0000047a read
+000004b2 unlink
+00000020 memcmp
+0000045a fork
+000004ea sbrk
+000004fa uptime
+00000df4 __bss_start
+000002c0 memset
+00000000 main
+00000240 strcmp
+000004da dup
+000003a0 stat
+00000df4 _edata
+00000e00 _end
+000004c2 link
+00000502 kmalloc
+00000462 exit
+000003f0 atoi
+00000290 strlen
+000004a2 open
+000002e0 strchr
+000004ca mkdir
+0000048a close
+000007a0 free
Binary files src-old/xv6.img and src/xv6.img differ
Binary files src-old/_zombie and src/_zombie differ
diff -ruN src-old/zombie.asm src/zombie.asm
--- src-old/zombie.asm	1970-01-01 00:00:00.000000000 +0000
+++ src/zombie.asm	2023-04-19 02:18:57.412341059 +0000
@@ -0,0 +1,1163 @@
+
+_zombie:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  if(fork() > 0)
+  11:	e8 64 02 00 00       	call   27a <fork>
+  16:	85 c0                	test   %eax,%eax
+  18:	7e 0d                	jle    27 <main+0x27>
+    sleep(5);  // Let child exit before parent.
+  1a:	83 ec 0c             	sub    $0xc,%esp
+  1d:	6a 05                	push   $0x5
+  1f:	e8 ee 02 00 00       	call   312 <sleep>
+  24:	83 c4 10             	add    $0x10,%esp
+  exit();
+  27:	e8 56 02 00 00       	call   282 <exit>
+  2c:	66 90                	xchg   %ax,%ax
+  2e:	66 90                	xchg   %ax,%ax
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	55                   	push   %ebp
+  31:	89 e5                	mov    %esp,%ebp
+  33:	53                   	push   %ebx
+  34:	8b 45 08             	mov    0x8(%ebp),%eax
+  37:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  3a:	89 c2                	mov    %eax,%edx
+  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  40:	83 c1 01             	add    $0x1,%ecx
+  43:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  47:	83 c2 01             	add    $0x1,%edx
+  4a:	84 db                	test   %bl,%bl
+  4c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  4f:	75 ef                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  51:	5b                   	pop    %ebx
+  52:	5d                   	pop    %ebp
+  53:	c3                   	ret    
+  54:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  5a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 55 08             	mov    0x8(%ebp),%edx
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  6a:	0f b6 02             	movzbl (%edx),%eax
+  6d:	0f b6 19             	movzbl (%ecx),%ebx
+  70:	84 c0                	test   %al,%al
+  72:	75 1c                	jne    90 <strcmp+0x30>
+  74:	eb 2a                	jmp    a0 <strcmp+0x40>
+  76:	8d 76 00             	lea    0x0(%esi),%esi
+  79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  80:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  83:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  86:	83 c1 01             	add    $0x1,%ecx
+  89:	0f b6 19             	movzbl (%ecx),%ebx
+  while(*p && *p == *q)
+  8c:	84 c0                	test   %al,%al
+  8e:	74 10                	je     a0 <strcmp+0x40>
+  90:	38 d8                	cmp    %bl,%al
+  92:	74 ec                	je     80 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  94:	29 d8                	sub    %ebx,%eax
+}
+  96:	5b                   	pop    %ebx
+  97:	5d                   	pop    %ebp
+  98:	c3                   	ret    
+  99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  a2:	29 d8                	sub    %ebx,%eax
+}
+  a4:	5b                   	pop    %ebx
+  a5:	5d                   	pop    %ebp
+  a6:	c3                   	ret    
+  a7:	89 f6                	mov    %esi,%esi
+  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000000b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  b6:	80 39 00             	cmpb   $0x0,(%ecx)
+  b9:	74 15                	je     d0 <strlen+0x20>
+  bb:	31 d2                	xor    %edx,%edx
+  bd:	8d 76 00             	lea    0x0(%esi),%esi
+  c0:	83 c2 01             	add    $0x1,%edx
+  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  c7:	89 d0                	mov    %edx,%eax
+  c9:	75 f5                	jne    c0 <strlen+0x10>
+    ;
+  return n;
+}
+  cb:	5d                   	pop    %ebp
+  cc:	c3                   	ret    
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+  d0:	31 c0                	xor    %eax,%eax
+}
+  d2:	5d                   	pop    %ebp
+  d3:	c3                   	ret    
+  d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	57                   	push   %edi
+  e4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  ed:	89 d7                	mov    %edx,%edi
+  ef:	fc                   	cld    
+  f0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+  f2:	89 d0                	mov    %edx,%eax
+  f4:	5f                   	pop    %edi
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	89 f6                	mov    %esi,%esi
+  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000100 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	53                   	push   %ebx
+ 104:	8b 45 08             	mov    0x8(%ebp),%eax
+ 107:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 10a:	0f b6 10             	movzbl (%eax),%edx
+ 10d:	84 d2                	test   %dl,%dl
+ 10f:	74 1d                	je     12e <strchr+0x2e>
+    if(*s == c)
+ 111:	38 d3                	cmp    %dl,%bl
+ 113:	89 d9                	mov    %ebx,%ecx
+ 115:	75 0d                	jne    124 <strchr+0x24>
+ 117:	eb 17                	jmp    130 <strchr+0x30>
+ 119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 120:	38 ca                	cmp    %cl,%dl
+ 122:	74 0c                	je     130 <strchr+0x30>
+  for(; *s; s++)
+ 124:	83 c0 01             	add    $0x1,%eax
+ 127:	0f b6 10             	movzbl (%eax),%edx
+ 12a:	84 d2                	test   %dl,%dl
+ 12c:	75 f2                	jne    120 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 12e:	31 c0                	xor    %eax,%eax
+}
+ 130:	5b                   	pop    %ebx
+ 131:	5d                   	pop    %ebp
+ 132:	c3                   	ret    
+ 133:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000140 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	57                   	push   %edi
+ 144:	56                   	push   %esi
+ 145:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 146:	31 f6                	xor    %esi,%esi
+ 148:	89 f3                	mov    %esi,%ebx
+{
+ 14a:	83 ec 1c             	sub    $0x1c,%esp
+ 14d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 150:	eb 2f                	jmp    181 <gets+0x41>
+ 152:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 158:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 15b:	83 ec 04             	sub    $0x4,%esp
+ 15e:	6a 01                	push   $0x1
+ 160:	50                   	push   %eax
+ 161:	6a 00                	push   $0x0
+ 163:	e8 32 01 00 00       	call   29a <read>
+    if(cc < 1)
+ 168:	83 c4 10             	add    $0x10,%esp
+ 16b:	85 c0                	test   %eax,%eax
+ 16d:	7e 1c                	jle    18b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 16f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 173:	83 c7 01             	add    $0x1,%edi
+ 176:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 179:	3c 0a                	cmp    $0xa,%al
+ 17b:	74 23                	je     1a0 <gets+0x60>
+ 17d:	3c 0d                	cmp    $0xd,%al
+ 17f:	74 1f                	je     1a0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 181:	83 c3 01             	add    $0x1,%ebx
+ 184:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 187:	89 fe                	mov    %edi,%esi
+ 189:	7c cd                	jl     158 <gets+0x18>
+ 18b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 18d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 190:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 193:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 196:	5b                   	pop    %ebx
+ 197:	5e                   	pop    %esi
+ 198:	5f                   	pop    %edi
+ 199:	5d                   	pop    %ebp
+ 19a:	c3                   	ret    
+ 19b:	90                   	nop
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1a0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1a3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1a6:	01 de                	add    %ebx,%esi
+ 1a8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1aa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1b0:	5b                   	pop    %ebx
+ 1b1:	5e                   	pop    %esi
+ 1b2:	5f                   	pop    %edi
+ 1b3:	5d                   	pop    %ebp
+ 1b4:	c3                   	ret    
+ 1b5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	56                   	push   %esi
+ 1c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1c5:	83 ec 08             	sub    $0x8,%esp
+ 1c8:	6a 00                	push   $0x0
+ 1ca:	ff 75 08             	pushl  0x8(%ebp)
+ 1cd:	e8 f0 00 00 00       	call   2c2 <open>
+  if(fd < 0)
+ 1d2:	83 c4 10             	add    $0x10,%esp
+ 1d5:	85 c0                	test   %eax,%eax
+ 1d7:	78 27                	js     200 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	ff 75 0c             	pushl  0xc(%ebp)
+ 1df:	89 c3                	mov    %eax,%ebx
+ 1e1:	50                   	push   %eax
+ 1e2:	e8 f3 00 00 00       	call   2da <fstat>
+  close(fd);
+ 1e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 1ec:	e8 b9 00 00 00       	call   2aa <close>
+  return r;
+ 1f1:	83 c4 10             	add    $0x10,%esp
+}
+ 1f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1f7:	89 f0                	mov    %esi,%eax
+ 1f9:	5b                   	pop    %ebx
+ 1fa:	5e                   	pop    %esi
+ 1fb:	5d                   	pop    %ebp
+ 1fc:	c3                   	ret    
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 200:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 205:	eb ed                	jmp    1f4 <stat+0x34>
+ 207:	89 f6                	mov    %esi,%esi
+ 209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000210 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 217:	0f be 11             	movsbl (%ecx),%edx
+ 21a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 21d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 21f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 224:	77 1f                	ja     245 <atoi+0x35>
+ 226:	8d 76 00             	lea    0x0(%esi),%esi
+ 229:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 230:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 233:	83 c1 01             	add    $0x1,%ecx
+ 236:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 23a:	0f be 11             	movsbl (%ecx),%edx
+ 23d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 240:	80 fb 09             	cmp    $0x9,%bl
+ 243:	76 eb                	jbe    230 <atoi+0x20>
+  return n;
+}
+ 245:	5b                   	pop    %ebx
+ 246:	5d                   	pop    %ebp
+ 247:	c3                   	ret    
+ 248:	90                   	nop
+ 249:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000250 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	56                   	push   %esi
+ 254:	53                   	push   %ebx
+ 255:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 258:	8b 45 08             	mov    0x8(%ebp),%eax
+ 25b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 25e:	85 db                	test   %ebx,%ebx
+ 260:	7e 14                	jle    276 <memmove+0x26>
+ 262:	31 d2                	xor    %edx,%edx
+ 264:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 268:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 26c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 26f:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0)
+ 272:	39 d3                	cmp    %edx,%ebx
+ 274:	75 f2                	jne    268 <memmove+0x18>
+  return vdst;
+}
+ 276:	5b                   	pop    %ebx
+ 277:	5e                   	pop    %esi
+ 278:	5d                   	pop    %ebp
+ 279:	c3                   	ret    
+
+0000027a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 27a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 27f:	cd 40                	int    $0x40
+ 281:	c3                   	ret    
+
+00000282 <exit>:
+SYSCALL(exit)
+ 282:	b8 02 00 00 00       	mov    $0x2,%eax
+ 287:	cd 40                	int    $0x40
+ 289:	c3                   	ret    
+
+0000028a <wait>:
+SYSCALL(wait)
+ 28a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 28f:	cd 40                	int    $0x40
+ 291:	c3                   	ret    
+
+00000292 <pipe>:
+SYSCALL(pipe)
+ 292:	b8 04 00 00 00       	mov    $0x4,%eax
+ 297:	cd 40                	int    $0x40
+ 299:	c3                   	ret    
+
+0000029a <read>:
+SYSCALL(read)
+ 29a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 29f:	cd 40                	int    $0x40
+ 2a1:	c3                   	ret    
+
+000002a2 <write>:
+SYSCALL(write)
+ 2a2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2a7:	cd 40                	int    $0x40
+ 2a9:	c3                   	ret    
+
+000002aa <close>:
+SYSCALL(close)
+ 2aa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <kill>:
+SYSCALL(kill)
+ 2b2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <exec>:
+SYSCALL(exec)
+ 2ba:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <open>:
+SYSCALL(open)
+ 2c2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <mknod>:
+SYSCALL(mknod)
+ 2ca:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <unlink>:
+SYSCALL(unlink)
+ 2d2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <fstat>:
+SYSCALL(fstat)
+ 2da:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <link>:
+SYSCALL(link)
+ 2e2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <mkdir>:
+SYSCALL(mkdir)
+ 2ea:	b8 14 00 00 00       	mov    $0x14,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <chdir>:
+SYSCALL(chdir)
+ 2f2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <dup>:
+SYSCALL(dup)
+ 2fa:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <getpid>:
+SYSCALL(getpid)
+ 302:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <sbrk>:
+SYSCALL(sbrk)
+ 30a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <sleep>:
+SYSCALL(sleep)
+ 312:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <uptime>:
+SYSCALL(uptime)
+ 31a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <kmalloc>:
+SYSCALL(kmalloc)
+ 322:	b8 16 00 00 00       	mov    $0x16,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <kmfree>:
+SYSCALL(kmfree) 
+ 32a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <mmap>:
+SYSCALL(mmap)
+ 332:	b8 18 00 00 00       	mov    $0x18,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <munmap>:
+ 33a:	b8 19 00 00 00       	mov    $0x19,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+ 342:	66 90                	xchg   %ax,%ax
+ 344:	66 90                	xchg   %ax,%ax
+ 346:	66 90                	xchg   %ax,%ax
+ 348:	66 90                	xchg   %ax,%ax
+ 34a:	66 90                	xchg   %ax,%ax
+ 34c:	66 90                	xchg   %ax,%ax
+ 34e:	66 90                	xchg   %ax,%ax
+
+00000350 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 350:	55                   	push   %ebp
+ 351:	89 e5                	mov    %esp,%ebp
+ 353:	57                   	push   %edi
+ 354:	56                   	push   %esi
+ 355:	53                   	push   %ebx
+ 356:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 359:	85 d2                	test   %edx,%edx
+{
+ 35b:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    neg = 1;
+    x = -xx;
+ 35e:	89 d0                	mov    %edx,%eax
+  if(sgn && xx < 0){
+ 360:	79 76                	jns    3d8 <printint+0x88>
+ 362:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 366:	74 70                	je     3d8 <printint+0x88>
+    x = -xx;
+ 368:	f7 d8                	neg    %eax
+    neg = 1;
+ 36a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 371:	31 f6                	xor    %esi,%esi
+ 373:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 376:	eb 0a                	jmp    382 <printint+0x32>
+ 378:	90                   	nop
+ 379:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 380:	89 fe                	mov    %edi,%esi
+ 382:	31 d2                	xor    %edx,%edx
+ 384:	8d 7e 01             	lea    0x1(%esi),%edi
+ 387:	f7 f1                	div    %ecx
+ 389:	0f b6 92 50 07 00 00 	movzbl 0x750(%edx),%edx
+  }while((x /= base) != 0);
+ 390:	85 c0                	test   %eax,%eax
+    buf[i++] = digits[x % base];
+ 392:	88 14 3b             	mov    %dl,(%ebx,%edi,1)
+  }while((x /= base) != 0);
+ 395:	75 e9                	jne    380 <printint+0x30>
+  if(neg)
+ 397:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 39a:	85 c0                	test   %eax,%eax
+ 39c:	74 08                	je     3a6 <printint+0x56>
+    buf[i++] = '-';
+ 39e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3a3:	8d 7e 02             	lea    0x2(%esi),%edi
+ 3a6:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esi
+ 3aa:	8b 7d c0             	mov    -0x40(%ebp),%edi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 3b0:	0f b6 06             	movzbl (%esi),%eax
+  write(fd, &c, 1);
+ 3b3:	83 ec 04             	sub    $0x4,%esp
+ 3b6:	83 ee 01             	sub    $0x1,%esi
+ 3b9:	6a 01                	push   $0x1
+ 3bb:	53                   	push   %ebx
+ 3bc:	57                   	push   %edi
+ 3bd:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3c0:	e8 dd fe ff ff       	call   2a2 <write>
+
+  while(--i >= 0)
+ 3c5:	83 c4 10             	add    $0x10,%esp
+ 3c8:	39 de                	cmp    %ebx,%esi
+ 3ca:	75 e4                	jne    3b0 <printint+0x60>
+    putc(fd, buf[i]);
+}
+ 3cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3cf:	5b                   	pop    %ebx
+ 3d0:	5e                   	pop    %esi
+ 3d1:	5f                   	pop    %edi
+ 3d2:	5d                   	pop    %ebp
+ 3d3:	c3                   	ret    
+ 3d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3d8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3df:	eb 90                	jmp    371 <printint+0x21>
+ 3e1:	eb 0d                	jmp    3f0 <printf>
+ 3e3:	90                   	nop
+ 3e4:	90                   	nop
+ 3e5:	90                   	nop
+ 3e6:	90                   	nop
+ 3e7:	90                   	nop
+ 3e8:	90                   	nop
+ 3e9:	90                   	nop
+ 3ea:	90                   	nop
+ 3eb:	90                   	nop
+ 3ec:	90                   	nop
+ 3ed:	90                   	nop
+ 3ee:	90                   	nop
+ 3ef:	90                   	nop
+
+000003f0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	57                   	push   %edi
+ 3f4:	56                   	push   %esi
+ 3f5:	53                   	push   %ebx
+ 3f6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 3f9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 3fc:	0f b6 1e             	movzbl (%esi),%ebx
+ 3ff:	84 db                	test   %bl,%bl
+ 401:	0f 84 b3 00 00 00    	je     4ba <printf+0xca>
+  ap = (uint*)(void*)&fmt + 1;
+ 407:	8d 45 10             	lea    0x10(%ebp),%eax
+ 40a:	83 c6 01             	add    $0x1,%esi
+  state = 0;
+ 40d:	31 ff                	xor    %edi,%edi
+  ap = (uint*)(void*)&fmt + 1;
+ 40f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 412:	eb 2f                	jmp    443 <printf+0x53>
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 418:	83 f8 25             	cmp    $0x25,%eax
+ 41b:	0f 84 a7 00 00 00    	je     4c8 <printf+0xd8>
+  write(fd, &c, 1);
+ 421:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 424:	83 ec 04             	sub    $0x4,%esp
+ 427:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 42a:	6a 01                	push   $0x1
+ 42c:	50                   	push   %eax
+ 42d:	ff 75 08             	pushl  0x8(%ebp)
+ 430:	e8 6d fe ff ff       	call   2a2 <write>
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 43b:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 43f:	84 db                	test   %bl,%bl
+ 441:	74 77                	je     4ba <printf+0xca>
+    if(state == 0){
+ 443:	85 ff                	test   %edi,%edi
+    c = fmt[i] & 0xff;
+ 445:	0f be cb             	movsbl %bl,%ecx
+ 448:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 44b:	74 cb                	je     418 <printf+0x28>
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 44d:	83 ff 25             	cmp    $0x25,%edi
+ 450:	75 e6                	jne    438 <printf+0x48>
+      if(c == 'd'){
+ 452:	83 f8 64             	cmp    $0x64,%eax
+ 455:	0f 84 05 01 00 00    	je     560 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 45b:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 461:	83 f9 70             	cmp    $0x70,%ecx
+ 464:	74 72                	je     4d8 <printf+0xe8>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 466:	83 f8 73             	cmp    $0x73,%eax
+ 469:	0f 84 99 00 00 00    	je     508 <printf+0x118>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 46f:	83 f8 63             	cmp    $0x63,%eax
+ 472:	0f 84 08 01 00 00    	je     580 <printf+0x190>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 478:	83 f8 25             	cmp    $0x25,%eax
+ 47b:	0f 84 ef 00 00 00    	je     570 <printf+0x180>
+  write(fd, &c, 1);
+ 481:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 484:	83 ec 04             	sub    $0x4,%esp
+ 487:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 48b:	6a 01                	push   $0x1
+ 48d:	50                   	push   %eax
+ 48e:	ff 75 08             	pushl  0x8(%ebp)
+ 491:	e8 0c fe ff ff       	call   2a2 <write>
+ 496:	83 c4 0c             	add    $0xc,%esp
+ 499:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 49c:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 49f:	6a 01                	push   $0x1
+ 4a1:	50                   	push   %eax
+ 4a2:	ff 75 08             	pushl  0x8(%ebp)
+ 4a5:	83 c6 01             	add    $0x1,%esi
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4a8:	31 ff                	xor    %edi,%edi
+  write(fd, &c, 1);
+ 4aa:	e8 f3 fd ff ff       	call   2a2 <write>
+  for(i = 0; fmt[i]; i++){
+ 4af:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+  write(fd, &c, 1);
+ 4b3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4b6:	84 db                	test   %bl,%bl
+ 4b8:	75 89                	jne    443 <printf+0x53>
+    }
+  }
+}
+ 4ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4bd:	5b                   	pop    %ebx
+ 4be:	5e                   	pop    %esi
+ 4bf:	5f                   	pop    %edi
+ 4c0:	5d                   	pop    %ebp
+ 4c1:	c3                   	ret    
+ 4c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        state = '%';
+ 4c8:	bf 25 00 00 00       	mov    $0x25,%edi
+ 4cd:	e9 66 ff ff ff       	jmp    438 <printf+0x48>
+ 4d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4d8:	83 ec 0c             	sub    $0xc,%esp
+ 4db:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4e0:	6a 00                	push   $0x0
+ 4e2:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+ 4e5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4e8:	8b 17                	mov    (%edi),%edx
+ 4ea:	e8 61 fe ff ff       	call   350 <printint>
+        ap++;
+ 4ef:	89 f8                	mov    %edi,%eax
+ 4f1:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4f4:	31 ff                	xor    %edi,%edi
+        ap++;
+ 4f6:	83 c0 04             	add    $0x4,%eax
+ 4f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+ 4fc:	e9 37 ff ff ff       	jmp    438 <printf+0x48>
+ 501:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 508:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+ 50b:	8b 08                	mov    (%eax),%ecx
+        ap++;
+ 50d:	83 c0 04             	add    $0x4,%eax
+ 510:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+        if(s == 0)
+ 513:	85 c9                	test   %ecx,%ecx
+ 515:	0f 84 8e 00 00 00    	je     5a9 <printf+0x1b9>
+        while(*s != 0){
+ 51b:	0f b6 01             	movzbl (%ecx),%eax
+      state = 0;
+ 51e:	31 ff                	xor    %edi,%edi
+        s = (char*)*ap;
+ 520:	89 cb                	mov    %ecx,%ebx
+        while(*s != 0){
+ 522:	84 c0                	test   %al,%al
+ 524:	0f 84 0e ff ff ff    	je     438 <printf+0x48>
+ 52a:	89 75 d0             	mov    %esi,-0x30(%ebp)
+ 52d:	89 de                	mov    %ebx,%esi
+ 52f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 532:	8d 7d e3             	lea    -0x1d(%ebp),%edi
+ 535:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 538:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 53b:	83 c6 01             	add    $0x1,%esi
+ 53e:	88 45 e3             	mov    %al,-0x1d(%ebp)
+  write(fd, &c, 1);
+ 541:	6a 01                	push   $0x1
+ 543:	57                   	push   %edi
+ 544:	53                   	push   %ebx
+ 545:	e8 58 fd ff ff       	call   2a2 <write>
+        while(*s != 0){
+ 54a:	0f b6 06             	movzbl (%esi),%eax
+ 54d:	83 c4 10             	add    $0x10,%esp
+ 550:	84 c0                	test   %al,%al
+ 552:	75 e4                	jne    538 <printf+0x148>
+ 554:	8b 75 d0             	mov    -0x30(%ebp),%esi
+      state = 0;
+ 557:	31 ff                	xor    %edi,%edi
+ 559:	e9 da fe ff ff       	jmp    438 <printf+0x48>
+ 55e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 10, 1);
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 568:	6a 01                	push   $0x1
+ 56a:	e9 73 ff ff ff       	jmp    4e2 <printf+0xf2>
+ 56f:	90                   	nop
+  write(fd, &c, 1);
+ 570:	83 ec 04             	sub    $0x4,%esp
+ 573:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 576:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 579:	6a 01                	push   $0x1
+ 57b:	e9 21 ff ff ff       	jmp    4a1 <printf+0xb1>
+        putc(fd, *ap);
+ 580:	8b 7d d4             	mov    -0x2c(%ebp),%edi
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 07                	mov    (%edi),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+        ap++;
+ 58a:	83 c7 04             	add    $0x4,%edi
+        putc(fd, *ap);
+ 58d:	88 45 e4             	mov    %al,-0x1c(%ebp)
+  write(fd, &c, 1);
+ 590:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 593:	50                   	push   %eax
+ 594:	ff 75 08             	pushl  0x8(%ebp)
+ 597:	e8 06 fd ff ff       	call   2a2 <write>
+        ap++;
+ 59c:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+ 59f:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5a2:	31 ff                	xor    %edi,%edi
+ 5a4:	e9 8f fe ff ff       	jmp    438 <printf+0x48>
+          s = "(null)";
+ 5a9:	bb 48 07 00 00       	mov    $0x748,%ebx
+        while(*s != 0){
+ 5ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5b3:	e9 72 ff ff ff       	jmp    52a <printf+0x13a>
+ 5b8:	66 90                	xchg   %ax,%ax
+ 5ba:	66 90                	xchg   %ax,%ax
+ 5bc:	66 90                	xchg   %ax,%ax
+ 5be:	66 90                	xchg   %ax,%ax
+
+000005c0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5c0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5c1:	a1 f4 09 00 00       	mov    0x9f4,%eax
+{
+ 5c6:	89 e5                	mov    %esp,%ebp
+ 5c8:	57                   	push   %edi
+ 5c9:	56                   	push   %esi
+ 5ca:	53                   	push   %ebx
+ 5cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5ce:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5d8:	39 c8                	cmp    %ecx,%eax
+ 5da:	8b 10                	mov    (%eax),%edx
+ 5dc:	73 32                	jae    610 <free+0x50>
+ 5de:	39 d1                	cmp    %edx,%ecx
+ 5e0:	72 04                	jb     5e6 <free+0x26>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5e2:	39 d0                	cmp    %edx,%eax
+ 5e4:	72 32                	jb     618 <free+0x58>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5e6:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5e9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5ec:	39 fa                	cmp    %edi,%edx
+ 5ee:	74 30                	je     620 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 5f0:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 5f3:	8b 50 04             	mov    0x4(%eax),%edx
+ 5f6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 5f9:	39 f1                	cmp    %esi,%ecx
+ 5fb:	74 3a                	je     637 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 5fd:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 5ff:	a3 f4 09 00 00       	mov    %eax,0x9f4
+}
+ 604:	5b                   	pop    %ebx
+ 605:	5e                   	pop    %esi
+ 606:	5f                   	pop    %edi
+ 607:	5d                   	pop    %ebp
+ 608:	c3                   	ret    
+ 609:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 610:	39 d0                	cmp    %edx,%eax
+ 612:	72 04                	jb     618 <free+0x58>
+ 614:	39 d1                	cmp    %edx,%ecx
+ 616:	72 ce                	jb     5e6 <free+0x26>
+{
+ 618:	89 d0                	mov    %edx,%eax
+ 61a:	eb bc                	jmp    5d8 <free+0x18>
+ 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp->s.size += p->s.ptr->s.size;
+ 620:	03 72 04             	add    0x4(%edx),%esi
+ 623:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 626:	8b 10                	mov    (%eax),%edx
+ 628:	8b 12                	mov    (%edx),%edx
+ 62a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 62d:	8b 50 04             	mov    0x4(%eax),%edx
+ 630:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 633:	39 f1                	cmp    %esi,%ecx
+ 635:	75 c6                	jne    5fd <free+0x3d>
+    p->s.size += bp->s.size;
+ 637:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 63a:	a3 f4 09 00 00       	mov    %eax,0x9f4
+    p->s.size += bp->s.size;
+ 63f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 642:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 645:	89 10                	mov    %edx,(%eax)
+}
+ 647:	5b                   	pop    %ebx
+ 648:	5e                   	pop    %esi
+ 649:	5f                   	pop    %edi
+ 64a:	5d                   	pop    %ebp
+ 64b:	c3                   	ret    
+ 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000650 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 650:	55                   	push   %ebp
+ 651:	89 e5                	mov    %esp,%ebp
+ 653:	57                   	push   %edi
+ 654:	56                   	push   %esi
+ 655:	53                   	push   %ebx
+ 656:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 659:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 65c:	8b 15 f4 09 00 00    	mov    0x9f4,%edx
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 662:	8d 78 07             	lea    0x7(%eax),%edi
+ 665:	c1 ef 03             	shr    $0x3,%edi
+ 668:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 66b:	85 d2                	test   %edx,%edx
+ 66d:	0f 84 9d 00 00 00    	je     710 <malloc+0xc0>
+ 673:	8b 02                	mov    (%edx),%eax
+ 675:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 678:	39 cf                	cmp    %ecx,%edi
+ 67a:	76 6c                	jbe    6e8 <malloc+0x98>
+ 67c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 682:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 687:	0f 43 df             	cmovae %edi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 68a:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
+ 691:	eb 0e                	jmp    6a1 <malloc+0x51>
+ 693:	90                   	nop
+ 694:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 698:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 69a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 69d:	39 f9                	cmp    %edi,%ecx
+ 69f:	73 47                	jae    6e8 <malloc+0x98>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6a1:	39 05 f4 09 00 00    	cmp    %eax,0x9f4
+ 6a7:	89 c2                	mov    %eax,%edx
+ 6a9:	75 ed                	jne    698 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6ab:	83 ec 0c             	sub    $0xc,%esp
+ 6ae:	56                   	push   %esi
+ 6af:	e8 56 fc ff ff       	call   30a <sbrk>
+  if(p == (char*)-1)
+ 6b4:	83 c4 10             	add    $0x10,%esp
+ 6b7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ba:	74 1c                	je     6d8 <malloc+0x88>
+  hp->s.size = nu;
+ 6bc:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6bf:	83 ec 0c             	sub    $0xc,%esp
+ 6c2:	83 c0 08             	add    $0x8,%eax
+ 6c5:	50                   	push   %eax
+ 6c6:	e8 f5 fe ff ff       	call   5c0 <free>
+  return freep;
+ 6cb:	8b 15 f4 09 00 00    	mov    0x9f4,%edx
+      if((p = morecore(nunits)) == 0)
+ 6d1:	83 c4 10             	add    $0x10,%esp
+ 6d4:	85 d2                	test   %edx,%edx
+ 6d6:	75 c0                	jne    698 <malloc+0x48>
+        return 0;
+  }
+}
+ 6d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6db:	31 c0                	xor    %eax,%eax
+}
+ 6dd:	5b                   	pop    %ebx
+ 6de:	5e                   	pop    %esi
+ 6df:	5f                   	pop    %edi
+ 6e0:	5d                   	pop    %ebp
+ 6e1:	c3                   	ret    
+ 6e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 6e8:	39 cf                	cmp    %ecx,%edi
+ 6ea:	74 54                	je     740 <malloc+0xf0>
+        p->s.size -= nunits;
+ 6ec:	29 f9                	sub    %edi,%ecx
+ 6ee:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6f1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6f4:	89 78 04             	mov    %edi,0x4(%eax)
+      freep = prevp;
+ 6f7:	89 15 f4 09 00 00    	mov    %edx,0x9f4
+}
+ 6fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 700:	83 c0 08             	add    $0x8,%eax
+}
+ 703:	5b                   	pop    %ebx
+ 704:	5e                   	pop    %esi
+ 705:	5f                   	pop    %edi
+ 706:	5d                   	pop    %ebp
+ 707:	c3                   	ret    
+ 708:	90                   	nop
+ 709:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+ 710:	c7 05 f4 09 00 00 f8 	movl   $0x9f8,0x9f4
+ 717:	09 00 00 
+ 71a:	c7 05 f8 09 00 00 f8 	movl   $0x9f8,0x9f8
+ 721:	09 00 00 
+    base.s.size = 0;
+ 724:	b8 f8 09 00 00       	mov    $0x9f8,%eax
+ 729:	c7 05 fc 09 00 00 00 	movl   $0x0,0x9fc
+ 730:	00 00 00 
+ 733:	e9 44 ff ff ff       	jmp    67c <malloc+0x2c>
+ 738:	90                   	nop
+ 739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        prevp->s.ptr = p->s.ptr;
+ 740:	8b 08                	mov    (%eax),%ecx
+ 742:	89 0a                	mov    %ecx,(%edx)
+ 744:	eb b1                	jmp    6f7 <malloc+0xa7>
diff -ruN src-old/zombie.d src/zombie.d
--- src-old/zombie.d	1970-01-01 00:00:00.000000000 +0000
+++ src/zombie.d	2023-04-19 02:18:57.388338225 +0000
@@ -0,0 +1 @@
+zombie.o: zombie.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files src-old/zombie.o and src/zombie.o differ
diff -ruN src-old/zombie.sym src/zombie.sym
--- src-old/zombie.sym	1970-01-01 00:00:00.000000000 +0000
+++ src/zombie.sym	2023-04-19 02:18:57.416341530 +0000
@@ -0,0 +1,61 @@
+00000000 .text
+00000748 .rodata
+00000764 .eh_frame
+000009f4 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 zombie.c
+00000000 ulib.c
+00000000 printf.c
+00000350 printint
+00000750 digits.1052
+00000000 umalloc.c
+000009f4 freep
+000009f8 base
+00000030 strcpy
+000003f0 printf
+00000250 memmove
+0000033a munmap
+000002ca mknod
+00000140 gets
+00000302 getpid
+00000650 malloc
+00000312 sleep
+0000032a kmfree
+00000332 mmap
+00000292 pipe
+000002a2 write
+000002da fstat
+000002b2 kill
+000002f2 chdir
+000002ba exec
+0000028a wait
+0000029a read
+000002d2 unlink
+0000027a fork
+0000030a sbrk
+0000031a uptime
+000009f4 __bss_start
+000000e0 memset
+00000000 main
+00000060 strcmp
+000002fa dup
+000001c0 stat
+000009f4 _edata
+00000a00 _end
+000002e2 link
+00000322 kmalloc
+00000282 exit
+00000210 atoi
+000000b0 strlen
+000002c2 open
+00000100 strchr
+000002ea mkdir
+000002aa close
+000005c0 free
